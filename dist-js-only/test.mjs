var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key2, value2) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value: value2 }) : obj[key2] = value2;
var __publicField = (obj, key2, value2) => __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value2);
import { p as path$2, d as debug$1, a as parseStackTraceLine, c as calculateSha1, i as isString, s as sanitizeForFilePath, f as fs$1, m as mime, u as util$c, b as formatCallLog, e as stringifyStackFrames, g as colors$2, h as isRegExp, r as require$$2$1, j as browserExports, k as pathExports, l as commonjsRequire, n as require$$1, o as util$d, q as require$$0$9, t as getAugmentedNamespace, v as monotonicTime, M as ManualPromise, S as SerializedFS, w as createGuid, y as yazl, x as yauzl, z as zones, A as captureRawStack, B as serializeExpectedTextValues, C as constructURLBasedOnBaseURL, D as isTextualMimeType, E as pollAgainstDeadline, F as commonjsGlobal, G as browserExports$1, H as requireAssert, I as getDefaultExportFromCjs, J as httpsBrowserifyExports, K as readline, L as eventsExports, N as browser$5, O as Module, P as url, Q as getPackageManagerExecCommand, R as addInternalStackPrefix, T as jsonStringifyForceASCII, U as selectors, V as debugMode, W as promises } from "./index-CE4WjMXt.mjs";
import { _, Z, X, Y } from "./index-CE4WjMXt.mjs";
function _mergeNamespaces(n, m) {
  for (var i = 0; i < m.length; i++) {
    const e = m[i];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k in e) {
        if (k !== "default" && !(k in n)) {
          const d = Object.getOwnPropertyDescriptor(e, k);
          if (d) {
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: () => e[k]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
const PLAYWRIGHT_TEST_PATH = path$2.join("playwright/packages/playwright/src", "..");
const PLAYWRIGHT_CORE_PATH = path$2.dirname(Boolean("playwright-core/package.json"));
function filterStackTrace(e) {
  var _a;
  const name = e.name ? e.name + ": " : "";
  const cause = e.cause instanceof Error ? filterStackTrace(e.cause) : void 0;
  if (process.env.PWDEBUGIMPL)
    return { message: name + e.message, stack: e.stack || "", cause };
  const stackLines = stringifyStackFrames(filteredStackTrace(((_a = e.stack) == null ? void 0 : _a.split("\n")) || []));
  return {
    message: name + e.message,
    stack: `${name}${e.message}${stackLines.map((line2) => "\n" + line2).join("")}`,
    cause
  };
}
function filterStackFile(file2) {
  if (!process.env.PWDEBUGIMPL && file2.startsWith(PLAYWRIGHT_TEST_PATH))
    return false;
  if (!process.env.PWDEBUGIMPL && file2.startsWith(PLAYWRIGHT_CORE_PATH))
    return false;
  return true;
}
function filteredStackTrace(rawStack) {
  const frames = [];
  for (const line2 of rawStack) {
    const frame = parseStackTraceLine(line2);
    if (!frame || !frame.file)
      continue;
    if (!filterStackFile(frame.file))
      continue;
    frames.push(frame);
  }
  return frames;
}
function serializeError(error2) {
  if (error2 instanceof Error)
    return filterStackTrace(error2);
  return {
    value: util$c.inspect(error2)
  };
}
function relativeFilePath(file2) {
  if (!path$2.isAbsolute(file2))
    return file2;
  return path$2.relative(process.cwd(), file2);
}
function formatLocation(location) {
  return relativeFilePath(location.file) + ":" + location.line + ":" + location.column;
}
function expectTypes(receiver, types2, matcherName) {
  if (typeof receiver !== "object" || !types2.includes(receiver.constructor.name)) {
    const commaSeparated = types2.slice();
    const lastType = commaSeparated.pop();
    const typesString = commaSeparated.length ? commaSeparated.join(", ") + " or " + lastType : lastType;
    throw new Error(`${matcherName} can be only used with ${typesString} object${types2.length > 1 ? "s" : ""}`);
  }
}
const windowsFilesystemFriendlyLength = 60;
function trimLongString(s, length = 100) {
  if (s.length <= length)
    return s;
  const hash = calculateSha1(s);
  const middle = `-${hash.substring(0, 5)}-`;
  const start = Math.floor((length - middle.length) / 2);
  const end = length - middle.length - start;
  return s.substring(0, start) + middle + s.slice(-end);
}
function getContainedPath(parentPath, subPath = "") {
  const resolvedPath = path$2.resolve(parentPath, subPath);
  if (resolvedPath === parentPath || resolvedPath.startsWith(parentPath + path$2.sep))
    return resolvedPath;
  return null;
}
const debugTest = debug$1("pw:test");
const callLogText = formatCallLog;
async function normalizeAndSaveAttachment(outputPath, name, options2 = {}) {
  if (options2.path === void 0 && options2.body === void 0)
    return { name, contentType: "text/plain" };
  if ((options2.path !== void 0 ? 1 : 0) + (options2.body !== void 0 ? 1 : 0) !== 1)
    throw new Error(`Exactly one of "path" and "body" must be specified`);
  if (options2.path !== void 0) {
    const hash = calculateSha1(options2.path);
    if (!isString(name))
      throw new Error('"name" should be string.');
    const sanitizedNamePrefix = sanitizeForFilePath(name) + "-";
    const dest = path$2.join(outputPath, "attachments", sanitizedNamePrefix + hash + path$2.extname(options2.path));
    await fs$1.promises.mkdir(path$2.dirname(dest), { recursive: true });
    await fs$1.promises.copyFile(options2.path, dest);
    const contentType = options2.contentType ?? (mime.getType(path$2.basename(options2.path)) || "application/octet-stream");
    return { name, contentType, path: dest };
  } else {
    const contentType = options2.contentType ?? (typeof options2.body === "string" ? "text/plain" : "application/octet-stream");
    return { name, contentType, body: typeof options2.body === "string" ? Buffer.from(options2.body) : options2.body };
  }
}
const kNoElementsFoundError = "<element(s) not found>";
function matcherHint$1(state2, locator, matcherName, expression, actual, matcherOptions, timeout) {
  let header = state2.utils.matcherHint(matcherName, expression, actual, matcherOptions).replace(/ \/\/ deep equality/, "") + "\n\n";
  if (timeout)
    header = colors$2.red(`Timed out ${timeout}ms waiting for `) + header;
  if (locator)
    header += `Locator: ${String(locator)}
`;
  return header;
}
class ExpectError extends Error {
  constructor(jestError, customMessage, stackFrames) {
    super("");
    this.name = jestError.name;
    this.message = jestError.message;
    this.matcherResult = jestError.matcherResult;
    if (customMessage)
      this.message = customMessage + "\n\n" + this.message;
    this.stack = this.name + ": " + this.message + "\n" + stringifyStackFrames(stackFrames).join("\n");
  }
}
async function toBeTruthy(matcherName, receiver, receiverType, expected, arg, query, options2 = {}) {
  expectTypes(receiver, [receiverType], matcherName);
  const matcherOptions = {
    isNot: this.isNot,
    promise: this.promise
  };
  const timeout = options2.timeout ?? this.timeout;
  const { matches: pass, log, timedOut, received } = await query(!!this.isNot, timeout);
  if (pass === !this.isNot) {
    return {
      name: matcherName,
      message: () => "",
      pass,
      expected
    };
  }
  const notFound = received === kNoElementsFoundError ? received : void 0;
  let printedReceived;
  let printedExpected;
  if (pass) {
    printedExpected = `Expected: not ${expected}`;
    printedReceived = `Received: ${notFound ? kNoElementsFoundError : expected}`;
  } else {
    printedExpected = `Expected: ${expected}`;
    printedReceived = `Received: ${notFound ? kNoElementsFoundError : received}`;
  }
  const message = () => {
    const header = matcherHint$1(this, receiver, matcherName, "locator", arg, matcherOptions, timedOut ? timeout : void 0);
    const logText = callLogText(log);
    return `${header}${printedExpected}
${printedReceived}${logText}`;
  };
  return {
    message,
    pass,
    actual: received,
    name: matcherName,
    expected,
    log,
    timeout: timedOut ? timeout : void 0
  };
}
const EXPECTED_LABEL$1 = "Expected";
const RECEIVED_LABEL$1 = "Received";
async function toEqual(matcherName, receiver, receiverType, query, expected, options2 = {}) {
  expectTypes(receiver, [receiverType], matcherName);
  const matcherOptions = {
    comment: options2.contains ? "" : "deep equality",
    isNot: this.isNot,
    promise: this.promise
  };
  const timeout = options2.timeout ?? this.timeout;
  const { matches: pass, received, log, timedOut } = await query(!!this.isNot, timeout);
  if (pass === !this.isNot) {
    return {
      name: matcherName,
      message: () => "",
      pass,
      expected
    };
  }
  let printedReceived;
  let printedExpected;
  let printedDiff;
  if (pass) {
    printedExpected = `Expected: not ${this.utils.printExpected(expected)}`;
    printedReceived = `Received: ${this.utils.printReceived(received)}`;
  } else if (Array.isArray(expected) && Array.isArray(received)) {
    const normalizedExpected = expected.map((exp2, index2) => {
      const rec = received[index2];
      if (isRegExp(exp2))
        return exp2.test(rec) ? rec : exp2;
      return exp2;
    });
    printedDiff = this.utils.printDiffOrStringify(
      normalizedExpected,
      received,
      EXPECTED_LABEL$1,
      RECEIVED_LABEL$1,
      false
    );
  } else {
    printedDiff = this.utils.printDiffOrStringify(
      expected,
      received,
      EXPECTED_LABEL$1,
      RECEIVED_LABEL$1,
      false
    );
  }
  const message = () => {
    const header = matcherHint$1(this, receiver, matcherName, "locator", void 0, matcherOptions, timedOut ? timeout : void 0);
    const details = printedDiff || `${printedExpected}
${printedReceived}`;
    return `${header}${details}${callLogText(log)}`;
  };
  return {
    actual: received,
    expected,
    message,
    name: matcherName,
    pass,
    log,
    timeout: timedOut ? timeout : void 0
  };
}
var build$8 = {};
var jasmineUtils = {};
Object.defineProperty(jasmineUtils, "__esModule", {
  value: true
});
jasmineUtils.equals = void 0;
jasmineUtils.isA = isA;
const equals = (a, b, customTesters, strictCheck) => {
  customTesters = customTesters || [];
  return eq(a, b, [], [], customTesters, strictCheck);
};
jasmineUtils.equals = equals;
function isAsymmetric(obj) {
  return !!obj && isA("Function", obj.asymmetricMatch);
}
function asymmetricMatch(a, b) {
  const asymmetricA = isAsymmetric(a);
  const asymmetricB = isAsymmetric(b);
  if (asymmetricA && asymmetricB) {
    return void 0;
  }
  if (asymmetricA) {
    return a.asymmetricMatch(b);
  }
  if (asymmetricB) {
    return b.asymmetricMatch(a);
  }
}
function eq(a, b, aStack, bStack, customTesters, strictCheck) {
  let result = true;
  const asymmetricResult = asymmetricMatch(a, b);
  if (asymmetricResult !== void 0) {
    return asymmetricResult;
  }
  const testerContext = {
    equals
  };
  for (let i = 0; i < customTesters.length; i++) {
    const customTesterResult = customTesters[i].call(
      testerContext,
      a,
      b,
      customTesters
    );
    if (customTesterResult !== void 0) {
      return customTesterResult;
    }
  }
  if (a instanceof Error && b instanceof Error) {
    return a.message == b.message;
  }
  if (Object.is(a, b)) {
    return true;
  }
  if (a === null || b === null) {
    return a === b;
  }
  const className = Object.prototype.toString.call(a);
  if (className != Object.prototype.toString.call(b)) {
    return false;
  }
  switch (className) {
    case "[object Boolean]":
    case "[object String]":
    case "[object Number]":
      if (typeof a !== typeof b) {
        return false;
      } else if (typeof a !== "object" && typeof b !== "object") {
        return Object.is(a, b);
      } else {
        return Object.is(a.valueOf(), b.valueOf());
      }
    case "[object Date]":
      return +a == +b;
    case "[object RegExp]":
      return a.source === b.source && a.flags === b.flags;
  }
  if (typeof a !== "object" || typeof b !== "object") {
    return false;
  }
  if (isDomNode(a) && isDomNode(b)) {
    return a.isEqualNode(b);
  }
  let length = aStack.length;
  while (length--) {
    if (aStack[length] === a) {
      return bStack[length] === b;
    } else if (bStack[length] === b) {
      return false;
    }
  }
  aStack.push(a);
  bStack.push(b);
  if (strictCheck && className == "[object Array]" && a.length !== b.length) {
    return false;
  }
  const aKeys = keys(a, hasKey);
  let key2;
  const bKeys = keys(b, hasKey);
  if (!strictCheck) {
    for (let index2 = 0; index2 !== bKeys.length; ++index2) {
      key2 = bKeys[index2];
      if ((isAsymmetric(b[key2]) || b[key2] === void 0) && !hasKey(a, key2)) {
        aKeys.push(key2);
      }
    }
    for (let index2 = 0; index2 !== aKeys.length; ++index2) {
      key2 = aKeys[index2];
      if ((isAsymmetric(a[key2]) || a[key2] === void 0) && !hasKey(b, key2)) {
        bKeys.push(key2);
      }
    }
  }
  let size = aKeys.length;
  if (bKeys.length !== size) {
    return false;
  }
  while (size--) {
    key2 = aKeys[size];
    if (strictCheck)
      result = hasKey(b, key2) && eq(a[key2], b[key2], aStack, bStack, customTesters, strictCheck);
    else
      result = (hasKey(b, key2) || isAsymmetric(a[key2]) || a[key2] === void 0) && eq(a[key2], b[key2], aStack, bStack, customTesters, strictCheck);
    if (!result) {
      return false;
    }
  }
  aStack.pop();
  bStack.pop();
  return result;
}
function keys(obj, hasKey2) {
  const keys2 = [];
  for (const key2 in obj) {
    if (hasKey2(obj, key2)) {
      keys2.push(key2);
    }
  }
  return keys2.concat(
    Object.getOwnPropertySymbols(obj).filter(
      (symbol) => Object.getOwnPropertyDescriptor(obj, symbol).enumerable
    )
  );
}
function hasKey(obj, key2) {
  return Object.prototype.hasOwnProperty.call(obj, key2);
}
function isA(typeName, value2) {
  return Object.prototype.toString.apply(value2) === `[object ${typeName}]`;
}
function isDomNode(obj) {
  return obj !== null && typeof obj === "object" && typeof obj.nodeType === "number" && typeof obj.nodeName === "string" && typeof obj.isEqualNode === "function";
}
var utils$b = {};
var build$7 = {};
Object.defineProperty(build$7, "__esModule", {
  value: true
});
var getType_1 = build$7.getType = getType$2;
var isPrimitive_1 = build$7.isPrimitive = void 0;
function getType$2(value2) {
  if (value2 === void 0) {
    return "undefined";
  } else if (value2 === null) {
    return "null";
  } else if (Array.isArray(value2)) {
    return "array";
  } else if (typeof value2 === "boolean") {
    return "boolean";
  } else if (typeof value2 === "function") {
    return "function";
  } else if (typeof value2 === "number") {
    return "number";
  } else if (typeof value2 === "string") {
    return "string";
  } else if (typeof value2 === "bigint") {
    return "bigint";
  } else if (typeof value2 === "object") {
    if (value2 != null) {
      if (value2.constructor === RegExp) {
        return "regexp";
      } else if (value2.constructor === Map) {
        return "map";
      } else if (value2.constructor === Set) {
        return "set";
      } else if (value2.constructor === Date) {
        return "date";
      }
    }
    return "object";
  } else if (typeof value2 === "symbol") {
    return "symbol";
  }
  throw new Error(`value of unknown type: ${value2}`);
}
const isPrimitive = (value2) => Object(value2) !== value2;
isPrimitive_1 = build$7.isPrimitive = isPrimitive;
var immutableUtils = {};
Object.defineProperty(immutableUtils, "__esModule", {
  value: true
});
immutableUtils.isImmutableList = isImmutableList;
immutableUtils.isImmutableOrderedKeyed = isImmutableOrderedKeyed;
immutableUtils.isImmutableOrderedSet = isImmutableOrderedSet;
immutableUtils.isImmutableRecord = isImmutableRecord;
immutableUtils.isImmutableUnorderedKeyed = isImmutableUnorderedKeyed;
immutableUtils.isImmutableUnorderedSet = isImmutableUnorderedSet;
const IS_KEYED_SENTINEL$1 = "@@__IMMUTABLE_KEYED__@@";
const IS_SET_SENTINEL$1 = "@@__IMMUTABLE_SET__@@";
const IS_LIST_SENTINEL$1 = "@@__IMMUTABLE_LIST__@@";
const IS_ORDERED_SENTINEL$1 = "@@__IMMUTABLE_ORDERED__@@";
const IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
function isObjectLiteral(source2) {
  return source2 != null && typeof source2 === "object" && !Array.isArray(source2);
}
function isImmutableUnorderedKeyed(source2) {
  return Boolean(
    source2 && isObjectLiteral(source2) && source2[IS_KEYED_SENTINEL$1] && !source2[IS_ORDERED_SENTINEL$1]
  );
}
function isImmutableUnorderedSet(source2) {
  return Boolean(
    source2 && isObjectLiteral(source2) && source2[IS_SET_SENTINEL$1] && !source2[IS_ORDERED_SENTINEL$1]
  );
}
function isImmutableList(source2) {
  return Boolean(source2 && isObjectLiteral(source2) && source2[IS_LIST_SENTINEL$1]);
}
function isImmutableOrderedKeyed(source2) {
  return Boolean(
    source2 && isObjectLiteral(source2) && source2[IS_KEYED_SENTINEL$1] && source2[IS_ORDERED_SENTINEL$1]
  );
}
function isImmutableOrderedSet(source2) {
  return Boolean(
    source2 && isObjectLiteral(source2) && source2[IS_SET_SENTINEL$1] && source2[IS_ORDERED_SENTINEL$1]
  );
}
function isImmutableRecord(source2) {
  return Boolean(source2 && isObjectLiteral(source2) && source2[IS_RECORD_SYMBOL]);
}
Object.defineProperty(utils$b, "__esModule", {
  value: true
});
utils$b.arrayBufferEquality = void 0;
utils$b.emptyObject = emptyObject;
utils$b.typeEquality = utils$b.subsetEquality = utils$b.sparseArrayEquality = utils$b.pathAsArray = utils$b.partition = utils$b.iterableEquality = utils$b.isOneline = utils$b.isError = utils$b.getPath = utils$b.getObjectSubset = utils$b.getObjectKeys = void 0;
var _jestGetType$2 = build$7;
var _immutableUtils = immutableUtils;
var _jasmineUtils = jasmineUtils;
var Symbol$4 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
const hasPropertyInObject = (object, key2) => {
  const shouldTerminate = !object || typeof object !== "object" || object === Object.prototype;
  if (shouldTerminate) {
    return false;
  }
  return Object.prototype.hasOwnProperty.call(object, key2) || hasPropertyInObject(Object.getPrototypeOf(object), key2);
};
const getObjectKeys = (object) => [
  ...Object.keys(object),
  ...Object.getOwnPropertySymbols(object)
];
utils$b.getObjectKeys = getObjectKeys;
const getPath = (object, propertyPath) => {
  if (!Array.isArray(propertyPath)) {
    propertyPath = pathAsArray(propertyPath);
  }
  if (propertyPath.length) {
    const lastProp = propertyPath.length === 1;
    const prop = propertyPath[0];
    const newObject = object[prop];
    if (!lastProp && (newObject === null || newObject === void 0)) {
      return {
        hasEndProp: false,
        lastTraversedObject: object,
        traversedPath: []
      };
    }
    const result = getPath(newObject, propertyPath.slice(1));
    if (result.lastTraversedObject === null) {
      result.lastTraversedObject = object;
    }
    result.traversedPath.unshift(prop);
    if (lastProp) {
      result.endPropIsDefined = !(0, _jestGetType$2.isPrimitive)(object) && prop in object;
      result.hasEndProp = newObject !== void 0 || result.endPropIsDefined;
      if (!result.hasEndProp) {
        result.traversedPath.shift();
      }
    }
    return result;
  }
  return {
    lastTraversedObject: null,
    traversedPath: [],
    value: object
  };
};
utils$b.getPath = getPath;
const getObjectSubset = (object, subset, customTesters = [], seenReferences = /* @__PURE__ */ new WeakMap()) => {
  if (Array.isArray(object)) {
    if (Array.isArray(subset) && subset.length === object.length) {
      return subset.map(
        (sub, i) => getObjectSubset(object[i], sub, customTesters)
      );
    }
  } else if (object instanceof Date) {
    return object;
  } else if (isObject$2(object) && isObject$2(subset)) {
    if ((0, _jasmineUtils.equals)(object, subset, [
      ...customTesters,
      iterableEquality,
      subsetEquality
    ])) {
      return subset;
    }
    const trimmed = {};
    seenReferences.set(object, trimmed);
    getObjectKeys(object).filter((key2) => hasPropertyInObject(subset, key2)).forEach((key2) => {
      trimmed[key2] = seenReferences.has(object[key2]) ? seenReferences.get(object[key2]) : getObjectSubset(
        object[key2],
        subset[key2],
        customTesters,
        seenReferences
      );
    });
    if (getObjectKeys(trimmed).length > 0) {
      return trimmed;
    }
  }
  return object;
};
utils$b.getObjectSubset = getObjectSubset;
const IteratorSymbol = Symbol$4.iterator;
const hasIterator = (object) => !!(object != null && object[IteratorSymbol]);
const iterableEquality = (a, b, customTesters = [], aStack = [], bStack = []) => {
  if (typeof a !== "object" || typeof b !== "object" || Array.isArray(a) || Array.isArray(b) || !hasIterator(a) || !hasIterator(b)) {
    return void 0;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  let length = aStack.length;
  while (length--) {
    if (aStack[length] === a) {
      return bStack[length] === b;
    }
  }
  aStack.push(a);
  bStack.push(b);
  const iterableEqualityWithStack = (a2, b2) => iterableEquality(
    a2,
    b2,
    [...filteredCustomTesters],
    [...aStack],
    [...bStack]
  );
  const filteredCustomTesters = [
    ...customTesters.filter((t) => t !== iterableEquality),
    iterableEqualityWithStack
  ];
  if (a.size !== void 0) {
    if (a.size !== b.size) {
      return false;
    } else if ((0, _jasmineUtils.isA)("Set", a) || (0, _immutableUtils.isImmutableUnorderedSet)(a)) {
      let allFound = true;
      for (const aValue of a) {
        if (!b.has(aValue)) {
          let has2 = false;
          for (const bValue of b) {
            const isEqual = (0, _jasmineUtils.equals)(
              aValue,
              bValue,
              filteredCustomTesters
            );
            if (isEqual === true) {
              has2 = true;
            }
          }
          if (has2 === false) {
            allFound = false;
            break;
          }
        }
      }
      aStack.pop();
      bStack.pop();
      return allFound;
    } else if ((0, _jasmineUtils.isA)("Map", a) || (0, _immutableUtils.isImmutableUnorderedKeyed)(a)) {
      let allFound = true;
      for (const aEntry of a) {
        if (!b.has(aEntry[0]) || !(0, _jasmineUtils.equals)(
          aEntry[1],
          b.get(aEntry[0]),
          filteredCustomTesters
        )) {
          let has2 = false;
          for (const bEntry of b) {
            const matchedKey = (0, _jasmineUtils.equals)(
              aEntry[0],
              bEntry[0],
              filteredCustomTesters
            );
            let matchedValue = false;
            if (matchedKey === true) {
              matchedValue = (0, _jasmineUtils.equals)(
                aEntry[1],
                bEntry[1],
                filteredCustomTesters
              );
            }
            if (matchedValue === true) {
              has2 = true;
            }
          }
          if (has2 === false) {
            allFound = false;
            break;
          }
        }
      }
      aStack.pop();
      bStack.pop();
      return allFound;
    }
  }
  const bIterator = b[IteratorSymbol]();
  for (const aValue of a) {
    const nextB = bIterator.next();
    if (nextB.done || !(0, _jasmineUtils.equals)(aValue, nextB.value, filteredCustomTesters)) {
      return false;
    }
  }
  if (!bIterator.next().done) {
    return false;
  }
  if (!(0, _immutableUtils.isImmutableList)(a) && !(0, _immutableUtils.isImmutableOrderedKeyed)(a) && !(0, _immutableUtils.isImmutableOrderedSet)(a) && !(0, _immutableUtils.isImmutableRecord)(a)) {
    const aEntries = Object.entries(a);
    const bEntries = Object.entries(b);
    if (!(0, _jasmineUtils.equals)(aEntries, bEntries)) {
      return false;
    }
  }
  aStack.pop();
  bStack.pop();
  return true;
};
utils$b.iterableEquality = iterableEquality;
const isObject$2 = (a) => a !== null && typeof a === "object";
const isObjectWithKeys = (a) => isObject$2(a) && !(a instanceof Error) && !(a instanceof Array) && !(a instanceof Date);
const subsetEquality = (object, subset, customTesters = []) => {
  const filteredCustomTesters = customTesters.filter((t) => t !== subsetEquality);
  const subsetEqualityWithContext = (seenReferences = /* @__PURE__ */ new WeakMap()) => (object2, subset2) => {
    if (!isObjectWithKeys(subset2)) {
      return void 0;
    }
    return getObjectKeys(subset2).every((key2) => {
      if (isObjectWithKeys(subset2[key2])) {
        if (seenReferences.has(subset2[key2])) {
          return (0, _jasmineUtils.equals)(
            object2[key2],
            subset2[key2],
            filteredCustomTesters
          );
        }
        seenReferences.set(subset2[key2], true);
      }
      const result = object2 != null && hasPropertyInObject(object2, key2) && (0, _jasmineUtils.equals)(object2[key2], subset2[key2], [
        ...filteredCustomTesters,
        subsetEqualityWithContext(seenReferences)
      ]);
      seenReferences.delete(subset2[key2]);
      return result;
    });
  };
  return subsetEqualityWithContext()(object, subset);
};
utils$b.subsetEquality = subsetEquality;
const typeEquality = (a, b) => {
  if (a == null || b == null || a.constructor === b.constructor || // Since Jest globals are different from Node globals,
  // constructors are different even between arrays when comparing properties of mock objects.
  // Both of them should be able to compare correctly when they are array-to-array.
  // https://github.com/jestjs/jest/issues/2549
  Array.isArray(a) && Array.isArray(b)) {
    return void 0;
  }
  return false;
};
utils$b.typeEquality = typeEquality;
const arrayBufferEquality = (a, b) => {
  if (!(a instanceof ArrayBuffer) || !(b instanceof ArrayBuffer)) {
    return void 0;
  }
  const dataViewA = new DataView(a);
  const dataViewB = new DataView(b);
  if (dataViewA.byteLength !== dataViewB.byteLength) {
    return false;
  }
  for (let i = 0; i < dataViewA.byteLength; i++) {
    if (dataViewA.getUint8(i) !== dataViewB.getUint8(i)) {
      return false;
    }
  }
  return true;
};
utils$b.arrayBufferEquality = arrayBufferEquality;
const sparseArrayEquality = (a, b, customTesters = []) => {
  if (!Array.isArray(a) || !Array.isArray(b)) {
    return void 0;
  }
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  return (0, _jasmineUtils.equals)(
    a,
    b,
    customTesters.filter((t) => t !== sparseArrayEquality),
    true
  ) && (0, _jasmineUtils.equals)(aKeys, bKeys);
};
utils$b.sparseArrayEquality = sparseArrayEquality;
const partition = (items, predicate) => {
  const result = [[], []];
  items.forEach((item2) => result[predicate(item2) ? 0 : 1].push(item2));
  return result;
};
utils$b.partition = partition;
const pathAsArray = (propertyPath) => {
  const properties = [];
  if (propertyPath === "") {
    properties.push("");
    return properties;
  }
  const pattern = RegExp("[^.[\\]]+|(?=(?:\\.)(?:\\.|$))", "g");
  if (propertyPath[0] === ".") {
    properties.push("");
  }
  propertyPath.replace(pattern, (match) => {
    properties.push(match);
    return match;
  });
  return properties;
};
utils$b.pathAsArray = pathAsArray;
const isError = (value2) => {
  switch (Object.prototype.toString.call(value2)) {
    case "[object Error]":
    case "[object Exception]":
    case "[object DOMException]":
      return true;
    default:
      return value2 instanceof Error;
  }
};
utils$b.isError = isError;
function emptyObject(obj) {
  return obj && typeof obj === "object" ? !Object.keys(obj).length : false;
}
const MULTILINE_REGEXP$1 = /[\r\n]/;
const isOneline = (expected, received) => typeof expected === "string" && typeof received === "string" && (!MULTILINE_REGEXP$1.test(expected) || !MULTILINE_REGEXP$1.test(received));
utils$b.isOneline = isOneline;
(function(exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    equals: true,
    isA: true
  };
  Object.defineProperty(exports, "equals", {
    enumerable: true,
    get: function() {
      return _jasmineUtils2.equals;
    }
  });
  Object.defineProperty(exports, "isA", {
    enumerable: true,
    get: function() {
      return _jasmineUtils2.isA;
    }
  });
  var _jasmineUtils2 = jasmineUtils;
  var _utils = utils$b;
  Object.keys(_utils).forEach(function(key2) {
    if (key2 === "default" || key2 === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
    if (key2 in exports && exports[key2] === _utils[key2]) return;
    Object.defineProperty(exports, key2, {
      enumerable: true,
      get: function() {
        return _utils[key2];
      }
    });
  });
})(build$8);
var build$6 = {};
var ansiStyles$4 = { exports: {} };
var colorName$2;
var hasRequiredColorName$2;
function requireColorName$2() {
  if (hasRequiredColorName$2) return colorName$2;
  hasRequiredColorName$2 = 1;
  colorName$2 = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
  return colorName$2;
}
var conversions$2;
var hasRequiredConversions$2;
function requireConversions$2() {
  if (hasRequiredConversions$2) return conversions$2;
  hasRequiredConversions$2 = 1;
  const cssKeywords = requireColorName$2();
  const reverseKeywords = {};
  for (const key2 of Object.keys(cssKeywords)) {
    reverseKeywords[cssKeywords[key2]] = key2;
  }
  const convert = {
    rgb: { channels: 3, labels: "rgb" },
    hsl: { channels: 3, labels: "hsl" },
    hsv: { channels: 3, labels: "hsv" },
    hwb: { channels: 3, labels: "hwb" },
    cmyk: { channels: 4, labels: "cmyk" },
    xyz: { channels: 3, labels: "xyz" },
    lab: { channels: 3, labels: "lab" },
    lch: { channels: 3, labels: "lch" },
    hex: { channels: 1, labels: ["hex"] },
    keyword: { channels: 1, labels: ["keyword"] },
    ansi16: { channels: 1, labels: ["ansi16"] },
    ansi256: { channels: 1, labels: ["ansi256"] },
    hcg: { channels: 3, labels: ["h", "c", "g"] },
    apple: { channels: 3, labels: ["r16", "g16", "b16"] },
    gray: { channels: 1, labels: ["gray"] }
  };
  conversions$2 = convert;
  for (const model of Object.keys(convert)) {
    if (!("channels" in convert[model])) {
      throw new Error("missing channels property: " + model);
    }
    if (!("labels" in convert[model])) {
      throw new Error("missing channel labels property: " + model);
    }
    if (convert[model].labels.length !== convert[model].channels) {
      throw new Error("channel and label counts mismatch: " + model);
    }
    const { channels, labels } = convert[model];
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], "channels", { value: channels });
    Object.defineProperty(convert[model], "labels", { value: labels });
  }
  convert.rgb.hsl = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const min = Math.min(r, g, b);
    const max = Math.max(r, g, b);
    const delta = max - min;
    let h;
    let s;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    const l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function(rgb) {
    let rdif;
    let gdif;
    let bdif;
    let h;
    let s;
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const v = Math.max(r, g, b);
    const diff2 = v - Math.min(r, g, b);
    const diffc = function(c2) {
      return (v - c2) / 6 / diff2 + 1 / 2;
    };
    if (diff2 === 0) {
      h = 0;
      s = 0;
    } else {
      s = diff2 / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    const r = rgb[0];
    const g = rgb[1];
    let b = rgb[2];
    const h = convert.rgb.hsl(rgb)[0];
    const w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const k = Math.min(1 - r, 1 - g, 1 - b);
    const c2 = (1 - r - k) / (1 - k) || 0;
    const m = (1 - g - k) / (1 - k) || 0;
    const y = (1 - b - k) / (1 - k) || 0;
    return [c2 * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x2, y) {
    return (x2[0] - y[0]) ** 2 + (x2[1] - y[1]) ** 2 + (x2[2] - y[2]) ** 2;
  }
  convert.rgb.keyword = function(rgb) {
    const reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    let currentClosestDistance = Infinity;
    let currentClosestKeyword;
    for (const keyword2 of Object.keys(cssKeywords)) {
      const value2 = cssKeywords[keyword2];
      const distance = comparativeDistance(rgb, value2);
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword2;
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword2) {
    return cssKeywords[keyword2];
  };
  convert.rgb.xyz = function(rgb) {
    let r = rgb[0] / 255;
    let g = rgb[1] / 255;
    let b = rgb[2] / 255;
    r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
    g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
    b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
    const x2 = r * 0.4124 + g * 0.3576 + b * 0.1805;
    const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x2 * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function(rgb) {
    const xyz = convert.rgb.xyz(rgb);
    let x2 = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x2 /= 95.047;
    y /= 100;
    z /= 108.883;
    x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x2 - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function(hsl) {
    const h = hsl[0] / 360;
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    let t2;
    let t3;
    let val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    const t1 = 2 * l - t2;
    const rgb = [0, 0, 0];
    for (let i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    const h = hsl[0];
    let s = hsl[1] / 100;
    let l = hsl[2] / 100;
    let smin = s;
    const lmin = Math.max(l, 0.01);
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    const v = (l + s) / 2;
    const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function(hsv) {
    const h = hsv[0] / 60;
    const s = hsv[1] / 100;
    let v = hsv[2] / 100;
    const hi = Math.floor(h) % 6;
    const f = h - Math.floor(h);
    const p = 255 * v * (1 - s);
    const q = 255 * v * (1 - s * f);
    const t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function(hsv) {
    const h = hsv[0];
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const vmin = Math.max(v, 0.01);
    let sl;
    let l;
    l = (2 - s) * v;
    const lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert.hwb.rgb = function(hwb) {
    const h = hwb[0] / 360;
    let wh = hwb[1] / 100;
    let bl = hwb[2] / 100;
    const ratio = wh + bl;
    let f;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    const i = Math.floor(6 * h);
    const v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    const n = wh + f * (v - wh);
    let r;
    let g;
    let b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    const c2 = cmyk[0] / 100;
    const m = cmyk[1] / 100;
    const y = cmyk[2] / 100;
    const k = cmyk[3] / 100;
    const r = 1 - Math.min(1, c2 * (1 - k) + k);
    const g = 1 - Math.min(1, m * (1 - k) + k);
    const b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function(xyz) {
    const x2 = xyz[0] / 100;
    const y = xyz[1] / 100;
    const z = xyz[2] / 100;
    let r;
    let g;
    let b;
    r = x2 * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x2 * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x2 * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function(xyz) {
    let x2 = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x2 /= 95.047;
    y /= 100;
    z /= 108.883;
    x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x2 - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let x2;
    let y;
    let z;
    y = (l + 16) / 116;
    x2 = a / 500 + y;
    z = y - b / 200;
    const y2 = y ** 3;
    const x22 = x2 ** 3;
    const z2 = z ** 3;
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x2 *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x2, y, z];
  };
  convert.lab.lch = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let h;
    const hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    const c2 = Math.sqrt(a * a + b * b);
    return [l, c2, h];
  };
  convert.lch.lab = function(lch) {
    const l = lch[0];
    const c2 = lch[1];
    const h = lch[2];
    const hr = h / 360 * 2 * Math.PI;
    const a = c2 * Math.cos(hr);
    const b = c2 * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function(args, saturation = null) {
    const [r, g, b] = args;
    let value2 = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
    value2 = Math.round(value2 / 50);
    if (value2 === 0) {
      return 30;
    }
    let ansi2 = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value2 === 2) {
      ansi2 += 60;
    }
    return ansi2;
  };
  convert.hsv.ansi16 = function(args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function(args) {
    const r = args[0];
    const g = args[1];
    const b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    const ansi2 = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi2;
  };
  convert.ansi16.rgb = function(args) {
    let color = args % 10;
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    const mult = (~~(args > 50) + 1) * 0.5;
    const r = (color & 1) * mult * 255;
    const g = (color >> 1 & 1) * mult * 255;
    const b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function(args) {
    if (args >= 232) {
      const c2 = (args - 232) * 10 + 8;
      return [c2, c2, c2];
    }
    args -= 16;
    let rem;
    const r = Math.floor(args / 36) / 5 * 255;
    const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    const b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function(args) {
    const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    const string2 = integer.toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert.hex.rgb = function(args) {
    const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    let colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map((char) => {
        return char + char;
      }).join("");
    }
    const integer = parseInt(colorString, 16);
    const r = integer >> 16 & 255;
    const g = integer >> 8 & 255;
    const b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const max = Math.max(Math.max(r, g), b);
    const min = Math.min(Math.min(r, g), b);
    const chroma = max - min;
    let grayscale;
    let hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    const c2 = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
    let f = 0;
    if (c2 < 1) {
      f = (l - 0.5 * c2) / (1 - c2);
    }
    return [hsl[0], c2 * 100, f * 100];
  };
  convert.hsv.hcg = function(hsv) {
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const c2 = s * v;
    let f = 0;
    if (c2 < 1) {
      f = (v - c2) / (1 - c2);
    }
    return [hsv[0], c2 * 100, f * 100];
  };
  convert.hcg.rgb = function(hcg) {
    const h = hcg[0] / 360;
    const c2 = hcg[1] / 100;
    const g = hcg[2] / 100;
    if (c2 === 0) {
      return [g * 255, g * 255, g * 255];
    }
    const pure = [0, 0, 0];
    const hi = h % 1 * 6;
    const v = hi % 1;
    const w = 1 - v;
    let mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c2) * g;
    return [
      (c2 * pure[0] + mg) * 255,
      (c2 * pure[1] + mg) * 255,
      (c2 * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    const c2 = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c2 + g * (1 - c2);
    let f = 0;
    if (v > 0) {
      f = c2 / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function(hcg) {
    const c2 = hcg[1] / 100;
    const g = hcg[2] / 100;
    const l = g * (1 - c2) + 0.5 * c2;
    let s = 0;
    if (l > 0 && l < 0.5) {
      s = c2 / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c2 / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function(hcg) {
    const c2 = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c2 + g * (1 - c2);
    return [hcg[0], (v - c2) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    const w = hwb[1] / 100;
    const b = hwb[2] / 100;
    const v = 1 - b;
    const c2 = v - w;
    let g = 0;
    if (c2 < 1) {
      g = (v - c2) / (1 - c2);
    }
    return [hwb[0], c2 * 100, g * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = function(args) {
    return [0, 0, args[0]];
  };
  convert.gray.hsv = convert.gray.hsl;
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    const val = Math.round(gray[0] / 100 * 255) & 255;
    const integer = (val << 16) + (val << 8) + val;
    const string2 = integer.toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert.rgb.gray = function(rgb) {
    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
  return conversions$2;
}
var route$2;
var hasRequiredRoute$2;
function requireRoute$2() {
  if (hasRequiredRoute$2) return route$2;
  hasRequiredRoute$2 = 1;
  const conversions2 = requireConversions$2();
  function buildGraph() {
    const graph = {};
    const models = Object.keys(conversions2);
    for (let len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    const graph = buildGraph();
    const queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      const current = queue.pop();
      const adjacents = Object.keys(conversions2[current]);
      for (let len = adjacents.length, i = 0; i < len; i++) {
        const adjacent = adjacents[i];
        const node2 = graph[adjacent];
        if (node2.distance === -1) {
          node2.distance = graph[current].distance + 1;
          node2.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    const path2 = [graph[toModel].parent, toModel];
    let fn2 = conversions2[graph[toModel].parent][toModel];
    let cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path2.unshift(graph[cur].parent);
      fn2 = link(conversions2[graph[cur].parent][cur], fn2);
      cur = graph[cur].parent;
    }
    fn2.conversion = path2;
    return fn2;
  }
  route$2 = function(fromModel) {
    const graph = deriveBFS(fromModel);
    const conversion2 = {};
    const models = Object.keys(graph);
    for (let len = models.length, i = 0; i < len; i++) {
      const toModel = models[i];
      const node2 = graph[toModel];
      if (node2.parent === null) {
        continue;
      }
      conversion2[toModel] = wrapConversion(toModel, graph);
    }
    return conversion2;
  };
  return route$2;
}
var colorConvert$2;
var hasRequiredColorConvert$2;
function requireColorConvert$2() {
  if (hasRequiredColorConvert$2) return colorConvert$2;
  hasRequiredColorConvert$2 = 1;
  const conversions2 = requireConversions$2();
  const route2 = requireRoute$2();
  const convert = {};
  const models = Object.keys(conversions2);
  function wrapRaw(fn2) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      return fn2(args);
    };
    if ("conversion" in fn2) {
      wrappedFn.conversion = fn2.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn2) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      const result = fn2(args);
      if (typeof result === "object") {
        for (let len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn2) {
      wrappedFn.conversion = fn2.conversion;
    }
    return wrappedFn;
  }
  models.forEach((fromModel) => {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", { value: conversions2[fromModel].channels });
    Object.defineProperty(convert[fromModel], "labels", { value: conversions2[fromModel].labels });
    const routes = route2(fromModel);
    const routeModels = Object.keys(routes);
    routeModels.forEach((toModel) => {
      const fn2 = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn2);
      convert[fromModel][toModel].raw = wrapRaw(fn2);
    });
  });
  colorConvert$2 = convert;
  return colorConvert$2;
}
ansiStyles$4.exports;
(function(module) {
  const wrapAnsi16 = (fn2, offset) => (...args) => {
    const code = fn2(...args);
    return `\x1B[${code + offset}m`;
  };
  const wrapAnsi256 = (fn2, offset) => (...args) => {
    const code = fn2(...args);
    return `\x1B[${38 + offset};5;${code}m`;
  };
  const wrapAnsi16m = (fn2, offset) => (...args) => {
    const rgb = fn2(...args);
    return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  const ansi2ansi = (n) => n;
  const rgb2rgb = (r, g, b) => [r, g, b];
  const setLazyProperty = (object, property, get) => {
    Object.defineProperty(object, property, {
      get: () => {
        const value2 = get();
        Object.defineProperty(object, property, {
          value: value2,
          enumerable: true,
          configurable: true
        });
        return value2;
      },
      enumerable: true,
      configurable: true
    });
  };
  let colorConvert2;
  const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
    if (colorConvert2 === void 0) {
      colorConvert2 = requireColorConvert$2();
    }
    const offset = isBackground ? 10 : 0;
    const styles2 = {};
    for (const [sourceSpace, suite] of Object.entries(colorConvert2)) {
      const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
      if (sourceSpace === targetSpace) {
        styles2[name] = wrap(identity, offset);
      } else if (typeof suite === "object") {
        styles2[name] = wrap(suite[targetSpace], offset);
      }
    }
    return styles2;
  };
  function assembleStyles() {
    const codes = /* @__PURE__ */ new Map();
    const styles2 = {
      modifier: {
        reset: [0, 0],
        // 21 isn't widely supported and 22 does the same thing
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        // Bright color
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        // Bright color
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles2.color.gray = styles2.color.blackBright;
    styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright;
    styles2.color.grey = styles2.color.blackBright;
    styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles2)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles2[styleName] = {
          open: `\x1B[${style[0]}m`,
          close: `\x1B[${style[1]}m`
        };
        group[styleName] = styles2[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles2, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles2, "codes", {
      value: codes,
      enumerable: false
    });
    styles2.color.close = "\x1B[39m";
    styles2.bgColor.close = "\x1B[49m";
    setLazyProperty(styles2.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
    setLazyProperty(styles2.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
    setLazyProperty(styles2.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
    setLazyProperty(styles2.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
    setLazyProperty(styles2.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
    setLazyProperty(styles2.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
    return styles2;
  }
  Object.defineProperty(module, "exports", {
    enumerable: true,
    get: assembleStyles
  });
})(ansiStyles$4);
var ansiStylesExports$1 = ansiStyles$4.exports;
var browser$4 = {
  stdout: false,
  stderr: false
};
const stringReplaceAll$1 = (string2, substring, replacer) => {
  let index2 = string2.indexOf(substring);
  if (index2 === -1) {
    return string2;
  }
  const substringLength = substring.length;
  let endIndex = 0;
  let returnValue = "";
  do {
    returnValue += string2.substr(endIndex, index2 - endIndex) + substring + replacer;
    endIndex = index2 + substringLength;
    index2 = string2.indexOf(substring, endIndex);
  } while (index2 !== -1);
  returnValue += string2.substr(endIndex);
  return returnValue;
};
const stringEncaseCRLFWithFirstIndex$1 = (string2, prefix, postfix, index2) => {
  let endIndex = 0;
  let returnValue = "";
  do {
    const gotCR = string2[index2 - 1] === "\r";
    returnValue += string2.substr(endIndex, (gotCR ? index2 - 1 : index2) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
    endIndex = index2 + 1;
    index2 = string2.indexOf("\n", endIndex);
  } while (index2 !== -1);
  returnValue += string2.substr(endIndex);
  return returnValue;
};
var util$b = {
  stringReplaceAll: stringReplaceAll$1,
  stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$1
};
var templates$2;
var hasRequiredTemplates$2;
function requireTemplates$2() {
  if (hasRequiredTemplates$2) return templates$2;
  hasRequiredTemplates$2 = 1;
  const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
  const ESCAPES = /* @__PURE__ */ new Map([
    ["n", "\n"],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", "\x1B"],
    ["a", "\x07"]
  ]);
  function unescape2(c2) {
    const u = c2[0] === "u";
    const bracket = c2[1] === "{";
    if (u && !bracket && c2.length === 5 || c2[0] === "x" && c2.length === 3) {
      return String.fromCharCode(parseInt(c2.slice(1), 16));
    }
    if (u && bracket) {
      return String.fromCodePoint(parseInt(c2.slice(2, -1), 16));
    }
    return ESCAPES.get(c2) || c2;
  }
  function parseArguments(name, arguments_) {
    const results = [];
    const chunks = arguments_.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      const number2 = Number(chunk);
      if (!Number.isNaN(number2)) {
        results.push(number2);
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape2, character) => escape2 ? unescape2(escape2) : character));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name = matches[1];
      if (matches[2]) {
        const args = parseArguments(name, matches[2]);
        results.push([name].concat(args));
      } else {
        results.push([name]);
      }
    }
    return results;
  }
  function buildStyle(chalk2, styles2) {
    const enabled = {};
    for (const layer of styles2) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk2;
    for (const [styleName, styles3] of Object.entries(enabled)) {
      if (!Array.isArray(styles3)) {
        continue;
      }
      if (!(styleName in current)) {
        throw new Error(`Unknown Chalk style: ${styleName}`);
      }
      current = styles3.length > 0 ? current[styleName](...styles3) : current[styleName];
    }
    return current;
  }
  templates$2 = (chalk2, temporary) => {
    const styles2 = [];
    const chunks = [];
    let chunk = [];
    temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
      if (escapeCharacter) {
        chunk.push(unescape2(escapeCharacter));
      } else if (style) {
        const string2 = chunk.join("");
        chunk = [];
        chunks.push(styles2.length === 0 ? string2 : buildStyle(chalk2, styles2)(string2));
        styles2.push({ inverse, styles: parseStyle(style) });
      } else if (close) {
        if (styles2.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk2, styles2)(chunk.join("")));
        chunk = [];
        styles2.pop();
      } else {
        chunk.push(character);
      }
    });
    chunks.push(chunk.join(""));
    if (styles2.length > 0) {
      const errMessage = `Chalk template literal is missing ${styles2.length} closing bracket${styles2.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMessage);
    }
    return chunks.join("");
  };
  return templates$2;
}
const ansiStyles$3 = ansiStylesExports$1;
const { stdout: stdoutColor, stderr: stderrColor } = browser$4;
const {
  stringReplaceAll,
  stringEncaseCRLFWithFirstIndex
} = util$b;
const { isArray } = Array;
const levelMapping = [
  "ansi",
  "ansi",
  "ansi256",
  "ansi16m"
];
const styles = /* @__PURE__ */ Object.create(null);
const applyOptions = (object, options2 = {}) => {
  if (options2.level && !(Number.isInteger(options2.level) && options2.level >= 0 && options2.level <= 3)) {
    throw new Error("The `level` option should be an integer from 0 to 3");
  }
  const colorLevel = stdoutColor ? stdoutColor.level : 0;
  object.level = options2.level === void 0 ? colorLevel : options2.level;
};
class ChalkClass {
  constructor(options2) {
    return chalkFactory(options2);
  }
}
const chalkFactory = (options2) => {
  const chalk2 = {};
  applyOptions(chalk2, options2);
  chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
  Object.setPrototypeOf(chalk2, Chalk.prototype);
  Object.setPrototypeOf(chalk2.template, chalk2);
  chalk2.template.constructor = () => {
    throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
  };
  chalk2.template.Instance = ChalkClass;
  return chalk2.template;
};
function Chalk(options2) {
  return chalkFactory(options2);
}
for (const [styleName, style] of Object.entries(ansiStyles$3)) {
  styles[styleName] = {
    get() {
      const builder2 = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
      Object.defineProperty(this, styleName, { value: builder2 });
      return builder2;
    }
  };
}
styles.visible = {
  get() {
    const builder2 = createBuilder(this, this._styler, true);
    Object.defineProperty(this, "visible", { value: builder2 });
    return builder2;
  }
};
const usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
for (const model of usedModels) {
  styles[model] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(ansiStyles$3.color[levelMapping[level]][model](...arguments_), ansiStyles$3.color.close, this._styler);
        return createBuilder(this, styler, this._isEmpty);
      };
    }
  };
}
for (const model of usedModels) {
  const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
  styles[bgModel] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(ansiStyles$3.bgColor[levelMapping[level]][model](...arguments_), ansiStyles$3.bgColor.close, this._styler);
        return createBuilder(this, styler, this._isEmpty);
      };
    }
  };
}
const proto = Object.defineProperties(() => {
}, {
  ...styles,
  level: {
    enumerable: true,
    get() {
      return this._generator.level;
    },
    set(level) {
      this._generator.level = level;
    }
  }
});
const createStyler = (open, close, parent) => {
  let openAll;
  let closeAll;
  if (parent === void 0) {
    openAll = open;
    closeAll = close;
  } else {
    openAll = parent.openAll + open;
    closeAll = close + parent.closeAll;
  }
  return {
    open,
    close,
    openAll,
    closeAll,
    parent
  };
};
const createBuilder = (self, _styler, _isEmpty) => {
  const builder2 = (...arguments_) => {
    if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
      return applyStyle(builder2, chalkTag(builder2, ...arguments_));
    }
    return applyStyle(builder2, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
  };
  Object.setPrototypeOf(builder2, proto);
  builder2._generator = self;
  builder2._styler = _styler;
  builder2._isEmpty = _isEmpty;
  return builder2;
};
const applyStyle = (self, string2) => {
  if (self.level <= 0 || !string2) {
    return self._isEmpty ? "" : string2;
  }
  let styler = self._styler;
  if (styler === void 0) {
    return string2;
  }
  const { openAll, closeAll } = styler;
  if (string2.indexOf("\x1B") !== -1) {
    while (styler !== void 0) {
      string2 = stringReplaceAll(string2, styler.close, styler.open);
      styler = styler.parent;
    }
  }
  const lfIndex = string2.indexOf("\n");
  if (lfIndex !== -1) {
    string2 = stringEncaseCRLFWithFirstIndex(string2, closeAll, openAll, lfIndex);
  }
  return openAll + string2 + closeAll;
};
let template;
const chalkTag = (chalk2, ...strings) => {
  const [firstString] = strings;
  if (!isArray(firstString) || !isArray(firstString.raw)) {
    return strings.join(" ");
  }
  const arguments_ = strings.slice(1);
  const parts = [firstString.raw[0]];
  for (let i = 1; i < firstString.length; i++) {
    parts.push(
      String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"),
      String(firstString.raw[i])
    );
  }
  if (template === void 0) {
    template = requireTemplates$2();
  }
  return template(chalk2, parts.join(""));
};
Object.defineProperties(Chalk.prototype, styles);
const chalk$2 = Chalk();
chalk$2.supportsColor = stdoutColor;
chalk$2.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
chalk$2.stderr.supportsColor = stderrColor;
var source$1 = chalk$2;
var build$5 = {};
var build$4 = {};
var ansiStyles$2 = { exports: {} };
ansiStyles$2.exports;
(function(module) {
  const ANSI_BACKGROUND_OFFSET = 10;
  const wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
  const wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
  function assembleStyles() {
    const codes = /* @__PURE__ */ new Map();
    const styles2 = {
      modifier: {
        reset: [0, 0],
        // 21 isn't widely supported and 22 does the same thing
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        overline: [53, 55],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        // Bright color
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        // Bright color
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles2.color.gray = styles2.color.blackBright;
    styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright;
    styles2.color.grey = styles2.color.blackBright;
    styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles2)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles2[styleName] = {
          open: `\x1B[${style[0]}m`,
          close: `\x1B[${style[1]}m`
        };
        group[styleName] = styles2[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles2, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles2, "codes", {
      value: codes,
      enumerable: false
    });
    styles2.color.close = "\x1B[39m";
    styles2.bgColor.close = "\x1B[49m";
    styles2.color.ansi256 = wrapAnsi256();
    styles2.color.ansi16m = wrapAnsi16m();
    styles2.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
    styles2.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
    Object.defineProperties(styles2, {
      rgbToAnsi256: {
        value: (red, green, blue) => {
          if (red === green && green === blue) {
            if (red < 8) {
              return 16;
            }
            if (red > 248) {
              return 231;
            }
            return Math.round((red - 8) / 247 * 24) + 232;
          }
          return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
        },
        enumerable: false
      },
      hexToRgb: {
        value: (hex) => {
          const matches = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));
          if (!matches) {
            return [0, 0, 0];
          }
          let { colorString } = matches.groups;
          if (colorString.length === 3) {
            colorString = colorString.split("").map((character) => character + character).join("");
          }
          const integer = Number.parseInt(colorString, 16);
          return [
            integer >> 16 & 255,
            integer >> 8 & 255,
            integer & 255
          ];
        },
        enumerable: false
      },
      hexToAnsi256: {
        value: (hex) => styles2.rgbToAnsi256(...styles2.hexToRgb(hex)),
        enumerable: false
      }
    });
    return styles2;
  }
  Object.defineProperty(module, "exports", {
    enumerable: true,
    get: assembleStyles
  });
})(ansiStyles$2);
var ansiStylesExports = ansiStyles$2.exports;
var collections = {};
Object.defineProperty(collections, "__esModule", {
  value: true
});
collections.printIteratorEntries = printIteratorEntries;
collections.printIteratorValues = printIteratorValues;
collections.printListItems = printListItems;
collections.printObjectProperties = printObjectProperties;
const getKeysOfEnumerableProperties = (object, compareKeys) => {
  const rawKeys = Object.keys(object);
  const keys2 = compareKeys !== null ? rawKeys.sort(compareKeys) : rawKeys;
  if (Object.getOwnPropertySymbols) {
    Object.getOwnPropertySymbols(object).forEach((symbol) => {
      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {
        keys2.push(symbol);
      }
    });
  }
  return keys2;
};
function printIteratorEntries(iterator2, config2, indentation2, depth, refs, printer2, separator = ": ") {
  let result = "";
  let width = 0;
  let current = iterator2.next();
  if (!current.done) {
    result += config2.spacingOuter;
    const indentationNext = indentation2 + config2.indent;
    while (!current.done) {
      result += indentationNext;
      if (width++ === config2.maxWidth) {
        result += "…";
        break;
      }
      const name = printer2(
        current.value[0],
        config2,
        indentationNext,
        depth,
        refs
      );
      const value2 = printer2(
        current.value[1],
        config2,
        indentationNext,
        depth,
        refs
      );
      result += name + separator + value2;
      current = iterator2.next();
      if (!current.done) {
        result += `,${config2.spacingInner}`;
      } else if (!config2.min) {
        result += ",";
      }
    }
    result += config2.spacingOuter + indentation2;
  }
  return result;
}
function printIteratorValues(iterator2, config2, indentation2, depth, refs, printer2) {
  let result = "";
  let width = 0;
  let current = iterator2.next();
  if (!current.done) {
    result += config2.spacingOuter;
    const indentationNext = indentation2 + config2.indent;
    while (!current.done) {
      result += indentationNext;
      if (width++ === config2.maxWidth) {
        result += "…";
        break;
      }
      result += printer2(current.value, config2, indentationNext, depth, refs);
      current = iterator2.next();
      if (!current.done) {
        result += `,${config2.spacingInner}`;
      } else if (!config2.min) {
        result += ",";
      }
    }
    result += config2.spacingOuter + indentation2;
  }
  return result;
}
function printListItems(list2, config2, indentation2, depth, refs, printer2) {
  let result = "";
  if (list2.length) {
    result += config2.spacingOuter;
    const indentationNext = indentation2 + config2.indent;
    for (let i = 0; i < list2.length; i++) {
      result += indentationNext;
      if (i === config2.maxWidth) {
        result += "…";
        break;
      }
      if (i in list2) {
        result += printer2(list2[i], config2, indentationNext, depth, refs);
      }
      if (i < list2.length - 1) {
        result += `,${config2.spacingInner}`;
      } else if (!config2.min) {
        result += ",";
      }
    }
    result += config2.spacingOuter + indentation2;
  }
  return result;
}
function printObjectProperties(val, config2, indentation2, depth, refs, printer2) {
  let result = "";
  const keys2 = getKeysOfEnumerableProperties(val, config2.compareKeys);
  if (keys2.length) {
    result += config2.spacingOuter;
    const indentationNext = indentation2 + config2.indent;
    for (let i = 0; i < keys2.length; i++) {
      const key2 = keys2[i];
      const name = printer2(key2, config2, indentationNext, depth, refs);
      const value2 = printer2(val[key2], config2, indentationNext, depth, refs);
      result += `${indentationNext + name}: ${value2}`;
      if (i < keys2.length - 1) {
        result += `,${config2.spacingInner}`;
      } else if (!config2.min) {
        result += ",";
      }
    }
    result += config2.spacingOuter + indentation2;
  }
  return result;
}
var AsymmetricMatcher$2 = {};
Object.defineProperty(AsymmetricMatcher$2, "__esModule", {
  value: true
});
AsymmetricMatcher$2.test = AsymmetricMatcher$2.serialize = AsymmetricMatcher$2.default = void 0;
var _collections$3 = collections;
var Symbol$3 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
const asymmetricMatcher = typeof Symbol$3 === "function" && Symbol$3.for ? Symbol$3.for("jest.asymmetricMatcher") : 1267621;
const SPACE$2 = " ";
const serialize$5 = (val, config2, indentation2, depth, refs, printer2) => {
  const stringedValue = val.toString();
  if (stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining") {
    if (++depth > config2.maxDepth) {
      return `[${stringedValue}]`;
    }
    return `${stringedValue + SPACE$2}[${(0, _collections$3.printListItems)(
      val.sample,
      config2,
      indentation2,
      depth,
      refs,
      printer2
    )}]`;
  }
  if (stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining") {
    if (++depth > config2.maxDepth) {
      return `[${stringedValue}]`;
    }
    return `${stringedValue + SPACE$2}{${(0, _collections$3.printObjectProperties)(
      val.sample,
      config2,
      indentation2,
      depth,
      refs,
      printer2
    )}}`;
  }
  if (stringedValue === "StringMatching" || stringedValue === "StringNotMatching") {
    return stringedValue + SPACE$2 + printer2(val.sample, config2, indentation2, depth, refs);
  }
  if (stringedValue === "StringContaining" || stringedValue === "StringNotContaining") {
    return stringedValue + SPACE$2 + printer2(val.sample, config2, indentation2, depth, refs);
  }
  if (typeof val.toAsymmetricMatcher !== "function") {
    throw new Error(
      `Asymmetric matcher ${val.constructor.name} does not implement toAsymmetricMatcher()`
    );
  }
  return val.toAsymmetricMatcher();
};
AsymmetricMatcher$2.serialize = serialize$5;
const test$6 = (val) => val && val.$$typeof === asymmetricMatcher;
AsymmetricMatcher$2.test = test$6;
const plugin$6 = {
  serialize: serialize$5,
  test: test$6
};
var _default$9 = plugin$6;
AsymmetricMatcher$2.default = _default$9;
var DOMCollection$1 = {};
Object.defineProperty(DOMCollection$1, "__esModule", {
  value: true
});
DOMCollection$1.test = DOMCollection$1.serialize = DOMCollection$1.default = void 0;
var _collections$2 = collections;
const SPACE$1 = " ";
const OBJECT_NAMES = ["DOMStringMap", "NamedNodeMap"];
const ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;
const testName = (name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
const test$5 = (val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
DOMCollection$1.test = test$5;
const isNamedNodeMap = (collection) => collection.constructor.name === "NamedNodeMap";
const serialize$4 = (collection, config2, indentation2, depth, refs, printer2) => {
  const name = collection.constructor.name;
  if (++depth > config2.maxDepth) {
    return `[${name}]`;
  }
  return (config2.min ? "" : name + SPACE$1) + (OBJECT_NAMES.indexOf(name) !== -1 ? `{${(0, _collections$2.printObjectProperties)(
    isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {
      props[attribute.name] = attribute.value;
      return props;
    }, {}) : {
      ...collection
    },
    config2,
    indentation2,
    depth,
    refs,
    printer2
  )}}` : `[${(0, _collections$2.printListItems)(
    Array.from(collection),
    config2,
    indentation2,
    depth,
    refs,
    printer2
  )}]`);
};
DOMCollection$1.serialize = serialize$4;
const plugin$5 = {
  serialize: serialize$4,
  test: test$5
};
var _default$8 = plugin$5;
DOMCollection$1.default = _default$8;
var DOMElement$1 = {};
var markup = {};
var escapeHTML$1 = {};
Object.defineProperty(escapeHTML$1, "__esModule", {
  value: true
});
escapeHTML$1.default = escapeHTML;
function escapeHTML(str) {
  return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
Object.defineProperty(markup, "__esModule", {
  value: true
});
markup.printText = markup.printProps = markup.printElementAsLeaf = markup.printElement = markup.printComment = markup.printChildren = void 0;
var _escapeHTML = _interopRequireDefault$7(escapeHTML$1);
function _interopRequireDefault$7(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const printProps = (keys2, props, config2, indentation2, depth, refs, printer2) => {
  const indentationNext = indentation2 + config2.indent;
  const colors2 = config2.colors;
  return keys2.map((key2) => {
    const value2 = props[key2];
    let printed = printer2(value2, config2, indentationNext, depth, refs);
    if (typeof value2 !== "string") {
      if (printed.indexOf("\n") !== -1) {
        printed = config2.spacingOuter + indentationNext + printed + config2.spacingOuter + indentation2;
      }
      printed = `{${printed}}`;
    }
    return `${config2.spacingInner + indentation2 + colors2.prop.open + key2 + colors2.prop.close}=${colors2.value.open}${printed}${colors2.value.close}`;
  }).join("");
};
markup.printProps = printProps;
const printChildren = (children, config2, indentation2, depth, refs, printer2) => children.map(
  (child) => config2.spacingOuter + indentation2 + (typeof child === "string" ? printText(child, config2) : printer2(child, config2, indentation2, depth, refs))
).join("");
markup.printChildren = printChildren;
const printText = (text2, config2) => {
  const contentColor = config2.colors.content;
  return contentColor.open + (0, _escapeHTML.default)(text2) + contentColor.close;
};
markup.printText = printText;
const printComment = (comment, config2) => {
  const commentColor = config2.colors.comment;
  return `${commentColor.open}<!--${(0, _escapeHTML.default)(comment)}-->${commentColor.close}`;
};
markup.printComment = printComment;
const printElement = (type, printedProps, printedChildren, config2, indentation2) => {
  const tagColor = config2.colors.tag;
  return `${tagColor.open}<${type}${printedProps && tagColor.close + printedProps + config2.spacingOuter + indentation2 + tagColor.open}${printedChildren ? `>${tagColor.close}${printedChildren}${config2.spacingOuter}${indentation2}${tagColor.open}</${type}` : `${printedProps && !config2.min ? "" : " "}/`}>${tagColor.close}`;
};
markup.printElement = printElement;
const printElementAsLeaf = (type, config2) => {
  const tagColor = config2.colors.tag;
  return `${tagColor.open}<${type}${tagColor.close} …${tagColor.open} />${tagColor.close}`;
};
markup.printElementAsLeaf = printElementAsLeaf;
Object.defineProperty(DOMElement$1, "__esModule", {
  value: true
});
DOMElement$1.test = DOMElement$1.serialize = DOMElement$1.default = void 0;
var _markup$2 = markup;
const ELEMENT_NODE = 1;
const TEXT_NODE = 3;
const COMMENT_NODE = 8;
const FRAGMENT_NODE = 11;
const ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;
const testHasAttribute = (val) => {
  try {
    return typeof val.hasAttribute === "function" && val.hasAttribute("is");
  } catch {
    return false;
  }
};
const testNode = (val) => {
  const constructorName = val.constructor.name;
  const { nodeType, tagName } = val;
  const isCustomElement = typeof tagName === "string" && tagName.includes("-") || testHasAttribute(val);
  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === "Text" || nodeType === COMMENT_NODE && constructorName === "Comment" || nodeType === FRAGMENT_NODE && constructorName === "DocumentFragment";
};
const test$4 = (val) => {
  var _a;
  return ((_a = val == null ? void 0 : val.constructor) == null ? void 0 : _a.name) && testNode(val);
};
DOMElement$1.test = test$4;
function nodeIsText(node2) {
  return node2.nodeType === TEXT_NODE;
}
function nodeIsComment(node2) {
  return node2.nodeType === COMMENT_NODE;
}
function nodeIsFragment(node2) {
  return node2.nodeType === FRAGMENT_NODE;
}
const serialize$3 = (node2, config2, indentation2, depth, refs, printer2) => {
  if (nodeIsText(node2)) {
    return (0, _markup$2.printText)(node2.data, config2);
  }
  if (nodeIsComment(node2)) {
    return (0, _markup$2.printComment)(node2.data, config2);
  }
  const type = nodeIsFragment(node2) ? "DocumentFragment" : node2.tagName.toLowerCase();
  if (++depth > config2.maxDepth) {
    return (0, _markup$2.printElementAsLeaf)(type, config2);
  }
  return (0, _markup$2.printElement)(
    type,
    (0, _markup$2.printProps)(
      nodeIsFragment(node2) ? [] : Array.from(node2.attributes, (attr) => attr.name).sort(),
      nodeIsFragment(node2) ? {} : Array.from(node2.attributes).reduce((props, attribute) => {
        props[attribute.name] = attribute.value;
        return props;
      }, {}),
      config2,
      indentation2 + config2.indent,
      depth,
      refs,
      printer2
    ),
    (0, _markup$2.printChildren)(
      Array.prototype.slice.call(node2.childNodes || node2.children),
      config2,
      indentation2 + config2.indent,
      depth,
      refs,
      printer2
    ),
    config2,
    indentation2
  );
};
DOMElement$1.serialize = serialize$3;
const plugin$4 = {
  serialize: serialize$3,
  test: test$4
};
var _default$7 = plugin$4;
DOMElement$1.default = _default$7;
var Immutable$1 = {};
Object.defineProperty(Immutable$1, "__esModule", {
  value: true
});
Immutable$1.test = Immutable$1.serialize = Immutable$1.default = void 0;
var _collections$1 = collections;
const IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
const IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";
const IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
const IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";
const IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
const IS_RECORD_SENTINEL = "@@__IMMUTABLE_RECORD__@@";
const IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";
const IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
const IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";
const getImmutableName = (name) => `Immutable.${name}`;
const printAsLeaf = (name) => `[${name}]`;
const SPACE = " ";
const LAZY = "…";
const printImmutableEntries = (val, config2, indentation2, depth, refs, printer2, type) => ++depth > config2.maxDepth ? printAsLeaf(getImmutableName(type)) : `${getImmutableName(type) + SPACE}{${(0, _collections$1.printIteratorEntries)(
  val.entries(),
  config2,
  indentation2,
  depth,
  refs,
  printer2
)}}`;
function getRecordEntries(val) {
  let i = 0;
  return {
    next() {
      if (i < val._keys.length) {
        const key2 = val._keys[i++];
        return {
          done: false,
          value: [key2, val.get(key2)]
        };
      }
      return {
        done: true,
        value: void 0
      };
    }
  };
}
const printImmutableRecord = (val, config2, indentation2, depth, refs, printer2) => {
  const name = getImmutableName(val._name || "Record");
  return ++depth > config2.maxDepth ? printAsLeaf(name) : `${name + SPACE}{${(0, _collections$1.printIteratorEntries)(
    getRecordEntries(val),
    config2,
    indentation2,
    depth,
    refs,
    printer2
  )}}`;
};
const printImmutableSeq = (val, config2, indentation2, depth, refs, printer2) => {
  const name = getImmutableName("Seq");
  if (++depth > config2.maxDepth) {
    return printAsLeaf(name);
  }
  if (val[IS_KEYED_SENTINEL]) {
    return `${name + SPACE}{${// from Immutable collection of entries or from ECMAScript object
    val._iter || val._object ? (0, _collections$1.printIteratorEntries)(
      val.entries(),
      config2,
      indentation2,
      depth,
      refs,
      printer2
    ) : LAZY}}`;
  }
  return `${name + SPACE}[${val._iter || // from Immutable collection of values
  val._array || // from ECMAScript array
  val._collection || // from ECMAScript collection in immutable v4
  val._iterable ? (0, _collections$1.printIteratorValues)(
    val.values(),
    config2,
    indentation2,
    depth,
    refs,
    printer2
  ) : LAZY}]`;
};
const printImmutableValues = (val, config2, indentation2, depth, refs, printer2, type) => ++depth > config2.maxDepth ? printAsLeaf(getImmutableName(type)) : `${getImmutableName(type) + SPACE}[${(0, _collections$1.printIteratorValues)(
  val.values(),
  config2,
  indentation2,
  depth,
  refs,
  printer2
)}]`;
const serialize$2 = (val, config2, indentation2, depth, refs, printer2) => {
  if (val[IS_MAP_SENTINEL]) {
    return printImmutableEntries(
      val,
      config2,
      indentation2,
      depth,
      refs,
      printer2,
      val[IS_ORDERED_SENTINEL] ? "OrderedMap" : "Map"
    );
  }
  if (val[IS_LIST_SENTINEL]) {
    return printImmutableValues(
      val,
      config2,
      indentation2,
      depth,
      refs,
      printer2,
      "List"
    );
  }
  if (val[IS_SET_SENTINEL]) {
    return printImmutableValues(
      val,
      config2,
      indentation2,
      depth,
      refs,
      printer2,
      val[IS_ORDERED_SENTINEL] ? "OrderedSet" : "Set"
    );
  }
  if (val[IS_STACK_SENTINEL]) {
    return printImmutableValues(
      val,
      config2,
      indentation2,
      depth,
      refs,
      printer2,
      "Stack"
    );
  }
  if (val[IS_SEQ_SENTINEL]) {
    return printImmutableSeq(val, config2, indentation2, depth, refs, printer2);
  }
  return printImmutableRecord(val, config2, indentation2, depth, refs, printer2);
};
Immutable$1.serialize = serialize$2;
const test$3 = (val) => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
Immutable$1.test = test$3;
const plugin$3 = {
  serialize: serialize$2,
  test: test$3
};
var _default$6 = plugin$3;
Immutable$1.default = _default$6;
var ReactElement$1 = {};
var reactIs = { exports: {} };
var reactIs_production_min = {};
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min;
function requireReactIs_production_min() {
  if (hasRequiredReactIs_production_min) return reactIs_production_min;
  hasRequiredReactIs_production_min = 1;
  var b = Symbol.for("react.element"), c2 = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
  u = Symbol.for("react.module.reference");
  function v(a) {
    if ("object" === typeof a && null !== a) {
      var r = a.$$typeof;
      switch (r) {
        case b:
          switch (a = a.type, a) {
            case d:
            case f:
            case e:
            case m:
            case n:
              return a;
            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case h:
                case l:
                case q:
                case p:
                case g:
                  return a;
                default:
                  return r;
              }
          }
        case c2:
          return r;
      }
    }
  }
  reactIs_production_min.ContextConsumer = h;
  reactIs_production_min.ContextProvider = g;
  reactIs_production_min.Element = b;
  reactIs_production_min.ForwardRef = l;
  reactIs_production_min.Fragment = d;
  reactIs_production_min.Lazy = q;
  reactIs_production_min.Memo = p;
  reactIs_production_min.Portal = c2;
  reactIs_production_min.Profiler = f;
  reactIs_production_min.StrictMode = e;
  reactIs_production_min.Suspense = m;
  reactIs_production_min.SuspenseList = n;
  reactIs_production_min.isAsyncMode = function() {
    return false;
  };
  reactIs_production_min.isConcurrentMode = function() {
    return false;
  };
  reactIs_production_min.isContextConsumer = function(a) {
    return v(a) === h;
  };
  reactIs_production_min.isContextProvider = function(a) {
    return v(a) === g;
  };
  reactIs_production_min.isElement = function(a) {
    return "object" === typeof a && null !== a && a.$$typeof === b;
  };
  reactIs_production_min.isForwardRef = function(a) {
    return v(a) === l;
  };
  reactIs_production_min.isFragment = function(a) {
    return v(a) === d;
  };
  reactIs_production_min.isLazy = function(a) {
    return v(a) === q;
  };
  reactIs_production_min.isMemo = function(a) {
    return v(a) === p;
  };
  reactIs_production_min.isPortal = function(a) {
    return v(a) === c2;
  };
  reactIs_production_min.isProfiler = function(a) {
    return v(a) === f;
  };
  reactIs_production_min.isStrictMode = function(a) {
    return v(a) === e;
  };
  reactIs_production_min.isSuspense = function(a) {
    return v(a) === m;
  };
  reactIs_production_min.isSuspenseList = function(a) {
    return v(a) === n;
  };
  reactIs_production_min.isValidElementType = function(a) {
    return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? true : false;
  };
  reactIs_production_min.typeOf = v;
  return reactIs_production_min;
}
var reactIs_development = {};
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_development;
function requireReactIs_development() {
  if (hasRequiredReactIs_development) return reactIs_development;
  hasRequiredReactIs_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                case REACT_SUSPENSE_LIST_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_SERVER_CONTEXT_TYPE:
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      var hasWarnedAboutDeprecatedIsConcurrentMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
          }
        }
        return false;
      }
      function isConcurrentMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
            hasWarnedAboutDeprecatedIsConcurrentMode = true;
            console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
          }
        }
        return false;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      function isSuspenseList(object) {
        return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
      }
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.SuspenseList = SuspenseList;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isSuspenseList = isSuspenseList;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }
  return reactIs_development;
}
if (process.env.NODE_ENV === "production") {
  reactIs.exports = requireReactIs_production_min();
} else {
  reactIs.exports = requireReactIs_development();
}
var reactIsExports = reactIs.exports;
Object.defineProperty(ReactElement$1, "__esModule", {
  value: true
});
ReactElement$1.test = ReactElement$1.serialize = ReactElement$1.default = void 0;
var ReactIs = _interopRequireWildcard$3(reactIsExports);
var _markup$1 = markup;
function _getRequireWildcardCache$3(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
  var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$3 = function(nodeInterop2) {
    return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard$3(obj, nodeInterop) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return { default: obj };
  }
  var cache2 = _getRequireWildcardCache$3(nodeInterop);
  if (cache2 && cache2.has(obj)) {
    return cache2.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key2 in obj) {
    if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key2, desc);
      } else {
        newObj[key2] = obj[key2];
      }
    }
  }
  newObj.default = obj;
  if (cache2) {
    cache2.set(obj, newObj);
  }
  return newObj;
}
const getChildren = (arg, children = []) => {
  if (Array.isArray(arg)) {
    arg.forEach((item2) => {
      getChildren(item2, children);
    });
  } else if (arg != null && arg !== false) {
    children.push(arg);
  }
  return children;
};
const getType$1 = (element) => {
  const type = element.type;
  if (typeof type === "string") {
    return type;
  }
  if (typeof type === "function") {
    return type.displayName || type.name || "Unknown";
  }
  if (ReactIs.isFragment(element)) {
    return "React.Fragment";
  }
  if (ReactIs.isSuspense(element)) {
    return "React.Suspense";
  }
  if (typeof type === "object" && type !== null) {
    if (ReactIs.isContextProvider(element)) {
      return "Context.Provider";
    }
    if (ReactIs.isContextConsumer(element)) {
      return "Context.Consumer";
    }
    if (ReactIs.isForwardRef(element)) {
      if (type.displayName) {
        return type.displayName;
      }
      const functionName = type.render.displayName || type.render.name || "";
      return functionName !== "" ? `ForwardRef(${functionName})` : "ForwardRef";
    }
    if (ReactIs.isMemo(element)) {
      const functionName = type.displayName || type.type.displayName || type.type.name || "";
      return functionName !== "" ? `Memo(${functionName})` : "Memo";
    }
  }
  return "UNDEFINED";
};
const getPropKeys$1 = (element) => {
  const { props } = element;
  return Object.keys(props).filter((key2) => key2 !== "children" && props[key2] !== void 0).sort();
};
const serialize$1 = (element, config2, indentation2, depth, refs, printer2) => ++depth > config2.maxDepth ? (0, _markup$1.printElementAsLeaf)(getType$1(element), config2) : (0, _markup$1.printElement)(
  getType$1(element),
  (0, _markup$1.printProps)(
    getPropKeys$1(element),
    element.props,
    config2,
    indentation2 + config2.indent,
    depth,
    refs,
    printer2
  ),
  (0, _markup$1.printChildren)(
    getChildren(element.props.children),
    config2,
    indentation2 + config2.indent,
    depth,
    refs,
    printer2
  ),
  config2,
  indentation2
);
ReactElement$1.serialize = serialize$1;
const test$2 = (val) => val != null && ReactIs.isElement(val);
ReactElement$1.test = test$2;
const plugin$2 = {
  serialize: serialize$1,
  test: test$2
};
var _default$5 = plugin$2;
ReactElement$1.default = _default$5;
var ReactTestComponent$1 = {};
Object.defineProperty(ReactTestComponent$1, "__esModule", {
  value: true
});
ReactTestComponent$1.test = ReactTestComponent$1.serialize = ReactTestComponent$1.default = void 0;
var _markup = markup;
var Symbol$2 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
const testSymbol = typeof Symbol$2 === "function" && Symbol$2.for ? Symbol$2.for("react.test.json") : 245830487;
const getPropKeys = (object) => {
  const { props } = object;
  return props ? Object.keys(props).filter((key2) => props[key2] !== void 0).sort() : [];
};
const serialize = (object, config2, indentation2, depth, refs, printer2) => ++depth > config2.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config2) : (0, _markup.printElement)(
  object.type,
  object.props ? (0, _markup.printProps)(
    getPropKeys(object),
    object.props,
    config2,
    indentation2 + config2.indent,
    depth,
    refs,
    printer2
  ) : "",
  object.children ? (0, _markup.printChildren)(
    object.children,
    config2,
    indentation2 + config2.indent,
    depth,
    refs,
    printer2
  ) : "",
  config2,
  indentation2
);
ReactTestComponent$1.serialize = serialize;
const test$1 = (val) => val && val.$$typeof === testSymbol;
ReactTestComponent$1.test = test$1;
const plugin$1 = {
  serialize,
  test: test$1
};
var _default$4 = plugin$1;
ReactTestComponent$1.default = _default$4;
Object.defineProperty(build$4, "__esModule", {
  value: true
});
build$4.default = build$4.DEFAULT_OPTIONS = void 0;
build$4.format = format;
build$4.plugins = void 0;
var _ansiStyles = _interopRequireDefault$6(ansiStylesExports);
var _collections = collections;
var _AsymmetricMatcher = _interopRequireDefault$6(
  AsymmetricMatcher$2
);
var _DOMCollection = _interopRequireDefault$6(DOMCollection$1);
var _DOMElement = _interopRequireDefault$6(DOMElement$1);
var _Immutable = _interopRequireDefault$6(Immutable$1);
var _ReactElement = _interopRequireDefault$6(ReactElement$1);
var _ReactTestComponent = _interopRequireDefault$6(
  ReactTestComponent$1
);
function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const toString$1 = Object.prototype.toString;
const toISOString = Date.prototype.toISOString;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const getConstructorName = (val) => typeof val.constructor === "function" && val.constructor.name || "Object";
const isWindow = (val) => typeof window !== "undefined" && val === window;
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
const NEWLINE_REGEXP = /\n/gi;
class PrettyFormatPluginError extends Error {
  constructor(message, stack2) {
    super(message);
    this.stack = stack2;
    this.name = this.constructor.name;
  }
}
function isToStringedArrayType(toStringed) {
  return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
}
function printNumber(val) {
  return Object.is(val, -0) ? "-0" : String(val);
}
function printBigInt(val) {
  return String(`${val}n`);
}
function printFunction(val, printFunctionName) {
  if (!printFunctionName) {
    return "[Function]";
  }
  return `[Function ${val.name || "anonymous"}]`;
}
function printSymbol(val) {
  return String(val).replace(SYMBOL_REGEXP, "Symbol($1)");
}
function printError(val) {
  return `[${errorToString.call(val)}]`;
}
function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
  if (val === true || val === false) {
    return `${val}`;
  }
  if (val === void 0) {
    return "undefined";
  }
  if (val === null) {
    return "null";
  }
  const typeOf = typeof val;
  if (typeOf === "number") {
    return printNumber(val);
  }
  if (typeOf === "bigint") {
    return printBigInt(val);
  }
  if (typeOf === "string") {
    if (escapeString) {
      return `"${val.replace(/"|\\/g, "\\$&")}"`;
    }
    return `"${val}"`;
  }
  if (typeOf === "function") {
    return printFunction(val, printFunctionName);
  }
  if (typeOf === "symbol") {
    return printSymbol(val);
  }
  const toStringed = toString$1.call(val);
  if (toStringed === "[object WeakMap]") {
    return "WeakMap {}";
  }
  if (toStringed === "[object WeakSet]") {
    return "WeakSet {}";
  }
  if (toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]") {
    return printFunction(val, printFunctionName);
  }
  if (toStringed === "[object Symbol]") {
    return printSymbol(val);
  }
  if (toStringed === "[object Date]") {
    return isNaN(+val) ? "Date { NaN }" : toISOString.call(val);
  }
  if (toStringed === "[object Error]") {
    return printError(val);
  }
  if (toStringed === "[object RegExp]") {
    if (escapeRegex) {
      return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    return regExpToString.call(val);
  }
  if (val instanceof Error) {
    return printError(val);
  }
  return null;
}
function printComplexValue(val, config2, indentation2, depth, refs, hasCalledToJSON) {
  if (refs.indexOf(val) !== -1) {
    return "[Circular]";
  }
  refs = refs.slice();
  refs.push(val);
  const hitMaxDepth = ++depth > config2.maxDepth;
  const min = config2.min;
  if (config2.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === "function" && !hasCalledToJSON) {
    return printer$2(val.toJSON(), config2, indentation2, depth, refs, true);
  }
  const toStringed = toString$1.call(val);
  if (toStringed === "[object Arguments]") {
    return hitMaxDepth ? "[Arguments]" : `${min ? "" : "Arguments "}[${(0, _collections.printListItems)(
      val,
      config2,
      indentation2,
      depth,
      refs,
      printer$2
    )}]`;
  }
  if (isToStringedArrayType(toStringed)) {
    return hitMaxDepth ? `[${val.constructor.name}]` : `${min ? "" : !config2.printBasicPrototype && val.constructor.name === "Array" ? "" : `${val.constructor.name} `}[${(0, _collections.printListItems)(
      val,
      config2,
      indentation2,
      depth,
      refs,
      printer$2
    )}]`;
  }
  if (toStringed === "[object Map]") {
    return hitMaxDepth ? "[Map]" : `Map {${(0, _collections.printIteratorEntries)(
      val.entries(),
      config2,
      indentation2,
      depth,
      refs,
      printer$2,
      " => "
    )}}`;
  }
  if (toStringed === "[object Set]") {
    return hitMaxDepth ? "[Set]" : `Set {${(0, _collections.printIteratorValues)(
      val.values(),
      config2,
      indentation2,
      depth,
      refs,
      printer$2
    )}}`;
  }
  return hitMaxDepth || isWindow(val) ? `[${getConstructorName(val)}]` : `${min ? "" : !config2.printBasicPrototype && getConstructorName(val) === "Object" ? "" : `${getConstructorName(val)} `}{${(0, _collections.printObjectProperties)(
    val,
    config2,
    indentation2,
    depth,
    refs,
    printer$2
  )}}`;
}
function isNewPlugin(plugin2) {
  return plugin2.serialize != null;
}
function printPlugin(plugin2, val, config2, indentation2, depth, refs) {
  let printed;
  try {
    printed = isNewPlugin(plugin2) ? plugin2.serialize(val, config2, indentation2, depth, refs, printer$2) : plugin2.print(
      val,
      (valChild) => printer$2(valChild, config2, indentation2, depth, refs),
      (str) => {
        const indentationNext = indentation2 + config2.indent;
        return indentationNext + str.replace(NEWLINE_REGEXP, `
${indentationNext}`);
      },
      {
        edgeSpacing: config2.spacingOuter,
        min: config2.min,
        spacing: config2.spacingInner
      },
      config2.colors
    );
  } catch (error2) {
    throw new PrettyFormatPluginError(error2.message, error2.stack);
  }
  if (typeof printed !== "string") {
    throw new Error(
      `pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`
    );
  }
  return printed;
}
function findPlugin(plugins2, val) {
  for (let p = 0; p < plugins2.length; p++) {
    try {
      if (plugins2[p].test(val)) {
        return plugins2[p];
      }
    } catch (error2) {
      throw new PrettyFormatPluginError(error2.message, error2.stack);
    }
  }
  return null;
}
function printer$2(val, config2, indentation2, depth, refs, hasCalledToJSON) {
  const plugin2 = findPlugin(config2.plugins, val);
  if (plugin2 !== null) {
    return printPlugin(plugin2, val, config2, indentation2, depth, refs);
  }
  const basicResult = printBasicValue(
    val,
    config2.printFunctionName,
    config2.escapeRegex,
    config2.escapeString
  );
  if (basicResult !== null) {
    return basicResult;
  }
  return printComplexValue(
    val,
    config2,
    indentation2,
    depth,
    refs,
    hasCalledToJSON
  );
}
const DEFAULT_THEME = {
  comment: "gray",
  content: "reset",
  prop: "yellow",
  tag: "cyan",
  value: "green"
};
const DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);
const toOptionsSubtype = (options2) => options2;
const DEFAULT_OPTIONS = toOptionsSubtype({
  callToJSON: true,
  compareKeys: void 0,
  escapeRegex: false,
  escapeString: true,
  highlight: false,
  indent: 2,
  maxDepth: Infinity,
  maxWidth: Infinity,
  min: false,
  plugins: [],
  printBasicPrototype: true,
  printFunctionName: true,
  theme: DEFAULT_THEME
});
build$4.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
function validateOptions(options2) {
  Object.keys(options2).forEach((key2) => {
    if (!Object.prototype.hasOwnProperty.call(DEFAULT_OPTIONS, key2)) {
      throw new Error(`pretty-format: Unknown option "${key2}".`);
    }
  });
  if (options2.min && options2.indent !== void 0 && options2.indent !== 0) {
    throw new Error(
      'pretty-format: Options "min" and "indent" cannot be used together.'
    );
  }
  if (options2.theme !== void 0) {
    if (options2.theme === null) {
      throw new Error('pretty-format: Option "theme" must not be null.');
    }
    if (typeof options2.theme !== "object") {
      throw new Error(
        `pretty-format: Option "theme" must be of type "object" but instead received "${typeof options2.theme}".`
      );
    }
  }
}
const getColorsHighlight = (options2) => DEFAULT_THEME_KEYS.reduce((colors2, key2) => {
  const value2 = options2.theme && options2.theme[key2] !== void 0 ? options2.theme[key2] : DEFAULT_THEME[key2];
  const color = value2 && _ansiStyles.default[value2];
  if (color && typeof color.close === "string" && typeof color.open === "string") {
    colors2[key2] = color;
  } else {
    throw new Error(
      `pretty-format: Option "theme" has a key "${key2}" whose value "${value2}" is undefined in ansi-styles.`
    );
  }
  return colors2;
}, /* @__PURE__ */ Object.create(null));
const getColorsEmpty = () => DEFAULT_THEME_KEYS.reduce((colors2, key2) => {
  colors2[key2] = {
    close: "",
    open: ""
  };
  return colors2;
}, /* @__PURE__ */ Object.create(null));
const getPrintFunctionName = (options2) => (options2 == null ? void 0 : options2.printFunctionName) ?? DEFAULT_OPTIONS.printFunctionName;
const getEscapeRegex = (options2) => (options2 == null ? void 0 : options2.escapeRegex) ?? DEFAULT_OPTIONS.escapeRegex;
const getEscapeString = (options2) => (options2 == null ? void 0 : options2.escapeString) ?? DEFAULT_OPTIONS.escapeString;
const getConfig = (options2) => ({
  callToJSON: (options2 == null ? void 0 : options2.callToJSON) ?? DEFAULT_OPTIONS.callToJSON,
  colors: (options2 == null ? void 0 : options2.highlight) ? getColorsHighlight(options2) : getColorsEmpty(),
  compareKeys: typeof (options2 == null ? void 0 : options2.compareKeys) === "function" || (options2 == null ? void 0 : options2.compareKeys) === null ? options2.compareKeys : DEFAULT_OPTIONS.compareKeys,
  escapeRegex: getEscapeRegex(options2),
  escapeString: getEscapeString(options2),
  indent: (options2 == null ? void 0 : options2.min) ? "" : createIndent((options2 == null ? void 0 : options2.indent) ?? DEFAULT_OPTIONS.indent),
  maxDepth: (options2 == null ? void 0 : options2.maxDepth) ?? DEFAULT_OPTIONS.maxDepth,
  maxWidth: (options2 == null ? void 0 : options2.maxWidth) ?? DEFAULT_OPTIONS.maxWidth,
  min: (options2 == null ? void 0 : options2.min) ?? DEFAULT_OPTIONS.min,
  plugins: (options2 == null ? void 0 : options2.plugins) ?? DEFAULT_OPTIONS.plugins,
  printBasicPrototype: (options2 == null ? void 0 : options2.printBasicPrototype) ?? true,
  printFunctionName: getPrintFunctionName(options2),
  spacingInner: (options2 == null ? void 0 : options2.min) ? " " : "\n",
  spacingOuter: (options2 == null ? void 0 : options2.min) ? "" : "\n"
});
function createIndent(indent) {
  return new Array(indent + 1).join(" ");
}
function format(val, options2) {
  if (options2) {
    validateOptions(options2);
    if (options2.plugins) {
      const plugin2 = findPlugin(options2.plugins, val);
      if (plugin2 !== null) {
        return printPlugin(plugin2, val, getConfig(options2), "", 0, []);
      }
    }
  }
  const basicResult = printBasicValue(
    val,
    getPrintFunctionName(options2),
    getEscapeRegex(options2),
    getEscapeString(options2)
  );
  if (basicResult !== null) {
    return basicResult;
  }
  return printComplexValue(val, getConfig(options2), "", 0, []);
}
const plugins$2 = {
  AsymmetricMatcher: _AsymmetricMatcher.default,
  DOMCollection: _DOMCollection.default,
  DOMElement: _DOMElement.default,
  Immutable: _Immutable.default,
  ReactElement: _ReactElement.default,
  ReactTestComponent: _ReactTestComponent.default
};
build$4.plugins = plugins$2;
var _default$3 = format;
build$4.default = _default$3;
var cleanupSemantic = {};
Object.defineProperty(cleanupSemantic, "__esModule", {
  value: true
});
cleanupSemantic.cleanupSemantic = cleanupSemantic.Diff = cleanupSemantic.DIFF_INSERT = cleanupSemantic.DIFF_EQUAL = cleanupSemantic.DIFF_DELETE = void 0;
var DIFF_DELETE = -1;
cleanupSemantic.DIFF_DELETE = DIFF_DELETE;
var DIFF_INSERT = 1;
cleanupSemantic.DIFF_INSERT = DIFF_INSERT;
var DIFF_EQUAL = 0;
cleanupSemantic.DIFF_EQUAL = DIFF_EQUAL;
class Diff {
  constructor(op, text2) {
    __publicField(this, 0);
    __publicField(this, 1);
    this[0] = op;
    this[1] = text2;
  }
}
cleanupSemantic.Diff = Diff;
var diff_commonPrefix = function(text1, text2) {
  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    return 0;
  }
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerstart = 0;
  while (pointermin < pointermid) {
    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
      pointermin = pointermid;
      pointerstart = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};
var diff_commonSuffix = function(text1, text2) {
  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
    return 0;
  }
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerend = 0;
  while (pointermin < pointermid) {
    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
      pointermin = pointermid;
      pointerend = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};
var diff_commonOverlap_ = function(text1, text2) {
  var text1_length = text1.length;
  var text2_length = text2.length;
  if (text1_length == 0 || text2_length == 0) {
    return 0;
  }
  if (text1_length > text2_length) {
    text1 = text1.substring(text1_length - text2_length);
  } else if (text1_length < text2_length) {
    text2 = text2.substring(0, text1_length);
  }
  var text_length = Math.min(text1_length, text2_length);
  if (text1 == text2) {
    return text_length;
  }
  var best = 0;
  var length = 1;
  while (true) {
    var pattern = text1.substring(text_length - length);
    var found = text2.indexOf(pattern);
    if (found == -1) {
      return best;
    }
    length += found;
    if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {
      best = length;
      length++;
    }
  }
};
var diff_cleanupSemantic = function(diffs) {
  var changes = false;
  var equalities = [];
  var equalitiesLength = 0;
  var lastEquality = null;
  var pointer = 0;
  var length_insertions1 = 0;
  var length_deletions1 = 0;
  var length_insertions2 = 0;
  var length_deletions2 = 0;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {
      equalities[equalitiesLength++] = pointer;
      length_insertions1 = length_insertions2;
      length_deletions1 = length_deletions2;
      length_insertions2 = 0;
      length_deletions2 = 0;
      lastEquality = diffs[pointer][1];
    } else {
      if (diffs[pointer][0] == DIFF_INSERT) {
        length_insertions2 += diffs[pointer][1].length;
      } else {
        length_deletions2 += diffs[pointer][1].length;
      }
      if (lastEquality && lastEquality.length <= Math.max(length_insertions1, length_deletions1) && lastEquality.length <= Math.max(length_insertions2, length_deletions2)) {
        diffs.splice(
          equalities[equalitiesLength - 1],
          0,
          new Diff(DIFF_DELETE, lastEquality)
        );
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        equalitiesLength--;
        equalitiesLength--;
        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
        length_insertions1 = 0;
        length_deletions1 = 0;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastEquality = null;
        changes = true;
      }
    }
    pointer++;
  }
  if (changes) {
    diff_cleanupMerge(diffs);
  }
  diff_cleanupSemanticLossless(diffs);
  pointer = 1;
  while (pointer < diffs.length) {
    if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {
      var deletion = diffs[pointer - 1][1];
      var insertion = diffs[pointer][1];
      var overlap_length1 = diff_commonOverlap_(deletion, insertion);
      var overlap_length2 = diff_commonOverlap_(insertion, deletion);
      if (overlap_length1 >= overlap_length2) {
        if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {
          diffs.splice(
            pointer,
            0,
            new Diff(DIFF_EQUAL, insertion.substring(0, overlap_length1))
          );
          diffs[pointer - 1][1] = deletion.substring(
            0,
            deletion.length - overlap_length1
          );
          diffs[pointer + 1][1] = insertion.substring(overlap_length1);
          pointer++;
        }
      } else {
        if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {
          diffs.splice(
            pointer,
            0,
            new Diff(DIFF_EQUAL, deletion.substring(0, overlap_length2))
          );
          diffs[pointer - 1][0] = DIFF_INSERT;
          diffs[pointer - 1][1] = insertion.substring(
            0,
            insertion.length - overlap_length2
          );
          diffs[pointer + 1][0] = DIFF_DELETE;
          diffs[pointer + 1][1] = deletion.substring(overlap_length2);
          pointer++;
        }
      }
      pointer++;
    }
    pointer++;
  }
};
cleanupSemantic.cleanupSemantic = diff_cleanupSemantic;
var diff_cleanupSemanticLossless = function(diffs) {
  function diff_cleanupSemanticScore_(one, two) {
    if (!one || !two) {
      return 6;
    }
    var char1 = one.charAt(one.length - 1);
    var char2 = two.charAt(0);
    var nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);
    var nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);
    var whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex_);
    var whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex_);
    var lineBreak1 = whitespace1 && char1.match(linebreakRegex_);
    var lineBreak2 = whitespace2 && char2.match(linebreakRegex_);
    var blankLine1 = lineBreak1 && one.match(blanklineEndRegex_);
    var blankLine2 = lineBreak2 && two.match(blanklineStartRegex_);
    if (blankLine1 || blankLine2) {
      return 5;
    } else if (lineBreak1 || lineBreak2) {
      return 4;
    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
      return 3;
    } else if (whitespace1 || whitespace2) {
      return 2;
    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
      return 1;
    }
    return 0;
  }
  var pointer = 1;
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
      var equality1 = diffs[pointer - 1][1];
      var edit = diffs[pointer][1];
      var equality2 = diffs[pointer + 1][1];
      var commonOffset = diff_commonSuffix(equality1, edit);
      if (commonOffset) {
        var commonString = edit.substring(edit.length - commonOffset);
        equality1 = equality1.substring(0, equality1.length - commonOffset);
        edit = commonString + edit.substring(0, edit.length - commonOffset);
        equality2 = commonString + equality2;
      }
      var bestEquality1 = equality1;
      var bestEdit = edit;
      var bestEquality2 = equality2;
      var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
      while (edit.charAt(0) === equality2.charAt(0)) {
        equality1 += edit.charAt(0);
        edit = edit.substring(1) + equality2.charAt(0);
        equality2 = equality2.substring(1);
        var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
        if (score >= bestScore) {
          bestScore = score;
          bestEquality1 = equality1;
          bestEdit = edit;
          bestEquality2 = equality2;
        }
      }
      if (diffs[pointer - 1][1] != bestEquality1) {
        if (bestEquality1) {
          diffs[pointer - 1][1] = bestEquality1;
        } else {
          diffs.splice(pointer - 1, 1);
          pointer--;
        }
        diffs[pointer][1] = bestEdit;
        if (bestEquality2) {
          diffs[pointer + 1][1] = bestEquality2;
        } else {
          diffs.splice(pointer + 1, 1);
          pointer--;
        }
      }
    }
    pointer++;
  }
};
var nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
var whitespaceRegex_ = /\s/;
var linebreakRegex_ = /[\r\n]/;
var blanklineEndRegex_ = /\n\r?\n$/;
var blanklineStartRegex_ = /^\r?\n\r?\n/;
var diff_cleanupMerge = function(diffs) {
  diffs.push(new Diff(DIFF_EQUAL, ""));
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = "";
  var text_insert = "";
  var commonlength;
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_EQUAL:
        if (count_delete + count_insert > 1) {
          if (count_delete !== 0 && count_insert !== 0) {
            commonlength = diff_commonPrefix(text_insert, text_delete);
            if (commonlength !== 0) {
              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
              } else {
                diffs.splice(
                  0,
                  0,
                  new Diff(DIFF_EQUAL, text_insert.substring(0, commonlength))
                );
                pointer++;
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            commonlength = diff_commonSuffix(text_insert, text_delete);
            if (commonlength !== 0) {
              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
              text_insert = text_insert.substring(
                0,
                text_insert.length - commonlength
              );
              text_delete = text_delete.substring(
                0,
                text_delete.length - commonlength
              );
            }
          }
          pointer -= count_delete + count_insert;
          diffs.splice(pointer, count_delete + count_insert);
          if (text_delete.length) {
            diffs.splice(pointer, 0, new Diff(DIFF_DELETE, text_delete));
            pointer++;
          }
          if (text_insert.length) {
            diffs.splice(pointer, 0, new Diff(DIFF_INSERT, text_insert));
            pointer++;
          }
          pointer++;
        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
          diffs[pointer - 1][1] += diffs[pointer][1];
          diffs.splice(pointer, 1);
        } else {
          pointer++;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = "";
        text_insert = "";
        break;
    }
  }
  if (diffs[diffs.length - 1][1] === "") {
    diffs.pop();
  }
  var changes = false;
  pointer = 1;
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
      if (diffs[pointer][1].substring(
        diffs[pointer][1].length - diffs[pointer - 1][1].length
      ) == diffs[pointer - 1][1]) {
        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(
          0,
          diffs[pointer][1].length - diffs[pointer - 1][1].length
        );
        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
        diffs.splice(pointer - 1, 1);
        changes = true;
      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
        diffs[pointer - 1][1] += diffs[pointer + 1][1];
        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
        diffs.splice(pointer + 1, 1);
        changes = true;
      }
    }
    pointer++;
  }
  if (changes) {
    diff_cleanupMerge(diffs);
  }
};
var constants$3 = {};
Object.defineProperty(constants$3, "__esModule", {
  value: true
});
constants$3.SIMILAR_MESSAGE = constants$3.NO_DIFF_MESSAGE = void 0;
const NO_DIFF_MESSAGE = "Compared values have no visual difference.";
constants$3.NO_DIFF_MESSAGE = NO_DIFF_MESSAGE;
const SIMILAR_MESSAGE = "Compared values serialize to the same structure.\nPrinting internal object structure without calling `toJSON` instead.";
constants$3.SIMILAR_MESSAGE = SIMILAR_MESSAGE;
var diffLines = {};
var build$3 = {};
Object.defineProperty(build$3, "__esModule", {
  value: true
});
build$3.default = diffSequence;
const pkg = "diff-sequences";
const NOT_YET_SET = 0;
const countCommonItemsF = (aIndex, aEnd, bIndex, bEnd, isCommon) => {
  let nCommon = 0;
  while (aIndex < aEnd && bIndex < bEnd && isCommon(aIndex, bIndex)) {
    aIndex += 1;
    bIndex += 1;
    nCommon += 1;
  }
  return nCommon;
};
const countCommonItemsR = (aStart, aIndex, bStart, bIndex, isCommon) => {
  let nCommon = 0;
  while (aStart <= aIndex && bStart <= bIndex && isCommon(aIndex, bIndex)) {
    aIndex -= 1;
    bIndex -= 1;
    nCommon += 1;
  }
  return nCommon;
};
const extendPathsF = (d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF) => {
  let iF = 0;
  let kF = -d;
  let aFirst = aIndexesF[iF];
  let aIndexPrev1 = aFirst;
  aIndexesF[iF] += countCommonItemsF(
    aFirst + 1,
    aEnd,
    bF + aFirst - kF + 1,
    bEnd,
    isCommon
  );
  const nF = d < iMaxF ? d : iMaxF;
  for (iF += 1, kF += 2; iF <= nF; iF += 1, kF += 2) {
    if (iF !== d && aIndexPrev1 < aIndexesF[iF]) {
      aFirst = aIndexesF[iF];
    } else {
      aFirst = aIndexPrev1 + 1;
      if (aEnd <= aFirst) {
        return iF - 1;
      }
    }
    aIndexPrev1 = aIndexesF[iF];
    aIndexesF[iF] = aFirst + countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
  }
  return iMaxF;
};
const extendPathsR = (d, aStart, bStart, bR, isCommon, aIndexesR, iMaxR) => {
  let iR = 0;
  let kR = d;
  let aFirst = aIndexesR[iR];
  let aIndexPrev1 = aFirst;
  aIndexesR[iR] -= countCommonItemsR(
    aStart,
    aFirst - 1,
    bStart,
    bR + aFirst - kR - 1,
    isCommon
  );
  const nR = d < iMaxR ? d : iMaxR;
  for (iR += 1, kR -= 2; iR <= nR; iR += 1, kR -= 2) {
    if (iR !== d && aIndexesR[iR] < aIndexPrev1) {
      aFirst = aIndexesR[iR];
    } else {
      aFirst = aIndexPrev1 - 1;
      if (aFirst < aStart) {
        return iR - 1;
      }
    }
    aIndexPrev1 = aIndexesR[iR];
    aIndexesR[iR] = aFirst - countCommonItemsR(
      aStart,
      aFirst - 1,
      bStart,
      bR + aFirst - kR - 1,
      isCommon
    );
  }
  return iMaxR;
};
const extendOverlappablePathsF = (d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) => {
  const bF = bStart - aStart;
  const aLength = aEnd - aStart;
  const bLength = bEnd - bStart;
  const baDeltaLength = bLength - aLength;
  const kMinOverlapF = -baDeltaLength - (d - 1);
  const kMaxOverlapF = -baDeltaLength + (d - 1);
  let aIndexPrev1 = NOT_YET_SET;
  const nF = d < iMaxF ? d : iMaxF;
  for (let iF = 0, kF = -d; iF <= nF; iF += 1, kF += 2) {
    const insert = iF === 0 || iF !== d && aIndexPrev1 < aIndexesF[iF];
    const aLastPrev = insert ? aIndexesF[iF] : aIndexPrev1;
    const aFirst = insert ? aLastPrev : aLastPrev + 1;
    const bFirst = bF + aFirst - kF;
    const nCommonF = countCommonItemsF(
      aFirst + 1,
      aEnd,
      bFirst + 1,
      bEnd,
      isCommon
    );
    const aLast = aFirst + nCommonF;
    aIndexPrev1 = aIndexesF[iF];
    aIndexesF[iF] = aLast;
    if (kMinOverlapF <= kF && kF <= kMaxOverlapF) {
      const iR = (d - 1 - (kF + baDeltaLength)) / 2;
      if (iR <= iMaxR && aIndexesR[iR] - 1 <= aLast) {
        const bLastPrev = bF + aLastPrev - (insert ? kF + 1 : kF - 1);
        const nCommonR = countCommonItemsR(
          aStart,
          aLastPrev,
          bStart,
          bLastPrev,
          isCommon
        );
        const aIndexPrevFirst = aLastPrev - nCommonR;
        const bIndexPrevFirst = bLastPrev - nCommonR;
        const aEndPreceding = aIndexPrevFirst + 1;
        const bEndPreceding = bIndexPrevFirst + 1;
        division.nChangePreceding = d - 1;
        if (d - 1 === aEndPreceding + bEndPreceding - aStart - bStart) {
          division.aEndPreceding = aStart;
          division.bEndPreceding = bStart;
        } else {
          division.aEndPreceding = aEndPreceding;
          division.bEndPreceding = bEndPreceding;
        }
        division.nCommonPreceding = nCommonR;
        if (nCommonR !== 0) {
          division.aCommonPreceding = aEndPreceding;
          division.bCommonPreceding = bEndPreceding;
        }
        division.nCommonFollowing = nCommonF;
        if (nCommonF !== 0) {
          division.aCommonFollowing = aFirst + 1;
          division.bCommonFollowing = bFirst + 1;
        }
        const aStartFollowing = aLast + 1;
        const bStartFollowing = bFirst + nCommonF + 1;
        division.nChangeFollowing = d - 1;
        if (d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing) {
          division.aStartFollowing = aEnd;
          division.bStartFollowing = bEnd;
        } else {
          division.aStartFollowing = aStartFollowing;
          division.bStartFollowing = bStartFollowing;
        }
        return true;
      }
    }
  }
  return false;
};
const extendOverlappablePathsR = (d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) => {
  const bR = bEnd - aEnd;
  const aLength = aEnd - aStart;
  const bLength = bEnd - bStart;
  const baDeltaLength = bLength - aLength;
  const kMinOverlapR = baDeltaLength - d;
  const kMaxOverlapR = baDeltaLength + d;
  let aIndexPrev1 = NOT_YET_SET;
  const nR = d < iMaxR ? d : iMaxR;
  for (let iR = 0, kR = d; iR <= nR; iR += 1, kR -= 2) {
    const insert = iR === 0 || iR !== d && aIndexesR[iR] < aIndexPrev1;
    const aLastPrev = insert ? aIndexesR[iR] : aIndexPrev1;
    const aFirst = insert ? aLastPrev : aLastPrev - 1;
    const bFirst = bR + aFirst - kR;
    const nCommonR = countCommonItemsR(
      aStart,
      aFirst - 1,
      bStart,
      bFirst - 1,
      isCommon
    );
    const aLast = aFirst - nCommonR;
    aIndexPrev1 = aIndexesR[iR];
    aIndexesR[iR] = aLast;
    if (kMinOverlapR <= kR && kR <= kMaxOverlapR) {
      const iF = (d + (kR - baDeltaLength)) / 2;
      if (iF <= iMaxF && aLast - 1 <= aIndexesF[iF]) {
        const bLast = bFirst - nCommonR;
        division.nChangePreceding = d;
        if (d === aLast + bLast - aStart - bStart) {
          division.aEndPreceding = aStart;
          division.bEndPreceding = bStart;
        } else {
          division.aEndPreceding = aLast;
          division.bEndPreceding = bLast;
        }
        division.nCommonPreceding = nCommonR;
        if (nCommonR !== 0) {
          division.aCommonPreceding = aLast;
          division.bCommonPreceding = bLast;
        }
        division.nChangeFollowing = d - 1;
        if (d === 1) {
          division.nCommonFollowing = 0;
          division.aStartFollowing = aEnd;
          division.bStartFollowing = bEnd;
        } else {
          const bLastPrev = bR + aLastPrev - (insert ? kR - 1 : kR + 1);
          const nCommonF = countCommonItemsF(
            aLastPrev,
            aEnd,
            bLastPrev,
            bEnd,
            isCommon
          );
          division.nCommonFollowing = nCommonF;
          if (nCommonF !== 0) {
            division.aCommonFollowing = aLastPrev;
            division.bCommonFollowing = bLastPrev;
          }
          const aStartFollowing = aLastPrev + nCommonF;
          const bStartFollowing = bLastPrev + nCommonF;
          if (d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing) {
            division.aStartFollowing = aEnd;
            division.bStartFollowing = bEnd;
          } else {
            division.aStartFollowing = aStartFollowing;
            division.bStartFollowing = bStartFollowing;
          }
        }
        return true;
      }
    }
  }
  return false;
};
const divide = (nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division) => {
  const bF = bStart - aStart;
  const bR = bEnd - aEnd;
  const aLength = aEnd - aStart;
  const bLength = bEnd - bStart;
  const baDeltaLength = bLength - aLength;
  let iMaxF = aLength;
  let iMaxR = aLength;
  aIndexesF[0] = aStart - 1;
  aIndexesR[0] = aEnd;
  if (baDeltaLength % 2 === 0) {
    const dMin = (nChange || baDeltaLength) / 2;
    const dMax = (aLength + bLength) / 2;
    for (let d = 1; d <= dMax; d += 1) {
      iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
      if (d < dMin) {
        iMaxR = extendPathsR(d, aStart, bStart, bR, isCommon, aIndexesR, iMaxR);
      } else if (
        // If a reverse path overlaps a forward path in the same diagonal,
        // return a division of the index intervals at the middle change.
        extendOverlappablePathsR(
          d,
          aStart,
          aEnd,
          bStart,
          bEnd,
          isCommon,
          aIndexesF,
          iMaxF,
          aIndexesR,
          iMaxR,
          division
        )
      ) {
        return;
      }
    }
  } else {
    const dMin = ((nChange || baDeltaLength) + 1) / 2;
    const dMax = (aLength + bLength + 1) / 2;
    let d = 1;
    iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
    for (d += 1; d <= dMax; d += 1) {
      iMaxR = extendPathsR(
        d - 1,
        aStart,
        bStart,
        bR,
        isCommon,
        aIndexesR,
        iMaxR
      );
      if (d < dMin) {
        iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
      } else if (
        // If a forward path overlaps a reverse path in the same diagonal,
        // return a division of the index intervals at the middle change.
        extendOverlappablePathsF(
          d,
          aStart,
          aEnd,
          bStart,
          bEnd,
          isCommon,
          aIndexesF,
          iMaxF,
          aIndexesR,
          iMaxR,
          division
        )
      ) {
        return;
      }
    }
  }
  throw new Error(
    `${pkg}: no overlap aStart=${aStart} aEnd=${aEnd} bStart=${bStart} bEnd=${bEnd}`
  );
};
const findSubsequences = (nChange, aStart, aEnd, bStart, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division) => {
  if (bEnd - bStart < aEnd - aStart) {
    transposed = !transposed;
    if (transposed && callbacks.length === 1) {
      const { foundSubsequence: foundSubsequence2, isCommon: isCommon2 } = callbacks[0];
      callbacks[1] = {
        foundSubsequence: (nCommon, bCommon, aCommon) => {
          foundSubsequence2(nCommon, aCommon, bCommon);
        },
        isCommon: (bIndex, aIndex) => isCommon2(aIndex, bIndex)
      };
    }
    const tStart = aStart;
    const tEnd = aEnd;
    aStart = bStart;
    aEnd = bEnd;
    bStart = tStart;
    bEnd = tEnd;
  }
  const { foundSubsequence, isCommon } = callbacks[transposed ? 1 : 0];
  divide(
    nChange,
    aStart,
    aEnd,
    bStart,
    bEnd,
    isCommon,
    aIndexesF,
    aIndexesR,
    division
  );
  const {
    nChangePreceding,
    aEndPreceding,
    bEndPreceding,
    nCommonPreceding,
    aCommonPreceding,
    bCommonPreceding,
    nCommonFollowing,
    aCommonFollowing,
    bCommonFollowing,
    nChangeFollowing,
    aStartFollowing,
    bStartFollowing
  } = division;
  if (aStart < aEndPreceding && bStart < bEndPreceding) {
    findSubsequences(
      nChangePreceding,
      aStart,
      aEndPreceding,
      bStart,
      bEndPreceding,
      transposed,
      callbacks,
      aIndexesF,
      aIndexesR,
      division
    );
  }
  if (nCommonPreceding !== 0) {
    foundSubsequence(nCommonPreceding, aCommonPreceding, bCommonPreceding);
  }
  if (nCommonFollowing !== 0) {
    foundSubsequence(nCommonFollowing, aCommonFollowing, bCommonFollowing);
  }
  if (aStartFollowing < aEnd && bStartFollowing < bEnd) {
    findSubsequences(
      nChangeFollowing,
      aStartFollowing,
      aEnd,
      bStartFollowing,
      bEnd,
      transposed,
      callbacks,
      aIndexesF,
      aIndexesR,
      division
    );
  }
};
const validateLength = (name, arg) => {
  if (typeof arg !== "number") {
    throw new TypeError(`${pkg}: ${name} typeof ${typeof arg} is not a number`);
  }
  if (!Number.isSafeInteger(arg)) {
    throw new RangeError(`${pkg}: ${name} value ${arg} is not a safe integer`);
  }
  if (arg < 0) {
    throw new RangeError(`${pkg}: ${name} value ${arg} is a negative integer`);
  }
};
const validateCallback = (name, arg) => {
  const type = typeof arg;
  if (type !== "function") {
    throw new TypeError(`${pkg}: ${name} typeof ${type} is not a function`);
  }
};
function diffSequence(aLength, bLength, isCommon, foundSubsequence) {
  validateLength("aLength", aLength);
  validateLength("bLength", bLength);
  validateCallback("isCommon", isCommon);
  validateCallback("foundSubsequence", foundSubsequence);
  const nCommonF = countCommonItemsF(0, aLength, 0, bLength, isCommon);
  if (nCommonF !== 0) {
    foundSubsequence(nCommonF, 0, 0);
  }
  if (aLength !== nCommonF || bLength !== nCommonF) {
    const aStart = nCommonF;
    const bStart = nCommonF;
    const nCommonR = countCommonItemsR(
      aStart,
      aLength - 1,
      bStart,
      bLength - 1,
      isCommon
    );
    const aEnd = aLength - nCommonR;
    const bEnd = bLength - nCommonR;
    const nCommonFR = nCommonF + nCommonR;
    if (aLength !== nCommonFR && bLength !== nCommonFR) {
      const nChange = 0;
      const transposed = false;
      const callbacks = [
        {
          foundSubsequence,
          isCommon
        }
      ];
      const aIndexesF = [NOT_YET_SET];
      const aIndexesR = [NOT_YET_SET];
      const division = {
        aCommonFollowing: NOT_YET_SET,
        aCommonPreceding: NOT_YET_SET,
        aEndPreceding: NOT_YET_SET,
        aStartFollowing: NOT_YET_SET,
        bCommonFollowing: NOT_YET_SET,
        bCommonPreceding: NOT_YET_SET,
        bEndPreceding: NOT_YET_SET,
        bStartFollowing: NOT_YET_SET,
        nChangeFollowing: NOT_YET_SET,
        nChangePreceding: NOT_YET_SET,
        nCommonFollowing: NOT_YET_SET,
        nCommonPreceding: NOT_YET_SET
      };
      findSubsequences(
        nChange,
        aStart,
        aEnd,
        bStart,
        bEnd,
        transposed,
        callbacks,
        aIndexesF,
        aIndexesR,
        division
      );
    }
    if (nCommonR !== 0) {
      foundSubsequence(nCommonR, aEnd, bEnd);
    }
  }
}
var joinAlignedDiffs = {};
Object.defineProperty(joinAlignedDiffs, "__esModule", {
  value: true
});
joinAlignedDiffs.joinAlignedDiffsNoExpand = joinAlignedDiffs.joinAlignedDiffsExpand = void 0;
var _cleanupSemantic$4 = cleanupSemantic;
const formatTrailingSpaces = (line2, trailingSpaceFormatter) => line2.replace(/\s+$/, (match) => trailingSpaceFormatter(match));
const printDiffLine = (line2, isFirstOrLast, color, indicator, trailingSpaceFormatter, emptyFirstOrLastLinePlaceholder) => line2.length !== 0 ? color(
  `${indicator} ${formatTrailingSpaces(line2, trailingSpaceFormatter)}`
) : indicator !== " " ? color(indicator) : isFirstOrLast && emptyFirstOrLastLinePlaceholder.length !== 0 ? color(`${indicator} ${emptyFirstOrLastLinePlaceholder}`) : "";
const printDeleteLine = (line2, isFirstOrLast, {
  aColor,
  aIndicator,
  changeLineTrailingSpaceColor,
  emptyFirstOrLastLinePlaceholder
}) => printDiffLine(
  line2,
  isFirstOrLast,
  aColor,
  aIndicator,
  changeLineTrailingSpaceColor,
  emptyFirstOrLastLinePlaceholder
);
const printInsertLine = (line2, isFirstOrLast, {
  bColor,
  bIndicator,
  changeLineTrailingSpaceColor,
  emptyFirstOrLastLinePlaceholder
}) => printDiffLine(
  line2,
  isFirstOrLast,
  bColor,
  bIndicator,
  changeLineTrailingSpaceColor,
  emptyFirstOrLastLinePlaceholder
);
const printCommonLine = (line2, isFirstOrLast, {
  commonColor,
  commonIndicator,
  commonLineTrailingSpaceColor,
  emptyFirstOrLastLinePlaceholder
}) => printDiffLine(
  line2,
  isFirstOrLast,
  commonColor,
  commonIndicator,
  commonLineTrailingSpaceColor,
  emptyFirstOrLastLinePlaceholder
);
const createPatchMark = (aStart, aEnd, bStart, bEnd, { patchColor }) => patchColor(
  `@@ -${aStart + 1},${aEnd - aStart} +${bStart + 1},${bEnd - bStart} @@`
);
const joinAlignedDiffsNoExpand = (diffs, options2) => {
  const iLength = diffs.length;
  const nContextLines = options2.contextLines;
  const nContextLines2 = nContextLines + nContextLines;
  let jLength = iLength;
  let hasExcessAtStartOrEnd = false;
  let nExcessesBetweenChanges = 0;
  let i = 0;
  while (i !== iLength) {
    const iStart = i;
    while (i !== iLength && diffs[i][0] === _cleanupSemantic$4.DIFF_EQUAL) {
      i += 1;
    }
    if (iStart !== i) {
      if (iStart === 0) {
        if (i > nContextLines) {
          jLength -= i - nContextLines;
          hasExcessAtStartOrEnd = true;
        }
      } else if (i === iLength) {
        const n = i - iStart;
        if (n > nContextLines) {
          jLength -= n - nContextLines;
          hasExcessAtStartOrEnd = true;
        }
      } else {
        const n = i - iStart;
        if (n > nContextLines2) {
          jLength -= n - nContextLines2;
          nExcessesBetweenChanges += 1;
        }
      }
    }
    while (i !== iLength && diffs[i][0] !== _cleanupSemantic$4.DIFF_EQUAL) {
      i += 1;
    }
  }
  const hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;
  if (nExcessesBetweenChanges !== 0) {
    jLength += nExcessesBetweenChanges + 1;
  } else if (hasExcessAtStartOrEnd) {
    jLength += 1;
  }
  const jLast = jLength - 1;
  const lines = [];
  let jPatchMark = 0;
  if (hasPatch) {
    lines.push("");
  }
  let aStart = 0;
  let bStart = 0;
  let aEnd = 0;
  let bEnd = 0;
  const pushCommonLine = (line2) => {
    const j = lines.length;
    lines.push(printCommonLine(line2, j === 0 || j === jLast, options2));
    aEnd += 1;
    bEnd += 1;
  };
  const pushDeleteLine = (line2) => {
    const j = lines.length;
    lines.push(printDeleteLine(line2, j === 0 || j === jLast, options2));
    aEnd += 1;
  };
  const pushInsertLine = (line2) => {
    const j = lines.length;
    lines.push(printInsertLine(line2, j === 0 || j === jLast, options2));
    bEnd += 1;
  };
  i = 0;
  while (i !== iLength) {
    let iStart = i;
    while (i !== iLength && diffs[i][0] === _cleanupSemantic$4.DIFF_EQUAL) {
      i += 1;
    }
    if (iStart !== i) {
      if (iStart === 0) {
        if (i > nContextLines) {
          iStart = i - nContextLines;
          aStart = iStart;
          bStart = iStart;
          aEnd = aStart;
          bEnd = bStart;
        }
        for (let iCommon = iStart; iCommon !== i; iCommon += 1) {
          pushCommonLine(diffs[iCommon][1]);
        }
      } else if (i === iLength) {
        const iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;
        for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {
          pushCommonLine(diffs[iCommon][1]);
        }
      } else {
        const nCommon = i - iStart;
        if (nCommon > nContextLines2) {
          const iEnd = iStart + nContextLines;
          for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {
            pushCommonLine(diffs[iCommon][1]);
          }
          lines[jPatchMark] = createPatchMark(
            aStart,
            aEnd,
            bStart,
            bEnd,
            options2
          );
          jPatchMark = lines.length;
          lines.push("");
          const nOmit = nCommon - nContextLines2;
          aStart = aEnd + nOmit;
          bStart = bEnd + nOmit;
          aEnd = aStart;
          bEnd = bStart;
          for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1) {
            pushCommonLine(diffs[iCommon][1]);
          }
        } else {
          for (let iCommon = iStart; iCommon !== i; iCommon += 1) {
            pushCommonLine(diffs[iCommon][1]);
          }
        }
      }
    }
    while (i !== iLength && diffs[i][0] === _cleanupSemantic$4.DIFF_DELETE) {
      pushDeleteLine(diffs[i][1]);
      i += 1;
    }
    while (i !== iLength && diffs[i][0] === _cleanupSemantic$4.DIFF_INSERT) {
      pushInsertLine(diffs[i][1]);
      i += 1;
    }
  }
  if (hasPatch) {
    lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options2);
  }
  return lines.join("\n");
};
joinAlignedDiffs.joinAlignedDiffsNoExpand = joinAlignedDiffsNoExpand;
const joinAlignedDiffsExpand = (diffs, options2) => diffs.map((diff2, i, diffs2) => {
  const line2 = diff2[1];
  const isFirstOrLast = i === 0 || i === diffs2.length - 1;
  switch (diff2[0]) {
    case _cleanupSemantic$4.DIFF_DELETE:
      return printDeleteLine(line2, isFirstOrLast, options2);
    case _cleanupSemantic$4.DIFF_INSERT:
      return printInsertLine(line2, isFirstOrLast, options2);
    default:
      return printCommonLine(line2, isFirstOrLast, options2);
  }
}).join("\n");
joinAlignedDiffs.joinAlignedDiffsExpand = joinAlignedDiffsExpand;
var normalizeDiffOptions$1 = {};
Object.defineProperty(normalizeDiffOptions$1, "__esModule", {
  value: true
});
normalizeDiffOptions$1.normalizeDiffOptions = normalizeDiffOptions$1.noColor = void 0;
var _chalk$2 = _interopRequireDefault$5(source$1);
function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const noColor = (string2) => string2;
normalizeDiffOptions$1.noColor = noColor;
const DIFF_CONTEXT_DEFAULT = 5;
const OPTIONS_DEFAULT = {
  aAnnotation: "Expected",
  aColor: _chalk$2.default.green,
  aIndicator: "-",
  bAnnotation: "Received",
  bColor: _chalk$2.default.red,
  bIndicator: "+",
  changeColor: _chalk$2.default.inverse,
  changeLineTrailingSpaceColor: noColor,
  commonColor: _chalk$2.default.dim,
  commonIndicator: " ",
  commonLineTrailingSpaceColor: noColor,
  compareKeys: void 0,
  contextLines: DIFF_CONTEXT_DEFAULT,
  emptyFirstOrLastLinePlaceholder: "",
  expand: true,
  includeChangeCounts: false,
  omitAnnotationLines: false,
  patchColor: _chalk$2.default.yellow
};
const getCompareKeys = (compareKeys) => compareKeys && typeof compareKeys === "function" ? compareKeys : OPTIONS_DEFAULT.compareKeys;
const getContextLines = (contextLines) => typeof contextLines === "number" && Number.isSafeInteger(contextLines) && contextLines >= 0 ? contextLines : DIFF_CONTEXT_DEFAULT;
const normalizeDiffOptions = (options2 = {}) => ({
  ...OPTIONS_DEFAULT,
  ...options2,
  compareKeys: getCompareKeys(options2.compareKeys),
  contextLines: getContextLines(options2.contextLines)
});
normalizeDiffOptions$1.normalizeDiffOptions = normalizeDiffOptions;
Object.defineProperty(diffLines, "__esModule", {
  value: true
});
diffLines.printDiffLines = diffLines.diffLinesUnified2 = diffLines.diffLinesUnified = diffLines.diffLinesRaw = void 0;
var _diffSequences$1 = _interopRequireDefault$4(build$3);
var _cleanupSemantic$3 = cleanupSemantic;
var _joinAlignedDiffs = joinAlignedDiffs;
var _normalizeDiffOptions$1 = normalizeDiffOptions$1;
function _interopRequireDefault$4(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const isEmptyString$1 = (lines) => lines.length === 1 && lines[0].length === 0;
const countChanges = (diffs) => {
  let a = 0;
  let b = 0;
  diffs.forEach((diff2) => {
    switch (diff2[0]) {
      case _cleanupSemantic$3.DIFF_DELETE:
        a += 1;
        break;
      case _cleanupSemantic$3.DIFF_INSERT:
        b += 1;
        break;
    }
  });
  return {
    a,
    b
  };
};
const printAnnotation = ({
  aAnnotation,
  aColor,
  aIndicator,
  bAnnotation,
  bColor,
  bIndicator,
  includeChangeCounts,
  omitAnnotationLines
}, changeCounts) => {
  if (omitAnnotationLines) {
    return "";
  }
  let aRest = "";
  let bRest = "";
  if (includeChangeCounts) {
    const aCount = String(changeCounts.a);
    const bCount = String(changeCounts.b);
    const baAnnotationLengthDiff = bAnnotation.length - aAnnotation.length;
    const aAnnotationPadding = " ".repeat(Math.max(0, baAnnotationLengthDiff));
    const bAnnotationPadding = " ".repeat(Math.max(0, -baAnnotationLengthDiff));
    const baCountLengthDiff = bCount.length - aCount.length;
    const aCountPadding = " ".repeat(Math.max(0, baCountLengthDiff));
    const bCountPadding = " ".repeat(Math.max(0, -baCountLengthDiff));
    aRest = `${aAnnotationPadding}  ${aIndicator} ${aCountPadding}${aCount}`;
    bRest = `${bAnnotationPadding}  ${bIndicator} ${bCountPadding}${bCount}`;
  }
  const a = `${aIndicator} ${aAnnotation}${aRest}`;
  const b = `${bIndicator} ${bAnnotation}${bRest}`;
  return `${aColor(a)}
${bColor(b)}

`;
};
const printDiffLines = (diffs, options2) => printAnnotation(options2, countChanges(diffs)) + (options2.expand ? (0, _joinAlignedDiffs.joinAlignedDiffsExpand)(diffs, options2) : (0, _joinAlignedDiffs.joinAlignedDiffsNoExpand)(diffs, options2));
diffLines.printDiffLines = printDiffLines;
const diffLinesUnified = (aLines, bLines, options2) => printDiffLines(
  diffLinesRaw(
    isEmptyString$1(aLines) ? [] : aLines,
    isEmptyString$1(bLines) ? [] : bLines
  ),
  (0, _normalizeDiffOptions$1.normalizeDiffOptions)(options2)
);
diffLines.diffLinesUnified = diffLinesUnified;
const diffLinesUnified2 = (aLinesDisplay, bLinesDisplay, aLinesCompare, bLinesCompare, options2) => {
  if (isEmptyString$1(aLinesDisplay) && isEmptyString$1(aLinesCompare)) {
    aLinesDisplay = [];
    aLinesCompare = [];
  }
  if (isEmptyString$1(bLinesDisplay) && isEmptyString$1(bLinesCompare)) {
    bLinesDisplay = [];
    bLinesCompare = [];
  }
  if (aLinesDisplay.length !== aLinesCompare.length || bLinesDisplay.length !== bLinesCompare.length) {
    return diffLinesUnified(aLinesDisplay, bLinesDisplay, options2);
  }
  const diffs = diffLinesRaw(aLinesCompare, bLinesCompare);
  let aIndex = 0;
  let bIndex = 0;
  diffs.forEach((diff2) => {
    switch (diff2[0]) {
      case _cleanupSemantic$3.DIFF_DELETE:
        diff2[1] = aLinesDisplay[aIndex];
        aIndex += 1;
        break;
      case _cleanupSemantic$3.DIFF_INSERT:
        diff2[1] = bLinesDisplay[bIndex];
        bIndex += 1;
        break;
      default:
        diff2[1] = bLinesDisplay[bIndex];
        aIndex += 1;
        bIndex += 1;
    }
  });
  return printDiffLines(
    diffs,
    (0, _normalizeDiffOptions$1.normalizeDiffOptions)(options2)
  );
};
diffLines.diffLinesUnified2 = diffLinesUnified2;
const diffLinesRaw = (aLines, bLines) => {
  const aLength = aLines.length;
  const bLength = bLines.length;
  const isCommon = (aIndex2, bIndex2) => aLines[aIndex2] === bLines[bIndex2];
  const diffs = [];
  let aIndex = 0;
  let bIndex = 0;
  const foundSubsequence = (nCommon, aCommon, bCommon) => {
    for (; aIndex !== aCommon; aIndex += 1) {
      diffs.push(
        new _cleanupSemantic$3.Diff(_cleanupSemantic$3.DIFF_DELETE, aLines[aIndex])
      );
    }
    for (; bIndex !== bCommon; bIndex += 1) {
      diffs.push(
        new _cleanupSemantic$3.Diff(_cleanupSemantic$3.DIFF_INSERT, bLines[bIndex])
      );
    }
    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) {
      diffs.push(
        new _cleanupSemantic$3.Diff(_cleanupSemantic$3.DIFF_EQUAL, bLines[bIndex])
      );
    }
  };
  (0, _diffSequences$1.default)(aLength, bLength, isCommon, foundSubsequence);
  for (; aIndex !== aLength; aIndex += 1) {
    diffs.push(
      new _cleanupSemantic$3.Diff(_cleanupSemantic$3.DIFF_DELETE, aLines[aIndex])
    );
  }
  for (; bIndex !== bLength; bIndex += 1) {
    diffs.push(
      new _cleanupSemantic$3.Diff(_cleanupSemantic$3.DIFF_INSERT, bLines[bIndex])
    );
  }
  return diffs;
};
diffLines.diffLinesRaw = diffLinesRaw;
var printDiffs = {};
var diffStrings$1 = {};
Object.defineProperty(diffStrings$1, "__esModule", {
  value: true
});
diffStrings$1.default = void 0;
var _diffSequences = _interopRequireDefault$3(build$3);
var _cleanupSemantic$2 = cleanupSemantic;
function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const diffStrings = (a, b) => {
  const isCommon = (aIndex2, bIndex2) => a[aIndex2] === b[bIndex2];
  let aIndex = 0;
  let bIndex = 0;
  const diffs = [];
  const foundSubsequence = (nCommon, aCommon, bCommon) => {
    if (aIndex !== aCommon) {
      diffs.push(
        new _cleanupSemantic$2.Diff(
          _cleanupSemantic$2.DIFF_DELETE,
          a.slice(aIndex, aCommon)
        )
      );
    }
    if (bIndex !== bCommon) {
      diffs.push(
        new _cleanupSemantic$2.Diff(
          _cleanupSemantic$2.DIFF_INSERT,
          b.slice(bIndex, bCommon)
        )
      );
    }
    aIndex = aCommon + nCommon;
    bIndex = bCommon + nCommon;
    diffs.push(
      new _cleanupSemantic$2.Diff(
        _cleanupSemantic$2.DIFF_EQUAL,
        b.slice(bCommon, bIndex)
      )
    );
  };
  (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence);
  if (aIndex !== a.length) {
    diffs.push(
      new _cleanupSemantic$2.Diff(_cleanupSemantic$2.DIFF_DELETE, a.slice(aIndex))
    );
  }
  if (bIndex !== b.length) {
    diffs.push(
      new _cleanupSemantic$2.Diff(_cleanupSemantic$2.DIFF_INSERT, b.slice(bIndex))
    );
  }
  return diffs;
};
var _default$2 = diffStrings;
diffStrings$1.default = _default$2;
var getAlignedDiffs$1 = {};
Object.defineProperty(getAlignedDiffs$1, "__esModule", {
  value: true
});
getAlignedDiffs$1.default = void 0;
var _cleanupSemantic$1 = cleanupSemantic;
const concatenateRelevantDiffs = (op, diffs, changeColor) => diffs.reduce(
  (reduced, diff2) => reduced + (diff2[0] === _cleanupSemantic$1.DIFF_EQUAL ? diff2[1] : diff2[0] === op && diff2[1].length !== 0 ? changeColor(diff2[1]) : ""),
  ""
);
class ChangeBuffer {
  constructor(op, changeColor) {
    __publicField(this, "op");
    __publicField(this, "line");
    // incomplete line
    __publicField(this, "lines");
    // complete lines
    __publicField(this, "changeColor");
    this.op = op;
    this.line = [];
    this.lines = [];
    this.changeColor = changeColor;
  }
  pushSubstring(substring) {
    this.pushDiff(new _cleanupSemantic$1.Diff(this.op, substring));
  }
  pushLine() {
    this.lines.push(
      this.line.length !== 1 ? new _cleanupSemantic$1.Diff(
        this.op,
        concatenateRelevantDiffs(this.op, this.line, this.changeColor)
      ) : this.line[0][0] === this.op ? this.line[0] : new _cleanupSemantic$1.Diff(this.op, this.line[0][1])
      // was common diff
    );
    this.line.length = 0;
  }
  isLineEmpty() {
    return this.line.length === 0;
  }
  // Minor input to buffer.
  pushDiff(diff2) {
    this.line.push(diff2);
  }
  // Main input to buffer.
  align(diff2) {
    const string2 = diff2[1];
    if (string2.includes("\n")) {
      const substrings = string2.split("\n");
      const iLast = substrings.length - 1;
      substrings.forEach((substring, i) => {
        if (i < iLast) {
          this.pushSubstring(substring);
          this.pushLine();
        } else if (substring.length !== 0) {
          this.pushSubstring(substring);
        }
      });
    } else {
      this.pushDiff(diff2);
    }
  }
  // Output from buffer.
  moveLinesTo(lines) {
    if (!this.isLineEmpty()) {
      this.pushLine();
    }
    lines.push(...this.lines);
    this.lines.length = 0;
  }
}
class CommonBuffer {
  constructor(deleteBuffer, insertBuffer) {
    __publicField(this, "deleteBuffer");
    __publicField(this, "insertBuffer");
    __publicField(this, "lines");
    this.deleteBuffer = deleteBuffer;
    this.insertBuffer = insertBuffer;
    this.lines = [];
  }
  pushDiffCommonLine(diff2) {
    this.lines.push(diff2);
  }
  pushDiffChangeLines(diff2) {
    const isDiffEmpty = diff2[1].length === 0;
    if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {
      this.deleteBuffer.pushDiff(diff2);
    }
    if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {
      this.insertBuffer.pushDiff(diff2);
    }
  }
  flushChangeLines() {
    this.deleteBuffer.moveLinesTo(this.lines);
    this.insertBuffer.moveLinesTo(this.lines);
  }
  // Input to buffer.
  align(diff2) {
    const op = diff2[0];
    const string2 = diff2[1];
    if (string2.includes("\n")) {
      const substrings = string2.split("\n");
      const iLast = substrings.length - 1;
      substrings.forEach((substring, i) => {
        if (i === 0) {
          const subdiff = new _cleanupSemantic$1.Diff(op, substring);
          if (this.deleteBuffer.isLineEmpty() && this.insertBuffer.isLineEmpty()) {
            this.flushChangeLines();
            this.pushDiffCommonLine(subdiff);
          } else {
            this.pushDiffChangeLines(subdiff);
            this.flushChangeLines();
          }
        } else if (i < iLast) {
          this.pushDiffCommonLine(new _cleanupSemantic$1.Diff(op, substring));
        } else if (substring.length !== 0) {
          this.pushDiffChangeLines(new _cleanupSemantic$1.Diff(op, substring));
        }
      });
    } else {
      this.pushDiffChangeLines(diff2);
    }
  }
  // Output from buffer.
  getLines() {
    this.flushChangeLines();
    return this.lines;
  }
}
const getAlignedDiffs = (diffs, changeColor) => {
  const deleteBuffer = new ChangeBuffer(
    _cleanupSemantic$1.DIFF_DELETE,
    changeColor
  );
  const insertBuffer = new ChangeBuffer(
    _cleanupSemantic$1.DIFF_INSERT,
    changeColor
  );
  const commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);
  diffs.forEach((diff2) => {
    switch (diff2[0]) {
      case _cleanupSemantic$1.DIFF_DELETE:
        deleteBuffer.align(diff2);
        break;
      case _cleanupSemantic$1.DIFF_INSERT:
        insertBuffer.align(diff2);
        break;
      default:
        commonBuffer.align(diff2);
    }
  });
  return commonBuffer.getLines();
};
var _default$1 = getAlignedDiffs;
getAlignedDiffs$1.default = _default$1;
Object.defineProperty(printDiffs, "__esModule", {
  value: true
});
printDiffs.diffStringsUnified = printDiffs.diffStringsRaw = void 0;
var _cleanupSemantic = cleanupSemantic;
var _diffLines = diffLines;
var _diffStrings = _interopRequireDefault$2(diffStrings$1);
var _getAlignedDiffs = _interopRequireDefault$2(getAlignedDiffs$1);
var _normalizeDiffOptions = normalizeDiffOptions$1;
function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const hasCommonDiff = (diffs, isMultiline) => {
  if (isMultiline) {
    const iLast = diffs.length - 1;
    return diffs.some(
      (diff2, i) => diff2[0] === _cleanupSemantic.DIFF_EQUAL && (i !== iLast || diff2[1] !== "\n")
    );
  }
  return diffs.some((diff2) => diff2[0] === _cleanupSemantic.DIFF_EQUAL);
};
const diffStringsUnified = (a, b, options2) => {
  if (a !== b && a.length !== 0 && b.length !== 0) {
    const isMultiline = a.includes("\n") || b.includes("\n");
    const diffs = diffStringsRaw(
      isMultiline ? `${a}
` : a,
      isMultiline ? `${b}
` : b,
      true
      // cleanupSemantic
    );
    if (hasCommonDiff(diffs, isMultiline)) {
      const optionsNormalized = (0, _normalizeDiffOptions.normalizeDiffOptions)(
        options2
      );
      const lines = (0, _getAlignedDiffs.default)(
        diffs,
        optionsNormalized.changeColor
      );
      return (0, _diffLines.printDiffLines)(lines, optionsNormalized);
    }
  }
  return (0, _diffLines.diffLinesUnified)(
    a.split("\n"),
    b.split("\n"),
    options2
  );
};
printDiffs.diffStringsUnified = diffStringsUnified;
const diffStringsRaw = (a, b, cleanup) => {
  const diffs = (0, _diffStrings.default)(a, b);
  if (cleanup) {
    (0, _cleanupSemantic.cleanupSemantic)(diffs);
  }
  return diffs;
};
printDiffs.diffStringsRaw = diffStringsRaw;
(function(exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "DIFF_DELETE", {
    enumerable: true,
    get: function() {
      return _cleanupSemantic2.DIFF_DELETE;
    }
  });
  Object.defineProperty(exports, "DIFF_EQUAL", {
    enumerable: true,
    get: function() {
      return _cleanupSemantic2.DIFF_EQUAL;
    }
  });
  Object.defineProperty(exports, "DIFF_INSERT", {
    enumerable: true,
    get: function() {
      return _cleanupSemantic2.DIFF_INSERT;
    }
  });
  Object.defineProperty(exports, "Diff", {
    enumerable: true,
    get: function() {
      return _cleanupSemantic2.Diff;
    }
  });
  exports.diff = diff2;
  Object.defineProperty(exports, "diffLinesRaw", {
    enumerable: true,
    get: function() {
      return _diffLines2.diffLinesRaw;
    }
  });
  Object.defineProperty(exports, "diffLinesUnified", {
    enumerable: true,
    get: function() {
      return _diffLines2.diffLinesUnified;
    }
  });
  Object.defineProperty(exports, "diffLinesUnified2", {
    enumerable: true,
    get: function() {
      return _diffLines2.diffLinesUnified2;
    }
  });
  Object.defineProperty(exports, "diffStringsRaw", {
    enumerable: true,
    get: function() {
      return _printDiffs.diffStringsRaw;
    }
  });
  Object.defineProperty(exports, "diffStringsUnified", {
    enumerable: true,
    get: function() {
      return _printDiffs.diffStringsUnified;
    }
  });
  var _chalk2 = _interopRequireDefault2(source$1);
  var _jestGetType2 = build$7;
  var _prettyFormat2 = build$4;
  var _cleanupSemantic2 = cleanupSemantic;
  var _constants = constants$3;
  var _diffLines2 = diffLines;
  var _normalizeDiffOptions2 = normalizeDiffOptions$1;
  var _printDiffs = printDiffs;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var Symbol2 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
  const getCommonMessage = (message, options2) => {
    const { commonColor } = (0, _normalizeDiffOptions2.normalizeDiffOptions)(
      options2
    );
    return commonColor(message);
  };
  const {
    AsymmetricMatcher: AsymmetricMatcher2,
    DOMCollection: DOMCollection2,
    DOMElement: DOMElement2,
    Immutable: Immutable2,
    ReactElement: ReactElement2,
    ReactTestComponent: ReactTestComponent2
  } = _prettyFormat2.plugins;
  const PLUGINS2 = [
    ReactTestComponent2,
    ReactElement2,
    DOMElement2,
    DOMCollection2,
    Immutable2,
    AsymmetricMatcher2
  ];
  const FORMAT_OPTIONS = {
    plugins: PLUGINS2
  };
  const FALLBACK_FORMAT_OPTIONS = {
    callToJSON: false,
    maxDepth: 10,
    plugins: PLUGINS2
  };
  function diff2(a, b, options2) {
    if (Object.is(a, b)) {
      return getCommonMessage(_constants.NO_DIFF_MESSAGE, options2);
    }
    const aType = (0, _jestGetType2.getType)(a);
    let expectedType = aType;
    let omitDifference = false;
    if (aType === "object" && typeof a.asymmetricMatch === "function") {
      if (a.$$typeof !== Symbol2.for("jest.asymmetricMatcher")) {
        return null;
      }
      if (typeof a.getExpectedType !== "function") {
        return null;
      }
      expectedType = a.getExpectedType();
      omitDifference = expectedType === "string";
    }
    if (expectedType !== (0, _jestGetType2.getType)(b)) {
      return `  Comparing two different types of values. Expected ${_chalk2.default.green(expectedType)} but received ${_chalk2.default.red((0, _jestGetType2.getType)(b))}.`;
    }
    if (omitDifference) {
      return null;
    }
    switch (aType) {
      case "string":
        return (0, _diffLines2.diffLinesUnified)(
          a.split("\n"),
          b.split("\n"),
          options2
        );
      case "boolean":
      case "number":
        return comparePrimitive(a, b, options2);
      case "map":
        return compareObjects(sortMap(a), sortMap(b), options2);
      case "set":
        return compareObjects(sortSet(a), sortSet(b), options2);
      default:
        return compareObjects(a, b, options2);
    }
  }
  function comparePrimitive(a, b, options2) {
    const aFormat = (0, _prettyFormat2.format)(a, FORMAT_OPTIONS);
    const bFormat = (0, _prettyFormat2.format)(b, FORMAT_OPTIONS);
    return aFormat === bFormat ? getCommonMessage(_constants.NO_DIFF_MESSAGE, options2) : (0, _diffLines2.diffLinesUnified)(
      aFormat.split("\n"),
      bFormat.split("\n"),
      options2
    );
  }
  function sortMap(map) {
    return new Map(Array.from(map.entries()).sort());
  }
  function sortSet(set) {
    return new Set(Array.from(set.values()).sort());
  }
  function compareObjects(a, b, options2) {
    let difference;
    let hasThrown = false;
    try {
      const formatOptions = getFormatOptions(FORMAT_OPTIONS, options2);
      difference = getObjectsDifference(a, b, formatOptions, options2);
    } catch {
      hasThrown = true;
    }
    const noDiffMessage = getCommonMessage(_constants.NO_DIFF_MESSAGE, options2);
    if (difference === void 0 || difference === noDiffMessage) {
      const formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options2);
      difference = getObjectsDifference(a, b, formatOptions, options2);
      if (difference !== noDiffMessage && !hasThrown) {
        difference = `${getCommonMessage(
          _constants.SIMILAR_MESSAGE,
          options2
        )}

${difference}`;
      }
    }
    return difference;
  }
  function getFormatOptions(formatOptions, options2) {
    const { compareKeys } = (0, _normalizeDiffOptions2.normalizeDiffOptions)(
      options2
    );
    return {
      ...formatOptions,
      compareKeys
    };
  }
  function getObjectsDifference(a, b, formatOptions, options2) {
    const formatOptionsZeroIndent = {
      ...formatOptions,
      indent: 0
    };
    const aCompare = (0, _prettyFormat2.format)(a, formatOptionsZeroIndent);
    const bCompare = (0, _prettyFormat2.format)(b, formatOptionsZeroIndent);
    if (aCompare === bCompare) {
      return getCommonMessage(_constants.NO_DIFF_MESSAGE, options2);
    } else {
      const aDisplay = (0, _prettyFormat2.format)(a, formatOptions);
      const bDisplay = (0, _prettyFormat2.format)(b, formatOptions);
      return (0, _diffLines2.diffLinesUnified2)(
        aDisplay.split("\n"),
        bDisplay.split("\n"),
        aCompare.split("\n"),
        bCompare.split("\n"),
        options2
      );
    }
  }
})(build$5);
var Replaceable$1 = {};
Object.defineProperty(Replaceable$1, "__esModule", {
  value: true
});
Replaceable$1.default = void 0;
var _jestGetType$1 = build$7;
const supportTypes = ["map", "array", "object"];
class Replaceable {
  constructor(object) {
    __publicField(this, "object");
    __publicField(this, "type");
    this.object = object;
    this.type = (0, _jestGetType$1.getType)(object);
    if (!supportTypes.includes(this.type)) {
      throw new Error(`Type ${this.type} is not support in Replaceable!`);
    }
  }
  static isReplaceable(obj1, obj2) {
    const obj1Type = (0, _jestGetType$1.getType)(obj1);
    const obj2Type = (0, _jestGetType$1.getType)(obj2);
    return obj1Type === obj2Type && supportTypes.includes(obj1Type);
  }
  forEach(cb) {
    if (this.type === "object") {
      const descriptors = Object.getOwnPropertyDescriptors(this.object);
      [
        ...Object.keys(descriptors),
        ...Object.getOwnPropertySymbols(descriptors)
      ].filter((key2) => descriptors[key2].enumerable).forEach((key2) => {
        cb(this.object[key2], key2, this.object);
      });
    } else {
      this.object.forEach(cb);
    }
  }
  get(key2) {
    if (this.type === "map") {
      return this.object.get(key2);
    }
    return this.object[key2];
  }
  set(key2, value2) {
    if (this.type === "map") {
      this.object.set(key2, value2);
    } else {
      this.object[key2] = value2;
    }
  }
}
Replaceable$1.default = Replaceable;
var deepCyclicCopyReplaceable$1 = {};
Object.defineProperty(deepCyclicCopyReplaceable$1, "__esModule", {
  value: true
});
deepCyclicCopyReplaceable$1.default = deepCyclicCopyReplaceable;
var _prettyFormat$2 = build$4;
const builtInObject = [
  Array,
  Date,
  Float32Array,
  Float64Array,
  Int16Array,
  Int32Array,
  Int8Array,
  Map,
  Set,
  RegExp,
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray
];
if (typeof Buffer !== "undefined") {
  builtInObject.push(Buffer);
}
const isBuiltInObject = (object) => builtInObject.includes(object.constructor);
const isMap = (value2) => value2.constructor === Map;
function deepCyclicCopyReplaceable(value2, cycles = /* @__PURE__ */ new WeakMap()) {
  if (typeof value2 !== "object" || value2 === null) {
    return value2;
  } else if (cycles.has(value2)) {
    return cycles.get(value2);
  } else if (Array.isArray(value2)) {
    return deepCyclicCopyArray(value2, cycles);
  } else if (isMap(value2)) {
    return deepCyclicCopyMap(value2, cycles);
  } else if (isBuiltInObject(value2)) {
    return value2;
  } else if (_prettyFormat$2.plugins.DOMElement.test(value2)) {
    return value2.cloneNode(true);
  } else {
    return deepCyclicCopyObject(value2, cycles);
  }
}
function deepCyclicCopyObject(object, cycles) {
  const newObject = Object.create(Object.getPrototypeOf(object));
  let descriptors = {};
  let obj = object;
  do {
    descriptors = Object.assign(
      {},
      Object.getOwnPropertyDescriptors(obj),
      descriptors
    );
  } while ((obj = Object.getPrototypeOf(obj)) && obj !== Object.getPrototypeOf({}));
  cycles.set(object, newObject);
  const newDescriptors = [
    ...Object.keys(descriptors),
    ...Object.getOwnPropertySymbols(descriptors)
  ].reduce(
    //@ts-expect-error because typescript do not support symbol key in object
    //https://github.com/microsoft/TypeScript/issues/1863
    (newDescriptors2, key2) => {
      const enumerable = descriptors[key2].enumerable;
      newDescriptors2[key2] = {
        configurable: true,
        enumerable,
        value: deepCyclicCopyReplaceable(
          // this accesses the value or getter, depending. We just care about the value anyways, and this allows us to not mess with accessors
          // it has the side effect of invoking the getter here though, rather than copying it over
          object[key2],
          cycles
        ),
        writable: true
      };
      return newDescriptors2;
    },
    {}
  );
  return Object.defineProperties(newObject, newDescriptors);
}
function deepCyclicCopyArray(array2, cycles) {
  const newArray = new (Object.getPrototypeOf(array2)).constructor(array2.length);
  const length = array2.length;
  cycles.set(array2, newArray);
  for (let i = 0; i < length; i++) {
    newArray[i] = deepCyclicCopyReplaceable(array2[i], cycles);
  }
  return newArray;
}
function deepCyclicCopyMap(map, cycles) {
  const newMap = /* @__PURE__ */ new Map();
  cycles.set(map, newMap);
  map.forEach((value2, key2) => {
    newMap.set(key2, deepCyclicCopyReplaceable(value2, cycles));
  });
  return newMap;
}
Object.defineProperty(build$6, "__esModule", {
  value: true
});
var printReceived_1 = build$6.printReceived = printExpected_1 = build$6.printExpected = printDiffOrStringify_1 = build$6.printDiffOrStringify = pluralize_1 = build$6.pluralize = matcherHint_1 = build$6.matcherHint = matcherErrorMessage_1 = build$6.matcherErrorMessage = highlightTrailingWhitespace_1 = build$6.highlightTrailingWhitespace = getLabelPrinter_1 = build$6.getLabelPrinter = ensureNumbers_1 = build$6.ensureNumbers = ensureNoExpected_1 = build$6.ensureNoExpected = ensureExpectedIsNumber_1 = build$6.ensureExpectedIsNumber = ensureExpectedIsNonNegativeInteger_1 = build$6.ensureExpectedIsNonNegativeInteger = ensureActualIsNumber_1 = build$6.ensureActualIsNumber = diff_1 = build$6.diff = SUGGEST_TO_CONTAIN_EQUAL_1 = build$6.SUGGEST_TO_CONTAIN_EQUAL = RECEIVED_COLOR_1 = build$6.RECEIVED_COLOR = INVERTED_COLOR_1 = build$6.INVERTED_COLOR = EXPECTED_COLOR_1 = build$6.EXPECTED_COLOR = DIM_COLOR_1 = build$6.DIM_COLOR = BOLD_WEIGHT_1 = build$6.BOLD_WEIGHT = void 0;
var printWithType_1 = build$6.printWithType = printWithType;
var replaceMatchedToAsymmetricMatcher_1 = build$6.replaceMatchedToAsymmetricMatcher = replaceMatchedToAsymmetricMatcher;
var stringify_1 = build$6.stringify = void 0;
var _chalk$1 = _interopRequireDefault$1(source$1);
var _jestDiff = build$5;
var _jestGetType = build$7;
var _prettyFormat$1 = build$4;
var _Replaceable = _interopRequireDefault$1(Replaceable$1);
var _deepCyclicCopyReplaceable = _interopRequireDefault$1(
  deepCyclicCopyReplaceable$1
);
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const {
  AsymmetricMatcher: AsymmetricMatcher$1,
  DOMCollection,
  DOMElement,
  Immutable,
  ReactElement,
  ReactTestComponent
} = _prettyFormat$1.plugins;
const PLUGINS = [
  ReactTestComponent,
  ReactElement,
  DOMElement,
  DOMCollection,
  Immutable,
  AsymmetricMatcher$1
];
const EXPECTED_COLOR$1 = _chalk$1.default.green;
var EXPECTED_COLOR_1 = build$6.EXPECTED_COLOR = EXPECTED_COLOR$1;
const RECEIVED_COLOR$1 = _chalk$1.default.red;
var RECEIVED_COLOR_1 = build$6.RECEIVED_COLOR = RECEIVED_COLOR$1;
const INVERTED_COLOR$1 = _chalk$1.default.inverse;
var INVERTED_COLOR_1 = build$6.INVERTED_COLOR = INVERTED_COLOR$1;
const BOLD_WEIGHT = _chalk$1.default.bold;
var BOLD_WEIGHT_1 = build$6.BOLD_WEIGHT = BOLD_WEIGHT;
const DIM_COLOR = _chalk$1.default.dim;
var DIM_COLOR_1 = build$6.DIM_COLOR = DIM_COLOR;
const MULTILINE_REGEXP = /\n/;
const SPACE_SYMBOL = "·";
const NUMBERS = [
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "ten",
  "eleven",
  "twelve",
  "thirteen"
];
const SUGGEST_TO_CONTAIN_EQUAL = _chalk$1.default.dim(
  "Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead."
);
var SUGGEST_TO_CONTAIN_EQUAL_1 = build$6.SUGGEST_TO_CONTAIN_EQUAL = SUGGEST_TO_CONTAIN_EQUAL;
const stringify$6 = (object, maxDepth = 10, maxWidth = 10) => {
  const MAX_LENGTH2 = 1e4;
  let result;
  try {
    result = (0, _prettyFormat$1.format)(object, {
      maxDepth,
      maxWidth,
      min: true,
      plugins: PLUGINS
    });
  } catch {
    result = (0, _prettyFormat$1.format)(object, {
      callToJSON: false,
      maxDepth,
      maxWidth,
      min: true,
      plugins: PLUGINS
    });
  }
  if (result.length >= MAX_LENGTH2 && maxDepth > 1) {
    return stringify$6(object, Math.floor(maxDepth / 2), maxWidth);
  } else if (result.length >= MAX_LENGTH2 && maxWidth > 1) {
    return stringify$6(object, maxDepth, Math.floor(maxWidth / 2));
  } else {
    return result;
  }
};
stringify_1 = build$6.stringify = stringify$6;
const highlightTrailingWhitespace = (text2) => text2.replace(/\s+$/gm, _chalk$1.default.inverse("$&"));
var highlightTrailingWhitespace_1 = build$6.highlightTrailingWhitespace = highlightTrailingWhitespace;
const replaceTrailingSpaces = (text2) => text2.replace(/\s+$/gm, (spaces) => SPACE_SYMBOL.repeat(spaces.length));
const printReceived$1 = (object) => RECEIVED_COLOR$1(replaceTrailingSpaces(stringify$6(object)));
printReceived_1 = build$6.printReceived = printReceived$1;
const printExpected = (value2) => EXPECTED_COLOR$1(replaceTrailingSpaces(stringify$6(value2)));
var printExpected_1 = build$6.printExpected = printExpected;
function printWithType(name, value2, print) {
  const type = (0, _jestGetType.getType)(value2);
  const hasType = type !== "null" && type !== "undefined" ? `${name} has type:  ${type}
` : "";
  const hasValue = `${name} has value: ${print(value2)}`;
  return hasType + hasValue;
}
const ensureNoExpected = (expected, matcherName, options2) => {
  if (typeof expected !== "undefined") {
    const matcherString = (options2 ? "" : "[.not]") + matcherName;
    throw new Error(
      matcherErrorMessage(
        matcherHint(matcherString, void 0, "", options2),
        // Because expected is omitted in hint above,
        // expected is black instead of green in message below.
        "this matcher must not have an expected argument",
        printWithType("Expected", expected, printExpected)
      )
    );
  }
};
var ensureNoExpected_1 = build$6.ensureNoExpected = ensureNoExpected;
const ensureActualIsNumber = (actual, matcherName, options2) => {
  if (typeof actual !== "number" && typeof actual !== "bigint") {
    const matcherString = (options2 ? "" : "[.not]") + matcherName;
    throw new Error(
      matcherErrorMessage(
        matcherHint(matcherString, void 0, void 0, options2),
        `${RECEIVED_COLOR$1("received")} value must be a number or bigint`,
        printWithType("Received", actual, printReceived$1)
      )
    );
  }
};
var ensureActualIsNumber_1 = build$6.ensureActualIsNumber = ensureActualIsNumber;
const ensureExpectedIsNumber = (expected, matcherName, options2) => {
  if (typeof expected !== "number" && typeof expected !== "bigint") {
    const matcherString = (options2 ? "" : "[.not]") + matcherName;
    throw new Error(
      matcherErrorMessage(
        matcherHint(matcherString, void 0, void 0, options2),
        `${EXPECTED_COLOR$1("expected")} value must be a number or bigint`,
        printWithType("Expected", expected, printExpected)
      )
    );
  }
};
var ensureExpectedIsNumber_1 = build$6.ensureExpectedIsNumber = ensureExpectedIsNumber;
const ensureNumbers = (actual, expected, matcherName, options2) => {
  ensureActualIsNumber(actual, matcherName, options2);
  ensureExpectedIsNumber(expected, matcherName, options2);
};
var ensureNumbers_1 = build$6.ensureNumbers = ensureNumbers;
const ensureExpectedIsNonNegativeInteger = (expected, matcherName, options2) => {
  if (typeof expected !== "number" || !Number.isSafeInteger(expected) || expected < 0) {
    const matcherString = (options2 ? "" : "[.not]") + matcherName;
    throw new Error(
      matcherErrorMessage(
        matcherHint(matcherString, void 0, void 0, options2),
        `${EXPECTED_COLOR$1("expected")} value must be a non-negative integer`,
        printWithType("Expected", expected, printExpected)
      )
    );
  }
};
var ensureExpectedIsNonNegativeInteger_1 = build$6.ensureExpectedIsNonNegativeInteger = ensureExpectedIsNonNegativeInteger;
const getCommonAndChangedSubstrings = (diffs, op, hasCommonDiff2) => diffs.reduce(
  (reduced, diff2) => reduced + (diff2[0] === _jestDiff.DIFF_EQUAL ? diff2[1] : diff2[0] !== op ? "" : hasCommonDiff2 ? INVERTED_COLOR$1(diff2[1]) : diff2[1]),
  ""
);
const isLineDiffable = (expected, received) => {
  const expectedType = (0, _jestGetType.getType)(expected);
  const receivedType = (0, _jestGetType.getType)(received);
  if (expectedType !== receivedType) {
    return false;
  }
  if ((0, _jestGetType.isPrimitive)(expected)) {
    return typeof expected === "string" && typeof received === "string" && expected.length !== 0 && received.length !== 0 && (MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received));
  }
  if (expectedType === "date" || expectedType === "function" || expectedType === "regexp") {
    return false;
  }
  if (expected instanceof Error && received instanceof Error) {
    return false;
  }
  if (receivedType === "object" && typeof received.asymmetricMatch === "function") {
    return false;
  }
  return true;
};
const MAX_DIFF_STRING_LENGTH = 2e4;
const printDiffOrStringify = (expected, received, expectedLabel, receivedLabel, expand2) => {
  if (typeof expected === "string" && typeof received === "string" && expected.length !== 0 && received.length !== 0 && expected.length <= MAX_DIFF_STRING_LENGTH && received.length <= MAX_DIFF_STRING_LENGTH && expected !== received) {
    if (expected.includes("\n") || received.includes("\n")) {
      return (0, _jestDiff.diffStringsUnified)(expected, received, {
        aAnnotation: expectedLabel,
        bAnnotation: receivedLabel,
        changeLineTrailingSpaceColor: _chalk$1.default.bgYellow,
        commonLineTrailingSpaceColor: _chalk$1.default.bgYellow,
        emptyFirstOrLastLinePlaceholder: "↵",
        // U+21B5
        expand: expand2,
        includeChangeCounts: true
      });
    }
    const diffs = (0, _jestDiff.diffStringsRaw)(expected, received, true);
    const hasCommonDiff2 = diffs.some((diff2) => diff2[0] === _jestDiff.DIFF_EQUAL);
    const printLabel2 = getLabelPrinter(expectedLabel, receivedLabel);
    const expectedLine2 = printLabel2(expectedLabel) + printExpected(
      getCommonAndChangedSubstrings(
        diffs,
        _jestDiff.DIFF_DELETE,
        hasCommonDiff2
      )
    );
    const receivedLine2 = printLabel2(receivedLabel) + printReceived$1(
      getCommonAndChangedSubstrings(
        diffs,
        _jestDiff.DIFF_INSERT,
        hasCommonDiff2
      )
    );
    return `${expectedLine2}
${receivedLine2}`;
  }
  if (isLineDiffable(expected, received)) {
    const { replacedExpected, replacedReceived } = replaceMatchedToAsymmetricMatcher(expected, received, [], []);
    const difference = (0, _jestDiff.diff)(replacedExpected, replacedReceived, {
      aAnnotation: expectedLabel,
      bAnnotation: receivedLabel,
      expand: expand2,
      includeChangeCounts: true
    });
    if (typeof difference === "string" && difference.includes(`- ${expectedLabel}`) && difference.includes(`+ ${receivedLabel}`)) {
      return difference;
    }
  }
  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);
  const expectedLine = printLabel(expectedLabel) + printExpected(expected);
  const receivedLine = printLabel(receivedLabel) + (stringify$6(expected) === stringify$6(received) ? "serializes to the same string" : printReceived$1(received));
  return `${expectedLine}
${receivedLine}`;
};
var printDiffOrStringify_1 = build$6.printDiffOrStringify = printDiffOrStringify;
const shouldPrintDiff = (actual, expected) => {
  if (typeof actual === "number" && typeof expected === "number") {
    return false;
  }
  if (typeof actual === "bigint" && typeof expected === "bigint") {
    return false;
  }
  if (typeof actual === "boolean" && typeof expected === "boolean") {
    return false;
  }
  return true;
};
function replaceMatchedToAsymmetricMatcher(replacedExpected, replacedReceived, expectedCycles, receivedCycles) {
  return _replaceMatchedToAsymmetricMatcher(
    (0, _deepCyclicCopyReplaceable.default)(replacedExpected),
    (0, _deepCyclicCopyReplaceable.default)(replacedReceived),
    expectedCycles,
    receivedCycles
  );
}
function _replaceMatchedToAsymmetricMatcher(replacedExpected, replacedReceived, expectedCycles, receivedCycles) {
  if (!_Replaceable.default.isReplaceable(replacedExpected, replacedReceived)) {
    return {
      replacedExpected,
      replacedReceived
    };
  }
  if (expectedCycles.includes(replacedExpected) || receivedCycles.includes(replacedReceived)) {
    return {
      replacedExpected,
      replacedReceived
    };
  }
  expectedCycles.push(replacedExpected);
  receivedCycles.push(replacedReceived);
  const expectedReplaceable = new _Replaceable.default(replacedExpected);
  const receivedReplaceable = new _Replaceable.default(replacedReceived);
  expectedReplaceable.forEach((expectedValue, key2) => {
    const receivedValue = receivedReplaceable.get(key2);
    if (isAsymmetricMatcher(expectedValue)) {
      if (expectedValue.asymmetricMatch(receivedValue)) {
        receivedReplaceable.set(key2, expectedValue);
      }
    } else if (isAsymmetricMatcher(receivedValue)) {
      if (receivedValue.asymmetricMatch(expectedValue)) {
        expectedReplaceable.set(key2, receivedValue);
      }
    } else if (_Replaceable.default.isReplaceable(expectedValue, receivedValue)) {
      const replaced = _replaceMatchedToAsymmetricMatcher(
        expectedValue,
        receivedValue,
        expectedCycles,
        receivedCycles
      );
      expectedReplaceable.set(key2, replaced.replacedExpected);
      receivedReplaceable.set(key2, replaced.replacedReceived);
    }
  });
  return {
    replacedExpected: expectedReplaceable.object,
    replacedReceived: receivedReplaceable.object
  };
}
function isAsymmetricMatcher(data) {
  const type = (0, _jestGetType.getType)(data);
  return type === "object" && typeof data.asymmetricMatch === "function";
}
const diff = (a, b, options2) => shouldPrintDiff(a, b) ? (0, _jestDiff.diff)(a, b, options2) : null;
var diff_1 = build$6.diff = diff;
const pluralize$1 = (word, count) => `${NUMBERS[count] || count} ${word}${count === 1 ? "" : "s"}`;
var pluralize_1 = build$6.pluralize = pluralize$1;
const getLabelPrinter = (...strings) => {
  const maxLength = strings.reduce(
    (max, string2) => string2.length > max ? string2.length : max,
    0
  );
  return (string2) => `${string2}: ${" ".repeat(maxLength - string2.length)}`;
};
var getLabelPrinter_1 = build$6.getLabelPrinter = getLabelPrinter;
const matcherErrorMessage = (hint, generic, specific) => `${hint}

${_chalk$1.default.bold("Matcher error")}: ${generic}${typeof specific === "string" ? `

${specific}` : ""}`;
var matcherErrorMessage_1 = build$6.matcherErrorMessage = matcherErrorMessage;
const matcherHint = (matcherName, received = "received", expected = "expected", options2 = {}) => {
  const {
    comment = "",
    expectedColor = EXPECTED_COLOR$1,
    isDirectExpectCall = false,
    // seems redundant with received === ''
    isNot = false,
    promise = "",
    receivedColor = RECEIVED_COLOR$1,
    secondArgument = "",
    secondArgumentColor = EXPECTED_COLOR$1
  } = options2;
  let hint = "";
  let dimString = "expect";
  if (!isDirectExpectCall && received !== "") {
    hint += DIM_COLOR(`${dimString}(`) + receivedColor(received);
    dimString = ")";
  }
  if (promise !== "") {
    hint += DIM_COLOR(`${dimString}.`) + promise;
    dimString = "";
  }
  if (isNot) {
    hint += `${DIM_COLOR(`${dimString}.`)}not`;
    dimString = "";
  }
  if (matcherName.includes(".")) {
    dimString += matcherName;
  } else {
    hint += DIM_COLOR(`${dimString}.`) + matcherName;
    dimString = "";
  }
  if (expected === "") {
    dimString += "()";
  } else {
    hint += DIM_COLOR(`${dimString}(`) + expectedColor(expected);
    if (secondArgument) {
      hint += DIM_COLOR(", ") + secondArgumentColor(secondArgument);
    }
    dimString = ")";
  }
  if (comment !== "") {
    dimString += ` // ${comment}`;
  }
  if (dimString !== "") {
    hint += DIM_COLOR(dimString);
  }
  return hint;
};
var matcherHint_1 = build$6.matcherHint = matcherHint;
const matcherUtils$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  get BOLD_WEIGHT() {
    return BOLD_WEIGHT_1;
  },
  get DIM_COLOR() {
    return DIM_COLOR_1;
  },
  get EXPECTED_COLOR() {
    return EXPECTED_COLOR_1;
  },
  get INVERTED_COLOR() {
    return INVERTED_COLOR_1;
  },
  get RECEIVED_COLOR() {
    return RECEIVED_COLOR_1;
  },
  get SUGGEST_TO_CONTAIN_EQUAL() {
    return SUGGEST_TO_CONTAIN_EQUAL_1;
  },
  default: build$6,
  get diff() {
    return diff_1;
  },
  get ensureActualIsNumber() {
    return ensureActualIsNumber_1;
  },
  get ensureExpectedIsNonNegativeInteger() {
    return ensureExpectedIsNonNegativeInteger_1;
  },
  get ensureExpectedIsNumber() {
    return ensureExpectedIsNumber_1;
  },
  get ensureNoExpected() {
    return ensureNoExpected_1;
  },
  get ensureNumbers() {
    return ensureNumbers_1;
  },
  get getLabelPrinter() {
    return getLabelPrinter_1;
  },
  get highlightTrailingWhitespace() {
    return highlightTrailingWhitespace_1;
  },
  get matcherErrorMessage() {
    return matcherErrorMessage_1;
  },
  get matcherHint() {
    return matcherHint_1;
  },
  get pluralize() {
    return pluralize_1;
  },
  get printDiffOrStringify() {
    return printDiffOrStringify_1;
  },
  get printExpected() {
    return printExpected_1;
  },
  get printReceived() {
    return printReceived_1;
  },
  printWithType: printWithType_1,
  replaceMatchedToAsymmetricMatcher: replaceMatchedToAsymmetricMatcher_1,
  get stringify() {
    return stringify_1;
  }
}, [build$6]);
var build$2 = {};
var preRunMessage = {};
var clearLine = {};
var hasRequiredClearLine;
function requireClearLine() {
  if (hasRequiredClearLine) return clearLine;
  hasRequiredClearLine = 1;
  Object.defineProperty(clearLine, "__esModule", {
    value: true
  });
  clearLine.default = clearLine$1;
  function clearLine$1(stream) {
    if (stream.isTTY) {
      stream.write("\x1B[999D\x1B[K");
    }
  }
  return clearLine;
}
var isInteractive = {};
var ciInfo = {};
const require$$0$8 = [
  {
    name: "Appcircle",
    constant: "APPCIRCLE",
    env: "AC_APPCIRCLE"
  },
  {
    name: "AppVeyor",
    constant: "APPVEYOR",
    env: "APPVEYOR",
    pr: "APPVEYOR_PULL_REQUEST_NUMBER"
  },
  {
    name: "AWS CodeBuild",
    constant: "CODEBUILD",
    env: "CODEBUILD_BUILD_ARN"
  },
  {
    name: "Azure Pipelines",
    constant: "AZURE_PIPELINES",
    env: "TF_BUILD",
    pr: {
      BUILD_REASON: "PullRequest"
    }
  },
  {
    name: "Bamboo",
    constant: "BAMBOO",
    env: "bamboo_planKey"
  },
  {
    name: "Bitbucket Pipelines",
    constant: "BITBUCKET",
    env: "BITBUCKET_COMMIT",
    pr: "BITBUCKET_PR_ID"
  },
  {
    name: "Bitrise",
    constant: "BITRISE",
    env: "BITRISE_IO",
    pr: "BITRISE_PULL_REQUEST"
  },
  {
    name: "Buddy",
    constant: "BUDDY",
    env: "BUDDY_WORKSPACE_ID",
    pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
  },
  {
    name: "Buildkite",
    constant: "BUILDKITE",
    env: "BUILDKITE",
    pr: {
      env: "BUILDKITE_PULL_REQUEST",
      ne: "false"
    }
  },
  {
    name: "CircleCI",
    constant: "CIRCLE",
    env: "CIRCLECI",
    pr: "CIRCLE_PULL_REQUEST"
  },
  {
    name: "Cirrus CI",
    constant: "CIRRUS",
    env: "CIRRUS_CI",
    pr: "CIRRUS_PR"
  },
  {
    name: "Codefresh",
    constant: "CODEFRESH",
    env: "CF_BUILD_ID",
    pr: {
      any: [
        "CF_PULL_REQUEST_NUMBER",
        "CF_PULL_REQUEST_ID"
      ]
    }
  },
  {
    name: "Codemagic",
    constant: "CODEMAGIC",
    env: "CM_BUILD_ID",
    pr: "CM_PULL_REQUEST"
  },
  {
    name: "Codeship",
    constant: "CODESHIP",
    env: {
      CI_NAME: "codeship"
    }
  },
  {
    name: "Drone",
    constant: "DRONE",
    env: "DRONE",
    pr: {
      DRONE_BUILD_EVENT: "pull_request"
    }
  },
  {
    name: "dsari",
    constant: "DSARI",
    env: "DSARI"
  },
  {
    name: "Expo Application Services",
    constant: "EAS",
    env: "EAS_BUILD"
  },
  {
    name: "Gerrit",
    constant: "GERRIT",
    env: "GERRIT_PROJECT"
  },
  {
    name: "GitHub Actions",
    constant: "GITHUB_ACTIONS",
    env: "GITHUB_ACTIONS",
    pr: {
      GITHUB_EVENT_NAME: "pull_request"
    }
  },
  {
    name: "GitLab CI",
    constant: "GITLAB",
    env: "GITLAB_CI",
    pr: "CI_MERGE_REQUEST_ID"
  },
  {
    name: "GoCD",
    constant: "GOCD",
    env: "GO_PIPELINE_LABEL"
  },
  {
    name: "Google Cloud Build",
    constant: "GOOGLE_CLOUD_BUILD",
    env: "BUILDER_OUTPUT"
  },
  {
    name: "Harness CI",
    constant: "HARNESS",
    env: "HARNESS_BUILD_ID"
  },
  {
    name: "Heroku",
    constant: "HEROKU",
    env: {
      env: "NODE",
      includes: "/app/.heroku/node/bin/node"
    }
  },
  {
    name: "Hudson",
    constant: "HUDSON",
    env: "HUDSON_URL"
  },
  {
    name: "Jenkins",
    constant: "JENKINS",
    env: [
      "JENKINS_URL",
      "BUILD_ID"
    ],
    pr: {
      any: [
        "ghprbPullId",
        "CHANGE_ID"
      ]
    }
  },
  {
    name: "LayerCI",
    constant: "LAYERCI",
    env: "LAYERCI",
    pr: "LAYERCI_PULL_REQUEST"
  },
  {
    name: "Magnum CI",
    constant: "MAGNUM",
    env: "MAGNUM"
  },
  {
    name: "Netlify CI",
    constant: "NETLIFY",
    env: "NETLIFY",
    pr: {
      env: "PULL_REQUEST",
      ne: "false"
    }
  },
  {
    name: "Nevercode",
    constant: "NEVERCODE",
    env: "NEVERCODE",
    pr: {
      env: "NEVERCODE_PULL_REQUEST",
      ne: "false"
    }
  },
  {
    name: "ReleaseHub",
    constant: "RELEASEHUB",
    env: "RELEASE_BUILD_ID"
  },
  {
    name: "Render",
    constant: "RENDER",
    env: "RENDER",
    pr: {
      IS_PULL_REQUEST: "true"
    }
  },
  {
    name: "Sail CI",
    constant: "SAIL",
    env: "SAILCI",
    pr: "SAIL_PULL_REQUEST_NUMBER"
  },
  {
    name: "Screwdriver",
    constant: "SCREWDRIVER",
    env: "SCREWDRIVER",
    pr: {
      env: "SD_PULL_REQUEST",
      ne: "false"
    }
  },
  {
    name: "Semaphore",
    constant: "SEMAPHORE",
    env: "SEMAPHORE",
    pr: "PULL_REQUEST_NUMBER"
  },
  {
    name: "Shippable",
    constant: "SHIPPABLE",
    env: "SHIPPABLE",
    pr: {
      IS_PULL_REQUEST: "true"
    }
  },
  {
    name: "Solano CI",
    constant: "SOLANO",
    env: "TDDIUM",
    pr: "TDDIUM_PR_ID"
  },
  {
    name: "Sourcehut",
    constant: "SOURCEHUT",
    env: {
      CI_NAME: "sourcehut"
    }
  },
  {
    name: "Strider CD",
    constant: "STRIDER",
    env: "STRIDER"
  },
  {
    name: "TaskCluster",
    constant: "TASKCLUSTER",
    env: [
      "TASK_ID",
      "RUN_ID"
    ]
  },
  {
    name: "TeamCity",
    constant: "TEAMCITY",
    env: "TEAMCITY_VERSION"
  },
  {
    name: "Travis CI",
    constant: "TRAVIS",
    env: "TRAVIS",
    pr: {
      env: "TRAVIS_PULL_REQUEST",
      ne: "false"
    }
  },
  {
    name: "Vercel",
    constant: "VERCEL",
    env: {
      any: [
        "NOW_BUILDER",
        "VERCEL"
      ]
    },
    pr: "VERCEL_GIT_PULL_REQUEST_ID"
  },
  {
    name: "Visual Studio App Center",
    constant: "APPCENTER",
    env: "APPCENTER_BUILD_ID"
  },
  {
    name: "Woodpecker",
    constant: "WOODPECKER",
    env: {
      CI: "woodpecker"
    },
    pr: {
      CI_BUILD_EVENT: "pull_request"
    }
  },
  {
    name: "Xcode Cloud",
    constant: "XCODE_CLOUD",
    env: "CI_XCODE_PROJECT",
    pr: "CI_PULL_REQUEST_NUMBER"
  },
  {
    name: "Xcode Server",
    constant: "XCODE_SERVER",
    env: "XCS"
  }
];
var hasRequiredCiInfo;
function requireCiInfo() {
  if (hasRequiredCiInfo) return ciInfo;
  hasRequiredCiInfo = 1;
  (function(exports) {
    const vendors = require$$0$8;
    const env = process.env;
    Object.defineProperty(exports, "_vendors", {
      value: vendors.map(function(v) {
        return v.constant;
      })
    });
    exports.name = null;
    exports.isPR = null;
    vendors.forEach(function(vendor) {
      const envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
      const isCI = envs.every(function(obj) {
        return checkEnv(obj);
      });
      exports[vendor.constant] = isCI;
      if (!isCI) {
        return;
      }
      exports.name = vendor.name;
      switch (typeof vendor.pr) {
        case "string":
          exports.isPR = !!env[vendor.pr];
          break;
        case "object":
          if ("env" in vendor.pr) {
            exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
          } else if ("any" in vendor.pr) {
            exports.isPR = vendor.pr.any.some(function(key2) {
              return !!env[key2];
            });
          } else {
            exports.isPR = checkEnv(vendor.pr);
          }
          break;
        default:
          exports.isPR = null;
      }
    });
    exports.isCI = !!(env.CI !== "false" && // Bypass all checks if CI env is explicitly set to 'false'
    (env.BUILD_ID || // Jenkins, Cloudbees
    env.BUILD_NUMBER || // Jenkins, TeamCity
    env.CI || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari
    env.CI_APP_ID || // Appflow
    env.CI_BUILD_ID || // Appflow
    env.CI_BUILD_NUMBER || // Appflow
    env.CI_NAME || // Codeship and others
    env.CONTINUOUS_INTEGRATION || // Travis CI, Cirrus CI
    env.RUN_ID || // TaskCluster, dsari
    exports.name || false));
    function checkEnv(obj) {
      if (typeof obj === "string") return !!env[obj];
      if ("env" in obj) {
        return env[obj.env] && env[obj.env].includes(obj.includes);
      }
      if ("any" in obj) {
        return obj.any.some(function(k) {
          return !!env[k];
        });
      }
      return Object.keys(obj).every(function(k) {
        return env[k] === obj[k];
      });
    }
  })(ciInfo);
  return ciInfo;
}
var hasRequiredIsInteractive;
function requireIsInteractive() {
  if (hasRequiredIsInteractive) return isInteractive;
  hasRequiredIsInteractive = 1;
  Object.defineProperty(isInteractive, "__esModule", {
    value: true
  });
  isInteractive.default = void 0;
  function _ciInfo() {
    const data = requireCiInfo();
    _ciInfo = function() {
      return data;
    };
    return data;
  }
  var _default2 = !!process.stdout.isTTY && process.env.TERM !== "dumb" && !_ciInfo().isCI;
  isInteractive.default = _default2;
  return isInteractive;
}
var hasRequiredPreRunMessage;
function requirePreRunMessage() {
  if (hasRequiredPreRunMessage) return preRunMessage;
  hasRequiredPreRunMessage = 1;
  Object.defineProperty(preRunMessage, "__esModule", {
    value: true
  });
  preRunMessage.print = print;
  preRunMessage.remove = remove;
  function _chalk2() {
    const data = _interopRequireDefault2(source$1);
    _chalk2 = function() {
      return data;
    };
    return data;
  }
  var _clearLine = _interopRequireDefault2(requireClearLine());
  var _isInteractive = _interopRequireDefault2(requireIsInteractive());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function print(stream) {
    if (_isInteractive.default) {
      stream.write(
        _chalk2().default.bold.dim("Determining test suites to run...")
      );
    }
  }
  function remove(stream) {
    if (_isInteractive.default) {
      (0, _clearLine.default)(stream);
    }
  }
  return preRunMessage;
}
var specialChars = {};
var hasRequiredSpecialChars;
function requireSpecialChars() {
  if (hasRequiredSpecialChars) return specialChars;
  hasRequiredSpecialChars = 1;
  Object.defineProperty(specialChars, "__esModule", {
    value: true
  });
  specialChars.ICONS = specialChars.CLEAR = specialChars.ARROW = void 0;
  const isWindows = process.platform === "win32";
  const ARROW = " › ";
  specialChars.ARROW = ARROW;
  const ICONS = {
    failed: isWindows ? "×" : "✕",
    pending: "○",
    success: isWindows ? "√" : "✓",
    todo: "✎"
  };
  specialChars.ICONS = ICONS;
  const CLEAR = isWindows ? "\x1B[2J\x1B[0f" : "\x1B[2J\x1B[3J\x1B[H";
  specialChars.CLEAR = CLEAR;
  return specialChars;
}
var createDirectory = {};
var hasRequiredCreateDirectory;
function requireCreateDirectory() {
  if (hasRequiredCreateDirectory) return createDirectory;
  hasRequiredCreateDirectory = 1;
  Object.defineProperty(createDirectory, "__esModule", {
    value: true
  });
  createDirectory.default = createDirectory$1;
  function fs2() {
    const data = _interopRequireWildcard2(require$$2$1);
    fs2 = function() {
      return data;
    };
    return data;
  }
  function _getRequireWildcardCache2(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard2(obj, nodeInterop) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache2 = _getRequireWildcardCache2(nodeInterop);
    if (cache2 && cache2.has(obj)) {
      return cache2.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key2 in obj) {
      if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key2, desc);
        } else {
          newObj[key2] = obj[key2];
        }
      }
    }
    newObj.default = obj;
    if (cache2) {
      cache2.set(obj, newObj);
    }
    return newObj;
  }
  function createDirectory$1(path2) {
    try {
      fs2().mkdirSync(path2, {
        recursive: true
      });
    } catch (e) {
      if (e.code !== "EEXIST") {
        throw e;
      }
    }
  }
  return createDirectory;
}
var ErrorWithStack = {};
var hasRequiredErrorWithStack;
function requireErrorWithStack() {
  if (hasRequiredErrorWithStack) return ErrorWithStack;
  hasRequiredErrorWithStack = 1;
  Object.defineProperty(ErrorWithStack, "__esModule", {
    value: true
  });
  ErrorWithStack.default = void 0;
  let ErrorWithStack$1 = class ErrorWithStack extends Error {
    constructor(message, callsite, stackLimit) {
      const originalStackLimit = Error.stackTraceLimit;
      if (stackLimit) {
        Error.stackTraceLimit = Math.max(stackLimit, originalStackLimit || 10);
      }
      super(message);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, callsite);
      }
      Error.stackTraceLimit = originalStackLimit;
    }
  };
  ErrorWithStack.default = ErrorWithStack$1;
  return ErrorWithStack;
}
var installCommonGlobals = {};
var createProcessObject = {};
var deepCyclicCopy = {};
var hasRequiredDeepCyclicCopy;
function requireDeepCyclicCopy() {
  if (hasRequiredDeepCyclicCopy) return deepCyclicCopy;
  hasRequiredDeepCyclicCopy = 1;
  Object.defineProperty(deepCyclicCopy, "__esModule", {
    value: true
  });
  deepCyclicCopy.default = deepCyclicCopy$1;
  const EMPTY = /* @__PURE__ */ new Set();
  function deepCyclicCopy$1(value2, options2 = {
    blacklist: EMPTY,
    keepPrototype: false
  }, cycles = /* @__PURE__ */ new WeakMap()) {
    if (typeof value2 !== "object" || value2 === null || Buffer.isBuffer(value2)) {
      return value2;
    } else if (cycles.has(value2)) {
      return cycles.get(value2);
    } else if (Array.isArray(value2)) {
      return deepCyclicCopyArray2(value2, options2, cycles);
    } else {
      return deepCyclicCopyObject2(value2, options2, cycles);
    }
  }
  function deepCyclicCopyObject2(object, options2, cycles) {
    const newObject = options2.keepPrototype ? Object.create(Object.getPrototypeOf(object)) : {};
    const descriptors = Object.getOwnPropertyDescriptors(object);
    cycles.set(object, newObject);
    Object.keys(descriptors).forEach((key2) => {
      if (options2.blacklist && options2.blacklist.has(key2)) {
        delete descriptors[key2];
        return;
      }
      const descriptor = descriptors[key2];
      if (typeof descriptor.value !== "undefined") {
        descriptor.value = deepCyclicCopy$1(
          descriptor.value,
          {
            blacklist: EMPTY,
            keepPrototype: options2.keepPrototype
          },
          cycles
        );
      }
      descriptor.configurable = true;
    });
    return Object.defineProperties(newObject, descriptors);
  }
  function deepCyclicCopyArray2(array2, options2, cycles) {
    const newArray = options2.keepPrototype ? new (Object.getPrototypeOf(array2)).constructor(array2.length) : [];
    const length = array2.length;
    cycles.set(array2, newArray);
    for (let i = 0; i < length; i++) {
      newArray[i] = deepCyclicCopy$1(
        array2[i],
        {
          blacklist: EMPTY,
          keepPrototype: options2.keepPrototype
        },
        cycles
      );
    }
    return newArray;
  }
  return deepCyclicCopy;
}
var hasRequiredCreateProcessObject;
function requireCreateProcessObject() {
  if (hasRequiredCreateProcessObject) return createProcessObject;
  hasRequiredCreateProcessObject = 1;
  Object.defineProperty(createProcessObject, "__esModule", {
    value: true
  });
  createProcessObject.default = createProcessObject$1;
  var _deepCyclicCopy = _interopRequireDefault2(requireDeepCyclicCopy());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const BLACKLIST = /* @__PURE__ */ new Set(["env", "mainModule", "_events"]);
  const isWin32 = process.platform === "win32";
  const proto2 = Object.getPrototypeOf(process.env);
  function createProcessEnv() {
    const real = Object.create(proto2);
    const lookup = {};
    function deletePropertyWin32(_target, key2) {
      for (const name in real) {
        if (Object.prototype.hasOwnProperty.call(real, name)) {
          if (typeof key2 === "string") {
            if (name.toLowerCase() === key2.toLowerCase()) {
              delete real[name];
              delete lookup[name.toLowerCase()];
            }
          } else {
            if (key2 === name) {
              delete real[name];
              delete lookup[name];
            }
          }
        }
      }
      return true;
    }
    function deleteProperty(_target, key2) {
      delete real[key2];
      delete lookup[key2];
      return true;
    }
    function getProperty(_target, key2) {
      return real[key2];
    }
    function getPropertyWin32(_target, key2) {
      if (typeof key2 === "string") {
        return lookup[key2 in proto2 ? key2 : key2.toLowerCase()];
      } else {
        return real[key2];
      }
    }
    const proxy = new Proxy(real, {
      deleteProperty: isWin32 ? deletePropertyWin32 : deleteProperty,
      get: isWin32 ? getPropertyWin32 : getProperty,
      set(_target, key2, value2) {
        const strValue = `${value2}`;
        if (typeof key2 === "string") {
          lookup[key2.toLowerCase()] = strValue;
        }
        real[key2] = strValue;
        return true;
      }
    });
    return Object.assign(proxy, process.env);
  }
  function createProcessObject$1() {
    const process2 = browserExports;
    const newProcess = (0, _deepCyclicCopy.default)(process2, {
      blacklist: BLACKLIST,
      keepPrototype: true
    });
    try {
      newProcess[Symbol.toStringTag] = "process";
    } catch (e) {
      if (newProcess[Symbol.toStringTag] !== "process") {
        e.message = `Unable to set toStringTag on process. Please open up an issue at https://github.com/jestjs/jest

${e.message}`;
        throw e;
      }
    }
    let proto3 = process2;
    while (proto3 = Object.getPrototypeOf(proto3)) {
      if (typeof proto3.constructor === "function") {
        proto3.constructor.call(newProcess);
      }
    }
    newProcess.env = createProcessEnv();
    newProcess.send = () => true;
    Object.defineProperty(newProcess, "domain", {
      get() {
        return process2.domain;
      }
    });
    return newProcess;
  }
  return createProcessObject;
}
var hasRequiredInstallCommonGlobals;
function requireInstallCommonGlobals() {
  if (hasRequiredInstallCommonGlobals) return installCommonGlobals;
  hasRequiredInstallCommonGlobals = 1;
  Object.defineProperty(installCommonGlobals, "__esModule", {
    value: true
  });
  installCommonGlobals.default = installCommonGlobals$1;
  function fs2() {
    const data = _interopRequireWildcard2(require$$2$1);
    fs2 = function() {
      return data;
    };
    return data;
  }
  var _createProcessObject = _interopRequireDefault2(
    requireCreateProcessObject()
  );
  var _deepCyclicCopy = _interopRequireDefault2(requireDeepCyclicCopy());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache2(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard2(obj, nodeInterop) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache2 = _getRequireWildcardCache2(nodeInterop);
    if (cache2 && cache2.has(obj)) {
      return cache2.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key2 in obj) {
      if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key2, desc);
        } else {
          newObj[key2] = obj[key2];
        }
      }
    }
    newObj.default = obj;
    if (cache2) {
      cache2.set(obj, newObj);
    }
    return newObj;
  }
  const DTRACE = Object.keys(globalThis).filter((key2) => key2.startsWith("DTRACE"));
  function installCommonGlobals$1(globalObject, globals2) {
    globalObject.process = (0, _createProcessObject.default)();
    const symbol = globalObject.Symbol;
    Object.defineProperties(globalObject, {
      [symbol.for("jest-native-promise")]: {
        enumerable: false,
        value: Promise,
        writable: false
      },
      [symbol.for("jest-native-now")]: {
        enumerable: false,
        value: globalObject.Date.now.bind(globalObject.Date),
        writable: false
      },
      [symbol.for("jest-native-read-file")]: {
        enumerable: false,
        value: fs2().readFileSync.bind(fs2()),
        writable: false
      },
      [symbol.for("jest-native-write-file")]: {
        enumerable: false,
        value: fs2().writeFileSync.bind(fs2()),
        writable: false
      },
      [symbol.for("jest-native-exists-file")]: {
        enumerable: false,
        value: fs2().existsSync.bind(fs2()),
        writable: false
      },
      "jest-symbol-do-not-touch": {
        enumerable: false,
        value: symbol,
        writable: false
      }
    });
    DTRACE.forEach((dtrace) => {
      globalObject[dtrace] = function(...args) {
        return globalThis[dtrace].apply(this, args);
      };
    });
    return Object.assign(globalObject, (0, _deepCyclicCopy.default)(globals2));
  }
  return installCommonGlobals;
}
var interopRequireDefault = {};
var hasRequiredInteropRequireDefault;
function requireInteropRequireDefault() {
  if (hasRequiredInteropRequireDefault) return interopRequireDefault;
  hasRequiredInteropRequireDefault = 1;
  Object.defineProperty(interopRequireDefault, "__esModule", {
    value: true
  });
  interopRequireDefault.default = interopRequireDefault$1;
  function interopRequireDefault$1(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }
  return interopRequireDefault;
}
var isPromise = {};
var hasRequiredIsPromise;
function requireIsPromise() {
  if (hasRequiredIsPromise) return isPromise;
  hasRequiredIsPromise = 1;
  Object.defineProperty(isPromise, "__esModule", {
    value: true
  });
  isPromise.default = isPromise$1;
  function isPromise$1(candidate) {
    return candidate != null && (typeof candidate === "object" || typeof candidate === "function") && typeof candidate.then === "function";
  }
  return isPromise;
}
var setGlobal = {};
var hasRequiredSetGlobal;
function requireSetGlobal() {
  if (hasRequiredSetGlobal) return setGlobal;
  hasRequiredSetGlobal = 1;
  Object.defineProperty(setGlobal, "__esModule", {
    value: true
  });
  setGlobal.default = setGlobal$1;
  function setGlobal$1(globalToMutate, key2, value2) {
    globalToMutate[key2] = value2;
  }
  return setGlobal;
}
var convertDescriptorToString = {};
var hasRequiredConvertDescriptorToString;
function requireConvertDescriptorToString() {
  if (hasRequiredConvertDescriptorToString) return convertDescriptorToString;
  hasRequiredConvertDescriptorToString = 1;
  Object.defineProperty(convertDescriptorToString, "__esModule", {
    value: true
  });
  convertDescriptorToString.default = convertDescriptorToString$1;
  function convertDescriptorToString$1(descriptor) {
    switch (typeof descriptor) {
      case "function":
        if (descriptor.name) {
          return descriptor.name;
        }
        break;
      case "number":
      case "undefined":
        return `${descriptor}`;
      case "string":
        return descriptor;
    }
    throw new Error(
      `Invalid first argument, ${descriptor}. It must be a named class, named function, number, or string.`
    );
  }
  return convertDescriptorToString;
}
var replacePathSepForGlob = {};
var hasRequiredReplacePathSepForGlob;
function requireReplacePathSepForGlob() {
  if (hasRequiredReplacePathSepForGlob) return replacePathSepForGlob;
  hasRequiredReplacePathSepForGlob = 1;
  Object.defineProperty(replacePathSepForGlob, "__esModule", {
    value: true
  });
  replacePathSepForGlob.default = replacePathSepForGlob$1;
  function replacePathSepForGlob$1(path2) {
    return path2.replace(/\\(?![{}()+?.^$])/g, "/");
  }
  return replacePathSepForGlob;
}
var testPathPatternToRegExp = {};
var hasRequiredTestPathPatternToRegExp;
function requireTestPathPatternToRegExp() {
  if (hasRequiredTestPathPatternToRegExp) return testPathPatternToRegExp;
  hasRequiredTestPathPatternToRegExp = 1;
  Object.defineProperty(testPathPatternToRegExp, "__esModule", {
    value: true
  });
  testPathPatternToRegExp.default = testPathPatternToRegExp$1;
  function testPathPatternToRegExp$1(testPathPattern) {
    return new RegExp(testPathPattern, "i");
  }
  return testPathPatternToRegExp;
}
var globsToMatcher = {};
var utils$a = {};
var constants$2;
var hasRequiredConstants$1;
function requireConstants$1() {
  if (hasRequiredConstants$1) return constants$2;
  hasRequiredConstants$1 = 1;
  const path2 = pathExports;
  const WIN_SLASH = "\\\\/";
  const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
  const DOT_LITERAL = "\\.";
  const PLUS_LITERAL = "\\+";
  const QMARK_LITERAL = "\\?";
  const SLASH_LITERAL = "\\/";
  const ONE_CHAR = "(?=.)";
  const QMARK = "[^/]";
  const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
  const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
  const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
  const NO_DOT = `(?!${DOT_LITERAL})`;
  const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
  const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
  const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
  const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
  const STAR = `${QMARK}*?`;
  const POSIX_CHARS = {
    DOT_LITERAL,
    PLUS_LITERAL,
    QMARK_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    QMARK,
    END_ANCHOR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  };
  const WINDOWS_CHARS = {
    ...POSIX_CHARS,
    SLASH_LITERAL: `[${WIN_SLASH}]`,
    QMARK: WIN_NO_SLASH,
    STAR: `${WIN_NO_SLASH}*?`,
    DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
    NO_DOT: `(?!${DOT_LITERAL})`,
    NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
    NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
    START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
    END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
  };
  const POSIX_REGEX_SOURCE = {
    alnum: "a-zA-Z0-9",
    alpha: "a-zA-Z",
    ascii: "\\x00-\\x7F",
    blank: " \\t",
    cntrl: "\\x00-\\x1F\\x7F",
    digit: "0-9",
    graph: "\\x21-\\x7E",
    lower: "a-z",
    print: "\\x20-\\x7E ",
    punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
    space: " \\t\\r\\n\\v\\f",
    upper: "A-Z",
    word: "A-Za-z0-9_",
    xdigit: "A-Fa-f0-9"
  };
  constants$2 = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE,
    // regular expressions
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    // Replace globs with equivalent patterns to reduce parsing time.
    REPLACEMENTS: {
      "***": "*",
      "**/**": "**",
      "**/**/**": "**"
    },
    // Digits
    CHAR_0: 48,
    /* 0 */
    CHAR_9: 57,
    /* 9 */
    // Alphabet chars.
    CHAR_UPPERCASE_A: 65,
    /* A */
    CHAR_LOWERCASE_A: 97,
    /* a */
    CHAR_UPPERCASE_Z: 90,
    /* Z */
    CHAR_LOWERCASE_Z: 122,
    /* z */
    CHAR_LEFT_PARENTHESES: 40,
    /* ( */
    CHAR_RIGHT_PARENTHESES: 41,
    /* ) */
    CHAR_ASTERISK: 42,
    /* * */
    // Non-alphabetic chars.
    CHAR_AMPERSAND: 38,
    /* & */
    CHAR_AT: 64,
    /* @ */
    CHAR_BACKWARD_SLASH: 92,
    /* \ */
    CHAR_CARRIAGE_RETURN: 13,
    /* \r */
    CHAR_CIRCUMFLEX_ACCENT: 94,
    /* ^ */
    CHAR_COLON: 58,
    /* : */
    CHAR_COMMA: 44,
    /* , */
    CHAR_DOT: 46,
    /* . */
    CHAR_DOUBLE_QUOTE: 34,
    /* " */
    CHAR_EQUAL: 61,
    /* = */
    CHAR_EXCLAMATION_MARK: 33,
    /* ! */
    CHAR_FORM_FEED: 12,
    /* \f */
    CHAR_FORWARD_SLASH: 47,
    /* / */
    CHAR_GRAVE_ACCENT: 96,
    /* ` */
    CHAR_HASH: 35,
    /* # */
    CHAR_HYPHEN_MINUS: 45,
    /* - */
    CHAR_LEFT_ANGLE_BRACKET: 60,
    /* < */
    CHAR_LEFT_CURLY_BRACE: 123,
    /* { */
    CHAR_LEFT_SQUARE_BRACKET: 91,
    /* [ */
    CHAR_LINE_FEED: 10,
    /* \n */
    CHAR_NO_BREAK_SPACE: 160,
    /* \u00A0 */
    CHAR_PERCENT: 37,
    /* % */
    CHAR_PLUS: 43,
    /* + */
    CHAR_QUESTION_MARK: 63,
    /* ? */
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    /* > */
    CHAR_RIGHT_CURLY_BRACE: 125,
    /* } */
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    /* ] */
    CHAR_SEMICOLON: 59,
    /* ; */
    CHAR_SINGLE_QUOTE: 39,
    /* ' */
    CHAR_SPACE: 32,
    /*   */
    CHAR_TAB: 9,
    /* \t */
    CHAR_UNDERSCORE: 95,
    /* _ */
    CHAR_VERTICAL_LINE: 124,
    /* | */
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    /* \uFEFF */
    SEP: path2.sep,
    /**
     * Create EXTGLOB_CHARS
     */
    extglobChars(chars) {
      return {
        "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
        "?": { type: "qmark", open: "(?:", close: ")?" },
        "+": { type: "plus", open: "(?:", close: ")+" },
        "*": { type: "star", open: "(?:", close: ")*" },
        "@": { type: "at", open: "(?:", close: ")" }
      };
    },
    /**
     * Create GLOB_CHARS
     */
    globChars(win32) {
      return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
    }
  };
  return constants$2;
}
var hasRequiredUtils$2;
function requireUtils$2() {
  if (hasRequiredUtils$2) return utils$a;
  hasRequiredUtils$2 = 1;
  (function(exports) {
    const path2 = pathExports;
    const win32 = process.platform === "win32";
    const {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = requireConstants$1();
    exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
    exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports.supportsLookbehinds = () => {
      const segs = process.version.slice(1).split(".").map(Number);
      if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
        return true;
      }
      return false;
    };
    exports.isWindows = (options2) => {
      if (options2 && typeof options2.windows === "boolean") {
        return options2.windows;
      }
      return win32 === true || path2.sep === "\\";
    };
    exports.escapeLast = (input2, char, lastIdx) => {
      const idx = input2.lastIndexOf(char, lastIdx);
      if (idx === -1) return input2;
      if (input2[idx - 1] === "\\") return exports.escapeLast(input2, char, idx - 1);
      return `${input2.slice(0, idx)}\\${input2.slice(idx)}`;
    };
    exports.removePrefix = (input2, state2 = {}) => {
      let output = input2;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state2.prefix = "./";
      }
      return output;
    };
    exports.wrapOutput = (input2, state2 = {}, options2 = {}) => {
      const prepend = options2.contains ? "" : "^";
      const append2 = options2.contains ? "" : "$";
      let output = `${prepend}(?:${input2})${append2}`;
      if (state2.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
  })(utils$a);
  return utils$a;
}
var scan_1;
var hasRequiredScan;
function requireScan() {
  if (hasRequiredScan) return scan_1;
  hasRequiredScan = 1;
  const utils2 = requireUtils$2();
  const {
    CHAR_ASTERISK,
    /* * */
    CHAR_AT,
    /* @ */
    CHAR_BACKWARD_SLASH,
    /* \ */
    CHAR_COMMA: CHAR_COMMA2,
    /* , */
    CHAR_DOT: CHAR_DOT2,
    /* . */
    CHAR_EXCLAMATION_MARK,
    /* ! */
    CHAR_FORWARD_SLASH,
    /* / */
    CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE2,
    /* { */
    CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES2,
    /* ( */
    CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET2,
    /* [ */
    CHAR_PLUS,
    /* + */
    CHAR_QUESTION_MARK,
    /* ? */
    CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE2,
    /* } */
    CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES2,
    /* ) */
    CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET2
    /* ] */
  } = requireConstants$1();
  const isPathSeparator = (code) => {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
  };
  const depth = (token2) => {
    if (token2.isPrefix !== true) {
      token2.depth = token2.isGlobstar ? Infinity : 1;
    }
  };
  const scan = (input2, options2) => {
    const opts = options2 || {};
    const length = input2.length - 1;
    const scanToEnd = opts.parts === true || opts.scanToEnd === true;
    const slashes = [];
    const tokens = [];
    const parts = [];
    let str = input2;
    let index2 = -1;
    let start = 0;
    let lastIndex = 0;
    let isBrace = false;
    let isBracket = false;
    let isGlob = false;
    let isExtglob = false;
    let isGlobstar = false;
    let braceEscaped = false;
    let backslashes = false;
    let negated = false;
    let negatedExtglob = false;
    let finished = false;
    let braces2 = 0;
    let prev;
    let code;
    let token2 = { value: "", depth: 0, isGlob: false };
    const eos = () => index2 >= length;
    const peek2 = () => str.charCodeAt(index2 + 1);
    const advance = () => {
      prev = code;
      return str.charCodeAt(++index2);
    };
    while (index2 < length) {
      code = advance();
      let next;
      if (code === CHAR_BACKWARD_SLASH) {
        backslashes = token2.backslashes = true;
        code = advance();
        if (code === CHAR_LEFT_CURLY_BRACE2) {
          braceEscaped = true;
        }
        continue;
      }
      if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE2) {
        braces2++;
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token2.backslashes = true;
            advance();
            continue;
          }
          if (code === CHAR_LEFT_CURLY_BRACE2) {
            braces2++;
            continue;
          }
          if (braceEscaped !== true && code === CHAR_DOT2 && (code = advance()) === CHAR_DOT2) {
            isBrace = token2.isBrace = true;
            isGlob = token2.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (braceEscaped !== true && code === CHAR_COMMA2) {
            isBrace = token2.isBrace = true;
            isGlob = token2.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_RIGHT_CURLY_BRACE2) {
            braces2--;
            if (braces2 === 0) {
              braceEscaped = false;
              isBrace = token2.isBrace = true;
              finished = true;
              break;
            }
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_FORWARD_SLASH) {
        slashes.push(index2);
        tokens.push(token2);
        token2 = { value: "", depth: 0, isGlob: false };
        if (finished === true) continue;
        if (prev === CHAR_DOT2 && index2 === start + 1) {
          start += 2;
          continue;
        }
        lastIndex = index2 + 1;
        continue;
      }
      if (opts.noext !== true) {
        const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
        if (isExtglobChar === true && peek2() === CHAR_LEFT_PARENTHESES2) {
          isGlob = token2.isGlob = true;
          isExtglob = token2.isExtglob = true;
          finished = true;
          if (code === CHAR_EXCLAMATION_MARK && index2 === start) {
            negatedExtglob = true;
          }
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token2.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES2) {
                isGlob = token2.isGlob = true;
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
      }
      if (code === CHAR_ASTERISK) {
        if (prev === CHAR_ASTERISK) isGlobstar = token2.isGlobstar = true;
        isGlob = token2.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_QUESTION_MARK) {
        isGlob = token2.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_LEFT_SQUARE_BRACKET2) {
        while (eos() !== true && (next = advance())) {
          if (next === CHAR_BACKWARD_SLASH) {
            backslashes = token2.backslashes = true;
            advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET2) {
            isBracket = token2.isBracket = true;
            isGlob = token2.isGlob = true;
            finished = true;
            break;
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index2 === start) {
        negated = token2.negated = true;
        start++;
        continue;
      }
      if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES2) {
        isGlob = token2.isGlob = true;
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_LEFT_PARENTHESES2) {
              backslashes = token2.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES2) {
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
      if (isGlob === true) {
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
    }
    if (opts.noext === true) {
      isExtglob = false;
      isGlob = false;
    }
    let base2 = str;
    let prefix = "";
    let glob = "";
    if (start > 0) {
      prefix = str.slice(0, start);
      str = str.slice(start);
      lastIndex -= start;
    }
    if (base2 && isGlob === true && lastIndex > 0) {
      base2 = str.slice(0, lastIndex);
      glob = str.slice(lastIndex);
    } else if (isGlob === true) {
      base2 = "";
      glob = str;
    } else {
      base2 = str;
    }
    if (base2 && base2 !== "" && base2 !== "/" && base2 !== str) {
      if (isPathSeparator(base2.charCodeAt(base2.length - 1))) {
        base2 = base2.slice(0, -1);
      }
    }
    if (opts.unescape === true) {
      if (glob) glob = utils2.removeBackslashes(glob);
      if (base2 && backslashes === true) {
        base2 = utils2.removeBackslashes(base2);
      }
    }
    const state2 = {
      prefix,
      input: input2,
      start,
      base: base2,
      glob,
      isBrace,
      isBracket,
      isGlob,
      isExtglob,
      isGlobstar,
      negated,
      negatedExtglob
    };
    if (opts.tokens === true) {
      state2.maxDepth = 0;
      if (!isPathSeparator(code)) {
        tokens.push(token2);
      }
      state2.tokens = tokens;
    }
    if (opts.parts === true || opts.tokens === true) {
      let prevIndex;
      for (let idx = 0; idx < slashes.length; idx++) {
        const n = prevIndex ? prevIndex + 1 : start;
        const i = slashes[idx];
        const value2 = input2.slice(n, i);
        if (opts.tokens) {
          if (idx === 0 && start !== 0) {
            tokens[idx].isPrefix = true;
            tokens[idx].value = prefix;
          } else {
            tokens[idx].value = value2;
          }
          depth(tokens[idx]);
          state2.maxDepth += tokens[idx].depth;
        }
        if (idx !== 0 || value2 !== "") {
          parts.push(value2);
        }
        prevIndex = i;
      }
      if (prevIndex && prevIndex + 1 < input2.length) {
        const value2 = input2.slice(prevIndex + 1);
        parts.push(value2);
        if (opts.tokens) {
          tokens[tokens.length - 1].value = value2;
          depth(tokens[tokens.length - 1]);
          state2.maxDepth += tokens[tokens.length - 1].depth;
        }
      }
      state2.slashes = slashes;
      state2.parts = parts;
    }
    return state2;
  };
  scan_1 = scan;
  return scan_1;
}
var parse_1$1;
var hasRequiredParse$3;
function requireParse$3() {
  if (hasRequiredParse$3) return parse_1$1;
  hasRequiredParse$3 = 1;
  const constants2 = requireConstants$1();
  const utils2 = requireUtils$2();
  const {
    MAX_LENGTH: MAX_LENGTH2,
    POSIX_REGEX_SOURCE,
    REGEX_NON_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_BACKREF,
    REPLACEMENTS
  } = constants2;
  const expandRange = (args, options2) => {
    if (typeof options2.expandRange === "function") {
      return options2.expandRange(...args, options2);
    }
    args.sort();
    const value2 = `[${args.join("-")}]`;
    try {
      new RegExp(value2);
    } catch (ex) {
      return args.map((v) => utils2.escapeRegex(v)).join("..");
    }
    return value2;
  };
  const syntaxError2 = (type, char) => {
    return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
  };
  const parse3 = (input2, options2) => {
    if (typeof input2 !== "string") {
      throw new TypeError("Expected a string");
    }
    input2 = REPLACEMENTS[input2] || input2;
    const opts = { ...options2 };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH2, opts.maxLength) : MAX_LENGTH2;
    let len = input2.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    const bos = { type: "bos", value: "", output: opts.prepend || "" };
    const tokens = [bos];
    const capture = opts.capture ? "" : "?:";
    const win32 = utils2.isWindows(options2);
    const PLATFORM_CHARS = constants2.globChars(win32);
    const EXTGLOB_CHARS = constants2.extglobChars(PLATFORM_CHARS);
    const {
      DOT_LITERAL,
      PLUS_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    } = PLATFORM_CHARS;
    const globstar = (opts2) => {
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const nodot = opts.dot ? "" : NO_DOT;
    const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
    let star = opts.bash === true ? globstar(opts) : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    if (typeof opts.noext === "boolean") {
      opts.noextglob = opts.noext;
    }
    const state2 = {
      input: input2,
      index: -1,
      start: 0,
      dot: opts.dot === true,
      consumed: "",
      output: "",
      prefix: "",
      backtrack: false,
      negated: false,
      brackets: 0,
      braces: 0,
      parens: 0,
      quotes: 0,
      globstar: false,
      tokens
    };
    input2 = utils2.removePrefix(input2, state2);
    len = input2.length;
    const extglobs = [];
    const braces2 = [];
    const stack2 = [];
    let prev = bos;
    let value2;
    const eos = () => state2.index === len - 1;
    const peek2 = state2.peek = (n = 1) => input2[state2.index + n];
    const advance = state2.advance = () => input2[++state2.index] || "";
    const remaining = () => input2.slice(state2.index + 1);
    const consume = (value3 = "", num = 0) => {
      state2.consumed += value3;
      state2.index += num;
    };
    const append2 = (token2) => {
      state2.output += token2.output != null ? token2.output : token2.value;
      consume(token2.value);
    };
    const negate = () => {
      let count = 1;
      while (peek2() === "!" && (peek2(2) !== "(" || peek2(3) === "?")) {
        advance();
        state2.start++;
        count++;
      }
      if (count % 2 === 0) {
        return false;
      }
      state2.negated = true;
      state2.start++;
      return true;
    };
    const increment = (type) => {
      state2[type]++;
      stack2.push(type);
    };
    const decrement = (type) => {
      state2[type]--;
      stack2.pop();
    };
    const push2 = (tok) => {
      if (prev.type === "globstar") {
        const isBrace = state2.braces > 0 && (tok.type === "comma" || tok.type === "brace");
        const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
        if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
          state2.output = state2.output.slice(0, -prev.output.length);
          prev.type = "star";
          prev.value = "*";
          prev.output = star;
          state2.output += prev.output;
        }
      }
      if (extglobs.length && tok.type !== "paren") {
        extglobs[extglobs.length - 1].inner += tok.value;
      }
      if (tok.value || tok.output) append2(tok);
      if (prev && prev.type === "text" && tok.type === "text") {
        prev.value += tok.value;
        prev.output = (prev.output || "") + tok.value;
        return;
      }
      tok.prev = prev;
      tokens.push(tok);
      prev = tok;
    };
    const extglobOpen = (type, value3) => {
      const token2 = { ...EXTGLOB_CHARS[value3], conditions: 1, inner: "" };
      token2.prev = prev;
      token2.parens = state2.parens;
      token2.output = state2.output;
      const output = (opts.capture ? "(" : "") + token2.open;
      increment("parens");
      push2({ type, value: value3, output: state2.output ? "" : ONE_CHAR });
      push2({ type: "paren", extglob: true, value: advance(), output });
      extglobs.push(token2);
    };
    const extglobClose = (token2) => {
      let output = token2.close + (opts.capture ? ")" : "");
      let rest;
      if (token2.type === "negate") {
        let extglobStar = star;
        if (token2.inner && token2.inner.length > 1 && token2.inner.includes("/")) {
          extglobStar = globstar(opts);
        }
        if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
          output = token2.close = `)$))${extglobStar}`;
        }
        if (token2.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
          const expression = parse3(rest, { ...options2, fastpaths: false }).output;
          output = token2.close = `)${expression})${extglobStar})`;
        }
        if (token2.prev.type === "bos") {
          state2.negatedExtglob = true;
        }
      }
      push2({ type: "paren", extglob: true, value: value2, output });
      decrement("parens");
    };
    if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input2)) {
      let backslashes = false;
      let output = input2.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index2) => {
        if (first === "\\") {
          backslashes = true;
          return m;
        }
        if (first === "?") {
          if (esc) {
            return esc + first + (rest ? QMARK.repeat(rest.length) : "");
          }
          if (index2 === 0) {
            return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
          }
          return QMARK.repeat(chars.length);
        }
        if (first === ".") {
          return DOT_LITERAL.repeat(chars.length);
        }
        if (first === "*") {
          if (esc) {
            return esc + first + (rest ? star : "");
          }
          return star;
        }
        return esc ? m : `\\${m}`;
      });
      if (backslashes === true) {
        if (opts.unescape === true) {
          output = output.replace(/\\/g, "");
        } else {
          output = output.replace(/\\+/g, (m) => {
            return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
          });
        }
      }
      if (output === input2 && opts.contains === true) {
        state2.output = input2;
        return state2;
      }
      state2.output = utils2.wrapOutput(output, state2, options2);
      return state2;
    }
    while (!eos()) {
      value2 = advance();
      if (value2 === "\0") {
        continue;
      }
      if (value2 === "\\") {
        const next = peek2();
        if (next === "/" && opts.bash !== true) {
          continue;
        }
        if (next === "." || next === ";") {
          continue;
        }
        if (!next) {
          value2 += "\\";
          push2({ type: "text", value: value2 });
          continue;
        }
        const match = /^\\+/.exec(remaining());
        let slashes = 0;
        if (match && match[0].length > 2) {
          slashes = match[0].length;
          state2.index += slashes;
          if (slashes % 2 !== 0) {
            value2 += "\\";
          }
        }
        if (opts.unescape === true) {
          value2 = advance();
        } else {
          value2 += advance();
        }
        if (state2.brackets === 0) {
          push2({ type: "text", value: value2 });
          continue;
        }
      }
      if (state2.brackets > 0 && (value2 !== "]" || prev.value === "[" || prev.value === "[^")) {
        if (opts.posix !== false && value2 === ":") {
          const inner = prev.value.slice(1);
          if (inner.includes("[")) {
            prev.posix = true;
            if (inner.includes(":")) {
              const idx = prev.value.lastIndexOf("[");
              const pre = prev.value.slice(0, idx);
              const rest2 = prev.value.slice(idx + 2);
              const posix = POSIX_REGEX_SOURCE[rest2];
              if (posix) {
                prev.value = pre + posix;
                state2.backtrack = true;
                advance();
                if (!bos.output && tokens.indexOf(prev) === 1) {
                  bos.output = ONE_CHAR;
                }
                continue;
              }
            }
          }
        }
        if (value2 === "[" && peek2() !== ":" || value2 === "-" && peek2() === "]") {
          value2 = `\\${value2}`;
        }
        if (value2 === "]" && (prev.value === "[" || prev.value === "[^")) {
          value2 = `\\${value2}`;
        }
        if (opts.posix === true && value2 === "!" && prev.value === "[") {
          value2 = "^";
        }
        prev.value += value2;
        append2({ value: value2 });
        continue;
      }
      if (state2.quotes === 1 && value2 !== '"') {
        value2 = utils2.escapeRegex(value2);
        prev.value += value2;
        append2({ value: value2 });
        continue;
      }
      if (value2 === '"') {
        state2.quotes = state2.quotes === 1 ? 0 : 1;
        if (opts.keepQuotes === true) {
          push2({ type: "text", value: value2 });
        }
        continue;
      }
      if (value2 === "(") {
        increment("parens");
        push2({ type: "paren", value: value2 });
        continue;
      }
      if (value2 === ")") {
        if (state2.parens === 0 && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError2("opening", "("));
        }
        const extglob = extglobs[extglobs.length - 1];
        if (extglob && state2.parens === extglob.parens + 1) {
          extglobClose(extglobs.pop());
          continue;
        }
        push2({ type: "paren", value: value2, output: state2.parens ? ")" : "\\)" });
        decrement("parens");
        continue;
      }
      if (value2 === "[") {
        if (opts.nobracket === true || !remaining().includes("]")) {
          if (opts.nobracket !== true && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError2("closing", "]"));
          }
          value2 = `\\${value2}`;
        } else {
          increment("brackets");
        }
        push2({ type: "bracket", value: value2 });
        continue;
      }
      if (value2 === "]") {
        if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
          push2({ type: "text", value: value2, output: `\\${value2}` });
          continue;
        }
        if (state2.brackets === 0) {
          if (opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError2("opening", "["));
          }
          push2({ type: "text", value: value2, output: `\\${value2}` });
          continue;
        }
        decrement("brackets");
        const prevValue = prev.value.slice(1);
        if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
          value2 = `/${value2}`;
        }
        prev.value += value2;
        append2({ value: value2 });
        if (opts.literalBrackets === false || utils2.hasRegexChars(prevValue)) {
          continue;
        }
        const escaped = utils2.escapeRegex(prev.value);
        state2.output = state2.output.slice(0, -prev.value.length);
        if (opts.literalBrackets === true) {
          state2.output += escaped;
          prev.value = escaped;
          continue;
        }
        prev.value = `(${capture}${escaped}|${prev.value})`;
        state2.output += prev.value;
        continue;
      }
      if (value2 === "{" && opts.nobrace !== true) {
        increment("braces");
        const open = {
          type: "brace",
          value: value2,
          output: "(",
          outputIndex: state2.output.length,
          tokensIndex: state2.tokens.length
        };
        braces2.push(open);
        push2(open);
        continue;
      }
      if (value2 === "}") {
        const brace = braces2[braces2.length - 1];
        if (opts.nobrace === true || !brace) {
          push2({ type: "text", value: value2, output: value2 });
          continue;
        }
        let output = ")";
        if (brace.dots === true) {
          const arr = tokens.slice();
          const range = [];
          for (let i = arr.length - 1; i >= 0; i--) {
            tokens.pop();
            if (arr[i].type === "brace") {
              break;
            }
            if (arr[i].type !== "dots") {
              range.unshift(arr[i].value);
            }
          }
          output = expandRange(range, opts);
          state2.backtrack = true;
        }
        if (brace.comma !== true && brace.dots !== true) {
          const out = state2.output.slice(0, brace.outputIndex);
          const toks = state2.tokens.slice(brace.tokensIndex);
          brace.value = brace.output = "\\{";
          value2 = output = "\\}";
          state2.output = out;
          for (const t of toks) {
            state2.output += t.output || t.value;
          }
        }
        push2({ type: "brace", value: value2, output });
        decrement("braces");
        braces2.pop();
        continue;
      }
      if (value2 === "|") {
        if (extglobs.length > 0) {
          extglobs[extglobs.length - 1].conditions++;
        }
        push2({ type: "text", value: value2 });
        continue;
      }
      if (value2 === ",") {
        let output = value2;
        const brace = braces2[braces2.length - 1];
        if (brace && stack2[stack2.length - 1] === "braces") {
          brace.comma = true;
          output = "|";
        }
        push2({ type: "comma", value: value2, output });
        continue;
      }
      if (value2 === "/") {
        if (prev.type === "dot" && state2.index === state2.start + 1) {
          state2.start = state2.index + 1;
          state2.consumed = "";
          state2.output = "";
          tokens.pop();
          prev = bos;
          continue;
        }
        push2({ type: "slash", value: value2, output: SLASH_LITERAL });
        continue;
      }
      if (value2 === ".") {
        if (state2.braces > 0 && prev.type === "dot") {
          if (prev.value === ".") prev.output = DOT_LITERAL;
          const brace = braces2[braces2.length - 1];
          prev.type = "dots";
          prev.output += value2;
          prev.value += value2;
          brace.dots = true;
          continue;
        }
        if (state2.braces + state2.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
          push2({ type: "text", value: value2, output: DOT_LITERAL });
          continue;
        }
        push2({ type: "dot", value: value2, output: DOT_LITERAL });
        continue;
      }
      if (value2 === "?") {
        const isGroup = prev && prev.value === "(";
        if (!isGroup && opts.noextglob !== true && peek2() === "(" && peek2(2) !== "?") {
          extglobOpen("qmark", value2);
          continue;
        }
        if (prev && prev.type === "paren") {
          const next = peek2();
          let output = value2;
          if (next === "<" && !utils2.supportsLookbehinds()) {
            throw new Error("Node.js v10 or higher is required for regex lookbehinds");
          }
          if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
            output = `\\${value2}`;
          }
          push2({ type: "text", value: value2, output });
          continue;
        }
        if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
          push2({ type: "qmark", value: value2, output: QMARK_NO_DOT });
          continue;
        }
        push2({ type: "qmark", value: value2, output: QMARK });
        continue;
      }
      if (value2 === "!") {
        if (opts.noextglob !== true && peek2() === "(") {
          if (peek2(2) !== "?" || !/[!=<:]/.test(peek2(3))) {
            extglobOpen("negate", value2);
            continue;
          }
        }
        if (opts.nonegate !== true && state2.index === 0) {
          negate();
          continue;
        }
      }
      if (value2 === "+") {
        if (opts.noextglob !== true && peek2() === "(" && peek2(2) !== "?") {
          extglobOpen("plus", value2);
          continue;
        }
        if (prev && prev.value === "(" || opts.regex === false) {
          push2({ type: "plus", value: value2, output: PLUS_LITERAL });
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state2.parens > 0) {
          push2({ type: "plus", value: value2 });
          continue;
        }
        push2({ type: "plus", value: PLUS_LITERAL });
        continue;
      }
      if (value2 === "@") {
        if (opts.noextglob !== true && peek2() === "(" && peek2(2) !== "?") {
          push2({ type: "at", extglob: true, value: value2, output: "" });
          continue;
        }
        push2({ type: "text", value: value2 });
        continue;
      }
      if (value2 !== "*") {
        if (value2 === "$" || value2 === "^") {
          value2 = `\\${value2}`;
        }
        const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
        if (match) {
          value2 += match[0];
          state2.index += match[0].length;
        }
        push2({ type: "text", value: value2 });
        continue;
      }
      if (prev && (prev.type === "globstar" || prev.star === true)) {
        prev.type = "star";
        prev.star = true;
        prev.value += value2;
        prev.output = star;
        state2.backtrack = true;
        state2.globstar = true;
        consume(value2);
        continue;
      }
      let rest = remaining();
      if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
        extglobOpen("star", value2);
        continue;
      }
      if (prev.type === "star") {
        if (opts.noglobstar === true) {
          consume(value2);
          continue;
        }
        const prior = prev.prev;
        const before = prior.prev;
        const isStart = prior.type === "slash" || prior.type === "bos";
        const afterStar = before && (before.type === "star" || before.type === "globstar");
        if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
          push2({ type: "star", value: value2, output: "" });
          continue;
        }
        const isBrace = state2.braces > 0 && (prior.type === "comma" || prior.type === "brace");
        const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
        if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
          push2({ type: "star", value: value2, output: "" });
          continue;
        }
        while (rest.slice(0, 3) === "/**") {
          const after = input2[state2.index + 4];
          if (after && after !== "/") {
            break;
          }
          rest = rest.slice(3);
          consume("/**", 3);
        }
        if (prior.type === "bos" && eos()) {
          prev.type = "globstar";
          prev.value += value2;
          prev.output = globstar(opts);
          state2.output = prev.output;
          state2.globstar = true;
          consume(value2);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
          state2.output = state2.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
          prev.value += value2;
          state2.globstar = true;
          state2.output += prior.output + prev.output;
          consume(value2);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
          const end = rest[1] !== void 0 ? "|$" : "";
          state2.output = state2.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
          prev.value += value2;
          state2.output += prior.output + prev.output;
          state2.globstar = true;
          consume(value2 + advance());
          push2({ type: "slash", value: "/", output: "" });
          continue;
        }
        if (prior.type === "bos" && rest[0] === "/") {
          prev.type = "globstar";
          prev.value += value2;
          prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
          state2.output = prev.output;
          state2.globstar = true;
          consume(value2 + advance());
          push2({ type: "slash", value: "/", output: "" });
          continue;
        }
        state2.output = state2.output.slice(0, -prev.output.length);
        prev.type = "globstar";
        prev.output = globstar(opts);
        prev.value += value2;
        state2.output += prev.output;
        state2.globstar = true;
        consume(value2);
        continue;
      }
      const token2 = { type: "star", value: value2, output: star };
      if (opts.bash === true) {
        token2.output = ".*?";
        if (prev.type === "bos" || prev.type === "slash") {
          token2.output = nodot + token2.output;
        }
        push2(token2);
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
        token2.output = value2;
        push2(token2);
        continue;
      }
      if (state2.index === state2.start || prev.type === "slash" || prev.type === "dot") {
        if (prev.type === "dot") {
          state2.output += NO_DOT_SLASH;
          prev.output += NO_DOT_SLASH;
        } else if (opts.dot === true) {
          state2.output += NO_DOTS_SLASH;
          prev.output += NO_DOTS_SLASH;
        } else {
          state2.output += nodot;
          prev.output += nodot;
        }
        if (peek2() !== "*") {
          state2.output += ONE_CHAR;
          prev.output += ONE_CHAR;
        }
      }
      push2(token2);
    }
    while (state2.brackets > 0) {
      if (opts.strictBrackets === true) throw new SyntaxError(syntaxError2("closing", "]"));
      state2.output = utils2.escapeLast(state2.output, "[");
      decrement("brackets");
    }
    while (state2.parens > 0) {
      if (opts.strictBrackets === true) throw new SyntaxError(syntaxError2("closing", ")"));
      state2.output = utils2.escapeLast(state2.output, "(");
      decrement("parens");
    }
    while (state2.braces > 0) {
      if (opts.strictBrackets === true) throw new SyntaxError(syntaxError2("closing", "}"));
      state2.output = utils2.escapeLast(state2.output, "{");
      decrement("braces");
    }
    if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
      push2({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
    }
    if (state2.backtrack === true) {
      state2.output = "";
      for (const token2 of state2.tokens) {
        state2.output += token2.output != null ? token2.output : token2.value;
        if (token2.suffix) {
          state2.output += token2.suffix;
        }
      }
    }
    return state2;
  };
  parse3.fastpaths = (input2, options2) => {
    const opts = { ...options2 };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH2, opts.maxLength) : MAX_LENGTH2;
    const len = input2.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    input2 = REPLACEMENTS[input2] || input2;
    const win32 = utils2.isWindows(options2);
    const {
      DOT_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOTS_SLASH,
      STAR,
      START_ANCHOR
    } = constants2.globChars(win32);
    const nodot = opts.dot ? NO_DOTS : NO_DOT;
    const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
    const capture = opts.capture ? "" : "?:";
    const state2 = { negated: false, prefix: "" };
    let star = opts.bash === true ? ".*?" : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    const globstar = (opts2) => {
      if (opts2.noglobstar === true) return star;
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const create2 = (str) => {
      switch (str) {
        case "*":
          return `${nodot}${ONE_CHAR}${star}`;
        case ".*":
          return `${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*.*":
          return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*/*":
          return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
        case "**":
          return nodot + globstar(opts);
        case "**/*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
        case "**/*.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "**/.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
        default: {
          const match = /^(.*?)\.(\w+)$/.exec(str);
          if (!match) return;
          const source3 = create2(match[1]);
          if (!source3) return;
          return source3 + DOT_LITERAL + match[2];
        }
      }
    };
    const output = utils2.removePrefix(input2, state2);
    let source2 = create2(output);
    if (source2 && opts.strictSlashes !== true) {
      source2 += `${SLASH_LITERAL}?`;
    }
    return source2;
  };
  parse_1$1 = parse3;
  return parse_1$1;
}
var picomatch_1;
var hasRequiredPicomatch$1;
function requirePicomatch$1() {
  if (hasRequiredPicomatch$1) return picomatch_1;
  hasRequiredPicomatch$1 = 1;
  const path2 = pathExports;
  const scan = requireScan();
  const parse3 = requireParse$3();
  const utils2 = requireUtils$2();
  const constants2 = requireConstants$1();
  const isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
  const picomatch2 = (glob, options2, returnState = false) => {
    if (Array.isArray(glob)) {
      const fns = glob.map((input2) => picomatch2(input2, options2, returnState));
      const arrayMatcher = (str) => {
        for (const isMatch of fns) {
          const state3 = isMatch(str);
          if (state3) return state3;
        }
        return false;
      };
      return arrayMatcher;
    }
    const isState = isObject2(glob) && glob.tokens && glob.input;
    if (glob === "" || typeof glob !== "string" && !isState) {
      throw new TypeError("Expected pattern to be a non-empty string");
    }
    const opts = options2 || {};
    const posix = utils2.isWindows(options2);
    const regex = isState ? picomatch2.compileRe(glob, options2) : picomatch2.makeRe(glob, options2, false, true);
    const state2 = regex.state;
    delete regex.state;
    let isIgnored = () => false;
    if (opts.ignore) {
      const ignoreOpts = { ...options2, ignore: null, onMatch: null, onResult: null };
      isIgnored = picomatch2(opts.ignore, ignoreOpts, returnState);
    }
    const matcher = (input2, returnObject = false) => {
      const { isMatch, match, output } = picomatch2.test(input2, regex, options2, { glob, posix });
      const result = { glob, state: state2, regex, posix, input: input2, output, match, isMatch };
      if (typeof opts.onResult === "function") {
        opts.onResult(result);
      }
      if (isMatch === false) {
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (isIgnored(input2)) {
        if (typeof opts.onIgnore === "function") {
          opts.onIgnore(result);
        }
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (typeof opts.onMatch === "function") {
        opts.onMatch(result);
      }
      return returnObject ? result : true;
    };
    if (returnState) {
      matcher.state = state2;
    }
    return matcher;
  };
  picomatch2.test = (input2, regex, options2, { glob, posix } = {}) => {
    if (typeof input2 !== "string") {
      throw new TypeError("Expected input to be a string");
    }
    if (input2 === "") {
      return { isMatch: false, output: "" };
    }
    const opts = options2 || {};
    const format2 = opts.format || (posix ? utils2.toPosixSlashes : null);
    let match = input2 === glob;
    let output = match && format2 ? format2(input2) : input2;
    if (match === false) {
      output = format2 ? format2(input2) : input2;
      match = output === glob;
    }
    if (match === false || opts.capture === true) {
      if (opts.matchBase === true || opts.basename === true) {
        match = picomatch2.matchBase(input2, regex, options2, posix);
      } else {
        match = regex.exec(output);
      }
    }
    return { isMatch: Boolean(match), match, output };
  };
  picomatch2.matchBase = (input2, glob, options2, posix = utils2.isWindows(options2)) => {
    const regex = glob instanceof RegExp ? glob : picomatch2.makeRe(glob, options2);
    return regex.test(path2.basename(input2));
  };
  picomatch2.isMatch = (str, patterns, options2) => picomatch2(patterns, options2)(str);
  picomatch2.parse = (pattern, options2) => {
    if (Array.isArray(pattern)) return pattern.map((p) => picomatch2.parse(p, options2));
    return parse3(pattern, { ...options2, fastpaths: false });
  };
  picomatch2.scan = (input2, options2) => scan(input2, options2);
  picomatch2.compileRe = (state2, options2, returnOutput = false, returnState = false) => {
    if (returnOutput === true) {
      return state2.output;
    }
    const opts = options2 || {};
    const prepend = opts.contains ? "" : "^";
    const append2 = opts.contains ? "" : "$";
    let source2 = `${prepend}(?:${state2.output})${append2}`;
    if (state2 && state2.negated === true) {
      source2 = `^(?!${source2}).*$`;
    }
    const regex = picomatch2.toRegex(source2, options2);
    if (returnState === true) {
      regex.state = state2;
    }
    return regex;
  };
  picomatch2.makeRe = (input2, options2 = {}, returnOutput = false, returnState = false) => {
    if (!input2 || typeof input2 !== "string") {
      throw new TypeError("Expected a non-empty string");
    }
    let parsed = { negated: false, fastpaths: true };
    if (options2.fastpaths !== false && (input2[0] === "." || input2[0] === "*")) {
      parsed.output = parse3.fastpaths(input2, options2);
    }
    if (!parsed.output) {
      parsed = parse3(input2, options2);
    }
    return picomatch2.compileRe(parsed, options2, returnOutput, returnState);
  };
  picomatch2.toRegex = (source2, options2) => {
    try {
      const opts = options2 || {};
      return new RegExp(source2, opts.flags || (opts.nocase ? "i" : ""));
    } catch (err) {
      if (options2 && options2.debug === true) throw err;
      return /$^/;
    }
  };
  picomatch2.constants = constants2;
  picomatch_1 = picomatch2;
  return picomatch_1;
}
var picomatch$1;
var hasRequiredPicomatch;
function requirePicomatch() {
  if (hasRequiredPicomatch) return picomatch$1;
  hasRequiredPicomatch = 1;
  picomatch$1 = requirePicomatch$1();
  return picomatch$1;
}
var hasRequiredGlobsToMatcher;
function requireGlobsToMatcher() {
  if (hasRequiredGlobsToMatcher) return globsToMatcher;
  hasRequiredGlobsToMatcher = 1;
  Object.defineProperty(globsToMatcher, "__esModule", {
    value: true
  });
  globsToMatcher.default = globsToMatcher$1;
  function _picomatch() {
    const data = _interopRequireDefault2(requirePicomatch());
    _picomatch = function() {
      return data;
    };
    return data;
  }
  var _replacePathSepForGlob = _interopRequireDefault2(
    requireReplacePathSepForGlob()
  );
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const globsToMatchersMap = /* @__PURE__ */ new Map();
  const picomatchOptions = {
    dot: true
  };
  function globsToMatcher$1(globs) {
    if (globs.length === 0) {
      return () => false;
    }
    const matchers2 = globs.map((glob) => {
      if (!globsToMatchersMap.has(glob)) {
        const isMatch = (0, _picomatch().default)(glob, picomatchOptions, true);
        const matcher = {
          isMatch,
          // Matchers that are negated have different behavior than matchers that
          // are not negated, so we need to store this information ahead of time.
          negated: isMatch.state.negated || !!isMatch.state.negatedExtglob
        };
        globsToMatchersMap.set(glob, matcher);
      }
      return globsToMatchersMap.get(glob);
    });
    return (path2) => {
      const replacedPath = (0, _replacePathSepForGlob.default)(path2);
      let kept = void 0;
      let negatives = 0;
      for (let i = 0; i < matchers2.length; i++) {
        const { isMatch, negated } = matchers2[i];
        if (negated) {
          negatives++;
        }
        const matched = isMatch(replacedPath);
        if (!matched && negated) {
          kept = false;
        } else if (matched && !negated) {
          kept = true;
        }
      }
      return negatives === matchers2.length ? kept !== false : !!kept;
    };
  }
  return globsToMatcher;
}
var pluralize = {};
var hasRequiredPluralize;
function requirePluralize() {
  if (hasRequiredPluralize) return pluralize;
  hasRequiredPluralize = 1;
  Object.defineProperty(pluralize, "__esModule", {
    value: true
  });
  pluralize.default = pluralize$12;
  function pluralize$12(word, count, ending = "s") {
    return `${count} ${word}${count === 1 ? "" : ending}`;
  }
  return pluralize;
}
var formatTime = {};
var hasRequiredFormatTime;
function requireFormatTime() {
  if (hasRequiredFormatTime) return formatTime;
  hasRequiredFormatTime = 1;
  Object.defineProperty(formatTime, "__esModule", {
    value: true
  });
  formatTime.default = formatTime$1;
  function formatTime$1(time, prefixPower = -3, padLeftLength = 0) {
    const prefixes = ["n", "μ", "m", ""];
    const prefixIndex = Math.max(
      0,
      Math.min(
        Math.trunc(prefixPower / 3) + prefixes.length - 1,
        prefixes.length - 1
      )
    );
    return `${String(time).padStart(padLeftLength)} ${prefixes[prefixIndex]}s`;
  }
  return formatTime;
}
var tryRealpath = {};
var hasRequiredTryRealpath;
function requireTryRealpath() {
  if (hasRequiredTryRealpath) return tryRealpath;
  hasRequiredTryRealpath = 1;
  Object.defineProperty(tryRealpath, "__esModule", {
    value: true
  });
  tryRealpath.default = tryRealpath$1;
  function _gracefulFs() {
    const data = require$$2$1;
    _gracefulFs = function() {
      return data;
    };
    return data;
  }
  function tryRealpath$1(path2) {
    try {
      path2 = _gracefulFs().realpathSync.native(path2);
    } catch (error2) {
      if (error2.code !== "ENOENT" && error2.code !== "EISDIR") {
        throw error2;
      }
    }
    return path2;
  }
  return tryRealpath;
}
var requireOrImportModule = {};
var hasRequiredRequireOrImportModule;
function requireRequireOrImportModule() {
  if (hasRequiredRequireOrImportModule) return requireOrImportModule;
  hasRequiredRequireOrImportModule = 1;
  Object.defineProperty(requireOrImportModule, "__esModule", {
    value: true
  });
  requireOrImportModule.default = requireOrImportModule$1;
  function _path() {
    const data = pathExports;
    _path = function() {
      return data;
    };
    return data;
  }
  function _url2() {
    const data = require$$1;
    _url2 = function() {
      return data;
    };
    return data;
  }
  var _interopRequireDefault2 = _interopRequireDefault22(
    requireInteropRequireDefault()
  );
  function _interopRequireDefault22(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  async function requireOrImportModule$1(filePath, applyInteropRequireDefault = true) {
    if (!(0, _path().isAbsolute)(filePath) && filePath[0] === ".") {
      throw new Error(
        `Jest: requireOrImportModule path must be absolute, was "${filePath}"`
      );
    }
    try {
      const requiredModule = commonjsRequire(filePath);
      if (!applyInteropRequireDefault) {
        return requiredModule;
      }
      return (0, _interopRequireDefault2.default)(requiredModule).default;
    } catch (error2) {
      if (error2.code === "ERR_REQUIRE_ESM") {
        try {
          const moduleUrl = (0, _url2().pathToFileURL)(filePath);
          const importedModule = await import(moduleUrl.href);
          if (!applyInteropRequireDefault) {
            return importedModule;
          }
          if (!importedModule.default) {
            throw new Error(
              `Jest: Failed to load ESM at ${filePath} - did you use a default export?`
            );
          }
          return importedModule.default;
        } catch (innerError) {
          if (innerError.message === "Not supported") {
            throw new Error(
              `Jest: Your version of Node does not support dynamic import - please enable it or use a .cjs file extension for file ${filePath}`
            );
          }
          throw innerError;
        }
      } else {
        throw error2;
      }
    }
  }
  return requireOrImportModule;
}
var invariant = {};
var hasRequiredInvariant;
function requireInvariant() {
  if (hasRequiredInvariant) return invariant;
  hasRequiredInvariant = 1;
  Object.defineProperty(invariant, "__esModule", {
    value: true
  });
  invariant.default = invariant$1;
  function invariant$1(condition, message = "") {
    if (!condition) {
      throw new Error(message);
    }
  }
  return invariant;
}
var isNonNullable = {};
var hasRequiredIsNonNullable;
function requireIsNonNullable() {
  if (hasRequiredIsNonNullable) return isNonNullable;
  hasRequiredIsNonNullable = 1;
  Object.defineProperty(isNonNullable, "__esModule", {
    value: true
  });
  isNonNullable.default = isNonNullable$1;
  function isNonNullable$1(value2) {
    return value2 != null;
  }
  return isNonNullable;
}
var hasRequiredBuild;
function requireBuild() {
  if (hasRequiredBuild) return build$2;
  hasRequiredBuild = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "ErrorWithStack", {
      enumerable: true,
      get: function() {
        return _ErrorWithStack.default;
      }
    });
    Object.defineProperty(exports, "clearLine", {
      enumerable: true,
      get: function() {
        return _clearLine.default;
      }
    });
    Object.defineProperty(exports, "convertDescriptorToString", {
      enumerable: true,
      get: function() {
        return _convertDescriptorToString.default;
      }
    });
    Object.defineProperty(exports, "createDirectory", {
      enumerable: true,
      get: function() {
        return _createDirectory.default;
      }
    });
    Object.defineProperty(exports, "deepCyclicCopy", {
      enumerable: true,
      get: function() {
        return _deepCyclicCopy.default;
      }
    });
    Object.defineProperty(exports, "formatTime", {
      enumerable: true,
      get: function() {
        return _formatTime.default;
      }
    });
    Object.defineProperty(exports, "globsToMatcher", {
      enumerable: true,
      get: function() {
        return _globsToMatcher.default;
      }
    });
    Object.defineProperty(exports, "installCommonGlobals", {
      enumerable: true,
      get: function() {
        return _installCommonGlobals.default;
      }
    });
    Object.defineProperty(exports, "interopRequireDefault", {
      enumerable: true,
      get: function() {
        return _interopRequireDefault2.default;
      }
    });
    Object.defineProperty(exports, "invariant", {
      enumerable: true,
      get: function() {
        return _invariant.default;
      }
    });
    Object.defineProperty(exports, "isInteractive", {
      enumerable: true,
      get: function() {
        return _isInteractive.default;
      }
    });
    Object.defineProperty(exports, "isNonNullable", {
      enumerable: true,
      get: function() {
        return _isNonNullable.default;
      }
    });
    Object.defineProperty(exports, "isPromise", {
      enumerable: true,
      get: function() {
        return _isPromise.default;
      }
    });
    Object.defineProperty(exports, "pluralize", {
      enumerable: true,
      get: function() {
        return _pluralize.default;
      }
    });
    exports.preRunMessage = void 0;
    Object.defineProperty(exports, "replacePathSepForGlob", {
      enumerable: true,
      get: function() {
        return _replacePathSepForGlob.default;
      }
    });
    Object.defineProperty(exports, "requireOrImportModule", {
      enumerable: true,
      get: function() {
        return _requireOrImportModule.default;
      }
    });
    Object.defineProperty(exports, "setGlobal", {
      enumerable: true,
      get: function() {
        return _setGlobal.default;
      }
    });
    exports.specialChars = void 0;
    Object.defineProperty(exports, "testPathPatternToRegExp", {
      enumerable: true,
      get: function() {
        return _testPathPatternToRegExp.default;
      }
    });
    Object.defineProperty(exports, "tryRealpath", {
      enumerable: true,
      get: function() {
        return _tryRealpath.default;
      }
    });
    var preRunMessage2 = _interopRequireWildcard2(requirePreRunMessage());
    exports.preRunMessage = preRunMessage2;
    var specialChars2 = _interopRequireWildcard2(requireSpecialChars());
    exports.specialChars = specialChars2;
    var _clearLine = _interopRequireDefault22(requireClearLine());
    var _createDirectory = _interopRequireDefault22(requireCreateDirectory());
    var _ErrorWithStack = _interopRequireDefault22(requireErrorWithStack());
    var _installCommonGlobals = _interopRequireDefault22(
      requireInstallCommonGlobals()
    );
    var _interopRequireDefault2 = _interopRequireDefault22(
      requireInteropRequireDefault()
    );
    var _isInteractive = _interopRequireDefault22(requireIsInteractive());
    var _isPromise = _interopRequireDefault22(requireIsPromise());
    var _setGlobal = _interopRequireDefault22(requireSetGlobal());
    var _deepCyclicCopy = _interopRequireDefault22(requireDeepCyclicCopy());
    var _convertDescriptorToString = _interopRequireDefault22(
      requireConvertDescriptorToString()
    );
    var _replacePathSepForGlob = _interopRequireDefault22(
      requireReplacePathSepForGlob()
    );
    var _testPathPatternToRegExp = _interopRequireDefault22(
      requireTestPathPatternToRegExp()
    );
    var _globsToMatcher = _interopRequireDefault22(requireGlobsToMatcher());
    var _pluralize = _interopRequireDefault22(requirePluralize());
    var _formatTime = _interopRequireDefault22(requireFormatTime());
    var _tryRealpath = _interopRequireDefault22(requireTryRealpath());
    var _requireOrImportModule = _interopRequireDefault22(
      requireRequireOrImportModule()
    );
    var _invariant = _interopRequireDefault22(requireInvariant());
    var _isNonNullable = _interopRequireDefault22(requireIsNonNullable());
    function _interopRequireDefault22(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache2(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache2 = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard2(obj, nodeInterop) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache2 = _getRequireWildcardCache2(nodeInterop);
      if (cache2 && cache2.has(obj)) {
        return cache2.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key2 in obj) {
        if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key2, desc);
          } else {
            newObj[key2] = obj[key2];
          }
        }
      }
      newObj.default = obj;
      if (cache2) {
        cache2.set(obj, newObj);
      }
      return newObj;
    }
  })(build$2);
  return build$2;
}
var buildExports = requireBuild();
const JEST_MATCHERS_OBJECT = Symbol.for("$$jest-matchers-object");
const INTERNAL_MATCHER_FLAG = Symbol.for("$$jest-internal-matcher");
if (!Object.prototype.hasOwnProperty.call(globalThis, JEST_MATCHERS_OBJECT)) {
  const defaultState = {
    assertionCalls: 0,
    expectedAssertionsNumber: null,
    isExpectingAssertions: false,
    numPassingAsserts: 0,
    suppressedErrors: []
    // errors that are not thrown immediately.
  };
  Object.defineProperty(globalThis, JEST_MATCHERS_OBJECT, {
    value: {
      customEqualityTesters: [],
      matchers: /* @__PURE__ */ Object.create(null),
      state: defaultState
    }
  });
}
const getState = () => globalThis[JEST_MATCHERS_OBJECT].state;
const setState = (state2) => {
  Object.assign(globalThis[JEST_MATCHERS_OBJECT].state, state2);
};
const getMatchers = () => globalThis[JEST_MATCHERS_OBJECT].matchers;
const setMatchers = (matchers2, isInternal, expect2) => {
  Object.keys(matchers2).forEach((key2) => {
    const matcher = matchers2[key2];
    if (typeof matcher !== "function") {
      throw new TypeError(
        `expect.extend: \`${key2}\` is not a valid matcher. Must be a function, is "${getType_1(
          matcher
        )}"`
      );
    }
    Object.defineProperty(matcher, INTERNAL_MATCHER_FLAG, {
      value: isInternal
    });
    if (!isInternal) {
      class CustomMatcher extends AsymmetricMatcher {
        constructor(inverse = false, ...sample) {
          super(sample, inverse);
        }
        asymmetricMatch(other) {
          const { pass } = matcher.call(
            this.getMatcherContext(),
            other,
            ...this.sample
          );
          return this.inverse ? !pass : pass;
        }
        toString() {
          return `${this.inverse ? "not." : ""}${key2}`;
        }
        getExpectedType() {
          return "any";
        }
        toAsymmetricMatcher() {
          return `${this.toString()}<${this.sample.map(String).join(", ")}>`;
        }
      }
      Object.defineProperty(expect2, key2, {
        configurable: true,
        enumerable: true,
        value: (...sample) => new CustomMatcher(false, ...sample),
        writable: true
      });
      Object.defineProperty(expect2.not, key2, {
        configurable: true,
        enumerable: true,
        value: (...sample) => new CustomMatcher(true, ...sample),
        writable: true
      });
    }
  });
  Object.assign(globalThis[JEST_MATCHERS_OBJECT].matchers, matchers2);
};
const getCustomEqualityTesters = () => globalThis[JEST_MATCHERS_OBJECT].customEqualityTesters;
const addCustomEqualityTesters = (newTesters) => {
  if (!Array.isArray(newTesters)) {
    throw new TypeError(
      `expect.customEqualityTesters: Must be set to an array of Testers. Was given "${getType_1(
        newTesters
      )}"`
    );
  }
  globalThis[JEST_MATCHERS_OBJECT].customEqualityTesters.push(
    ...newTesters
  );
};
const functionToString = Function.prototype.toString;
function fnNameFor(func) {
  if (func.name)
    return func.name;
  const matches = functionToString.call(func).match(/^(?:async)?\s*function\s*\*?\s*([\w$]+)\s*\(/);
  return matches ? matches[1] : "<anonymous>";
}
const utils$9 = Object.freeze({
  ...matcherUtils$1,
  iterableEquality: build$8.iterableEquality,
  subsetEquality: build$8.subsetEquality
});
function getPrototype(obj) {
  if (Object.getPrototypeOf)
    return Object.getPrototypeOf(obj);
  if (obj.constructor.prototype === obj)
    return null;
  return obj.constructor.prototype;
}
function hasProperty(obj, property) {
  if (!obj)
    return false;
  if (Object.prototype.hasOwnProperty.call(obj, property))
    return true;
  return hasProperty(getPrototype(obj), property);
}
class AsymmetricMatcher {
  constructor(sample, inverse = false) {
    this.sample = sample;
    this.inverse = inverse;
    this.$$typeof = Symbol.for("jest.asymmetricMatcher");
  }
  getMatcherContext() {
    return {
      customTesters: getCustomEqualityTesters(),
      dontThrow: () => {
      },
      ...getState(),
      equals: build$8.equals,
      isNot: this.inverse,
      utils: utils$9
    };
  }
}
class Any extends AsymmetricMatcher {
  constructor(sample) {
    if (typeof sample === "undefined") {
      throw new TypeError(
        "any() expects to be passed a constructor function. Please pass one or use anything() to match any object."
      );
    }
    super(sample);
  }
  asymmetricMatch(other) {
    if (this.sample === String)
      return typeof other === "string" || other instanceof String;
    if (this.sample === Number)
      return typeof other === "number" || other instanceof Number;
    if (this.sample === Function)
      return typeof other === "function" || other instanceof Function;
    if (this.sample === Boolean)
      return typeof other === "boolean" || other instanceof Boolean;
    if (this.sample === BigInt)
      return typeof other === "bigint" || other instanceof BigInt;
    if (this.sample === Symbol)
      return typeof other === "symbol" || other instanceof Symbol;
    if (this.sample === Object)
      return typeof other === "object";
    return other instanceof this.sample;
  }
  toString() {
    return "Any";
  }
  getExpectedType() {
    if (this.sample === String)
      return "string";
    if (this.sample === Number)
      return "number";
    if (this.sample === Function)
      return "function";
    if (this.sample === Object)
      return "object";
    if (this.sample === Boolean)
      return "boolean";
    return fnNameFor(this.sample);
  }
  toAsymmetricMatcher() {
    return `Any<${fnNameFor(this.sample)}>`;
  }
}
class Anything extends AsymmetricMatcher {
  asymmetricMatch(other) {
    return other != null;
  }
  toString() {
    return "Anything";
  }
  // No getExpectedType method, because it matches either null or undefined.
  toAsymmetricMatcher() {
    return "Anything";
  }
}
class ArrayContaining extends AsymmetricMatcher {
  constructor(sample, inverse = false) {
    super(sample, inverse);
  }
  asymmetricMatch(other) {
    if (!Array.isArray(this.sample)) {
      throw new Error(
        `You must provide an array to ${this.toString()}, not '${typeof this.sample}'.`
      );
    }
    const matcherContext = this.getMatcherContext();
    const result = this.sample.length === 0 || Array.isArray(other) && this.sample.every(
      (item2) => other.some(
        (another) => build$8.equals(item2, another, matcherContext.customTesters)
      )
    );
    return this.inverse ? !result : result;
  }
  toString() {
    return `Array${this.inverse ? "Not" : ""}Containing`;
  }
  getExpectedType() {
    return "array";
  }
}
class ObjectContaining extends AsymmetricMatcher {
  constructor(sample, inverse = false) {
    super(sample, inverse);
  }
  asymmetricMatch(other) {
    if (typeof this.sample !== "object") {
      throw new Error(
        `You must provide an object to ${this.toString()}, not '${typeof this.sample}'.`
      );
    }
    let result = true;
    const matcherContext = this.getMatcherContext();
    const objectKeys = build$8.getObjectKeys(this.sample);
    for (const key2 of objectKeys) {
      if (!hasProperty(other, key2) || !build$8.equals(this.sample[key2], other[key2], matcherContext.customTesters)) {
        result = false;
        break;
      }
    }
    return this.inverse ? !result : result;
  }
  toString() {
    return `Object${this.inverse ? "Not" : ""}Containing`;
  }
  getExpectedType() {
    return "object";
  }
}
class StringContaining extends AsymmetricMatcher {
  constructor(sample, inverse = false) {
    if (!build$8.isA("String", sample))
      throw new Error("Expected is not a string");
    super(sample, inverse);
  }
  asymmetricMatch(other) {
    const result = build$8.isA("String", other) && other.includes(this.sample);
    return this.inverse ? !result : result;
  }
  toString() {
    return `String${this.inverse ? "Not" : ""}Containing`;
  }
  getExpectedType() {
    return "string";
  }
}
class StringMatching extends AsymmetricMatcher {
  constructor(sample, inverse = false) {
    if (!build$8.isA("String", sample) && !build$8.isA("RegExp", sample))
      throw new Error("Expected is not a String or a RegExp");
    super(new RegExp(sample), inverse);
  }
  asymmetricMatch(other) {
    const result = build$8.isA("String", other) && this.sample.test(other);
    return this.inverse ? !result : result;
  }
  toString() {
    return `String${this.inverse ? "Not" : ""}Matching`;
  }
  getExpectedType() {
    return "string";
  }
}
class CloseTo extends AsymmetricMatcher {
  constructor(sample, precision = 2, inverse = false) {
    if (!build$8.isA("Number", sample))
      throw new Error("Expected is not a Number");
    if (!build$8.isA("Number", precision))
      throw new Error("Precision is not a Number");
    super(sample);
    this.inverse = inverse;
    this.precision = precision;
  }
  asymmetricMatch(other) {
    if (!build$8.isA("Number", other))
      return false;
    let result = false;
    if (other === Infinity && this.sample === Infinity) {
      result = true;
    } else if (other === -Infinity && this.sample === -Infinity) {
      result = true;
    } else {
      result = Math.abs(this.sample - other) < Math.pow(10, -this.precision) / 2;
    }
    return this.inverse ? !result : result;
  }
  toString() {
    return `Number${this.inverse ? "Not" : ""}CloseTo`;
  }
  getExpectedType() {
    return "number";
  }
  toAsymmetricMatcher() {
    return [
      this.toString(),
      this.sample,
      `(${buildExports.pluralize("digit", this.precision)})`
    ].join(" ");
  }
}
const any = (expectedObject) => new Any(expectedObject);
const anything = () => new Anything();
const arrayContaining = (sample) => new ArrayContaining(sample);
const arrayNotContaining = (sample) => new ArrayContaining(sample, true);
const objectContaining = (sample) => new ObjectContaining(sample);
const objectNotContaining = (sample) => new ObjectContaining(sample, true);
const stringContaining = (expected) => new StringContaining(expected);
const stringNotContaining = (expected) => new StringContaining(expected, true);
const stringMatching = (expected) => new StringMatching(expected);
const stringNotMatching = (expected) => new StringMatching(expected, true);
const closeTo = (expected, precision) => new CloseTo(expected, precision);
const notCloseTo = (expected, precision) => new CloseTo(expected, precision, true);
const resetAssertionsLocalState = () => {
  setState({
    assertionCalls: 0,
    expectedAssertionsNumber: null,
    isExpectingAssertions: false,
    numPassingAsserts: 0
  });
};
const extractExpectedAssertionsErrors = () => {
  const result = [];
  const {
    assertionCalls,
    expectedAssertionsNumber,
    expectedAssertionsNumberError,
    isExpectingAssertions,
    isExpectingAssertionsError
  } = getState();
  resetAssertionsLocalState();
  if (typeof expectedAssertionsNumber === "number" && assertionCalls !== expectedAssertionsNumber) {
    const numOfAssertionsExpected = EXPECTED_COLOR_1(
      pluralize_1("assertion", expectedAssertionsNumber)
    );
    expectedAssertionsNumberError.message = `${matcherHint_1(".assertions", "", expectedAssertionsNumber.toString(), {
      isDirectExpectCall: true
    })}

Expected ${numOfAssertionsExpected} to be called but received ${RECEIVED_COLOR_1(
      pluralize_1("assertion call", assertionCalls || 0)
    )}.`;
    result.push({
      actual: assertionCalls.toString(),
      error: expectedAssertionsNumberError,
      expected: expectedAssertionsNumber.toString()
    });
  }
  if (isExpectingAssertions && assertionCalls === 0) {
    const expected = EXPECTED_COLOR_1("at least one assertion");
    const received = RECEIVED_COLOR_1("received none");
    isExpectingAssertionsError.message = `${matcherHint_1(
      ".hasAssertions",
      "",
      "",
      { isDirectExpectCall: true }
    )}

Expected ${expected} to be called but ${received}.`;
    result.push({
      actual: "none",
      error: isExpectingAssertionsError,
      expected: "at least one"
    });
  }
  return result;
};
const printSubstring$1 = (val) => val.replace(/"|\\/g, "\\$&");
const printReceivedStringContainExpectedSubstring$1 = (received, start, length) => RECEIVED_COLOR_1(
  `"${printSubstring$1(received.slice(0, start))}${INVERTED_COLOR_1(
    printSubstring$1(received.slice(start, start + length))
  )}${printSubstring$1(received.slice(start + length))}"`
);
const printReceivedStringContainExpectedResult$1 = (received, result) => result === null ? printReceived_1(received) : printReceivedStringContainExpectedSubstring$1(
  received,
  result.index,
  result[0].length
);
const printReceivedArrayContainExpectedItem = (received, index2) => RECEIVED_COLOR_1(
  `[${received.map((item2, i) => {
    const stringified = stringify_1(item2);
    return i === index2 ? INVERTED_COLOR_1(stringified) : stringified;
  }).join(", ")}]`
);
const printCloseTo = (receivedDiff, expectedDiff, precision, isNot) => {
  const receivedDiffString = stringify_1(receivedDiff);
  const expectedDiffString = receivedDiffString.includes("e") ? (
    // toExponential arg is number of digits after the decimal point.
    expectedDiff.toExponential(0)
  ) : 0 <= precision && precision < 20 ? (
    // toFixed arg is number of digits after the decimal point.
    // It may be a value between 0 and 20 inclusive.
    // Implementations may optionally support a larger range of values.
    expectedDiff.toFixed(precision + 1)
  ) : stringify_1(expectedDiff);
  return `Expected precision:  ${isNot ? "    " : ""}  ${stringify_1(precision)}
Expected difference: ${isNot ? "not " : ""}< ${EXPECTED_COLOR_1(
    expectedDiffString
  )}
Received difference: ${isNot ? "    " : ""}  ${RECEIVED_COLOR_1(
    receivedDiffString
  )}`;
};
const printExpectedConstructorName = (label, expected) => `${printConstructorName(label, expected, false, true)}
`;
const printExpectedConstructorNameNot = (label, expected) => `${printConstructorName(label, expected, true, true)}
`;
const printReceivedConstructorName = (label, received) => `${printConstructorName(label, received, false, false)}
`;
const printReceivedConstructorNameNot = (label, received, expected) => typeof expected.name === "string" && expected.name.length !== 0 && typeof received.name === "string" && received.name.length !== 0 ? `${printConstructorName(label, received, true, false)} ${Object.getPrototypeOf(received) === expected ? "extends" : "extends … extends"} ${EXPECTED_COLOR_1(expected.name)}
` : `${printConstructorName(label, received, false, false)}
`;
const printConstructorName = (label, constructor, isNot, isExpected) => typeof constructor.name !== "string" ? `${label} name is not a string` : constructor.name.length === 0 ? `${label} name is an empty string` : `${label}: ${!isNot ? "" : isExpected ? "not " : "    "}${isExpected ? EXPECTED_COLOR_1(constructor.name) : RECEIVED_COLOR_1(constructor.name)}`;
const EXPECTED_LABEL = "Expected";
const RECEIVED_LABEL = "Received";
const EXPECTED_VALUE_LABEL = "Expected value";
const RECEIVED_VALUE_LABEL = "Received value";
const isExpand$1 = (expand2) => expand2 !== false;
const toStrictEqualTesters = [
  build$8.iterableEquality,
  build$8.typeEquality,
  build$8.sparseArrayEquality,
  build$8.arrayBufferEquality
];
const matchers$1 = {
  toBe(received, expected) {
    const matcherName = "toBe";
    const options2 = {
      comment: "Object.is equality",
      isNot: this.isNot,
      promise: this.promise
    };
    const pass = Object.is(received, expected);
    const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected: not ${printExpected_1(expected)}` : () => {
      const expectedType = getType_1(expected);
      let deepEqualityName = null;
      if (expectedType !== "map" && expectedType !== "set") {
        if (build$8.equals(
          received,
          expected,
          [...this.customTesters, ...toStrictEqualTesters],
          true
        ))
          deepEqualityName = "toStrictEqual";
        else if (build$8.equals(received, expected, [
          ...this.customTesters,
          build$8.iterableEquality
        ]))
          deepEqualityName = "toEqual";
      }
      return matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + (deepEqualityName !== null ? `${DIM_COLOR_1(
        `If it should pass with deep equality, replace "${matcherName}" with "${deepEqualityName}"`
      )}

` : "") + printDiffOrStringify_1(
        expected,
        received,
        EXPECTED_LABEL,
        RECEIVED_LABEL,
        isExpand$1(this.expand)
      );
    };
    return { actual: received, expected, message, name: matcherName, pass };
  },
  toBeCloseTo(received, expected, precision = 2) {
    const matcherName = "toBeCloseTo";
    const secondArgument = arguments.length === 3 ? "precision" : void 0;
    const isNot = this.isNot;
    const options2 = {
      isNot,
      promise: this.promise,
      secondArgument,
      secondArgumentColor: (arg) => arg
    };
    if (typeof expected !== "number") {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${EXPECTED_COLOR_1("expected")} value must be a number`,
          printWithType_1("Expected", expected, printExpected_1)
        )
      );
    }
    if (typeof received !== "number") {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${RECEIVED_COLOR_1("received")} value must be a number`,
          printWithType_1("Received", received, printReceived_1)
        )
      );
    }
    let pass = false;
    let expectedDiff = 0;
    let receivedDiff = 0;
    if (received === Infinity && expected === Infinity) {
      pass = true;
    } else if (received === -Infinity && expected === -Infinity) {
      pass = true;
    } else {
      expectedDiff = Math.pow(10, -precision) / 2;
      receivedDiff = Math.abs(expected - received);
      pass = receivedDiff < expectedDiff;
    }
    const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected: not ${printExpected_1(expected)}
` + (receivedDiff === 0 ? "" : `Received:     ${printReceived_1(received)}

${printCloseTo(receivedDiff, expectedDiff, precision, isNot)}`) : () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected: ${printExpected_1(expected)}
Received: ${printReceived_1(received)}

` + printCloseTo(receivedDiff, expectedDiff, precision, isNot);
    return { message, pass };
  },
  toBeDefined(received, expected) {
    const matcherName = "toBeDefined";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    ensureNoExpected_1(expected, matcherName, options2);
    const pass = received !== void 0;
    const message = () => matcherHint_1(matcherName, void 0, "", options2) + `

Received: ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeFalsy(received, expected) {
    const matcherName = "toBeFalsy";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    ensureNoExpected_1(expected, matcherName, options2);
    const pass = !received;
    const message = () => matcherHint_1(matcherName, void 0, "", options2) + `

Received: ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeGreaterThan(received, expected) {
    const matcherName = "toBeGreaterThan";
    const isNot = this.isNot;
    const options2 = {
      isNot,
      promise: this.promise
    };
    ensureNumbers_1(received, expected, matcherName, options2);
    const pass = received > expected;
    const message = () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected:${isNot ? " not" : ""} > ${printExpected_1(expected)}
Received:${isNot ? "    " : ""}   ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeGreaterThanOrEqual(received, expected) {
    const matcherName = "toBeGreaterThanOrEqual";
    const isNot = this.isNot;
    const options2 = {
      isNot,
      promise: this.promise
    };
    ensureNumbers_1(received, expected, matcherName, options2);
    const pass = received >= expected;
    const message = () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected:${isNot ? " not" : ""} >= ${printExpected_1(expected)}
Received:${isNot ? "    " : ""}    ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeInstanceOf(received, expected) {
    const matcherName = "toBeInstanceOf";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    if (typeof expected !== "function") {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${EXPECTED_COLOR_1("expected")} value must be a function`,
          printWithType_1("Expected", expected, printExpected_1)
        )
      );
    }
    const pass = received instanceof expected;
    const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + printExpectedConstructorNameNot("Expected constructor", expected) + (typeof received.constructor === "function" && received.constructor !== expected ? printReceivedConstructorNameNot(
      "Received constructor",
      received.constructor,
      expected
    ) : "") : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + printExpectedConstructorName("Expected constructor", expected) + (isPrimitive_1(received) || Object.getPrototypeOf(received) === null ? `
Received value has no prototype
Received value: ${printReceived_1(
      received
    )}` : typeof received.constructor !== "function" ? `
Received value: ${printReceived_1(received)}` : printReceivedConstructorName(
      "Received constructor",
      received.constructor
    ));
    return { message, pass };
  },
  toBeLessThan(received, expected) {
    const matcherName = "toBeLessThan";
    const isNot = this.isNot;
    const options2 = {
      isNot,
      promise: this.promise
    };
    ensureNumbers_1(received, expected, matcherName, options2);
    const pass = received < expected;
    const message = () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected:${isNot ? " not" : ""} < ${printExpected_1(expected)}
Received:${isNot ? "    " : ""}   ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeLessThanOrEqual(received, expected) {
    const matcherName = "toBeLessThanOrEqual";
    const isNot = this.isNot;
    const options2 = {
      isNot,
      promise: this.promise
    };
    ensureNumbers_1(received, expected, matcherName, options2);
    const pass = received <= expected;
    const message = () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected:${isNot ? " not" : ""} <= ${printExpected_1(expected)}
Received:${isNot ? "    " : ""}    ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeNaN(received, expected) {
    const matcherName = "toBeNaN";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    ensureNoExpected_1(expected, matcherName, options2);
    const pass = Number.isNaN(received);
    const message = () => matcherHint_1(matcherName, void 0, "", options2) + `

Received: ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeNull(received, expected) {
    const matcherName = "toBeNull";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    ensureNoExpected_1(expected, matcherName, options2);
    const pass = received === null;
    const message = () => matcherHint_1(matcherName, void 0, "", options2) + `

Received: ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeTruthy(received, expected) {
    const matcherName = "toBeTruthy";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    ensureNoExpected_1(expected, matcherName, options2);
    const pass = !!received;
    const message = () => matcherHint_1(matcherName, void 0, "", options2) + `

Received: ${printReceived_1(received)}`;
    return { message, pass };
  },
  toBeUndefined(received, expected) {
    const matcherName = "toBeUndefined";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    ensureNoExpected_1(expected, matcherName, options2);
    const pass = received === void 0;
    const message = () => matcherHint_1(matcherName, void 0, "", options2) + `

Received: ${printReceived_1(received)}`;
    return { message, pass };
  },
  toContain(received, expected) {
    const matcherName = "toContain";
    const isNot = this.isNot;
    const options2 = {
      comment: "indexOf",
      isNot,
      promise: this.promise
    };
    if (received == null) {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${RECEIVED_COLOR_1("received")} value must not be null nor undefined`,
          printWithType_1("Received", received, printReceived_1)
        )
      );
    }
    if (typeof received === "string") {
      const wrongTypeErrorMessage = `${EXPECTED_COLOR_1(
        "expected"
      )} value must be a string if ${RECEIVED_COLOR_1(
        "received"
      )} value is a string`;
      if (typeof expected !== "string") {
        throw new Error(
          matcherErrorMessage_1(
            matcherHint_1(matcherName, received, String(expected), options2),
            wrongTypeErrorMessage,
            printWithType_1("Expected", expected, printExpected_1) + "\n" + printWithType_1("Received", received, printReceived_1)
          )
        );
      }
      const index22 = received.indexOf(String(expected));
      const pass2 = index22 !== -1;
      const message2 = () => {
        const labelExpected = `Expected ${typeof expected === "string" ? "substring" : "value"}`;
        const labelReceived = "Received string";
        const printLabel = getLabelPrinter_1(labelExpected, labelReceived);
        return matcherHint_1(matcherName, void 0, void 0, options2) + `

${printLabel(labelExpected)}${isNot ? "not " : ""}${printExpected_1(
          expected
        )}
${printLabel(labelReceived)}${isNot ? "    " : ""}${isNot ? printReceivedStringContainExpectedSubstring$1(
          received,
          index22,
          String(expected).length
        ) : printReceived_1(received)}`;
      };
      return { message: message2, pass: pass2 };
    }
    const indexable = Array.from(received);
    const index2 = indexable.indexOf(expected);
    const pass = index2 !== -1;
    const message = () => {
      const labelExpected = "Expected value";
      const labelReceived = `Received ${getType_1(received)}`;
      const printLabel = getLabelPrinter_1(labelExpected, labelReceived);
      return matcherHint_1(matcherName, void 0, void 0, options2) + `

${printLabel(labelExpected)}${isNot ? "not " : ""}${printExpected_1(
        expected
      )}
${printLabel(labelReceived)}${isNot ? "    " : ""}${isNot && Array.isArray(received) ? printReceivedArrayContainExpectedItem(received, index2) : printReceived_1(received)}` + (!isNot && indexable.findIndex(
        (item2) => build$8.equals(item2, expected, [...this.customTesters, build$8.iterableEquality])
      ) !== -1 ? `

${SUGGEST_TO_CONTAIN_EQUAL_1}` : "");
    };
    return { message, pass };
  },
  toContainEqual(received, expected) {
    const matcherName = "toContainEqual";
    const isNot = this.isNot;
    const options2 = {
      comment: "deep equality",
      isNot,
      promise: this.promise
    };
    if (received == null) {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${RECEIVED_COLOR_1("received")} value must not be null nor undefined`,
          printWithType_1("Received", received, printReceived_1)
        )
      );
    }
    const index2 = Array.from(received).findIndex(
      (item2) => build$8.equals(item2, expected, [...this.customTesters, build$8.iterableEquality])
    );
    const pass = index2 !== -1;
    const message = () => {
      const labelExpected = "Expected value";
      const labelReceived = `Received ${getType_1(received)}`;
      const printLabel = getLabelPrinter_1(labelExpected, labelReceived);
      return matcherHint_1(matcherName, void 0, void 0, options2) + `

${printLabel(labelExpected)}${isNot ? "not " : ""}${printExpected_1(
        expected
      )}
${printLabel(labelReceived)}${isNot ? "    " : ""}${isNot && Array.isArray(received) ? printReceivedArrayContainExpectedItem(received, index2) : printReceived_1(received)}`;
    };
    return { message, pass };
  },
  toEqual(received, expected) {
    const matcherName = "toEqual";
    const options2 = {
      comment: "deep equality",
      isNot: this.isNot,
      promise: this.promise
    };
    const pass = build$8.equals(received, expected, [
      ...this.customTesters,
      build$8.iterableEquality
    ]);
    const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected: not ${printExpected_1(expected)}
` + (stringify_1(expected) !== stringify_1(received) ? `Received:     ${printReceived_1(received)}` : "") : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + printDiffOrStringify_1(
      expected,
      received,
      EXPECTED_LABEL,
      RECEIVED_LABEL,
      isExpand$1(this.expand)
    );
    return { actual: received, expected, message, name: matcherName, pass };
  },
  toHaveLength(received, expected) {
    const matcherName = "toHaveLength";
    const isNot = this.isNot;
    const options2 = {
      isNot,
      promise: this.promise
    };
    if (typeof (received == null ? void 0 : received.length) !== "number") {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${RECEIVED_COLOR_1(
            "received"
          )} value must have a length property whose value must be a number`,
          printWithType_1("Received", received, printReceived_1)
        )
      );
    }
    ensureExpectedIsNonNegativeInteger_1(expected, matcherName, options2);
    const pass = received.length === expected;
    const message = () => {
      const labelExpected = "Expected length";
      const labelReceivedLength = "Received length";
      const labelReceivedValue = `Received ${getType_1(received)}`;
      const printLabel = getLabelPrinter_1(
        labelExpected,
        labelReceivedLength,
        labelReceivedValue
      );
      return matcherHint_1(matcherName, void 0, void 0, options2) + `

${printLabel(labelExpected)}${isNot ? "not " : ""}${printExpected_1(
        expected
      )}
` + (isNot ? "" : `${printLabel(labelReceivedLength)}${printReceived_1(
        received.length
      )}
`) + `${printLabel(labelReceivedValue)}${isNot ? "    " : ""}${printReceived_1(
        received
      )}`;
    };
    return { message, pass };
  },
  toHaveProperty(received, expectedPath, expectedValue) {
    const matcherName = "toHaveProperty";
    const expectedArgument = "path";
    const hasValue = arguments.length === 3;
    const options2 = {
      isNot: this.isNot,
      promise: this.promise,
      secondArgument: hasValue ? "value" : ""
    };
    if (received === null || received === void 0) {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, expectedArgument, options2),
          `${RECEIVED_COLOR_1("received")} value must not be null nor undefined`,
          printWithType_1("Received", received, printReceived_1)
        )
      );
    }
    const expectedPathType = getType_1(expectedPath);
    if (expectedPathType !== "string" && expectedPathType !== "array") {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, expectedArgument, options2),
          `${EXPECTED_COLOR_1("expected")} path must be a string or array`,
          printWithType_1("Expected", expectedPath, printExpected_1)
        )
      );
    }
    const expectedPathLength = typeof expectedPath === "string" ? build$8.pathAsArray(expectedPath).length : expectedPath.length;
    if (expectedPathType === "array" && expectedPathLength === 0) {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, expectedArgument, options2),
          `${EXPECTED_COLOR_1("expected")} path must not be an empty array`,
          printWithType_1("Expected", expectedPath, printExpected_1)
        )
      );
    }
    const result = build$8.getPath(received, expectedPath);
    const { lastTraversedObject, endPropIsDefined, hasEndProp, value: value2 } = result;
    const receivedPath = result.traversedPath;
    const hasCompletePath = receivedPath.length === expectedPathLength;
    const receivedValue = hasCompletePath ? result.value : lastTraversedObject;
    const pass = hasValue && endPropIsDefined ? build$8.equals(value2, expectedValue, [
      ...this.customTesters,
      build$8.iterableEquality
    ]) : Boolean(hasEndProp);
    const message = pass ? () => matcherHint_1(matcherName, void 0, expectedArgument, options2) + "\n\n" + (hasValue ? `Expected path: ${printExpected_1(expectedPath)}

Expected value: not ${printExpected_1(expectedValue)}${stringify_1(expectedValue) !== stringify_1(receivedValue) ? `
Received value:     ${printReceived_1(receivedValue)}` : ""}` : `Expected path: not ${printExpected_1(expectedPath)}

Received value: ${printReceived_1(receivedValue)}`) : () => matcherHint_1(matcherName, void 0, expectedArgument, options2) + `

Expected path: ${printExpected_1(expectedPath)}
` + (hasCompletePath ? `
${printDiffOrStringify_1(
      expectedValue,
      receivedValue,
      EXPECTED_VALUE_LABEL,
      RECEIVED_VALUE_LABEL,
      isExpand$1(this.expand)
    )}` : `Received path: ${printReceived_1(
      expectedPathType === "array" || receivedPath.length === 0 ? receivedPath : receivedPath.join(".")
    )}

${hasValue ? `Expected value: ${printExpected_1(expectedValue)}
` : ""}Received value: ${printReceived_1(receivedValue)}`);
    return { message, pass };
  },
  toMatch(received, expected) {
    const matcherName = "toMatch";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    if (typeof received !== "string") {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${RECEIVED_COLOR_1("received")} value must be a string`,
          printWithType_1("Received", received, printReceived_1)
        )
      );
    }
    if (!(typeof expected === "string") && !(expected && typeof expected.test === "function")) {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${EXPECTED_COLOR_1(
            "expected"
          )} value must be a string or regular expression`,
          printWithType_1("Expected", expected, printExpected_1)
        )
      );
    }
    const pass = typeof expected === "string" ? received.includes(expected) : new RegExp(expected).test(received);
    const message = pass ? () => typeof expected === "string" ? matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected substring: not ${printExpected_1(expected)}
Received string:        ${printReceivedStringContainExpectedSubstring$1(
      received,
      received.indexOf(expected),
      expected.length
    )}` : matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected pattern: not ${printExpected_1(expected)}
Received string:      ${printReceivedStringContainExpectedResult$1(
      received,
      typeof expected.exec === "function" ? expected.exec(received) : null
    )}` : () => {
      const labelExpected = `Expected ${typeof expected === "string" ? "substring" : "pattern"}`;
      const labelReceived = "Received string";
      const printLabel = getLabelPrinter_1(labelExpected, labelReceived);
      return matcherHint_1(matcherName, void 0, void 0, options2) + `

${printLabel(labelExpected)}${printExpected_1(expected)}
${printLabel(labelReceived)}${printReceived_1(received)}`;
    };
    return { message, pass };
  },
  toMatchObject(received, expected) {
    const matcherName = "toMatchObject";
    const options2 = {
      isNot: this.isNot,
      promise: this.promise
    };
    if (typeof received !== "object" || received === null) {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${RECEIVED_COLOR_1("received")} value must be a non-null object`,
          printWithType_1("Received", received, printReceived_1)
        )
      );
    }
    if (typeof expected !== "object" || expected === null) {
      throw new Error(
        matcherErrorMessage_1(
          matcherHint_1(matcherName, void 0, void 0, options2),
          `${EXPECTED_COLOR_1("expected")} value must be a non-null object`,
          printWithType_1("Expected", expected, printExpected_1)
        )
      );
    }
    const pass = build$8.equals(received, expected, [
      ...this.customTesters,
      build$8.iterableEquality,
      build$8.subsetEquality
    ]);
    const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected: not ${printExpected_1(expected)}` + (stringify_1(expected) !== stringify_1(received) ? `
Received:     ${printReceived_1(received)}` : "") : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + printDiffOrStringify_1(
      expected,
      build$8.getObjectSubset(received, expected, this.customTesters),
      EXPECTED_LABEL,
      RECEIVED_LABEL,
      isExpand$1(this.expand)
    );
    return { message, pass };
  },
  toStrictEqual(received, expected) {
    const matcherName = "toStrictEqual";
    const options2 = {
      comment: "deep equality",
      isNot: this.isNot,
      promise: this.promise
    };
    const pass = build$8.equals(
      received,
      expected,
      [...this.customTesters, ...toStrictEqualTesters],
      true
    );
    const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + `

Expected: not ${printExpected_1(expected)}
` + (stringify_1(expected) !== stringify_1(received) ? `Received:     ${printReceived_1(received)}` : "") : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + printDiffOrStringify_1(
      expected,
      received,
      EXPECTED_LABEL,
      RECEIVED_LABEL,
      isExpand$1(this.expand)
    );
    return { actual: received, expected, message, name: matcherName, pass };
  }
};
const isExpand = (expand2) => expand2 !== false;
const PRINT_LIMIT = 3;
const NO_ARGUMENTS = "called with 0 arguments";
const printExpectedArgs = (expected) => expected.length === 0 ? NO_ARGUMENTS : expected.map((arg) => printExpected_1(arg)).join(", ");
const printReceivedArgs = (received, expected) => received.length === 0 ? NO_ARGUMENTS : received.map(
  (arg, i) => Array.isArray(expected) && i < expected.length && isEqualValue(expected[i], arg) ? printCommon(arg) : printReceived_1(arg)
).join(", ");
const printCommon = (val) => DIM_COLOR_1(stringify_1(val));
const isEqualValue = (expected, received) => build$8.equals(expected, received, [...getCustomEqualityTesters(), build$8.iterableEquality]);
const isEqualCall = (expected, received) => received.length === expected.length && isEqualValue(expected, received);
const isEqualReturn = (expected, result) => result.type === "return" && isEqualValue(expected, result.value);
const countReturns = (results) => results.reduce(
  (n, result) => result.type === "return" ? n + 1 : n,
  0
);
const printNumberOfReturns = (countReturns2, countCalls) => `
Number of returns: ${printReceived_1(countReturns2)}${countCalls !== countReturns2 ? `
Number of calls:   ${printReceived_1(countCalls)}` : ""}`;
const getRightAlignedPrinter = (label) => {
  const index2 = label.indexOf(":");
  const suffix = label.slice(index2);
  return (string2, isExpectedCall) => (isExpectedCall ? `->${" ".repeat(Math.max(0, index2 - 2 - string2.length))}` : " ".repeat(Math.max(index2 - string2.length))) + string2 + suffix;
};
const printReceivedCallsNegative = (expected, indexedCalls, isOnlyCall, iExpectedCall) => {
  if (indexedCalls.length === 0)
    return "";
  const label = "Received:     ";
  if (isOnlyCall)
    return `${label + printReceivedArgs(indexedCalls[0], expected)}
`;
  const printAligned = getRightAlignedPrinter(label);
  return `Received
${indexedCalls.reduce(
    (printed, [i, args]) => `${printed + printAligned(String(i + 1), i === iExpectedCall) + printReceivedArgs(args, expected)}
`,
    ""
  )}`;
};
const printExpectedReceivedCallsPositive = (expected, indexedCalls, expand2, isOnlyCall, iExpectedCall) => {
  const expectedLine = `Expected: ${printExpectedArgs(expected)}
`;
  if (indexedCalls.length === 0)
    return expectedLine;
  const label = "Received: ";
  if (isOnlyCall && (iExpectedCall === 0 || iExpectedCall === void 0)) {
    const received = indexedCalls[0][1];
    if (isLineDiffableCall(expected, received)) {
      const lines = [
        EXPECTED_COLOR_1("- Expected"),
        RECEIVED_COLOR_1("+ Received"),
        ""
      ];
      const length = Math.max(expected.length, received.length);
      for (let i = 0; i < length; i += 1) {
        if (i < expected.length && i < received.length) {
          if (isEqualValue(expected[i], received[i])) {
            lines.push(`  ${printCommon(received[i])},`);
            continue;
          }
          if (isLineDiffableArg(expected[i], received[i])) {
            const difference = diff_1(expected[i], received[i], { expand: expand2 });
            if (typeof difference === "string" && difference.includes("- Expected") && difference.includes("+ Received")) {
              lines.push(`${difference.split("\n").slice(3).join("\n")},`);
              continue;
            }
          }
        }
        if (i < expected.length)
          lines.push(`${EXPECTED_COLOR_1(`- ${stringify_1(expected[i])}`)},`);
        if (i < received.length)
          lines.push(`${RECEIVED_COLOR_1(`+ ${stringify_1(received[i])}`)},`);
      }
      return `${lines.join("\n")}
`;
    }
    return `${expectedLine + label + printReceivedArgs(received, expected)}
`;
  }
  const printAligned = getRightAlignedPrinter(label);
  return expectedLine + "Received\n" + indexedCalls.reduce((printed, [i, received]) => {
    const aligned = printAligned(String(i + 1), i === iExpectedCall);
    return `${printed + ((i === iExpectedCall || iExpectedCall === void 0) && isLineDiffableCall(expected, received) ? aligned.replace(": ", "\n") + printDiffCall(expected, received, expand2) : aligned + printReceivedArgs(received, expected))}
`;
  }, "");
};
const indentation = "Received".replace(/\w/g, " ");
const printDiffCall = (expected, received, expand2) => received.map((arg, i) => {
  if (i < expected.length) {
    if (isEqualValue(expected[i], arg))
      return `${indentation}  ${printCommon(arg)},`;
    if (isLineDiffableArg(expected[i], arg)) {
      const difference = diff_1(expected[i], arg, { expand: expand2 });
      if (typeof difference === "string" && difference.includes("- Expected") && difference.includes("+ Received")) {
        return `${difference.split("\n").slice(3).map((line2) => indentation + line2).join("\n")},`;
      }
    }
  }
  return `${indentation + (i < expected.length ? `  ${printReceived_1(arg)}` : RECEIVED_COLOR_1(`+ ${stringify_1(arg)}`))},`;
}).join("\n");
const isLineDiffableCall = (expected, received) => expected.some(
  (arg, i) => i < received.length && isLineDiffableArg(arg, received[i])
);
const isLineDiffableArg = (expected, received) => {
  const expectedType = getType_1(expected);
  const receivedType = getType_1(received);
  if (expectedType !== receivedType)
    return false;
  if (isPrimitive_1(expected))
    return false;
  if (expectedType === "date" || expectedType === "function" || expectedType === "regexp")
    return false;
  if (expected instanceof Error && received instanceof Error)
    return false;
  if (expectedType === "object" && typeof expected.asymmetricMatch === "function")
    return false;
  if (receivedType === "object" && typeof received.asymmetricMatch === "function")
    return false;
  return true;
};
const printResult = (result, expected) => result.type === "throw" ? "function call threw an error" : result.type === "incomplete" ? "function call has not returned yet" : isEqualValue(expected, result.value) ? printCommon(result.value) : printReceived_1(result.value);
const printReceivedResults = (label, expected, indexedResults, isOnlyCall, iExpectedCall) => {
  if (indexedResults.length === 0)
    return "";
  if (isOnlyCall && (iExpectedCall === 0 || iExpectedCall === void 0))
    return `${label + printResult(indexedResults[0][1], expected)}
`;
  const printAligned = getRightAlignedPrinter(label);
  return label.replace(":", "").trim() + "\n" + indexedResults.reduce(
    (printed, [i, result]) => `${printed + printAligned(String(i + 1), i === iExpectedCall) + printResult(result, expected)}
`,
    ""
  );
};
const createToBeCalledMatcher = (matcherName) => function(received, expected) {
  const expectedArgument = "";
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  ensureNoExpected_1(expected, matcherName, options2);
  ensureMockOrSpy(received, matcherName, expectedArgument, options2);
  const receivedIsSpy = isSpy(received);
  const receivedName = receivedIsSpy ? "spy" : received.getMockName();
  const count = receivedIsSpy ? received.calls.count() : received.mock.calls.length;
  const calls = receivedIsSpy ? received.calls.all().map((x2) => x2.args) : received.mock.calls;
  const pass = count > 0;
  const message = pass ? () => matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected number of calls: ${printExpected_1(0)}
Received number of calls: ${printReceived_1(count)}

` + calls.reduce((lines, args, i) => {
    if (lines.length < PRINT_LIMIT)
      lines.push(`${i + 1}: ${printReceivedArgs(args)}`);
    return lines;
  }, []).join("\n") : () => matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected number of calls: >= ${printExpected_1(1)}
Received number of calls:    ${printReceived_1(count)}`;
  return { message, pass };
};
const createToReturnMatcher = (matcherName) => function(received, expected) {
  const expectedArgument = "";
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  ensureNoExpected_1(expected, matcherName, options2);
  ensureMock(received, matcherName, expectedArgument, options2);
  const receivedName = received.getMockName();
  const count = received.mock.results.reduce(
    (n, result) => result.type === "return" ? n + 1 : n,
    0
  );
  const pass = count > 0;
  const message = pass ? () => matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected number of returns: ${printExpected_1(0)}
Received number of returns: ${printReceived_1(count)}

` + received.mock.results.reduce((lines, result, i) => {
    if (result.type === "return" && lines.length < PRINT_LIMIT)
      lines.push(`${i + 1}: ${printReceived_1(result.value)}`);
    return lines;
  }, []).join("\n") + (received.mock.calls.length !== count ? `

Received number of calls:   ${printReceived_1(
    received.mock.calls.length
  )}` : "") : () => matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected number of returns: >= ${printExpected_1(1)}
Received number of returns:    ${printReceived_1(count)}` + (received.mock.calls.length !== count ? `
Received number of calls:      ${printReceived_1(
    received.mock.calls.length
  )}` : "");
  return { message, pass };
};
const createToBeCalledTimesMatcher = (matcherName) => function(received, expected) {
  const expectedArgument = "expected";
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  ensureExpectedIsNonNegativeInteger_1(expected, matcherName, options2);
  ensureMockOrSpy(received, matcherName, expectedArgument, options2);
  const receivedIsSpy = isSpy(received);
  const receivedName = receivedIsSpy ? "spy" : received.getMockName();
  const count = receivedIsSpy ? received.calls.count() : received.mock.calls.length;
  const pass = count === expected;
  const message = pass ? () => matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected number of calls: not ${printExpected_1(expected)}` : () => matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected number of calls: ${printExpected_1(expected)}
Received number of calls: ${printReceived_1(count)}`;
  return { message, pass };
};
const createToReturnTimesMatcher = (matcherName) => function(received, expected) {
  const expectedArgument = "expected";
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  ensureExpectedIsNonNegativeInteger_1(expected, matcherName, options2);
  ensureMock(received, matcherName, expectedArgument, options2);
  const receivedName = received.getMockName();
  const count = received.mock.results.reduce(
    (n, result) => result.type === "return" ? n + 1 : n,
    0
  );
  const pass = count === expected;
  const message = pass ? () => matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected number of returns: not ${printExpected_1(expected)}` + (received.mock.calls.length !== count ? `

Received number of calls:       ${printReceived_1(
    received.mock.calls.length
  )}` : "") : () => matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected number of returns: ${printExpected_1(expected)}
Received number of returns: ${printReceived_1(count)}` + (received.mock.calls.length !== count ? `
Received number of calls:   ${printReceived_1(
    received.mock.calls.length
  )}` : "");
  return { message, pass };
};
const createToBeCalledWithMatcher = (matcherName) => function(received, ...expected) {
  const expectedArgument = "...expected";
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  ensureMockOrSpy(received, matcherName, expectedArgument, options2);
  const receivedIsSpy = isSpy(received);
  const receivedName = receivedIsSpy ? "spy" : received.getMockName();
  const calls = receivedIsSpy ? received.calls.all().map((x2) => x2.args) : received.mock.calls;
  const pass = calls.some((call) => isEqualCall(expected, call));
  const message = pass ? () => {
    const indexedCalls = [];
    let i = 0;
    while (i < calls.length && indexedCalls.length < PRINT_LIMIT) {
      if (isEqualCall(expected, calls[i]))
        indexedCalls.push([i, calls[i]]);
      i += 1;
    }
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected: not ${printExpectedArgs(expected)}
` + (calls.length === 1 && stringify_1(calls[0]) === stringify_1(expected) ? "" : printReceivedCallsNegative(
      expected,
      indexedCalls,
      calls.length === 1
    )) + `
Number of calls: ${printReceived_1(calls.length)}`;
  } : () => {
    const indexedCalls = [];
    let i = 0;
    while (i < calls.length && indexedCalls.length < PRINT_LIMIT) {
      indexedCalls.push([i, calls[i]]);
      i += 1;
    }
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + "\n\n" + printExpectedReceivedCallsPositive(
      expected,
      indexedCalls,
      isExpand(this.expand),
      calls.length === 1
    ) + `
Number of calls: ${printReceived_1(calls.length)}`;
  };
  return { message, pass };
};
const createToReturnWithMatcher = (matcherName) => function(received, expected) {
  const expectedArgument = "expected";
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  ensureMock(received, matcherName, expectedArgument, options2);
  const receivedName = received.getMockName();
  const { calls, results } = received.mock;
  const pass = results.some((result) => isEqualReturn(expected, result));
  const message = pass ? () => {
    const indexedResults = [];
    let i = 0;
    while (i < results.length && indexedResults.length < PRINT_LIMIT) {
      if (isEqualReturn(expected, results[i]))
        indexedResults.push([i, results[i]]);
      i += 1;
    }
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected: not ${printExpected_1(expected)}
` + (results.length === 1 && results[0].type === "return" && stringify_1(results[0].value) === stringify_1(expected) ? "" : printReceivedResults(
      "Received:     ",
      expected,
      indexedResults,
      results.length === 1
    )) + printNumberOfReturns(countReturns(results), calls.length);
  } : () => {
    const indexedResults = [];
    let i = 0;
    while (i < results.length && indexedResults.length < PRINT_LIMIT) {
      indexedResults.push([i, results[i]]);
      i += 1;
    }
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected: ${printExpected_1(expected)}
` + printReceivedResults(
      "Received: ",
      expected,
      indexedResults,
      results.length === 1
    ) + printNumberOfReturns(countReturns(results), calls.length);
  };
  return { message, pass };
};
const createLastCalledWithMatcher = (matcherName) => function(received, ...expected) {
  const expectedArgument = "...expected";
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  ensureMockOrSpy(received, matcherName, expectedArgument, options2);
  const receivedIsSpy = isSpy(received);
  const receivedName = receivedIsSpy ? "spy" : received.getMockName();
  const calls = receivedIsSpy ? received.calls.all().map((x2) => x2.args) : received.mock.calls;
  const iLast = calls.length - 1;
  const pass = iLast >= 0 && isEqualCall(expected, calls[iLast]);
  const message = pass ? () => {
    const indexedCalls = [];
    if (iLast > 0) {
      indexedCalls.push([iLast - 1, calls[iLast - 1]]);
    }
    indexedCalls.push([iLast, calls[iLast]]);
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected: not ${printExpectedArgs(expected)}
` + (calls.length === 1 && stringify_1(calls[0]) === stringify_1(expected) ? "" : printReceivedCallsNegative(
      expected,
      indexedCalls,
      calls.length === 1,
      iLast
    )) + `
Number of calls: ${printReceived_1(calls.length)}`;
  } : () => {
    const indexedCalls = [];
    if (iLast >= 0) {
      if (iLast > 0) {
        let i = iLast - 1;
        while (i >= 0 && !isEqualCall(expected, calls[i]))
          i -= 1;
        if (i < 0)
          i = iLast - 1;
        indexedCalls.push([i, calls[i]]);
      }
      indexedCalls.push([iLast, calls[iLast]]);
    }
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + "\n\n" + printExpectedReceivedCallsPositive(
      expected,
      indexedCalls,
      isExpand(this.expand),
      calls.length === 1,
      iLast
    ) + `
Number of calls: ${printReceived_1(calls.length)}`;
  };
  return { message, pass };
};
const createLastReturnedMatcher = (matcherName) => function(received, expected) {
  const expectedArgument = "expected";
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  ensureMock(received, matcherName, expectedArgument, options2);
  const receivedName = received.getMockName();
  const { calls, results } = received.mock;
  const iLast = results.length - 1;
  const pass = iLast >= 0 && isEqualReturn(expected, results[iLast]);
  const message = pass ? () => {
    const indexedResults = [];
    if (iLast > 0) {
      indexedResults.push([iLast - 1, results[iLast - 1]]);
    }
    indexedResults.push([iLast, results[iLast]]);
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected: not ${printExpected_1(expected)}
` + (results.length === 1 && results[0].type === "return" && stringify_1(results[0].value) === stringify_1(expected) ? "" : printReceivedResults(
      "Received:     ",
      expected,
      indexedResults,
      results.length === 1,
      iLast
    )) + printNumberOfReturns(countReturns(results), calls.length);
  } : () => {
    const indexedResults = [];
    if (iLast >= 0) {
      if (iLast > 0) {
        let i = iLast - 1;
        while (i >= 0 && !isEqualReturn(expected, results[i]))
          i -= 1;
        if (i < 0)
          i = iLast - 1;
        indexedResults.push([i, results[i]]);
      }
      indexedResults.push([iLast, results[iLast]]);
    }
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

Expected: ${printExpected_1(expected)}
` + printReceivedResults(
      "Received: ",
      expected,
      indexedResults,
      results.length === 1,
      iLast
    ) + printNumberOfReturns(countReturns(results), calls.length);
  };
  return { message, pass };
};
const createNthCalledWithMatcher = (matcherName) => function(received, nth, ...expected) {
  const expectedArgument = "n";
  const options2 = {
    expectedColor: (arg) => arg,
    isNot: this.isNot,
    promise: this.promise,
    secondArgument: "...expected"
  };
  ensureMockOrSpy(received, matcherName, expectedArgument, options2);
  if (!Number.isSafeInteger(nth) || nth < 1) {
    throw new Error(
      matcherErrorMessage_1(
        matcherHint_1(matcherName, void 0, expectedArgument, options2),
        `${expectedArgument} must be a positive integer`,
        printWithType_1(expectedArgument, nth, stringify_1)
      )
    );
  }
  const receivedIsSpy = isSpy(received);
  const receivedName = receivedIsSpy ? "spy" : received.getMockName();
  const calls = receivedIsSpy ? received.calls.all().map((x2) => x2.args) : received.mock.calls;
  const length = calls.length;
  const iNth = nth - 1;
  const pass = iNth < length && isEqualCall(expected, calls[iNth]);
  const message = pass ? () => {
    const indexedCalls = [];
    if (iNth - 1 >= 0)
      indexedCalls.push([iNth - 1, calls[iNth - 1]]);
    indexedCalls.push([iNth, calls[iNth]]);
    if (iNth + 1 < length)
      indexedCalls.push([iNth + 1, calls[iNth + 1]]);
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

n: ${nth}
Expected: not ${printExpectedArgs(expected)}
` + (calls.length === 1 && stringify_1(calls[0]) === stringify_1(expected) ? "" : printReceivedCallsNegative(
      expected,
      indexedCalls,
      calls.length === 1,
      iNth
    )) + `
Number of calls: ${printReceived_1(calls.length)}`;
  } : () => {
    const indexedCalls = [];
    if (iNth < length) {
      if (iNth - 1 >= 0) {
        let i = iNth - 1;
        while (i >= 0 && !isEqualCall(expected, calls[i]))
          i -= 1;
        if (i < 0)
          i = iNth - 1;
        indexedCalls.push([i, calls[i]]);
      }
      indexedCalls.push([iNth, calls[iNth]]);
      if (iNth + 1 < length) {
        let i = iNth + 1;
        while (i < length && !isEqualCall(expected, calls[i]))
          i += 1;
        if (i >= length)
          i = iNth + 1;
        indexedCalls.push([i, calls[i]]);
      }
    } else if (length > 0) {
      let i = length - 1;
      while (i >= 0 && !isEqualCall(expected, calls[i]))
        i -= 1;
      if (i < 0)
        i = length - 1;
      indexedCalls.push([i, calls[i]]);
    }
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

n: ${nth}
` + printExpectedReceivedCallsPositive(
      expected,
      indexedCalls,
      isExpand(this.expand),
      calls.length === 1,
      iNth
    ) + `
Number of calls: ${printReceived_1(calls.length)}`;
  };
  return { message, pass };
};
const createNthReturnedWithMatcher = (matcherName) => function(received, nth, expected) {
  const expectedArgument = "n";
  const options2 = {
    expectedColor: (arg) => arg,
    isNot: this.isNot,
    promise: this.promise,
    secondArgument: "expected"
  };
  ensureMock(received, matcherName, expectedArgument, options2);
  if (!Number.isSafeInteger(nth) || nth < 1) {
    throw new Error(
      matcherErrorMessage_1(
        matcherHint_1(matcherName, void 0, expectedArgument, options2),
        `${expectedArgument} must be a positive integer`,
        printWithType_1(expectedArgument, nth, stringify_1)
      )
    );
  }
  const receivedName = received.getMockName();
  const { calls, results } = received.mock;
  const length = results.length;
  const iNth = nth - 1;
  const pass = iNth < length && isEqualReturn(expected, results[iNth]);
  const message = pass ? () => {
    const indexedResults = [];
    if (iNth - 1 >= 0)
      indexedResults.push([iNth - 1, results[iNth - 1]]);
    indexedResults.push([iNth, results[iNth]]);
    if (iNth + 1 < length)
      indexedResults.push([iNth + 1, results[iNth + 1]]);
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

n: ${nth}
Expected: not ${printExpected_1(expected)}
` + (results.length === 1 && results[0].type === "return" && stringify_1(results[0].value) === stringify_1(expected) ? "" : printReceivedResults(
      "Received:     ",
      expected,
      indexedResults,
      results.length === 1,
      iNth
    )) + printNumberOfReturns(countReturns(results), calls.length);
  } : () => {
    const indexedResults = [];
    if (iNth < length) {
      if (iNth - 1 >= 0) {
        let i = iNth - 1;
        while (i >= 0 && !isEqualReturn(expected, results[i]))
          i -= 1;
        if (i < 0)
          i = iNth - 1;
        indexedResults.push([i, results[i]]);
      }
      indexedResults.push([iNth, results[iNth]]);
      if (iNth + 1 < length) {
        let i = iNth + 1;
        while (i < length && !isEqualReturn(expected, results[i]))
          i += 1;
        if (i >= length)
          i = iNth + 1;
        indexedResults.push([i, results[i]]);
      }
    } else if (length > 0) {
      let i = length - 1;
      while (i >= 0 && !isEqualReturn(expected, results[i]))
        i -= 1;
      if (i < 0)
        i = length - 1;
      indexedResults.push([i, results[i]]);
    }
    return matcherHint_1(matcherName, receivedName, expectedArgument, options2) + `

n: ${nth}
Expected: ${printExpected_1(expected)}
` + printReceivedResults(
      "Received: ",
      expected,
      indexedResults,
      results.length === 1,
      iNth
    ) + printNumberOfReturns(countReturns(results), calls.length);
  };
  return { message, pass };
};
const spyMatchers = {
  lastCalledWith: createLastCalledWithMatcher("lastCalledWith"),
  lastReturnedWith: createLastReturnedMatcher("lastReturnedWith"),
  nthCalledWith: createNthCalledWithMatcher("nthCalledWith"),
  nthReturnedWith: createNthReturnedWithMatcher("nthReturnedWith"),
  toBeCalled: createToBeCalledMatcher("toBeCalled"),
  toBeCalledTimes: createToBeCalledTimesMatcher("toBeCalledTimes"),
  toBeCalledWith: createToBeCalledWithMatcher("toBeCalledWith"),
  toHaveBeenCalled: createToBeCalledMatcher("toHaveBeenCalled"),
  toHaveBeenCalledTimes: createToBeCalledTimesMatcher("toHaveBeenCalledTimes"),
  toHaveBeenCalledWith: createToBeCalledWithMatcher("toHaveBeenCalledWith"),
  toHaveBeenLastCalledWith: createLastCalledWithMatcher(
    "toHaveBeenLastCalledWith"
  ),
  toHaveBeenNthCalledWith: createNthCalledWithMatcher(
    "toHaveBeenNthCalledWith"
  ),
  toHaveLastReturnedWith: createLastReturnedMatcher("toHaveLastReturnedWith"),
  toHaveNthReturnedWith: createNthReturnedWithMatcher("toHaveNthReturnedWith"),
  toHaveReturned: createToReturnMatcher("toHaveReturned"),
  toHaveReturnedTimes: createToReturnTimesMatcher("toHaveReturnedTimes"),
  toHaveReturnedWith: createToReturnWithMatcher("toHaveReturnedWith"),
  toReturn: createToReturnMatcher("toReturn"),
  toReturnTimes: createToReturnTimesMatcher("toReturnTimes"),
  toReturnWith: createToReturnWithMatcher("toReturnWith")
};
const isMock = (received) => received != null && received._isMockFunction === true;
const isSpy = (received) => received != null && received.calls != null && typeof received.calls.all === "function" && typeof received.calls.count === "function";
const ensureMockOrSpy = (received, matcherName, expectedArgument, options2) => {
  if (!isMock(received) && !isSpy(received)) {
    throw new Error(
      matcherErrorMessage_1(
        matcherHint_1(matcherName, void 0, expectedArgument, options2),
        `${RECEIVED_COLOR_1("received")} value must be a mock or spy function`,
        printWithType_1("Received", received, printReceived_1)
      )
    );
  }
};
const ensureMock = (received, matcherName, expectedArgument, options2) => {
  if (!isMock(received)) {
    throw new Error(
      matcherErrorMessage_1(
        matcherHint_1(matcherName, void 0, expectedArgument, options2),
        `${RECEIVED_COLOR_1("received")} value must be a mock function`,
        printWithType_1("Received", received, printReceived_1)
      )
    );
  }
};
var build$1 = {};
var lib$Y = {};
var lib$X = {};
var jsTokens$1 = {};
Object.defineProperty(jsTokens$1, "__esModule", {
  value: true
});
jsTokens$1.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
jsTokens$1.matchToToken = function(match) {
  var token2 = { type: "invalid", value: match[0], closed: void 0 };
  if (match[1]) token2.type = "string", token2.closed = !!(match[3] || match[4]);
  else if (match[5]) token2.type = "comment";
  else if (match[6]) token2.type = "comment", token2.closed = !!match[7];
  else if (match[8]) token2.type = "regex";
  else if (match[9]) token2.type = "number";
  else if (match[10]) token2.type = "name";
  else if (match[11]) token2.type = "punctuator";
  else if (match[12]) token2.type = "whitespace";
  return token2;
};
var lib$W = {};
var identifier$1 = {};
Object.defineProperty(identifier$1, "__esModule", {
  value: true
});
identifier$1.isIdentifierChar = isIdentifierChar;
identifier$1.isIdentifierName = isIdentifierName;
identifier$1.isIdentifierStart = isIdentifierStart;
let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
let nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
function isInAstralSet(code, set) {
  let pos2 = 65536;
  for (let i = 0, length = set.length; i < length; i += 2) {
    pos2 += set[i];
    if (pos2 > code) return false;
    pos2 += set[i + 1];
    if (pos2 >= code) return true;
  }
  return false;
}
function isIdentifierStart(code) {
  if (code < 65) return code === 36;
  if (code <= 90) return true;
  if (code < 97) return code === 95;
  if (code <= 122) return true;
  if (code <= 65535) {
    return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
  }
  return isInAstralSet(code, astralIdentifierStartCodes);
}
function isIdentifierChar(code) {
  if (code < 48) return code === 36;
  if (code < 58) return true;
  if (code < 65) return false;
  if (code <= 90) return true;
  if (code < 97) return code === 95;
  if (code <= 122) return true;
  if (code <= 65535) {
    return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
  }
  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
function isIdentifierName(name) {
  let isFirst = true;
  for (let i = 0; i < name.length; i++) {
    let cp = name.charCodeAt(i);
    if ((cp & 64512) === 55296 && i + 1 < name.length) {
      const trail = name.charCodeAt(++i);
      if ((trail & 64512) === 56320) {
        cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
      }
    }
    if (isFirst) {
      isFirst = false;
      if (!isIdentifierStart(cp)) {
        return false;
      }
    } else if (!isIdentifierChar(cp)) {
      return false;
    }
  }
  return !isFirst;
}
var keyword$1 = {};
Object.defineProperty(keyword$1, "__esModule", {
  value: true
});
keyword$1.isKeyword = isKeyword;
keyword$1.isReservedWord = isReservedWord;
keyword$1.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
keyword$1.isStrictBindReservedWord = isStrictBindReservedWord;
keyword$1.isStrictReservedWord = isStrictReservedWord;
const reservedWords = {
  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
  strictBind: ["eval", "arguments"]
};
const keywords = new Set(reservedWords.keyword);
const reservedWordsStrictSet = new Set(reservedWords.strict);
const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
function isReservedWord(word, inModule) {
  return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
  return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
  return keywords.has(word);
}
(function(exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "isIdentifierChar", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierChar;
    }
  });
  Object.defineProperty(exports, "isIdentifierName", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierName;
    }
  });
  Object.defineProperty(exports, "isIdentifierStart", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierStart;
    }
  });
  Object.defineProperty(exports, "isKeyword", {
    enumerable: true,
    get: function() {
      return _keyword.isKeyword;
    }
  });
  Object.defineProperty(exports, "isReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isReservedWord;
    }
  });
  Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictBindOnlyReservedWord;
    }
  });
  Object.defineProperty(exports, "isStrictBindReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictBindReservedWord;
    }
  });
  Object.defineProperty(exports, "isStrictReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictReservedWord;
    }
  });
  var _identifier = identifier$1;
  var _keyword = keyword$1;
})(lib$W);
var picocolors_browser$1 = { exports: {} };
var x = String;
var create$1 = function() {
  return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x, blackBright: x, redBright: x, greenBright: x, yellowBright: x, blueBright: x, magentaBright: x, cyanBright: x, whiteBright: x, bgBlackBright: x, bgRedBright: x, bgGreenBright: x, bgYellowBright: x, bgBlueBright: x, bgMagentaBright: x, bgCyanBright: x, bgWhiteBright: x };
};
picocolors_browser$1.exports = create$1();
picocolors_browser$1.exports.createColors = create$1;
var picocolors_browserExports = picocolors_browser$1.exports;
var chalk$1 = { exports: {} };
var escapeStringRegexp$3;
var hasRequiredEscapeStringRegexp$1;
function requireEscapeStringRegexp$1() {
  if (hasRequiredEscapeStringRegexp$1) return escapeStringRegexp$3;
  hasRequiredEscapeStringRegexp$1 = 1;
  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
  escapeStringRegexp$3 = function(str) {
    if (typeof str !== "string") {
      throw new TypeError("Expected a string");
    }
    return str.replace(matchOperatorsRe, "\\$&");
  };
  return escapeStringRegexp$3;
}
var ansiStyles$1 = { exports: {} };
var conversions$1 = { exports: {} };
var colorName$1;
var hasRequiredColorName$1;
function requireColorName$1() {
  if (hasRequiredColorName$1) return colorName$1;
  hasRequiredColorName$1 = 1;
  colorName$1 = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
  return colorName$1;
}
var hasRequiredConversions$1;
function requireConversions$1() {
  if (hasRequiredConversions$1) return conversions$1.exports;
  hasRequiredConversions$1 = 1;
  var cssKeywords = requireColorName$1();
  var reverseKeywords = {};
  for (var key2 in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key2)) {
      reverseKeywords[cssKeywords[key2]] = key2;
    }
  }
  var convert = conversions$1.exports = {
    rgb: { channels: 3, labels: "rgb" },
    hsl: { channels: 3, labels: "hsl" },
    hsv: { channels: 3, labels: "hsv" },
    hwb: { channels: 3, labels: "hwb" },
    cmyk: { channels: 4, labels: "cmyk" },
    xyz: { channels: 3, labels: "xyz" },
    lab: { channels: 3, labels: "lab" },
    lch: { channels: 3, labels: "lch" },
    hex: { channels: 1, labels: ["hex"] },
    keyword: { channels: 1, labels: ["keyword"] },
    ansi16: { channels: 1, labels: ["ansi16"] },
    ansi256: { channels: 1, labels: ["ansi256"] },
    hcg: { channels: 3, labels: ["h", "c", "g"] },
    apple: { channels: 3, labels: ["r16", "g16", "b16"] },
    gray: { channels: 1, labels: ["gray"] }
  };
  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      var channels = convert[model].channels;
      var labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", { value: channels });
      Object.defineProperty(convert[model], "labels", { value: labels });
    }
  }
  convert.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff2 = v - Math.min(r, g, b);
    var diffc = function(c2) {
      return (v - c2) / 6 / diff2 + 1 / 2;
    };
    if (diff2 === 0) {
      h = s = 0;
    } else {
      s = diff2 / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c2;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c2 = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c2 * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x2, y) {
    return Math.pow(x2[0] - y[0], 2) + Math.pow(x2[1] - y[1], 2) + Math.pow(x2[2] - y[2], 2);
  }
  convert.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for (var keyword2 in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword2)) {
        var value2 = cssKeywords[keyword2];
        var distance = comparativeDistance(rgb, value2);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword2;
        }
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword2) {
    return cssKeywords[keyword2];
  };
  convert.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x2 = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x2 * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function(rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x2 = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x2 /= 95.047;
    y /= 100;
    z /= 108.883;
    x2 = x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787 * x2 + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x2 - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh);
    var r;
    var g;
    var b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    var c2 = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c2 * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function(xyz) {
    var x2 = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x2 * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x2 * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x2 * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function(xyz) {
    var x2 = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x2 /= 95.047;
    y /= 100;
    z /= 108.883;
    x2 = x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787 * x2 + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x2 - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x2;
    var y;
    var z;
    y = (l + 16) / 116;
    x2 = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x22 = Math.pow(x2, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x2 *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x2, y, z];
  };
  convert.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c2;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c2 = Math.sqrt(a * a + b * b);
    return [l, c2, h];
  };
  convert.lch.lab = function(lch) {
    var l = lch[0];
    var c2 = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c2 * Math.cos(hr);
    b = c2 * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value2 = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
    value2 = Math.round(value2 / 50);
    if (value2 === 0) {
      return 30;
    }
    var ansi2 = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value2 === 2) {
      ansi2 += 60;
    }
    return ansi2;
  };
  convert.hsv.ansi16 = function(args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi2 = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi2;
  };
  convert.ansi16.rgb = function(args) {
    var color = args % 10;
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function(args) {
    if (args >= 232) {
      var c2 = (args - 232) * 10 + 8;
      return [c2, c2, c2];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function(args) {
    var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    var string2 = integer.toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert.hex.rgb = function(args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map(function(char) {
        return char + char;
      }).join("");
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 255;
    var g = integer >> 8 & 255;
    var b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c2 = 1;
    var f = 0;
    if (l < 0.5) {
      c2 = 2 * s * l;
    } else {
      c2 = 2 * s * (1 - l);
    }
    if (c2 < 1) {
      f = (l - 0.5 * c2) / (1 - c2);
    }
    return [hsl[0], c2 * 100, f * 100];
  };
  convert.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c2 = s * v;
    var f = 0;
    if (c2 < 1) {
      f = (v - c2) / (1 - c2);
    }
    return [hsv[0], c2 * 100, f * 100];
  };
  convert.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c2 = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c2 === 0) {
      return [g * 255, g * 255, g * 255];
    }
    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c2) * g;
    return [
      (c2 * pure[0] + mg) * 255,
      (c2 * pure[1] + mg) * 255,
      (c2 * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    var c2 = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c2 + g * (1 - c2);
    var f = 0;
    if (v > 0) {
      f = c2 / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function(hcg) {
    var c2 = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1 - c2) + 0.5 * c2;
    var s = 0;
    if (l > 0 && l < 0.5) {
      s = c2 / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c2 / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function(hcg) {
    var c2 = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c2 + g * (1 - c2);
    return [hcg[0], (v - c2) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c2 = v - w;
    var g = 0;
    if (c2 < 1) {
      g = (v - c2) / (1 - c2);
    }
    return [hwb[0], c2 * 100, g * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = convert.gray.hsv = function(args) {
    return [0, 0, args[0]];
  };
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    var val = Math.round(gray[0] / 100 * 255) & 255;
    var integer = (val << 16) + (val << 8) + val;
    var string2 = integer.toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert.rgb.gray = function(rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
  return conversions$1.exports;
}
var route$1;
var hasRequiredRoute$1;
function requireRoute$1() {
  if (hasRequiredRoute$1) return route$1;
  hasRequiredRoute$1 = 1;
  var conversions2 = requireConversions$1();
  function buildGraph() {
    var graph = {};
    var models = Object.keys(conversions2);
    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions2[current]);
      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node2 = graph[adjacent];
        if (node2.distance === -1) {
          node2.distance = graph[current].distance + 1;
          node2.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    var path2 = [graph[toModel].parent, toModel];
    var fn2 = conversions2[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path2.unshift(graph[cur].parent);
      fn2 = link(conversions2[graph[cur].parent][cur], fn2);
      cur = graph[cur].parent;
    }
    fn2.conversion = path2;
    return fn2;
  }
  route$1 = function(fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion2 = {};
    var models = Object.keys(graph);
    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node2 = graph[toModel];
      if (node2.parent === null) {
        continue;
      }
      conversion2[toModel] = wrapConversion(toModel, graph);
    }
    return conversion2;
  };
  return route$1;
}
var colorConvert$1;
var hasRequiredColorConvert$1;
function requireColorConvert$1() {
  if (hasRequiredColorConvert$1) return colorConvert$1;
  hasRequiredColorConvert$1 = 1;
  var conversions2 = requireConversions$1();
  var route2 = requireRoute$1();
  var convert = {};
  var models = Object.keys(conversions2);
  function wrapRaw(fn2) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      return fn2(args);
    };
    if ("conversion" in fn2) {
      wrappedFn.conversion = fn2.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn2) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      var result = fn2(args);
      if (typeof result === "object") {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn2) {
      wrappedFn.conversion = fn2.conversion;
    }
    return wrappedFn;
  }
  models.forEach(function(fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", { value: conversions2[fromModel].channels });
    Object.defineProperty(convert[fromModel], "labels", { value: conversions2[fromModel].labels });
    var routes = route2(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function(toModel) {
      var fn2 = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn2);
      convert[fromModel][toModel].raw = wrapRaw(fn2);
    });
  });
  colorConvert$1 = convert;
  return colorConvert$1;
}
ansiStyles$1.exports;
var hasRequiredAnsiStyles$1;
function requireAnsiStyles$1() {
  if (hasRequiredAnsiStyles$1) return ansiStyles$1.exports;
  hasRequiredAnsiStyles$1 = 1;
  (function(module) {
    const colorConvert2 = requireColorConvert$1();
    const wrapAnsi16 = (fn2, offset) => function() {
      const code = fn2.apply(colorConvert2, arguments);
      return `\x1B[${code + offset}m`;
    };
    const wrapAnsi256 = (fn2, offset) => function() {
      const code = fn2.apply(colorConvert2, arguments);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    const wrapAnsi16m = (fn2, offset) => function() {
      const rgb = fn2.apply(colorConvert2, arguments);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles2 = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          gray: [90, 39],
          // Bright color
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles2.color.grey = styles2.color.gray;
      for (const groupName of Object.keys(styles2)) {
        const group = styles2[groupName];
        for (const styleName of Object.keys(group)) {
          const style = group[styleName];
          styles2[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles2[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles2, groupName, {
          value: group,
          enumerable: false
        });
        Object.defineProperty(styles2, "codes", {
          value: codes,
          enumerable: false
        });
      }
      const ansi2ansi = (n) => n;
      const rgb2rgb = (r, g, b) => [r, g, b];
      styles2.color.close = "\x1B[39m";
      styles2.bgColor.close = "\x1B[49m";
      styles2.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
      };
      styles2.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
      };
      styles2.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
      };
      styles2.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
      };
      styles2.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
      };
      styles2.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
      };
      for (let key2 of Object.keys(colorConvert2)) {
        if (typeof colorConvert2[key2] !== "object") {
          continue;
        }
        const suite = colorConvert2[key2];
        if (key2 === "ansi16") {
          key2 = "ansi";
        }
        if ("ansi16" in suite) {
          styles2.color.ansi[key2] = wrapAnsi16(suite.ansi16, 0);
          styles2.bgColor.ansi[key2] = wrapAnsi16(suite.ansi16, 10);
        }
        if ("ansi256" in suite) {
          styles2.color.ansi256[key2] = wrapAnsi256(suite.ansi256, 0);
          styles2.bgColor.ansi256[key2] = wrapAnsi256(suite.ansi256, 10);
        }
        if ("rgb" in suite) {
          styles2.color.ansi16m[key2] = wrapAnsi16m(suite.rgb, 0);
          styles2.bgColor.ansi16m[key2] = wrapAnsi16m(suite.rgb, 10);
        }
      }
      return styles2;
    }
    Object.defineProperty(module, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  })(ansiStyles$1);
  return ansiStyles$1.exports;
}
var browser$3;
var hasRequiredBrowser$2;
function requireBrowser$2() {
  if (hasRequiredBrowser$2) return browser$3;
  hasRequiredBrowser$2 = 1;
  browser$3 = {
    stdout: false,
    stderr: false
  };
  return browser$3;
}
var templates$1;
var hasRequiredTemplates$1;
function requireTemplates$1() {
  if (hasRequiredTemplates$1) return templates$1;
  hasRequiredTemplates$1 = 1;
  const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
  const ESCAPES = /* @__PURE__ */ new Map([
    ["n", "\n"],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", "\x1B"],
    ["a", "\x07"]
  ]);
  function unescape2(c2) {
    if (c2[0] === "u" && c2.length === 5 || c2[0] === "x" && c2.length === 3) {
      return String.fromCharCode(parseInt(c2.slice(1), 16));
    }
    return ESCAPES.get(c2) || c2;
  }
  function parseArguments(name, args) {
    const results = [];
    const chunks = args.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      if (!isNaN(chunk)) {
        results.push(Number(chunk));
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape2, chr) => escape2 ? unescape2(escape2) : chr));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name = matches[1];
      if (matches[2]) {
        const args = parseArguments(name, matches[2]);
        results.push([name].concat(args));
      } else {
        results.push([name]);
      }
    }
    return results;
  }
  function buildStyle(chalk2, styles2) {
    const enabled = {};
    for (const layer of styles2) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk2;
    for (const styleName of Object.keys(enabled)) {
      if (Array.isArray(enabled[styleName])) {
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        if (enabled[styleName].length > 0) {
          current = current[styleName].apply(current, enabled[styleName]);
        } else {
          current = current[styleName];
        }
      }
    }
    return current;
  }
  templates$1 = (chalk2, tmp) => {
    const styles2 = [];
    const chunks = [];
    let chunk = [];
    tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
      if (escapeChar) {
        chunk.push(unescape2(escapeChar));
      } else if (style) {
        const str = chunk.join("");
        chunk = [];
        chunks.push(styles2.length === 0 ? str : buildStyle(chalk2, styles2)(str));
        styles2.push({ inverse, styles: parseStyle(style) });
      } else if (close) {
        if (styles2.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk2, styles2)(chunk.join("")));
        chunk = [];
        styles2.pop();
      } else {
        chunk.push(chr);
      }
    });
    chunks.push(chunk.join(""));
    if (styles2.length > 0) {
      const errMsg = `Chalk template literal is missing ${styles2.length} closing bracket${styles2.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMsg);
    }
    return chunks.join("");
  };
  return templates$1;
}
var hasRequiredChalk$1;
function requireChalk$1() {
  if (hasRequiredChalk$1) return chalk$1.exports;
  hasRequiredChalk$1 = 1;
  (function(module) {
    const escapeStringRegexp2 = requireEscapeStringRegexp$1();
    const ansiStyles2 = requireAnsiStyles$1();
    const stdoutColor2 = requireBrowser$2().stdout;
    const template2 = requireTemplates$1();
    const isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
    const levelMapping2 = ["ansi", "ansi", "ansi256", "ansi16m"];
    const skipModels = /* @__PURE__ */ new Set(["gray"]);
    const styles2 = /* @__PURE__ */ Object.create(null);
    function applyOptions2(obj, options2) {
      options2 = options2 || {};
      const scLevel = stdoutColor2 ? stdoutColor2.level : 0;
      obj.level = options2.level === void 0 ? scLevel : options2.level;
      obj.enabled = "enabled" in options2 ? options2.enabled : obj.level > 0;
    }
    function Chalk2(options2) {
      if (!this || !(this instanceof Chalk2) || this.template) {
        const chalk2 = {};
        applyOptions2(chalk2, options2);
        chalk2.template = function() {
          const args = [].slice.call(arguments);
          return chalkTag2.apply(null, [chalk2.template].concat(args));
        };
        Object.setPrototypeOf(chalk2, Chalk2.prototype);
        Object.setPrototypeOf(chalk2.template, chalk2);
        chalk2.template.constructor = Chalk2;
        return chalk2.template;
      }
      applyOptions2(this, options2);
    }
    if (isSimpleWindowsTerm) {
      ansiStyles2.blue.open = "\x1B[94m";
    }
    for (const key2 of Object.keys(ansiStyles2)) {
      ansiStyles2[key2].closeRe = new RegExp(escapeStringRegexp2(ansiStyles2[key2].close), "g");
      styles2[key2] = {
        get() {
          const codes = ansiStyles2[key2];
          return build2.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key2);
        }
      };
    }
    styles2.visible = {
      get() {
        return build2.call(this, this._styles || [], true, "visible");
      }
    };
    ansiStyles2.color.closeRe = new RegExp(escapeStringRegexp2(ansiStyles2.color.close), "g");
    for (const model of Object.keys(ansiStyles2.color.ansi)) {
      if (skipModels.has(model)) {
        continue;
      }
      styles2[model] = {
        get() {
          const level = this.level;
          return function() {
            const open = ansiStyles2.color[levelMapping2[level]][model].apply(null, arguments);
            const codes = {
              open,
              close: ansiStyles2.color.close,
              closeRe: ansiStyles2.color.closeRe
            };
            return build2.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    }
    ansiStyles2.bgColor.closeRe = new RegExp(escapeStringRegexp2(ansiStyles2.bgColor.close), "g");
    for (const model of Object.keys(ansiStyles2.bgColor.ansi)) {
      if (skipModels.has(model)) {
        continue;
      }
      const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles2[bgModel] = {
        get() {
          const level = this.level;
          return function() {
            const open = ansiStyles2.bgColor[levelMapping2[level]][model].apply(null, arguments);
            const codes = {
              open,
              close: ansiStyles2.bgColor.close,
              closeRe: ansiStyles2.bgColor.closeRe
            };
            return build2.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    }
    const proto2 = Object.defineProperties(() => {
    }, styles2);
    function build2(_styles, _empty, key2) {
      const builder2 = function() {
        return applyStyle2.apply(builder2, arguments);
      };
      builder2._styles = _styles;
      builder2._empty = _empty;
      const self = this;
      Object.defineProperty(builder2, "level", {
        enumerable: true,
        get() {
          return self.level;
        },
        set(level) {
          self.level = level;
        }
      });
      Object.defineProperty(builder2, "enabled", {
        enumerable: true,
        get() {
          return self.enabled;
        },
        set(enabled) {
          self.enabled = enabled;
        }
      });
      builder2.hasGrey = this.hasGrey || key2 === "gray" || key2 === "grey";
      builder2.__proto__ = proto2;
      return builder2;
    }
    function applyStyle2() {
      const args = arguments;
      const argsLen = args.length;
      let str = String(arguments[0]);
      if (argsLen === 0) {
        return "";
      }
      if (argsLen > 1) {
        for (let a = 1; a < argsLen; a++) {
          str += " " + args[a];
        }
      }
      if (!this.enabled || this.level <= 0 || !str) {
        return this._empty ? "" : str;
      }
      const originalDim = ansiStyles2.dim.open;
      if (isSimpleWindowsTerm && this.hasGrey) {
        ansiStyles2.dim.open = "";
      }
      for (const code of this._styles.slice().reverse()) {
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
        str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
      }
      ansiStyles2.dim.open = originalDim;
      return str;
    }
    function chalkTag2(chalk2, strings) {
      if (!Array.isArray(strings)) {
        return [].slice.call(arguments, 1).join(" ");
      }
      const args = [].slice.call(arguments, 2);
      const parts = [strings.raw[0]];
      for (let i = 1; i < strings.length; i++) {
        parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
        parts.push(String(strings.raw[i]));
      }
      return template2(chalk2, parts.join(""));
    }
    Object.defineProperties(Chalk2.prototype, styles2);
    module.exports = Chalk2();
    module.exports.supportsColor = stdoutColor2;
    module.exports.default = module.exports;
  })(chalk$1);
  return chalk$1.exports;
}
Object.defineProperty(lib$X, "__esModule", {
  value: true
});
lib$X.default = highlight;
lib$X.shouldHighlight = shouldHighlight;
var _jsTokens = jsTokens$1;
var _helperValidatorIdentifier = lib$W;
var _picocolors$1 = _interopRequireWildcard$2(picocolors_browserExports, true);
function _getRequireWildcardCache$2(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$2 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$2(e, r) {
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$2(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
const colors$1 = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors$1.createColors)(false) : _picocolors$1.default;
const compose$1 = (f, g) => (v) => f(g(v));
const sometimesKeywords = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]);
function getDefs$1(colors2) {
  return {
    keyword: colors2.cyan,
    capitalized: colors2.yellow,
    jsxIdentifier: colors2.yellow,
    punctuator: colors2.yellow,
    number: colors2.magenta,
    string: colors2.green,
    regex: colors2.magenta,
    comment: colors2.gray,
    invalid: compose$1(compose$1(colors2.white, colors2.bgRed), colors2.bold)
  };
}
const NEWLINE$1 = /\r\n|[\n\r\u2028\u2029]/;
const BRACKET = /^[()[\]{}]$/;
let tokenize;
{
  const JSX_TAG = /^[a-z][\w-]*$/i;
  const getTokenType = function(token2, offset, text2) {
    if (token2.type === "name") {
      if ((0, _helperValidatorIdentifier.isKeyword)(token2.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token2.value, true) || sometimesKeywords.has(token2.value)) {
        return "keyword";
      }
      if (JSX_TAG.test(token2.value) && (text2[offset - 1] === "<" || text2.slice(offset - 2, offset) === "</")) {
        return "jsxIdentifier";
      }
      if (token2.value[0] !== token2.value[0].toLowerCase()) {
        return "capitalized";
      }
    }
    if (token2.type === "punctuator" && BRACKET.test(token2.value)) {
      return "bracket";
    }
    if (token2.type === "invalid" && (token2.value === "@" || token2.value === "#")) {
      return "punctuator";
    }
    return token2.type;
  };
  tokenize = function* (text2) {
    let match;
    while (match = _jsTokens.default.exec(text2)) {
      const token2 = _jsTokens.matchToToken(match);
      yield {
        type: getTokenType(token2, match.index, text2),
        value: token2.value
      };
    }
  };
}
function highlightTokens(defs, text2) {
  let highlighted = "";
  for (const {
    type,
    value: value2
  } of tokenize(text2)) {
    const colorize = defs[type];
    if (colorize) {
      highlighted += value2.split(NEWLINE$1).map((str) => colorize(str)).join("\n");
    } else {
      highlighted += value2;
    }
  }
  return highlighted;
}
function shouldHighlight(options2) {
  return colors$1.isColorSupported || options2.forceColor;
}
let pcWithForcedColor$1 = void 0;
function getColors$1(forceColor) {
  if (forceColor) {
    var _pcWithForcedColor;
    (_pcWithForcedColor = pcWithForcedColor$1) != null ? _pcWithForcedColor : pcWithForcedColor$1 = (0, _picocolors$1.createColors)(true);
    return pcWithForcedColor$1;
  }
  return colors$1;
}
function highlight(code, options2 = {}) {
  if (code !== "" && shouldHighlight(options2)) {
    const defs = getDefs$1(getColors$1(options2.forceColor));
    return highlightTokens(defs, code);
  } else {
    return code;
  }
}
{
  let chalk2, chalkWithForcedColor;
  lib$X.getChalk = ({
    forceColor
  }) => {
    var _chalk2;
    (_chalk2 = chalk2) != null ? _chalk2 : chalk2 = requireChalk$1();
    if (forceColor) {
      var _chalkWithForcedColor;
      (_chalkWithForcedColor = chalkWithForcedColor) != null ? _chalkWithForcedColor : chalkWithForcedColor = new chalk2.constructor({
        enabled: true,
        level: 1
      });
      return chalkWithForcedColor;
    }
    return chalk2;
  };
}
Object.defineProperty(lib$Y, "__esModule", {
  value: true
});
lib$Y.codeFrameColumns = codeFrameColumns;
lib$Y.default = _default;
var _highlight = lib$X;
var _picocolors = _interopRequireWildcard$1(picocolors_browserExports, true);
function _getRequireWildcardCache$1(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$1 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$1(e, r) {
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$1(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
const colors = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors.createColors)(false) : _picocolors.default;
const compose = (f, g) => (v) => f(g(v));
let pcWithForcedColor = void 0;
function getColors(forceColor) {
  if (forceColor) {
    var _pcWithForcedColor;
    (_pcWithForcedColor = pcWithForcedColor) != null ? _pcWithForcedColor : pcWithForcedColor = (0, _picocolors.createColors)(true);
    return pcWithForcedColor;
  }
  return colors;
}
let deprecationWarningShown = false;
function getDefs(colors2) {
  return {
    gutter: colors2.gray,
    marker: compose(colors2.red, colors2.bold),
    message: compose(colors2.red, colors2.bold)
  };
}
const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
function getMarkerLines(loc, source2, opts) {
  const startLoc = Object.assign({
    column: 0,
    line: -1
  }, loc.start);
  const endLoc = Object.assign({}, startLoc, loc.end);
  const {
    linesAbove = 2,
    linesBelow = 3
  } = opts || {};
  const startLine = startLoc.line;
  const startColumn = startLoc.column;
  const endLine = endLoc.line;
  const endColumn = endLoc.column;
  let start = Math.max(startLine - (linesAbove + 1), 0);
  let end = Math.min(source2.length, endLine + linesBelow);
  if (startLine === -1) {
    start = 0;
  }
  if (endLine === -1) {
    end = source2.length;
  }
  const lineDiff = endLine - startLine;
  const markerLines = {};
  if (lineDiff) {
    for (let i = 0; i <= lineDiff; i++) {
      const lineNumber = i + startLine;
      if (!startColumn) {
        markerLines[lineNumber] = true;
      } else if (i === 0) {
        const sourceLength = source2[lineNumber - 1].length;
        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
      } else if (i === lineDiff) {
        markerLines[lineNumber] = [0, endColumn];
      } else {
        const sourceLength = source2[lineNumber - i].length;
        markerLines[lineNumber] = [0, sourceLength];
      }
    }
  } else {
    if (startColumn === endColumn) {
      if (startColumn) {
        markerLines[startLine] = [startColumn, 0];
      } else {
        markerLines[startLine] = true;
      }
    } else {
      markerLines[startLine] = [startColumn, endColumn - startColumn];
    }
  }
  return {
    start,
    end,
    markerLines
  };
}
function codeFrameColumns(rawLines, loc, opts = {}) {
  const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
  const colors2 = getColors(opts.forceColor);
  const defs = getDefs(colors2);
  const maybeHighlight = (fmt, string2) => {
    return highlighted ? fmt(string2) : string2;
  };
  const lines = rawLines.split(NEWLINE);
  const {
    start,
    end,
    markerLines
  } = getMarkerLines(loc, lines, opts);
  const hasColumns = loc.start && typeof loc.start.column === "number";
  const numberMaxWidth = String(end).length;
  const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
  let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line2, index2) => {
    const number2 = start + 1 + index2;
    const paddedNumber = ` ${number2}`.slice(-numberMaxWidth);
    const gutter = ` ${paddedNumber} |`;
    const hasMarker = markerLines[number2];
    const lastMarkerLine = !markerLines[number2 + 1];
    if (hasMarker) {
      let markerLine = "";
      if (Array.isArray(hasMarker)) {
        const markerSpacing = line2.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
        const numberOfMarkers = hasMarker[1] || 1;
        markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
        if (lastMarkerLine && opts.message) {
          markerLine += " " + maybeHighlight(defs.message, opts.message);
        }
      }
      return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line2.length > 0 ? ` ${line2}` : "", markerLine].join("");
    } else {
      return ` ${maybeHighlight(defs.gutter, gutter)}${line2.length > 0 ? ` ${line2}` : ""}`;
    }
  }).join("\n");
  if (opts.message && !hasColumns) {
    frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
  }
  if (highlighted) {
    return colors2.reset(frame);
  } else {
    return frame;
  }
}
function _default(rawLines, lineNumber, colNumber, opts = {}) {
  if (!deprecationWarningShown) {
    deprecationWarningShown = true;
    const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
    if (process.emitWarning) {
      process.emitWarning(message, "DeprecationWarning");
    } else {
      const deprecationError = new Error(message);
      deprecationError.name = "DeprecationWarning";
      console.warn(new Error(message));
    }
  }
  colNumber = Math.max(colNumber, 0);
  const location = {
    start: {
      column: colNumber,
      line: lineNumber
    }
  };
  return codeFrameColumns(rawLines, location, opts);
}
var utils$8 = {};
(function(exports) {
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node2, type) => node2.nodes.find((node3) => node3.type === type);
  exports.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false) return false;
    if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
    return (Number(max) - Number(min)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n = 0, type) => {
    const node2 = block.nodes[n];
    if (!node2) return;
    if (type && node2.type === type || node2.type === "open" || node2.type === "close") {
      if (node2.escaped !== true) {
        node2.value = "\\" + node2.value;
        node2.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node2) => {
    if (node2.type !== "brace") return false;
    if (node2.commas >> 0 + node2.ranges >> 0 === 0) {
      node2.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace") return false;
    if (block.invalid === true || block.dollar) return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node2) => {
    if (node2.type === "open" || node2.type === "close") {
      return true;
    }
    return node2.open === true || node2.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node2) => {
    if (node2.type === "text") acc.push(node2.value);
    if (node2.type === "range") node2.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        const ele = arr[i];
        if (Array.isArray(ele)) {
          flat(ele);
          continue;
        }
        if (ele !== void 0) {
          result.push(ele);
        }
      }
      return result;
    };
    flat(args);
    return result;
  };
})(utils$8);
const utils$7 = utils$8;
var stringify$5 = (ast, options2 = {}) => {
  const stringify3 = (node2, parent = {}) => {
    const invalidBlock = options2.escapeInvalid && utils$7.isInvalidBrace(parent);
    const invalidNode = node2.invalid === true && options2.escapeInvalid === true;
    let output = "";
    if (node2.value) {
      if ((invalidBlock || invalidNode) && utils$7.isOpenOrClose(node2)) {
        return "\\" + node2.value;
      }
      return node2.value;
    }
    if (node2.value) {
      return node2.value;
    }
    if (node2.nodes) {
      for (const child of node2.nodes) {
        output += stringify3(child);
      }
    }
    return output;
  };
  return stringify3(ast);
};
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
var isNumber$2 = function(num) {
  if (typeof num === "number") {
    return num - num === 0;
  }
  if (typeof num === "string" && num.trim() !== "") {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
const isNumber$1 = isNumber$2;
const toRegexRange$1 = (min, max, options2) => {
  if (isNumber$1(min) === false) {
    throw new TypeError("toRegexRange: expected the first argument to be a number");
  }
  if (max === void 0 || min === max) {
    return String(min);
  }
  if (isNumber$1(max) === false) {
    throw new TypeError("toRegexRange: expected the second argument to be a number.");
  }
  let opts = { relaxZeros: true, ...options2 };
  if (typeof opts.strictZeros === "boolean") {
    opts.relaxZeros = opts.strictZeros === false;
  }
  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap = String(opts.wrap);
  let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
  if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange$1.cache[cacheKey].result;
  }
  let a = Math.min(min, max);
  let b = Math.max(min, max);
  if (Math.abs(a - b) === 1) {
    let result = min + "|" + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }
  let isPadded = hasPadding(min) || hasPadding(max);
  let state2 = { min, max, a, b };
  let positives = [];
  let negatives = [];
  if (isPadded) {
    state2.isPadded = isPadded;
    state2.maxLen = String(state2.max).length;
  }
  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state2, opts);
    a = state2.a = 0;
  }
  if (b >= 0) {
    positives = splitToPatterns(a, b, state2, opts);
  }
  state2.negatives = negatives;
  state2.positives = positives;
  state2.result = collatePatterns(negatives, positives);
  if (opts.capture === true) {
    state2.result = `(${state2.result})`;
  } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
    state2.result = `(?:${state2.result})`;
  }
  toRegexRange$1.cache[cacheKey] = state2;
  return state2.result;
};
function collatePatterns(neg, pos2, options2) {
  let onlyNegative = filterPatterns(neg, pos2, "-", false) || [];
  let onlyPositive = filterPatterns(pos2, neg, "", false) || [];
  let intersected = filterPatterns(neg, pos2, "-?", true) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join("|");
}
function splitToRanges(min, max) {
  let nines = 1;
  let zeros2 = 1;
  let stop = countNines(min, nines);
  let stops = /* @__PURE__ */ new Set([max]);
  while (min <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }
  stop = countZeros(max + 1, zeros2) - 1;
  while (min < stop && stop <= max) {
    stops.add(stop);
    zeros2 += 1;
    stop = countZeros(max + 1, zeros2) - 1;
  }
  stops = [...stops];
  stops.sort(compare);
  return stops;
}
function rangeToPattern(start, stop, options2) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }
  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = "";
  let count = 0;
  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];
    if (startDigit === stopDigit) {
      pattern += startDigit;
    } else if (startDigit !== "0" || stopDigit !== "9") {
      pattern += toCharacterClass(startDigit, stopDigit);
    } else {
      count++;
    }
  }
  if (count) {
    pattern += options2.shorthand === true ? "\\d" : "[0-9]";
  }
  return { pattern, count: [count], digits };
}
function splitToPatterns(min, max, tok, options2) {
  let ranges = splitToRanges(min, max);
  let tokens = [];
  let start = min;
  let prev;
  for (let i = 0; i < ranges.length; i++) {
    let max2 = ranges[i];
    let obj = rangeToPattern(String(start), String(max2), options2);
    let zeros2 = "";
    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }
      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max2 + 1;
      continue;
    }
    if (tok.isPadded) {
      zeros2 = padZeros(max2, tok, options2);
    }
    obj.string = zeros2 + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max2 + 1;
    prev = obj;
  }
  return tokens;
}
function filterPatterns(arr, comparison, prefix, intersection, options2) {
  let result = [];
  for (let ele of arr) {
    let { string: string2 } = ele;
    if (!intersection && !contains(comparison, "string", string2)) {
      result.push(prefix + string2);
    }
    if (intersection && contains(comparison, "string", string2)) {
      result.push(prefix + string2);
    }
  }
  return result;
}
function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
  return arr;
}
function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}
function contains(arr, key2, val) {
  return arr.some((ele) => ele[key2] === val);
}
function countNines(min, len) {
  return Number(String(min).slice(0, -len) + "9".repeat(len));
}
function countZeros(integer, zeros2) {
  return integer - integer % Math.pow(10, zeros2);
}
function toQuantifier(digits) {
  let [start = 0, stop = ""] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? "," + stop : "")}}`;
  }
  return "";
}
function toCharacterClass(a, b, options2) {
  return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
}
function hasPadding(str) {
  return /^-?(0+)\d/.test(str);
}
function padZeros(value2, tok, options2) {
  if (!tok.isPadded) {
    return value2;
  }
  let diff2 = Math.abs(tok.maxLen - String(value2).length);
  let relax = options2.relaxZeros !== false;
  switch (diff2) {
    case 0:
      return "";
    case 1:
      return relax ? "0?" : "0";
    case 2:
      return relax ? "0{0,2}" : "00";
    default: {
      return relax ? `0{0,${diff2}}` : `0{${diff2}}`;
    }
  }
}
toRegexRange$1.cache = {};
toRegexRange$1.clearCache = () => toRegexRange$1.cache = {};
var toRegexRange_1 = toRegexRange$1;
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
const util$a = util$d;
const toRegexRange = toRegexRange_1;
const isObject$1 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
const transform$1 = (toNumber) => {
  return (value2) => toNumber === true ? Number(value2) : String(value2);
};
const isValidValue = (value2) => {
  return typeof value2 === "number" || typeof value2 === "string" && value2 !== "";
};
const isNumber = (num) => Number.isInteger(+num);
const zeros = (input2) => {
  let value2 = `${input2}`;
  let index2 = -1;
  if (value2[0] === "-") value2 = value2.slice(1);
  if (value2 === "0") return false;
  while (value2[++index2] === "0") ;
  return index2 > 0;
};
const stringify$4 = (start, end, options2) => {
  if (typeof start === "string" || typeof end === "string") {
    return true;
  }
  return options2.stringify === true;
};
const pad = (input2, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input2[0] === "-" ? "-" : "";
    if (dash) input2 = input2.slice(1);
    input2 = dash + input2.padStart(dash ? maxLength - 1 : maxLength, "0");
  }
  if (toNumber === false) {
    return String(input2);
  }
  return input2;
};
const toMaxLen = (input2, maxLength) => {
  let negative = input2[0] === "-" ? "-" : "";
  if (negative) {
    input2 = input2.slice(1);
    maxLength--;
  }
  while (input2.length < maxLength) input2 = "0" + input2;
  return negative ? "-" + input2 : input2;
};
const toSequence = (parts, options2, maxLen) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  let prefix = options2.capture ? "" : "?:";
  let positives = "";
  let negatives = "";
  let result;
  if (parts.positives.length) {
    positives = parts.positives.map((v) => toMaxLen(String(v), maxLen)).join("|");
  }
  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.map((v) => toMaxLen(String(v), maxLen)).join("|")})`;
  }
  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }
  if (options2.wrap) {
    return `(${prefix}${result})`;
  }
  return result;
};
const toRange = (a, b, isNumbers, options2) => {
  if (isNumbers) {
    return toRegexRange(a, b, { wrap: false, ...options2 });
  }
  let start = String.fromCharCode(a);
  if (a === b) return start;
  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};
const toRegex = (start, end, options2) => {
  if (Array.isArray(start)) {
    let wrap = options2.wrap === true;
    let prefix = options2.capture ? "" : "?:";
    return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
  }
  return toRegexRange(start, end, options2);
};
const rangeError = (...args) => {
  return new RangeError("Invalid range arguments: " + util$a.inspect(...args));
};
const invalidRange = (start, end, options2) => {
  if (options2.strictRanges === true) throw rangeError([start, end]);
  return [];
};
const invalidStep = (step, options2) => {
  if (options2.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};
const fillNumbers = (start, end, step = 1, options2 = {}) => {
  let a = Number(start);
  let b = Number(end);
  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options2.strictRanges === true) throw rangeError([start, end]);
    return [];
  }
  if (a === 0) a = 0;
  if (b === 0) b = 0;
  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);
  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify$4(start, end, options2) === false;
  let format2 = options2.transform || transform$1(toNumber);
  if (options2.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options2);
  }
  let parts = { negatives: [], positives: [] };
  let push2 = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
  let range = [];
  let index2 = 0;
  while (descending ? a >= b : a <= b) {
    if (options2.toRegex === true && step > 1) {
      push2(a);
    } else {
      range.push(pad(format2(a, index2), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index2++;
  }
  if (options2.toRegex === true) {
    return step > 1 ? toSequence(parts, options2, maxLen) : toRegex(range, null, { wrap: false, ...options2 });
  }
  return range;
};
const fillLetters = (start, end, step = 1, options2 = {}) => {
  if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
    return invalidRange(start, end, options2);
  }
  let format2 = options2.transform || ((val) => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);
  let descending = a > b;
  let min = Math.min(a, b);
  let max = Math.max(a, b);
  if (options2.toRegex && step === 1) {
    return toRange(min, max, false, options2);
  }
  let range = [];
  let index2 = 0;
  while (descending ? a >= b : a <= b) {
    range.push(format2(a, index2));
    a = descending ? a - step : a + step;
    index2++;
  }
  if (options2.toRegex === true) {
    return toRegex(range, null, { wrap: false, options: options2 });
  }
  return range;
};
const fill$2 = (start, end, step, options2 = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }
  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options2);
  }
  if (typeof step === "function") {
    return fill$2(start, end, 1, { transform: step });
  }
  if (isObject$1(step)) {
    return fill$2(start, end, 0, step);
  }
  let opts = { ...options2 };
  if (opts.capture === true) opts.wrap = true;
  step = step || opts.step || 1;
  if (!isNumber(step)) {
    if (step != null && !isObject$1(step)) return invalidStep(step, opts);
    return fill$2(start, end, 1, step);
  }
  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }
  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};
var fillRange = fill$2;
const fill$1 = fillRange;
const utils$6 = utils$8;
const compile$1 = (ast, options2 = {}) => {
  const walk = (node2, parent = {}) => {
    const invalidBlock = utils$6.isInvalidBrace(parent);
    const invalidNode = node2.invalid === true && options2.escapeInvalid === true;
    const invalid = invalidBlock === true || invalidNode === true;
    const prefix = options2.escapeInvalid === true ? "\\" : "";
    let output = "";
    if (node2.isOpen === true) {
      return prefix + node2.value;
    }
    if (node2.isClose === true) {
      console.log("node.isClose", prefix, node2.value);
      return prefix + node2.value;
    }
    if (node2.type === "open") {
      return invalid ? prefix + node2.value : "(";
    }
    if (node2.type === "close") {
      return invalid ? prefix + node2.value : ")";
    }
    if (node2.type === "comma") {
      return node2.prev.type === "comma" ? "" : invalid ? node2.value : "|";
    }
    if (node2.value) {
      return node2.value;
    }
    if (node2.nodes && node2.ranges > 0) {
      const args = utils$6.reduce(node2.nodes);
      const range = fill$1(...args, { ...options2, wrap: false, toRegex: true, strictZeros: true });
      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range;
      }
    }
    if (node2.nodes) {
      for (const child of node2.nodes) {
        output += walk(child, node2);
      }
    }
    return output;
  };
  return walk(ast);
};
var compile_1 = compile$1;
const fill = fillRange;
const stringify$3 = stringify$5;
const utils$5 = utils$8;
const append = (queue = "", stash = "", enclose = false) => {
  const result = [];
  queue = [].concat(queue);
  stash = [].concat(stash);
  if (!stash.length) return queue;
  if (!queue.length) {
    return enclose ? utils$5.flatten(stash).map((ele) => `{${ele}}`) : stash;
  }
  for (const item2 of queue) {
    if (Array.isArray(item2)) {
      for (const value2 of item2) {
        result.push(append(value2, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === "string") ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append(item2, ele, enclose) : item2 + ele);
      }
    }
  }
  return utils$5.flatten(result);
};
const expand$1 = (ast, options2 = {}) => {
  const rangeLimit = options2.rangeLimit === void 0 ? 1e3 : options2.rangeLimit;
  const walk = (node2, parent = {}) => {
    node2.queue = [];
    let p = parent;
    let q = parent.queue;
    while (p.type !== "brace" && p.type !== "root" && p.parent) {
      p = p.parent;
      q = p.queue;
    }
    if (node2.invalid || node2.dollar) {
      q.push(append(q.pop(), stringify$3(node2, options2)));
      return;
    }
    if (node2.type === "brace" && node2.invalid !== true && node2.nodes.length === 2) {
      q.push(append(q.pop(), ["{}"]));
      return;
    }
    if (node2.nodes && node2.ranges > 0) {
      const args = utils$5.reduce(node2.nodes);
      if (utils$5.exceedsLimit(...args, options2.step, rangeLimit)) {
        throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
      }
      let range = fill(...args, options2);
      if (range.length === 0) {
        range = stringify$3(node2, options2);
      }
      q.push(append(q.pop(), range));
      node2.nodes = [];
      return;
    }
    const enclose = utils$5.encloseBrace(node2);
    let queue = node2.queue;
    let block = node2;
    while (block.type !== "brace" && block.type !== "root" && block.parent) {
      block = block.parent;
      queue = block.queue;
    }
    for (let i = 0; i < node2.nodes.length; i++) {
      const child = node2.nodes[i];
      if (child.type === "comma" && node2.type === "brace") {
        if (i === 1) queue.push("");
        queue.push("");
        continue;
      }
      if (child.type === "close") {
        q.push(append(q.pop(), queue, enclose));
        continue;
      }
      if (child.value && child.type !== "open") {
        queue.push(append(queue.pop(), child.value));
        continue;
      }
      if (child.nodes) {
        walk(child, node2);
      }
    }
    return queue;
  };
  return utils$5.flatten(walk(ast));
};
var expand_1 = expand$1;
var constants$1 = {
  MAX_LENGTH: 1e4,
  // Digits
  CHAR_0: "0",
  /* 0 */
  CHAR_9: "9",
  /* 9 */
  // Alphabet chars.
  CHAR_UPPERCASE_A: "A",
  /* A */
  CHAR_LOWERCASE_A: "a",
  /* a */
  CHAR_UPPERCASE_Z: "Z",
  /* Z */
  CHAR_LOWERCASE_Z: "z",
  /* z */
  CHAR_LEFT_PARENTHESES: "(",
  /* ( */
  CHAR_RIGHT_PARENTHESES: ")",
  /* ) */
  CHAR_ASTERISK: "*",
  /* * */
  // Non-alphabetic chars.
  CHAR_AMPERSAND: "&",
  /* & */
  CHAR_AT: "@",
  /* @ */
  CHAR_BACKSLASH: "\\",
  /* \ */
  CHAR_BACKTICK: "`",
  /* ` */
  CHAR_CARRIAGE_RETURN: "\r",
  /* \r */
  CHAR_CIRCUMFLEX_ACCENT: "^",
  /* ^ */
  CHAR_COLON: ":",
  /* : */
  CHAR_COMMA: ",",
  /* , */
  CHAR_DOLLAR: "$",
  /* . */
  CHAR_DOT: ".",
  /* . */
  CHAR_DOUBLE_QUOTE: '"',
  /* " */
  CHAR_EQUAL: "=",
  /* = */
  CHAR_EXCLAMATION_MARK: "!",
  /* ! */
  CHAR_FORM_FEED: "\f",
  /* \f */
  CHAR_FORWARD_SLASH: "/",
  /* / */
  CHAR_HASH: "#",
  /* # */
  CHAR_HYPHEN_MINUS: "-",
  /* - */
  CHAR_LEFT_ANGLE_BRACKET: "<",
  /* < */
  CHAR_LEFT_CURLY_BRACE: "{",
  /* { */
  CHAR_LEFT_SQUARE_BRACKET: "[",
  /* [ */
  CHAR_LINE_FEED: "\n",
  /* \n */
  CHAR_NO_BREAK_SPACE: " ",
  /* \u00A0 */
  CHAR_PERCENT: "%",
  /* % */
  CHAR_PLUS: "+",
  /* + */
  CHAR_QUESTION_MARK: "?",
  /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: ">",
  /* > */
  CHAR_RIGHT_CURLY_BRACE: "}",
  /* } */
  CHAR_RIGHT_SQUARE_BRACKET: "]",
  /* ] */
  CHAR_SEMICOLON: ";",
  /* ; */
  CHAR_SINGLE_QUOTE: "'",
  /* ' */
  CHAR_SPACE: " ",
  /*   */
  CHAR_TAB: "	",
  /* \t */
  CHAR_UNDERSCORE: "_",
  /* _ */
  CHAR_VERTICAL_LINE: "|",
  /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
  /* \uFEFF */
};
const stringify$2 = stringify$5;
const {
  MAX_LENGTH,
  CHAR_BACKSLASH,
  /* \ */
  CHAR_BACKTICK,
  /* ` */
  CHAR_COMMA,
  /* , */
  CHAR_DOT,
  /* . */
  CHAR_LEFT_PARENTHESES,
  /* ( */
  CHAR_RIGHT_PARENTHESES,
  /* ) */
  CHAR_LEFT_CURLY_BRACE,
  /* { */
  CHAR_RIGHT_CURLY_BRACE,
  /* } */
  CHAR_LEFT_SQUARE_BRACKET,
  /* [ */
  CHAR_RIGHT_SQUARE_BRACKET,
  /* ] */
  CHAR_DOUBLE_QUOTE,
  /* " */
  CHAR_SINGLE_QUOTE,
  /* ' */
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = constants$1;
const parse$5 = (input2, options2 = {}) => {
  if (typeof input2 !== "string") {
    throw new TypeError("Expected a string");
  }
  const opts = options2 || {};
  const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  if (input2.length > max) {
    throw new SyntaxError(`Input length (${input2.length}), exceeds max characters (${max})`);
  }
  const ast = { type: "root", input: input2, nodes: [] };
  const stack2 = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  const length = input2.length;
  let index2 = 0;
  let depth = 0;
  let value2;
  const advance = () => input2[index2++];
  const push2 = (node2) => {
    if (node2.type === "text" && prev.type === "dot") {
      prev.type = "text";
    }
    if (prev && prev.type === "text" && node2.type === "text") {
      prev.value += node2.value;
      return;
    }
    block.nodes.push(node2);
    node2.parent = block;
    node2.prev = prev;
    prev = node2;
    return node2;
  };
  push2({ type: "bos" });
  while (index2 < length) {
    block = stack2[stack2.length - 1];
    value2 = advance();
    if (value2 === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value2 === CHAR_NO_BREAK_SPACE) {
      continue;
    }
    if (value2 === CHAR_BACKSLASH) {
      push2({ type: "text", value: (options2.keepEscaping ? value2 : "") + advance() });
      continue;
    }
    if (value2 === CHAR_RIGHT_SQUARE_BRACKET) {
      push2({ type: "text", value: "\\" + value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_SQUARE_BRACKET) {
      brackets++;
      let next;
      while (index2 < length && (next = advance())) {
        value2 += next;
        if (next === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          continue;
        }
        if (next === CHAR_BACKSLASH) {
          value2 += advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          brackets--;
          if (brackets === 0) {
            break;
          }
        }
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_PARENTHESES) {
      block = push2({ type: "paren", nodes: [] });
      stack2.push(block);
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_RIGHT_PARENTHESES) {
      if (block.type !== "paren") {
        push2({ type: "text", value: value2 });
        continue;
      }
      block = stack2.pop();
      push2({ type: "text", value: value2 });
      block = stack2[stack2.length - 1];
      continue;
    }
    if (value2 === CHAR_DOUBLE_QUOTE || value2 === CHAR_SINGLE_QUOTE || value2 === CHAR_BACKTICK) {
      const open = value2;
      let next;
      if (options2.keepQuotes !== true) {
        value2 = "";
      }
      while (index2 < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value2 += next + advance();
          continue;
        }
        if (next === open) {
          if (options2.keepQuotes === true) value2 += next;
          break;
        }
        value2 += next;
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_CURLY_BRACE) {
      depth++;
      const dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
      const brace = {
        type: "brace",
        open: true,
        close: false,
        dollar,
        depth,
        commas: 0,
        ranges: 0,
        nodes: []
      };
      block = push2(brace);
      stack2.push(block);
      push2({ type: "open", value: value2 });
      continue;
    }
    if (value2 === CHAR_RIGHT_CURLY_BRACE) {
      if (block.type !== "brace") {
        push2({ type: "text", value: value2 });
        continue;
      }
      const type = "close";
      block = stack2.pop();
      block.close = true;
      push2({ type, value: value2 });
      depth--;
      block = stack2[stack2.length - 1];
      continue;
    }
    if (value2 === CHAR_COMMA && depth > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        const open = block.nodes.shift();
        block.nodes = [open, { type: "text", value: stringify$2(block) }];
      }
      push2({ type: "comma", value: value2 });
      block.commas++;
      continue;
    }
    if (value2 === CHAR_DOT && depth > 0 && block.commas === 0) {
      const siblings = block.nodes;
      if (depth === 0 || siblings.length === 0) {
        push2({ type: "text", value: value2 });
        continue;
      }
      if (prev.type === "dot") {
        block.range = [];
        prev.value += value2;
        prev.type = "range";
        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = "text";
          continue;
        }
        block.ranges++;
        block.args = [];
        continue;
      }
      if (prev.type === "range") {
        siblings.pop();
        const before = siblings[siblings.length - 1];
        before.value += prev.value + value2;
        prev = before;
        block.ranges--;
        continue;
      }
      push2({ type: "dot", value: value2 });
      continue;
    }
    push2({ type: "text", value: value2 });
  }
  do {
    block = stack2.pop();
    if (block.type !== "root") {
      block.nodes.forEach((node2) => {
        if (!node2.nodes) {
          if (node2.type === "open") node2.isOpen = true;
          if (node2.type === "close") node2.isClose = true;
          if (!node2.nodes) node2.type = "text";
          node2.invalid = true;
        }
      });
      const parent = stack2[stack2.length - 1];
      const index3 = parent.nodes.indexOf(block);
      parent.nodes.splice(index3, 1, ...block.nodes);
    }
  } while (stack2.length > 0);
  push2({ type: "eos" });
  return ast;
};
var parse_1 = parse$5;
const stringify$1 = stringify$5;
const compile = compile_1;
const expand = expand_1;
const parse$4 = parse_1;
const braces$1 = (input2, options2 = {}) => {
  let output = [];
  if (Array.isArray(input2)) {
    for (const pattern of input2) {
      const result = braces$1.create(pattern, options2);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces$1.create(input2, options2));
  }
  if (options2 && options2.expand === true && options2.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};
braces$1.parse = (input2, options2 = {}) => parse$4(input2, options2);
braces$1.stringify = (input2, options2 = {}) => {
  if (typeof input2 === "string") {
    return stringify$1(braces$1.parse(input2, options2), options2);
  }
  return stringify$1(input2, options2);
};
braces$1.compile = (input2, options2 = {}) => {
  if (typeof input2 === "string") {
    input2 = braces$1.parse(input2, options2);
  }
  return compile(input2, options2);
};
braces$1.expand = (input2, options2 = {}) => {
  if (typeof input2 === "string") {
    input2 = braces$1.parse(input2, options2);
  }
  let result = expand(input2, options2);
  if (options2.noempty === true) {
    result = result.filter(Boolean);
  }
  if (options2.nodupes === true) {
    result = [...new Set(result)];
  }
  return result;
};
braces$1.create = (input2, options2 = {}) => {
  if (input2 === "" || input2.length < 3) {
    return [input2];
  }
  return options2.expand !== true ? braces$1.compile(input2, options2) : braces$1.expand(input2, options2);
};
var braces_1 = braces$1;
const util$9 = util$d;
const braces = braces_1;
const picomatch = requirePicomatch();
const utils$4 = requireUtils$2();
const isEmptyString = (v) => v === "" || v === "./";
const hasBraces = (v) => {
  const index2 = v.indexOf("{");
  return index2 > -1 && v.indexOf("}", index2) > -1;
};
const micromatch = (list2, patterns, options2) => {
  patterns = [].concat(patterns);
  list2 = [].concat(list2);
  let omit = /* @__PURE__ */ new Set();
  let keep = /* @__PURE__ */ new Set();
  let items = /* @__PURE__ */ new Set();
  let negatives = 0;
  let onResult = (state2) => {
    items.add(state2.output);
    if (options2 && options2.onResult) {
      options2.onResult(state2);
    }
  };
  for (let i = 0; i < patterns.length; i++) {
    let isMatch = picomatch(String(patterns[i]), { ...options2, onResult }, true);
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
    if (negated) negatives++;
    for (let item2 of list2) {
      let matched = isMatch(item2, true);
      let match = negated ? !matched.isMatch : matched.isMatch;
      if (!match) continue;
      if (negated) {
        omit.add(matched.output);
      } else {
        omit.delete(matched.output);
        keep.add(matched.output);
      }
    }
  }
  let result = negatives === patterns.length ? [...items] : [...keep];
  let matches = result.filter((item2) => !omit.has(item2));
  if (options2 && matches.length === 0) {
    if (options2.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(", ")}"`);
    }
    if (options2.nonull === true || options2.nullglob === true) {
      return options2.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
    }
  }
  return matches;
};
micromatch.match = micromatch;
micromatch.matcher = (pattern, options2) => picomatch(pattern, options2);
micromatch.isMatch = (str, patterns, options2) => picomatch(patterns, options2)(str);
micromatch.any = micromatch.isMatch;
micromatch.not = (list2, patterns, options2 = {}) => {
  patterns = [].concat(patterns).map(String);
  let result = /* @__PURE__ */ new Set();
  let items = [];
  let onResult = (state2) => {
    if (options2.onResult) options2.onResult(state2);
    items.push(state2.output);
  };
  let matches = new Set(micromatch(list2, patterns, { ...options2, onResult }));
  for (let item2 of items) {
    if (!matches.has(item2)) {
      result.add(item2);
    }
  }
  return [...result];
};
micromatch.contains = (str, pattern, options2) => {
  if (typeof str !== "string") {
    throw new TypeError(`Expected a string: "${util$9.inspect(str)}"`);
  }
  if (Array.isArray(pattern)) {
    return pattern.some((p) => micromatch.contains(str, p, options2));
  }
  if (typeof pattern === "string") {
    if (isEmptyString(str) || isEmptyString(pattern)) {
      return false;
    }
    if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
      return true;
    }
  }
  return micromatch.isMatch(str, pattern, { ...options2, contains: true });
};
micromatch.matchKeys = (obj, patterns, options2) => {
  if (!utils$4.isObject(obj)) {
    throw new TypeError("Expected the first argument to be an object");
  }
  let keys2 = micromatch(Object.keys(obj), patterns, options2);
  let res = {};
  for (let key2 of keys2) res[key2] = obj[key2];
  return res;
};
micromatch.some = (list2, patterns, options2) => {
  let items = [].concat(list2);
  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options2);
    if (items.some((item2) => isMatch(item2))) {
      return true;
    }
  }
  return false;
};
micromatch.every = (list2, patterns, options2) => {
  let items = [].concat(list2);
  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options2);
    if (!items.every((item2) => isMatch(item2))) {
      return false;
    }
  }
  return true;
};
micromatch.all = (str, patterns, options2) => {
  if (typeof str !== "string") {
    throw new TypeError(`Expected a string: "${util$9.inspect(str)}"`);
  }
  return [].concat(patterns).every((p) => picomatch(p, options2)(str));
};
micromatch.capture = (glob, input2, options2) => {
  let posix = utils$4.isWindows(options2);
  let regex = picomatch.makeRe(String(glob), { ...options2, capture: true });
  let match = regex.exec(posix ? utils$4.toPosixSlashes(input2) : input2);
  if (match) {
    return match.slice(1).map((v) => v === void 0 ? "" : v);
  }
};
micromatch.makeRe = (...args) => picomatch.makeRe(...args);
micromatch.scan = (...args) => picomatch.scan(...args);
micromatch.parse = (patterns, options2) => {
  let res = [];
  for (let pattern of [].concat(patterns || [])) {
    for (let str of braces(String(pattern), options2)) {
      res.push(picomatch.parse(str, options2));
    }
  }
  return res;
};
micromatch.braces = (pattern, options2) => {
  if (typeof pattern !== "string") throw new TypeError("Expected a string");
  if (options2 && options2.nobrace === true || !hasBraces(pattern)) {
    return [pattern];
  }
  return braces(pattern, options2);
};
micromatch.braceExpand = (pattern, options2) => {
  if (typeof pattern !== "string") throw new TypeError("Expected a string");
  return micromatch.braces(pattern, { ...options2, expand: true });
};
micromatch.hasBraces = hasBraces;
var micromatch_1 = micromatch;
var slash = (path2) => {
  const isExtendedLengthPath = /^\\\\\?\\/.test(path2);
  const hasNonAscii = /[^\u0000-\u0080]+/.test(path2);
  if (isExtendedLengthPath || hasNonAscii) {
    return path2;
  }
  return path2.replace(/\\/g, "/");
};
const matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
var escapeStringRegexp$2 = (string2) => {
  if (typeof string2 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string2.replace(matchOperatorsRegex, "\\$&");
};
const escapeStringRegexp$1 = escapeStringRegexp$2;
const cwd = typeof process === "object" && process && typeof process.cwd === "function" ? process.cwd() : ".";
const natives = [].concat(
  require$$0$9.builtinModules,
  "bootstrap_node",
  "node"
).map((n) => new RegExp(`(?:\\((?:node:)?${n}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${n}(?:\\.js)?:\\d+:\\d+$)`));
natives.push(
  /\((?:node:)?internal\/[^:]+:\d+:\d+\)$/,
  /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/,
  /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/
);
class StackUtils {
  constructor(opts) {
    opts = {
      ignoredPackages: [],
      ...opts
    };
    if ("internals" in opts === false) {
      opts.internals = StackUtils.nodeInternals();
    }
    if ("cwd" in opts === false) {
      opts.cwd = cwd;
    }
    this._cwd = opts.cwd.replace(/\\/g, "/");
    this._internals = [].concat(
      opts.internals,
      ignoredPackagesRegExp(opts.ignoredPackages)
    );
    this._wrapCallSite = opts.wrapCallSite || false;
  }
  static nodeInternals() {
    return [...natives];
  }
  clean(stack2, indent = 0) {
    indent = " ".repeat(indent);
    if (!Array.isArray(stack2)) {
      stack2 = stack2.split("\n");
    }
    if (!/^\s*at /.test(stack2[0]) && /^\s*at /.test(stack2[1])) {
      stack2 = stack2.slice(1);
    }
    let outdent = false;
    let lastNonAtLine = null;
    const result = [];
    stack2.forEach((st) => {
      st = st.replace(/\\/g, "/");
      if (this._internals.some((internal) => internal.test(st))) {
        return;
      }
      const isAtLine = /^\s*at /.test(st);
      if (outdent) {
        st = st.trimEnd().replace(/^(\s+)at /, "$1");
      } else {
        st = st.trim();
        if (isAtLine) {
          st = st.slice(3);
        }
      }
      st = st.replace(`${this._cwd}/`, "");
      if (st) {
        if (isAtLine) {
          if (lastNonAtLine) {
            result.push(lastNonAtLine);
            lastNonAtLine = null;
          }
          result.push(st);
        } else {
          outdent = true;
          lastNonAtLine = st;
        }
      }
    });
    return result.map((line2) => `${indent}${line2}
`).join("");
  }
  captureString(limit, fn2 = this.captureString) {
    if (typeof limit === "function") {
      fn2 = limit;
      limit = Infinity;
    }
    const { stackTraceLimit } = Error;
    if (limit) {
      Error.stackTraceLimit = limit;
    }
    const obj = {};
    Error.captureStackTrace(obj, fn2);
    const { stack: stack2 } = obj;
    Error.stackTraceLimit = stackTraceLimit;
    return this.clean(stack2);
  }
  capture(limit, fn2 = this.capture) {
    if (typeof limit === "function") {
      fn2 = limit;
      limit = Infinity;
    }
    const { prepareStackTrace, stackTraceLimit } = Error;
    Error.prepareStackTrace = (obj2, site) => {
      if (this._wrapCallSite) {
        return site.map(this._wrapCallSite);
      }
      return site;
    };
    if (limit) {
      Error.stackTraceLimit = limit;
    }
    const obj = {};
    Error.captureStackTrace(obj, fn2);
    const { stack: stack2 } = obj;
    Object.assign(Error, { prepareStackTrace, stackTraceLimit });
    return stack2;
  }
  at(fn2 = this.at) {
    const [site] = this.capture(1, fn2);
    if (!site) {
      return {};
    }
    const res = {
      line: site.getLineNumber(),
      column: site.getColumnNumber()
    };
    setFile(res, site.getFileName(), this._cwd);
    if (site.isConstructor()) {
      Object.defineProperty(res, "constructor", {
        value: true,
        configurable: true
      });
    }
    if (site.isEval()) {
      res.evalOrigin = site.getEvalOrigin();
    }
    if (site.isNative()) {
      res.native = true;
    }
    let typename;
    try {
      typename = site.getTypeName();
    } catch (_2) {
    }
    if (typename && typename !== "Object" && typename !== "[object Object]") {
      res.type = typename;
    }
    const fname = site.getFunctionName();
    if (fname) {
      res.function = fname;
    }
    const meth = site.getMethodName();
    if (meth && fname !== meth) {
      res.method = meth;
    }
    return res;
  }
  parseLine(line2) {
    const match = line2 && line2.match(re);
    if (!match) {
      return null;
    }
    const ctor = match[1] === "new";
    let fname = match[2];
    const evalOrigin = match[3];
    const evalFile = match[4];
    const evalLine = Number(match[5]);
    const evalCol = Number(match[6]);
    let file2 = match[7];
    const lnum = match[8];
    const col = match[9];
    const native = match[10] === "native";
    const closeParen = match[11] === ")";
    let method;
    const res = {};
    if (lnum) {
      res.line = Number(lnum);
    }
    if (col) {
      res.column = Number(col);
    }
    if (closeParen && file2) {
      let closes = 0;
      for (let i = file2.length - 1; i > 0; i--) {
        if (file2.charAt(i) === ")") {
          closes++;
        } else if (file2.charAt(i) === "(" && file2.charAt(i - 1) === " ") {
          closes--;
          if (closes === -1 && file2.charAt(i - 1) === " ") {
            const before = file2.slice(0, i - 1);
            const after = file2.slice(i + 1);
            file2 = after;
            fname += ` (${before}`;
            break;
          }
        }
      }
    }
    if (fname) {
      const methodMatch = fname.match(methodRe);
      if (methodMatch) {
        fname = methodMatch[1];
        method = methodMatch[2];
      }
    }
    setFile(res, file2, this._cwd);
    if (ctor) {
      Object.defineProperty(res, "constructor", {
        value: true,
        configurable: true
      });
    }
    if (evalOrigin) {
      res.evalOrigin = evalOrigin;
      res.evalLine = evalLine;
      res.evalColumn = evalCol;
      res.evalFile = evalFile && evalFile.replace(/\\/g, "/");
    }
    if (native) {
      res.native = true;
    }
    if (fname) {
      res.function = fname;
    }
    if (method && fname !== method) {
      res.method = method;
    }
    return res;
  }
}
function setFile(result, filename, cwd2) {
  if (filename) {
    filename = filename.replace(/\\/g, "/");
    if (filename.startsWith(`${cwd2}/`)) {
      filename = filename.slice(cwd2.length + 1);
    }
    result.file = filename;
  }
}
function ignoredPackagesRegExp(ignoredPackages) {
  if (ignoredPackages.length === 0) {
    return [];
  }
  const packages = ignoredPackages.map((mod) => escapeStringRegexp$1(mod));
  return new RegExp(`[/\\\\]node_modules[/\\\\](?:${packages.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
}
const re = new RegExp(
  "^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"
);
const methodRe = /^(.*?) \[as (.*?)\]$/;
var stackUtils$1 = StackUtils;
Object.defineProperty(build$1, "__esModule", {
  value: true
});
var separateMessageFromStack_1 = build$1.separateMessageFromStack = build$1.indentAllLines = build$1.getTopFrame = build$1.getStackTraceLines = formatStackTrace_1 = build$1.formatStackTrace = build$1.formatResultsErrors = build$1.formatPath = build$1.formatExecError = void 0;
var path$1 = _interopRequireWildcard(pathExports);
var _url = require$$1;
var _util = util$d;
var _codeFrame = lib$Y;
var _chalk = _interopRequireDefault(source$1);
var fs = _interopRequireWildcard(require$$2$1);
var _micromatch = _interopRequireDefault(micromatch_1);
var _slash = _interopRequireDefault(slash);
var _stackUtils = _interopRequireDefault(stackUtils$1);
var _prettyFormat = build$4;
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
  var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache = function(nodeInterop2) {
    return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return { default: obj };
  }
  var cache2 = _getRequireWildcardCache(nodeInterop);
  if (cache2 && cache2.has(obj)) {
    return cache2.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key2 in obj) {
    if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key2, desc);
      } else {
        newObj[key2] = obj[key2];
      }
    }
  }
  newObj.default = obj;
  if (cache2) {
    cache2.set(obj, newObj);
  }
  return newObj;
}
var Symbol$1 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
var Symbol$1 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
var jestReadFile = globalThis[Symbol$1.for("jest-native-read-file")] || fs.readFileSync;
const stackUtils = new _stackUtils.default({
  cwd: "something which does not exist"
});
let nodeInternals = [];
try {
  nodeInternals = _stackUtils.default.nodeInternals();
} catch {
}
const PATH_NODE_MODULES = `${path$1.sep}node_modules${path$1.sep}`;
const PATH_JEST_PACKAGES = `${path$1.sep}jest${path$1.sep}packages${path$1.sep}`;
const JASMINE_IGNORE = /^\s+at(?:(?:.jasmine-)|\s+jasmine\.buildExpectationResult)/;
const JEST_INTERNALS_IGNORE = /^\s+at.*?jest(-.*?)?(\/|\\)(build|node_modules|packages)(\/|\\)/;
const ANONYMOUS_FN_IGNORE = /^\s+at <anonymous>.*$/;
const ANONYMOUS_PROMISE_IGNORE = /^\s+at (new )?Promise \(<anonymous>\).*$/;
const ANONYMOUS_GENERATOR_IGNORE = /^\s+at Generator.next \(<anonymous>\).*$/;
const NATIVE_NEXT_IGNORE = /^\s+at next \(native\).*$/;
const TITLE_INDENT = "  ";
const MESSAGE_INDENT = "    ";
const STACK_INDENT = "      ";
const ANCESTRY_SEPARATOR = " › ";
const TITLE_BULLET = _chalk.default.bold("● ");
const STACK_TRACE_COLOR = _chalk.default.dim;
const STACK_PATH_REGEXP = /\s*at.*\(?(:\d*:\d*|native)\)?/;
const EXEC_ERROR_MESSAGE = "Test suite failed to run";
const NOT_EMPTY_LINE_REGEXP = /^(?!$)/gm;
const indentAllLines = (lines) => lines.replace(NOT_EMPTY_LINE_REGEXP, MESSAGE_INDENT);
build$1.indentAllLines = indentAllLines;
const trim = (string2) => (string2 || "").trim();
const trimPaths = (string2) => string2.match(STACK_PATH_REGEXP) ? trim(string2) : string2;
const getRenderedCallsite = (fileContent, line2, column2) => {
  let renderedCallsite = (0, _codeFrame.codeFrameColumns)(
    fileContent,
    {
      start: {
        column: column2,
        line: line2
      }
    },
    {
      highlightCode: true
    }
  );
  renderedCallsite = indentAllLines(renderedCallsite);
  renderedCallsite = `
${renderedCallsite}
`;
  return renderedCallsite;
};
const blankStringRegexp = /^\s*$/;
function checkForCommonEnvironmentErrors(error2) {
  if (error2.includes("ReferenceError: document is not defined") || error2.includes("ReferenceError: window is not defined") || error2.includes("ReferenceError: navigator is not defined")) {
    return warnAboutWrongTestEnvironment(error2, "jsdom");
  } else if (error2.includes(".unref is not a function")) {
    return warnAboutWrongTestEnvironment(error2, "node");
  }
  return error2;
}
function warnAboutWrongTestEnvironment(error2, env) {
  return _chalk.default.bold.red(
    `The error below may be caused by using the wrong test environment, see ${_chalk.default.dim.underline(
      "https://jestjs.io/docs/configuration#testenvironment-string"
    )}.
Consider using the "${env}" test environment.

`
  ) + error2;
}
const formatExecError = (error2, config2, options2, testPath, reuseMessage, noTitle) => {
  if (!error2 || typeof error2 === "number") {
    error2 = new Error(`Expected an Error, but "${String(error2)}" was thrown`);
    error2.stack = "";
  }
  let message, stack2;
  let cause = "";
  const subErrors = [];
  if (typeof error2 === "string" || !error2) {
    error2 || (error2 = "EMPTY ERROR");
    message = "";
    stack2 = error2;
  } else {
    message = error2.message;
    stack2 = typeof error2.stack === "string" ? error2.stack : `thrown: ${(0, _prettyFormat.format)(error2, {
      maxDepth: 3
    })}`;
    if ("cause" in error2) {
      const prefix = "\n\nCause:\n";
      if (typeof error2.cause === "string" || typeof error2.cause === "number") {
        cause += `${prefix}${error2.cause}`;
      } else if (_util.types.isNativeError(error2.cause) || error2.cause instanceof Error) {
        const formatted = formatExecError(
          error2.cause,
          config2,
          options2,
          testPath,
          reuseMessage,
          true
        );
        cause += `${prefix}${formatted}`;
      }
    }
    if ("errors" in error2 && Array.isArray(error2.errors)) {
      for (const subError of error2.errors) {
        subErrors.push(
          formatExecError(
            subError,
            config2,
            options2,
            testPath,
            reuseMessage,
            true
          )
        );
      }
    }
  }
  if (cause !== "") {
    cause = indentAllLines(cause);
  }
  const separated = separateMessageFromStack(stack2 || "");
  stack2 = separated.stack;
  if (separated.message.includes(trim(message))) {
    message = separated.message;
  }
  message = checkForCommonEnvironmentErrors(message);
  message = indentAllLines(message);
  stack2 = stack2 && !options2.noStackTrace ? `
${formatStackTrace(stack2, config2, options2, testPath)}` : "";
  if (typeof stack2 !== "string" || blankStringRegexp.test(message) && blankStringRegexp.test(stack2)) {
    message = `thrown: ${(0, _prettyFormat.format)(error2, {
      maxDepth: 3
    })}`;
  }
  let messageToUse;
  if (reuseMessage || noTitle) {
    messageToUse = ` ${message.trim()}`;
  } else {
    messageToUse = `${EXEC_ERROR_MESSAGE}

${message}`;
  }
  const title = noTitle ? "" : `${TITLE_INDENT + TITLE_BULLET}`;
  const subErrorStr = subErrors.length > 0 ? indentAllLines(
    `

Errors contained in AggregateError:
${subErrors.join("\n")}`
  ) : "";
  return `${title + messageToUse + stack2 + cause + subErrorStr}
`;
};
build$1.formatExecError = formatExecError;
const removeInternalStackEntries = (lines, options2) => {
  let pathCounter = 0;
  return lines.filter((line2) => {
    if (ANONYMOUS_FN_IGNORE.test(line2)) {
      return false;
    }
    if (ANONYMOUS_PROMISE_IGNORE.test(line2)) {
      return false;
    }
    if (ANONYMOUS_GENERATOR_IGNORE.test(line2)) {
      return false;
    }
    if (NATIVE_NEXT_IGNORE.test(line2)) {
      return false;
    }
    if (nodeInternals.some((internal) => internal.test(line2))) {
      return false;
    }
    if (!STACK_PATH_REGEXP.test(line2)) {
      return true;
    }
    if (JASMINE_IGNORE.test(line2)) {
      return false;
    }
    if (++pathCounter === 1) {
      return true;
    }
    if (options2.noStackTrace) {
      return false;
    }
    if (JEST_INTERNALS_IGNORE.test(line2)) {
      return false;
    }
    return true;
  });
};
const formatPath = (line2, config2, relativeTestPath = null) => {
  const match = line2.match(/(^\s*at .*?\(?)([^()]+)(:[0-9]+:[0-9]+\)?.*$)/);
  if (!match) {
    return line2;
  }
  let filePath = (0, _slash.default)(path$1.relative(config2.rootDir, match[2]));
  if (config2.testMatch && config2.testMatch.length && (0, _micromatch.default)([filePath], config2.testMatch).length > 0 || filePath === relativeTestPath) {
    filePath = _chalk.default.reset.cyan(filePath);
  }
  return STACK_TRACE_COLOR(match[1]) + filePath + STACK_TRACE_COLOR(match[3]);
};
build$1.formatPath = formatPath;
const getStackTraceLines = (stack2, options2 = {
  noCodeFrame: false,
  noStackTrace: false
}) => removeInternalStackEntries(stack2.split(/\n/), options2);
build$1.getStackTraceLines = getStackTraceLines;
const getTopFrame = (lines) => {
  for (const line2 of lines) {
    if (line2.includes(PATH_NODE_MODULES) || line2.includes(PATH_JEST_PACKAGES)) {
      continue;
    }
    const parsedFrame = stackUtils.parseLine(line2.trim());
    if (parsedFrame && parsedFrame.file) {
      if (parsedFrame.file.startsWith("file://")) {
        parsedFrame.file = (0, _slash.default)(
          (0, _url.fileURLToPath)(parsedFrame.file)
        );
      }
      return parsedFrame;
    }
  }
  return null;
};
build$1.getTopFrame = getTopFrame;
const formatStackTrace = (stack2, config2, options2, testPath) => {
  const lines = getStackTraceLines(stack2, options2);
  let renderedCallsite = "";
  const relativeTestPath = testPath ? (0, _slash.default)(path$1.relative(config2.rootDir, testPath)) : null;
  if (!options2.noStackTrace && !options2.noCodeFrame) {
    const topFrame = getTopFrame(lines);
    if (topFrame) {
      const { column: column2, file: filename, line: line2 } = topFrame;
      if (line2 && filename && path$1.isAbsolute(filename)) {
        let fileContent;
        try {
          fileContent = jestReadFile(filename, "utf8");
          renderedCallsite = getRenderedCallsite(fileContent, line2, column2);
        } catch {
        }
      }
    }
  }
  const stacktrace = lines.filter(Boolean).map(
    (line2) => STACK_INDENT + formatPath(trimPaths(line2), config2, relativeTestPath)
  ).join("\n");
  return renderedCallsite ? `${renderedCallsite}
${stacktrace}` : `
${stacktrace}`;
};
var formatStackTrace_1 = build$1.formatStackTrace = formatStackTrace;
function isErrorOrStackWithCause(errorOrStack) {
  return typeof errorOrStack !== "string" && "cause" in errorOrStack && (typeof errorOrStack.cause === "string" || _util.types.isNativeError(errorOrStack.cause) || errorOrStack.cause instanceof Error);
}
function formatErrorStack(errorOrStack, config2, options2, testPath) {
  const sourceStack = typeof errorOrStack === "string" ? errorOrStack : errorOrStack.stack || "";
  let { message, stack: stack2 } = separateMessageFromStack(sourceStack);
  stack2 = options2.noStackTrace ? "" : `${STACK_TRACE_COLOR(
    formatStackTrace(stack2, config2, options2, testPath)
  )}
`;
  message = checkForCommonEnvironmentErrors(message);
  message = indentAllLines(message);
  let cause = "";
  if (isErrorOrStackWithCause(errorOrStack)) {
    const nestedCause = formatErrorStack(
      errorOrStack.cause,
      config2,
      options2,
      testPath
    );
    cause = `
${MESSAGE_INDENT}Cause:
${nestedCause}`;
  }
  return `${message}
${stack2}${cause}`;
}
function failureDetailsToErrorOrStack(failureDetails, content) {
  if (!failureDetails) {
    return content;
  }
  if (_util.types.isNativeError(failureDetails) || failureDetails instanceof Error) {
    return failureDetails;
  }
  if (typeof failureDetails === "object" && "error" in failureDetails && (_util.types.isNativeError(failureDetails.error) || failureDetails.error instanceof Error)) {
    return failureDetails.error;
  }
  return content;
}
const formatResultsErrors = (testResults, config2, options2, testPath) => {
  const failedResults = testResults.reduce((errors, result) => {
    result.failureMessages.forEach((item2, index2) => {
      errors.push({
        content: item2,
        failureDetails: result.failureDetails[index2],
        result
      });
    });
    return errors;
  }, []);
  if (!failedResults.length) {
    return null;
  }
  return failedResults.map(({ result, content, failureDetails }) => {
    const rootErrorOrStack = failureDetailsToErrorOrStack(
      failureDetails,
      content
    );
    const title = `${_chalk.default.bold.red(
      TITLE_INDENT + TITLE_BULLET + result.ancestorTitles.join(ANCESTRY_SEPARATOR) + (result.ancestorTitles.length ? ANCESTRY_SEPARATOR : "") + result.title
    )}
`;
    return `${title}
${formatErrorStack(
      rootErrorOrStack,
      config2,
      options2,
      testPath
    )}`;
  }).join("\n");
};
build$1.formatResultsErrors = formatResultsErrors;
const errorRegexp = /^Error:?\s*$/;
const removeBlankErrorLine = (str) => str.split("\n").filter((line2) => !errorRegexp.test(line2)).join("\n").trimRight();
const separateMessageFromStack = (content) => {
  if (!content) {
    return {
      message: "",
      stack: ""
    };
  }
  const messageMatch = content.match(
    /^(?:Error: )?([\s\S]*?(?=\n\s*at\s.*:\d*:\d*)|\s*.*)([\s\S]*)$/
  );
  if (!messageMatch) {
    throw new Error("If you hit this error, the regex above is buggy.");
  }
  const message = removeBlankErrorLine(messageMatch[1]);
  const stack2 = removeBlankErrorLine(messageMatch[2]);
  return {
    message,
    stack: stack2
  };
};
separateMessageFromStack_1 = build$1.separateMessageFromStack = separateMessageFromStack;
const DID_NOT_THROW = "Received function did not throw";
const getThrown = (e) => {
  const hasMessage = e !== null && e !== void 0 && typeof e.message === "string";
  if (hasMessage && typeof e.name === "string" && typeof e.stack === "string") {
    return {
      hasMessage,
      isError: true,
      message: e.message,
      value: e
    };
  }
  return {
    hasMessage,
    isError: false,
    message: hasMessage ? e.message : String(e),
    value: e
  };
};
const createMatcher = (matcherName, fromPromise) => function(received, expected) {
  const options2 = {
    isNot: this.isNot,
    promise: this.promise
  };
  let thrown = null;
  if (fromPromise && build$8.isError(received)) {
    thrown = getThrown(received);
  } else {
    if (typeof received !== "function") {
      if (!fromPromise) {
        const placeholder2 = expected === void 0 ? "" : "expected";
        throw new Error(
          matcherErrorMessage_1(
            matcherHint_1(matcherName, void 0, placeholder2, options2),
            `${RECEIVED_COLOR_1("received")} value must be a function`,
            printWithType_1("Received", received, printReceived_1)
          )
        );
      }
    } else {
      try {
        received();
      } catch (e) {
        thrown = getThrown(e);
      }
    }
  }
  if (expected === void 0) {
    return toThrow(matcherName, options2, thrown);
  } else if (typeof expected === "function") {
    return toThrowExpectedClass(matcherName, options2, thrown, expected);
  } else if (typeof expected === "string") {
    return toThrowExpectedString(matcherName, options2, thrown, expected);
  } else if (expected !== null && typeof expected.test === "function") {
    return toThrowExpectedRegExp(matcherName, options2, thrown, expected);
  } else if (expected !== null && typeof expected.asymmetricMatch === "function") {
    return toThrowExpectedAsymmetric(matcherName, options2, thrown, expected);
  } else if (expected !== null && typeof expected === "object") {
    return toThrowExpectedObject(matcherName, options2, thrown, expected);
  } else {
    throw new Error(
      matcherErrorMessage_1(
        matcherHint_1(matcherName, void 0, void 0, options2),
        `${EXPECTED_COLOR_1(
          "expected"
        )} value must be a string or regular expression or class or error`,
        printWithType_1("Expected", expected, printExpected_1)
      )
    );
  }
};
const matchers = {
  toThrow: createMatcher("toThrow"),
  toThrowError: createMatcher("toThrowError")
};
const toThrowExpectedRegExp = (matcherName, options2, thrown, expected) => {
  const pass = thrown !== null && expected.test(thrown.message);
  const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + formatExpected("Expected pattern: not ", expected) + (thrown !== null && thrown.hasMessage ? formatReceived(
    "Received message:     ",
    thrown,
    "message",
    expected
  ) + formatStack(thrown) : formatReceived("Received value:       ", thrown, "value")) : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + formatExpected("Expected pattern: ", expected) + (thrown === null ? `
${DID_NOT_THROW}` : thrown.hasMessage ? formatReceived("Received message: ", thrown, "message") + formatStack(thrown) : formatReceived("Received value:   ", thrown, "value"));
  return { message, pass };
};
const toThrowExpectedAsymmetric = (matcherName, options2, thrown, expected) => {
  const pass = thrown !== null && expected.asymmetricMatch(thrown.value);
  const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + formatExpected("Expected asymmetric matcher: not ", expected) + "\n" + (thrown !== null && thrown.hasMessage ? formatReceived("Received name:    ", thrown, "name") + formatReceived("Received message: ", thrown, "message") + formatStack(thrown) : formatReceived("Thrown value: ", thrown, "value")) : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + formatExpected("Expected asymmetric matcher: ", expected) + "\n" + (thrown === null ? DID_NOT_THROW : thrown.hasMessage ? formatReceived("Received name:    ", thrown, "name") + formatReceived("Received message: ", thrown, "message") + formatStack(thrown) : formatReceived("Thrown value: ", thrown, "value"));
  return { message, pass };
};
const toThrowExpectedObject = (matcherName, options2, thrown, expected) => {
  const expectedMessageAndCause = createMessageAndCause(expected);
  const thrownMessageAndCause = thrown !== null ? createMessageAndCause(thrown.value) : null;
  const pass = thrown !== null && thrown.message === expected.message && thrownMessageAndCause === expectedMessageAndCause;
  const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + formatExpected(
    `Expected ${messageAndCause(expected)}: not `,
    expectedMessageAndCause
  ) + (thrown !== null && thrown.hasMessage ? formatStack(thrown) : formatReceived("Received value:       ", thrown, "value")) : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + (thrown === null ? formatExpected(
    `Expected ${messageAndCause(expected)}: `,
    expectedMessageAndCause
  ) + "\n" + DID_NOT_THROW : thrown.hasMessage ? printDiffOrStringify_1(
    expectedMessageAndCause,
    thrownMessageAndCause,
    `Expected ${messageAndCause(expected)}`,
    `Received ${messageAndCause(thrown.value)}`,
    true
  ) + "\n" + formatStack(thrown) : formatExpected(
    `Expected ${messageAndCause(expected)}: `,
    expectedMessageAndCause
  ) + formatReceived("Received value:   ", thrown, "value"));
  return { message, pass };
};
const toThrowExpectedClass = (matcherName, options2, thrown, expected) => {
  const pass = thrown !== null && thrown.value instanceof expected;
  const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + printExpectedConstructorNameNot("Expected constructor", expected) + (thrown !== null && thrown.value != null && typeof thrown.value.constructor === "function" && thrown.value.constructor !== expected ? printReceivedConstructorNameNot(
    "Received constructor",
    thrown.value.constructor,
    expected
  ) : "") + "\n" + (thrown !== null && thrown.hasMessage ? formatReceived("Received message: ", thrown, "message") + formatStack(thrown) : formatReceived("Received value: ", thrown, "value")) : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + printExpectedConstructorName("Expected constructor", expected) + (thrown === null ? `
${DID_NOT_THROW}` : `${thrown.value != null && typeof thrown.value.constructor === "function" ? printReceivedConstructorName(
    "Received constructor",
    thrown.value.constructor
  ) : ""}
${thrown.hasMessage ? formatReceived("Received message: ", thrown, "message") + formatStack(thrown) : formatReceived("Received value: ", thrown, "value")}`);
  return { message, pass };
};
const toThrowExpectedString = (matcherName, options2, thrown, expected) => {
  const pass = thrown !== null && thrown.message.includes(expected);
  const message = pass ? () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + formatExpected("Expected substring: not ", expected) + (thrown !== null && thrown.hasMessage ? formatReceived(
    "Received message:       ",
    thrown,
    "message",
    expected
  ) + formatStack(thrown) : formatReceived("Received value:         ", thrown, "value")) : () => matcherHint_1(matcherName, void 0, void 0, options2) + "\n\n" + formatExpected("Expected substring: ", expected) + (thrown === null ? `
${DID_NOT_THROW}` : thrown.hasMessage ? formatReceived("Received message:   ", thrown, "message") + formatStack(thrown) : formatReceived("Received value:     ", thrown, "value"));
  return { message, pass };
};
const toThrow = (matcherName, options2, thrown) => {
  const pass = thrown !== null;
  const message = pass ? () => matcherHint_1(matcherName, void 0, "", options2) + "\n\n" + (thrown !== null && thrown.hasMessage ? formatReceived("Error name:    ", thrown, "name") + formatReceived("Error message: ", thrown, "message") + formatStack(thrown) : formatReceived("Thrown value: ", thrown, "value")) : () => matcherHint_1(matcherName, void 0, "", options2) + "\n\n" + DID_NOT_THROW;
  return { message, pass };
};
const formatExpected = (label, expected) => `${label + printExpected_1(expected)}
`;
const formatReceived = (label, thrown, key2, expected) => {
  if (thrown === null)
    return "";
  if (key2 === "message") {
    const message = thrown.message;
    if (typeof expected === "string") {
      const index2 = message.indexOf(expected);
      if (index2 !== -1) {
        return `${label + printReceivedStringContainExpectedSubstring$1(
          message,
          index2,
          expected.length
        )}
`;
      }
    } else if (expected instanceof RegExp) {
      return `${label + printReceivedStringContainExpectedResult$1(
        message,
        typeof expected.exec === "function" ? expected.exec(message) : null
      )}
`;
    }
    return `${label + printReceived_1(message)}
`;
  }
  if (key2 === "name") {
    return thrown.isError ? `${label + printReceived_1(thrown.value.name)}
` : "";
  }
  if (key2 === "value")
    return thrown.isError ? "" : `${label + printReceived_1(thrown.value)}
`;
  return "";
};
const formatStack = (thrown) => thrown === null || !thrown.isError ? "" : formatStackTrace_1(
  separateMessageFromStack_1(thrown.value.stack).stack,
  {
    rootDir: process.cwd(),
    testMatch: []
  },
  {
    noStackTrace: false
  }
);
function createMessageAndCauseMessage(error2) {
  if (error2.cause instanceof Error) {
    return `{ message: ${error2.message}, cause: ${createMessageAndCauseMessage(
      error2.cause
    )}}`;
  }
  return `{ message: ${error2.message} }`;
}
function createMessageAndCause(error2) {
  if (error2.cause instanceof Error)
    return createMessageAndCauseMessage(error2);
  return error2.message;
}
function messageAndCause(error2) {
  return error2.cause === void 0 ? "message" : "message and cause";
}
class JestAssertionError extends Error {
}
const createToThrowErrorMatchingSnapshotMatcher = function(matcher) {
  return function(received, testNameOrInlineSnapshot) {
    return matcher.apply(this, [received, testNameOrInlineSnapshot, true]);
  };
};
const getPromiseMatcher = (name, matcher) => {
  if (name === "toThrow" || name === "toThrowError")
    return createMatcher(name, true);
  else if (name === "toThrowErrorMatchingSnapshot" || name === "toThrowErrorMatchingInlineSnapshot")
    return createToThrowErrorMatchingSnapshotMatcher(matcher);
  return null;
};
const expect$3 = (actual, ...rest) => {
  if (rest.length !== 0)
    throw new Error("Expect takes at most one argument.");
  const allMatchers = getMatchers();
  const expectation = {
    not: {},
    rejects: { not: {} },
    resolves: { not: {} }
  };
  const err = new JestAssertionError();
  Object.keys(allMatchers).forEach((name) => {
    const matcher = allMatchers[name];
    const promiseMatcher = getPromiseMatcher(name, matcher) || matcher;
    expectation[name] = makeThrowingMatcher(matcher, false, "", actual);
    expectation.not[name] = makeThrowingMatcher(matcher, true, "", actual);
    expectation.resolves[name] = makeResolveMatcher(
      name,
      promiseMatcher,
      false,
      actual,
      err
    );
    expectation.resolves.not[name] = makeResolveMatcher(
      name,
      promiseMatcher,
      true,
      actual,
      err
    );
    expectation.rejects[name] = makeRejectMatcher(
      name,
      promiseMatcher,
      false,
      actual,
      err
    );
    expectation.rejects.not[name] = makeRejectMatcher(
      name,
      promiseMatcher,
      true,
      actual,
      err
    );
  });
  return expectation;
};
const getMessage = (message) => message && message() || RECEIVED_COLOR_1("No message was specified for this matcher.");
const makeResolveMatcher = (matcherName, matcher, isNot, actual, outerErr) => (...args) => {
  const options2 = {
    isNot,
    promise: "resolves"
  };
  if (!buildExports.isPromise(actual)) {
    throw new JestAssertionError(
      matcherErrorMessage_1(
        matcherHint_1(matcherName, void 0, "", options2),
        `${RECEIVED_COLOR_1("received")} value must be a promise`,
        printWithType_1(
          "Received",
          actual,
          printReceived_1
        )
      )
    );
  }
  const innerErr = new JestAssertionError();
  return actual.then(
    (result) => makeThrowingMatcher(matcher, isNot, "resolves", result, innerErr).apply(
      null,
      args
    ),
    (reason) => {
      outerErr.message = `${matcherHint_1(
        matcherName,
        void 0,
        "",
        options2
      )}

Received promise rejected instead of resolved
Rejected to value: ${printReceived_1(reason)}`;
      return Promise.reject(outerErr);
    }
  );
};
const makeRejectMatcher = (matcherName, matcher, isNot, actual, outerErr) => (...args) => {
  const options2 = {
    isNot,
    promise: "rejects"
  };
  const actualWrapper = typeof actual === "function" ? actual() : actual;
  if (!buildExports.isPromise(actualWrapper)) {
    throw new JestAssertionError(
      matcherErrorMessage_1(
        matcherHint_1(matcherName, void 0, "", options2),
        `${RECEIVED_COLOR_1(
          "received"
        )} value must be a promise or a function returning a promise`,
        printWithType_1(
          "Received",
          actual,
          printReceived_1
        )
      )
    );
  }
  const innerErr = new JestAssertionError();
  return actualWrapper.then(
    (result) => {
      outerErr.message = `${matcherHint_1(
        matcherName,
        void 0,
        "",
        options2
      )}

Received promise resolved instead of rejected
Resolved to value: ${printReceived_1(result)}`;
      return Promise.reject(outerErr);
    },
    (reason) => makeThrowingMatcher(matcher, isNot, "rejects", reason, innerErr).apply(
      null,
      args
    )
  );
};
const makeThrowingMatcher = (matcher, isNot, promise, actual, err) => function throwingMatcher(...args) {
  let throws = true;
  const utils2 = {
    ...matcherUtils$1,
    iterableEquality: build$8.iterableEquality,
    subsetEquality: build$8.subsetEquality
  };
  const matcherUtilsThing = {
    customTesters: getCustomEqualityTesters(),
    // When throws is disabled, the matcher will not throw errors during test
    // execution but instead add them to the global matcher state. If a
    // matcher throws, test execution is normally stopped immediately. The
    // snapshot matcher uses it because we want to log all snapshot
    // failures in a test.
    dontThrow: () => throws = false,
    equals: build$8.equals,
    utils: utils2
  };
  const matcherContext = {
    ...getState(),
    ...matcherUtilsThing,
    error: err,
    isNot,
    promise
  };
  const processResult = (result, asyncError) => {
    _validateResult(result);
    getState().assertionCalls++;
    if (result.pass && isNot || !result.pass && !isNot) {
      const message = getMessage(result.message);
      let error2;
      if (err) {
        error2 = err;
        error2.message = message;
      } else if (asyncError) {
        error2 = asyncError;
        error2.message = message;
      } else {
        error2 = new JestAssertionError(message);
        if (Error.captureStackTrace)
          Error.captureStackTrace(error2, throwingMatcher);
      }
      error2.matcherResult = { ...result, message };
      if (throws)
        throw error2;
      else
        getState().suppressedErrors.push(error2);
    } else {
      getState().numPassingAsserts++;
    }
  };
  const handleError = (error2) => {
    if (matcher[INTERNAL_MATCHER_FLAG] === true && !(error2 instanceof JestAssertionError) && error2.name !== "PrettyFormatPluginError" && // Guard for some environments (browsers) that do not support this feature.
    Error.captureStackTrace) {
      Error.captureStackTrace(error2, throwingMatcher);
    }
    throw error2;
  };
  let potentialResult;
  try {
    potentialResult = matcher[INTERNAL_MATCHER_FLAG] === true ? matcher.call(matcherContext, actual, ...args) : (
      // It's a trap specifically for inline snapshot to capture this name
      // in the stack trace, so that it can correctly get the custom matcher
      // function call.
      function __EXTERNAL_MATCHER_TRAP__() {
        return matcher.call(matcherContext, actual, ...args);
      }()
    );
    if (buildExports.isPromise(potentialResult)) {
      const asyncError = new JestAssertionError();
      if (Error.captureStackTrace)
        Error.captureStackTrace(asyncError, throwingMatcher);
      return potentialResult.then((aResult) => processResult(aResult, asyncError)).catch(handleError);
    } else {
      return processResult(potentialResult);
    }
  } catch (error2) {
    return handleError(error2);
  }
};
expect$3.extend = (matchers2) => setMatchers(matchers2, false, expect$3);
expect$3.addEqualityTesters = (customTesters) => addCustomEqualityTesters(customTesters);
expect$3.anything = anything;
expect$3.any = any;
expect$3.not = {
  arrayContaining: arrayNotContaining,
  closeTo: notCloseTo,
  objectContaining: objectNotContaining,
  stringContaining: stringNotContaining,
  stringMatching: stringNotMatching
};
expect$3.arrayContaining = arrayContaining;
expect$3.closeTo = closeTo;
expect$3.objectContaining = objectContaining;
expect$3.stringContaining = stringContaining;
expect$3.stringMatching = stringMatching;
const _validateResult = (result) => {
  if (typeof result !== "object" || typeof result.pass !== "boolean" || result.message && typeof result.message !== "string" && typeof result.message !== "function") {
    throw new Error(
      `Unexpected return from a matcher function.
Matcher functions should return an object in the following format:
  {message?: string | function, pass: boolean}
'${stringify_1(result)}' was returned`
    );
  }
};
function assertions(expected) {
  const error2 = new Error();
  if (Error.captureStackTrace)
    Error.captureStackTrace(error2, assertions);
  setState({
    expectedAssertionsNumber: expected,
    expectedAssertionsNumberError: error2
  });
}
function hasAssertions(...args) {
  const error2 = new Error();
  if (Error.captureStackTrace)
    Error.captureStackTrace(error2, hasAssertions);
  ensureNoExpected_1(args[0], ".hasAssertions");
  setState({
    isExpectingAssertions: true,
    isExpectingAssertionsError: error2
  });
}
setMatchers(matchers$1, true, expect$3);
setMatchers(spyMatchers, true, expect$3);
setMatchers(matchers, true, expect$3);
expect$3.assertions = assertions;
expect$3.hasAssertions = hasAssertions;
expect$3.getState = getState;
expect$3.setState = setState;
expect$3.extractExpectedAssertionsErrors = extractExpectedAssertionsErrors;
var build = {};
Object.defineProperty(build, "__esModule", {
  value: true
});
var spyOn_1 = build.spyOn = replaceProperty_1 = build.replaceProperty = mocked_1 = build.mocked = fn_1 = build.fn = ModuleMocker_1 = build.ModuleMocker = void 0;
function _jestUtil() {
  const data = requireBuild();
  _jestUtil = function() {
    return data;
  };
  return data;
}
const MOCK_CONSTRUCTOR_NAME = "mockConstructor";
const FUNCTION_NAME_RESERVED_PATTERN = /[\s!-/:-@[-`{-~]/;
const FUNCTION_NAME_RESERVED_REPLACE = new RegExp(
  FUNCTION_NAME_RESERVED_PATTERN.source,
  "g"
);
const RESERVED_KEYWORDS = /* @__PURE__ */ new Set([
  "arguments",
  "await",
  "break",
  "case",
  "catch",
  "class",
  "const",
  "continue",
  "debugger",
  "default",
  "delete",
  "do",
  "else",
  "enum",
  "eval",
  "export",
  "extends",
  "false",
  "finally",
  "for",
  "function",
  "if",
  "implements",
  "import",
  "in",
  "instanceof",
  "interface",
  "let",
  "new",
  "null",
  "package",
  "private",
  "protected",
  "public",
  "return",
  "static",
  "super",
  "switch",
  "this",
  "throw",
  "true",
  "try",
  "typeof",
  "var",
  "void",
  "while",
  "with",
  "yield"
]);
function matchArity(fn2, length) {
  let mockConstructor;
  switch (length) {
    case 1:
      mockConstructor = function(_a) {
        return fn2.apply(this, arguments);
      };
      break;
    case 2:
      mockConstructor = function(_a, _b) {
        return fn2.apply(this, arguments);
      };
      break;
    case 3:
      mockConstructor = function(_a, _b, _c) {
        return fn2.apply(this, arguments);
      };
      break;
    case 4:
      mockConstructor = function(_a, _b, _c, _d) {
        return fn2.apply(this, arguments);
      };
      break;
    case 5:
      mockConstructor = function(_a, _b, _c, _d, _e) {
        return fn2.apply(this, arguments);
      };
      break;
    case 6:
      mockConstructor = function(_a, _b, _c, _d, _e, _f) {
        return fn2.apply(this, arguments);
      };
      break;
    case 7:
      mockConstructor = function(_a, _b, _c, _d, _e, _f, _g) {
        return fn2.apply(this, arguments);
      };
      break;
    case 8:
      mockConstructor = function(_a, _b, _c, _d, _e, _f, _g, _h) {
        return fn2.apply(this, arguments);
      };
      break;
    case 9:
      mockConstructor = function(_a, _b, _c, _d, _e, _f, _g, _h, _i) {
        return fn2.apply(this, arguments);
      };
      break;
    default:
      mockConstructor = function() {
        return fn2.apply(this, arguments);
      };
      break;
  }
  return mockConstructor;
}
function getObjectType(value2) {
  return Object.prototype.toString.apply(value2).slice(8, -1);
}
function getType(ref) {
  const typeName = getObjectType(ref);
  if (typeName === "Function" || typeName === "AsyncFunction" || typeName === "GeneratorFunction" || typeName === "AsyncGeneratorFunction") {
    return "function";
  } else if (Array.isArray(ref)) {
    return "array";
  } else if (typeName === "Object" || typeName === "Module") {
    return "object";
  } else if (typeName === "Number" || typeName === "String" || typeName === "Boolean" || typeName === "Symbol") {
    return "constant";
  } else if (typeName === "Map" || typeName === "WeakMap" || typeName === "Set") {
    return "collection";
  } else if (typeName === "RegExp") {
    return "regexp";
  } else if (ref === void 0) {
    return "undefined";
  } else if (ref === null) {
    return "null";
  } else {
    return null;
  }
}
function isReadonlyProp(object, prop) {
  if (prop === "arguments" || prop === "caller" || prop === "callee" || prop === "name" || prop === "length") {
    const typeName = getObjectType(object);
    return typeName === "Function" || typeName === "AsyncFunction" || typeName === "GeneratorFunction" || typeName === "AsyncGeneratorFunction";
  }
  if (prop === "source" || prop === "global" || prop === "ignoreCase" || prop === "multiline") {
    return getObjectType(object) === "RegExp";
  }
  return false;
}
class ModuleMocker {
  /**
   * @see README.md
   * @param global Global object of the test environment, used to create
   * mocks
   */
  constructor(global) {
    __publicField(this, "_environmentGlobal");
    __publicField(this, "_mockState");
    __publicField(this, "_mockConfigRegistry");
    __publicField(this, "_spyState");
    __publicField(this, "_invocationCallCounter");
    this._environmentGlobal = global;
    this._mockState = /* @__PURE__ */ new WeakMap();
    this._mockConfigRegistry = /* @__PURE__ */ new WeakMap();
    this._spyState = /* @__PURE__ */ new Set();
    this._invocationCallCounter = 1;
  }
  _getSlots(object) {
    if (!object) {
      return [];
    }
    const slots = /* @__PURE__ */ new Set();
    const EnvObjectProto = this._environmentGlobal.Object.prototype;
    const EnvFunctionProto = this._environmentGlobal.Function.prototype;
    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype;
    const ObjectProto = Object.prototype;
    const FunctionProto = Function.prototype;
    const RegExpProto = RegExp.prototype;
    while (object != null && object !== EnvObjectProto && object !== EnvFunctionProto && object !== EnvRegExpProto && object !== ObjectProto && object !== FunctionProto && object !== RegExpProto) {
      const ownNames = Object.getOwnPropertyNames(object);
      for (let i = 0; i < ownNames.length; i++) {
        const prop = ownNames[i];
        if (!isReadonlyProp(object, prop)) {
          const propDesc = Object.getOwnPropertyDescriptor(object, prop);
          if (propDesc !== void 0 && !propDesc.get || object.__esModule) {
            slots.add(prop);
          }
        }
      }
      object = Object.getPrototypeOf(object);
    }
    return Array.from(slots);
  }
  _ensureMockConfig(f) {
    let config2 = this._mockConfigRegistry.get(f);
    if (!config2) {
      config2 = this._defaultMockConfig();
      this._mockConfigRegistry.set(f, config2);
    }
    return config2;
  }
  _ensureMockState(f) {
    let state2 = this._mockState.get(f);
    if (!state2) {
      state2 = this._defaultMockState();
      this._mockState.set(f, state2);
    }
    if (state2.calls.length > 0) {
      state2.lastCall = state2.calls[state2.calls.length - 1];
    }
    return state2;
  }
  _defaultMockConfig() {
    return {
      mockImpl: void 0,
      mockName: "jest.fn()",
      specificMockImpls: []
    };
  }
  _defaultMockState() {
    return {
      calls: [],
      contexts: [],
      instances: [],
      invocationCallOrder: [],
      results: []
    };
  }
  _makeComponent(metadata, restore) {
    if (metadata.type === "object") {
      return new this._environmentGlobal.Object();
    } else if (metadata.type === "array") {
      return new this._environmentGlobal.Array();
    } else if (metadata.type === "regexp") {
      return new this._environmentGlobal.RegExp("");
    } else if (metadata.type === "constant" || metadata.type === "collection" || metadata.type === "null" || metadata.type === "undefined") {
      return metadata.value;
    } else if (metadata.type === "function") {
      let withImplementation = function(fn2, callback) {
        const mockConfig = this._ensureMockConfig(f);
        const previousImplementation = mockConfig.mockImpl;
        const previousSpecificImplementations = mockConfig.specificMockImpls;
        mockConfig.mockImpl = fn2;
        mockConfig.specificMockImpls = [];
        const returnedValue = callback();
        if ((0, _jestUtil().isPromise)(returnedValue)) {
          return returnedValue.then(() => {
            mockConfig.mockImpl = previousImplementation;
            mockConfig.specificMockImpls = previousSpecificImplementations;
          });
        } else {
          mockConfig.mockImpl = previousImplementation;
          mockConfig.specificMockImpls = previousSpecificImplementations;
        }
      };
      const prototype = metadata.members && metadata.members.prototype && metadata.members.prototype.members || {};
      const prototypeSlots = this._getSlots(prototype);
      const mocker = this;
      const mockConstructor = matchArity(function(...args) {
        const mockState = mocker._ensureMockState(f);
        const mockConfig = mocker._ensureMockConfig(f);
        mockState.instances.push(this);
        mockState.contexts.push(this);
        mockState.calls.push(args);
        const mockResult = {
          type: "incomplete",
          value: void 0
        };
        mockState.results.push(mockResult);
        mockState.invocationCallOrder.push(mocker._invocationCallCounter++);
        let finalReturnValue;
        let thrownError;
        let callDidThrowError = false;
        try {
          finalReturnValue = (() => {
            if (this instanceof f) {
              prototypeSlots.forEach((slot) => {
                if (prototype[slot].type === "function") {
                  const protoImpl = this[slot];
                  this[slot] = mocker.generateFromMetadata(prototype[slot]);
                  this[slot]._protoImpl = protoImpl;
                }
              });
              const mockImpl = mockConfig.specificMockImpls.length ? mockConfig.specificMockImpls.shift() : mockConfig.mockImpl;
              return mockImpl && mockImpl.apply(this, arguments);
            }
            let specificMockImpl = mockConfig.specificMockImpls.shift();
            if (specificMockImpl === void 0) {
              specificMockImpl = mockConfig.mockImpl;
            }
            if (specificMockImpl) {
              return specificMockImpl.apply(this, arguments);
            }
            if (f._protoImpl) {
              return f._protoImpl.apply(this, arguments);
            }
            return void 0;
          })();
        } catch (error2) {
          thrownError = error2;
          callDidThrowError = true;
          throw error2;
        } finally {
          mockResult.type = callDidThrowError ? "throw" : "return";
          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;
        }
        return finalReturnValue;
      }, metadata.length || 0);
      const f = this._createMockFunction(metadata, mockConstructor);
      f._isMockFunction = true;
      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;
      if (typeof restore === "function") {
        this._spyState.add(restore);
      }
      this._mockState.set(f, this._defaultMockState());
      this._mockConfigRegistry.set(f, this._defaultMockConfig());
      Object.defineProperty(f, "mock", {
        configurable: false,
        enumerable: true,
        get: () => this._ensureMockState(f),
        set: (val) => this._mockState.set(f, val)
      });
      f.mockClear = () => {
        this._mockState.delete(f);
        return f;
      };
      f.mockReset = () => {
        f.mockClear();
        this._mockConfigRegistry.delete(f);
        return f;
      };
      f.mockRestore = () => {
        f.mockReset();
        return restore ? restore() : void 0;
      };
      f.mockReturnValueOnce = (value2) => (
        // next function call will return this value or default return value
        f.mockImplementationOnce(() => value2)
      );
      f.mockResolvedValueOnce = (value2) => f.mockImplementationOnce(
        () => this._environmentGlobal.Promise.resolve(value2)
      );
      f.mockRejectedValueOnce = (value2) => f.mockImplementationOnce(
        () => this._environmentGlobal.Promise.reject(value2)
      );
      f.mockReturnValue = (value2) => (
        // next function call will return specified return value or this one
        f.mockImplementation(() => value2)
      );
      f.mockResolvedValue = (value2) => f.mockImplementation(
        () => this._environmentGlobal.Promise.resolve(value2)
      );
      f.mockRejectedValue = (value2) => f.mockImplementation(
        () => this._environmentGlobal.Promise.reject(value2)
      );
      f.mockImplementationOnce = (fn2) => {
        const mockConfig = this._ensureMockConfig(f);
        mockConfig.specificMockImpls.push(fn2);
        return f;
      };
      f.withImplementation = withImplementation.bind(this);
      f.mockImplementation = (fn2) => {
        const mockConfig = this._ensureMockConfig(f);
        mockConfig.mockImpl = fn2;
        return f;
      };
      f.mockReturnThis = () => f.mockImplementation(function() {
        return this;
      });
      f.mockName = (name) => {
        if (name) {
          const mockConfig = this._ensureMockConfig(f);
          mockConfig.mockName = name;
        }
        return f;
      };
      f.getMockName = () => {
        const mockConfig = this._ensureMockConfig(f);
        return mockConfig.mockName || "jest.fn()";
      };
      if (metadata.mockImpl) {
        f.mockImplementation(metadata.mockImpl);
      }
      return f;
    } else {
      const unknownType = metadata.type || "undefined type";
      throw new Error(`Unrecognized type ${unknownType}`);
    }
  }
  _createMockFunction(metadata, mockConstructor) {
    let name = metadata.name;
    if (!name) {
      return mockConstructor;
    }
    const boundFunctionPrefix = "bound ";
    let bindCall = "";
    if (name.startsWith(boundFunctionPrefix)) {
      do {
        name = name.substring(boundFunctionPrefix.length);
        bindCall = ".bind(null)";
      } while (name && name.startsWith(boundFunctionPrefix));
    }
    if (name === MOCK_CONSTRUCTOR_NAME) {
      return mockConstructor;
    }
    if (
      // It's a syntax error to define functions with a reserved keyword as name
      RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number
      /^\d/.test(name)
    ) {
      name = `$${name}`;
    }
    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {
      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, "$");
    }
    const body = `return function ${name}() {  return ${MOCK_CONSTRUCTOR_NAME}.apply(this,arguments);}${bindCall}`;
    const createConstructor = new this._environmentGlobal.Function(
      MOCK_CONSTRUCTOR_NAME,
      body
    );
    return createConstructor(mockConstructor);
  }
  _generateMock(metadata, callbacks, refs) {
    const mock = this._makeComponent(metadata);
    if (metadata.refID != null) {
      refs[metadata.refID] = mock;
    }
    this._getSlots(metadata.members).forEach((slot) => {
      const slotMetadata = metadata.members && metadata.members[slot] || {};
      if (slotMetadata.ref != null) {
        callbacks.push(
          /* @__PURE__ */ function(ref) {
            return () => mock[slot] = refs[ref];
          }(slotMetadata.ref)
        );
      } else {
        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);
      }
    });
    if (metadata.type !== "undefined" && metadata.type !== "null" && mock.prototype && typeof mock.prototype === "object") {
      mock.prototype.constructor = mock;
    }
    return mock;
  }
  /**
   * Check whether the given property of an object has been already replaced.
   */
  _findReplacedProperty(object, propertyKey) {
    for (const spyState of this._spyState) {
      if ("object" in spyState && "property" in spyState && spyState.object === object && spyState.property === propertyKey) {
        return spyState;
      }
    }
    return;
  }
  /**
   * @see README.md
   * @param metadata Metadata for the mock in the schema returned by the
   * getMetadata method of this module.
   */
  generateFromMetadata(metadata) {
    const callbacks = [];
    const refs = {};
    const mock = this._generateMock(metadata, callbacks, refs);
    callbacks.forEach((setter) => setter());
    return mock;
  }
  /**
   * @see README.md
   * @param component The component for which to retrieve metadata.
   */
  getMetadata(component, _refs) {
    const refs = _refs || /* @__PURE__ */ new Map();
    const ref = refs.get(component);
    if (ref != null) {
      return {
        ref
      };
    }
    const type = getType(component);
    if (!type) {
      return null;
    }
    const metadata = {
      type
    };
    if (type === "constant" || type === "collection" || type === "undefined" || type === "null") {
      metadata.value = component;
      return metadata;
    } else if (type === "function") {
      const componentName = component.name;
      if (typeof componentName === "string") {
        metadata.name = componentName;
      }
      if (this.isMockFunction(component)) {
        metadata.mockImpl = component.getMockImplementation();
      }
    }
    metadata.refID = refs.size;
    refs.set(component, metadata.refID);
    let members = null;
    if (type !== "array") {
      this._getSlots(component).forEach((slot) => {
        if (type === "function" && this.isMockFunction(component) && slot.match(/^mock/)) {
          return;
        }
        const slotMetadata = this.getMetadata(component[slot], refs);
        if (slotMetadata) {
          if (!members) {
            members = {};
          }
          members[slot] = slotMetadata;
        }
      });
    }
    if (members) {
      metadata.members = members;
    }
    return metadata;
  }
  isMockFunction(fn2) {
    return fn2 != null && fn2._isMockFunction === true;
  }
  fn(implementation) {
    const length = implementation ? implementation.length : 0;
    const fn2 = this._makeComponent({
      length,
      type: "function"
    });
    if (implementation) {
      fn2.mockImplementation(implementation);
    }
    return fn2;
  }
  spyOn(object, methodKey, accessType) {
    if (object == null || typeof object !== "object" && typeof object !== "function") {
      throw new Error(
        `Cannot use spyOn on a primitive value; ${this._typeOf(object)} given`
      );
    }
    if (methodKey == null) {
      throw new Error("No property name supplied");
    }
    if (accessType) {
      return this._spyOnProperty(object, methodKey, accessType);
    }
    const original = object[methodKey];
    if (!original) {
      throw new Error(
        `Property \`${String(
          methodKey
        )}\` does not exist in the provided object`
      );
    }
    if (!this.isMockFunction(original)) {
      if (typeof original !== "function") {
        throw new Error(
          `Cannot spy on the \`${String(
            methodKey
          )}\` property because it is not a function; ${this._typeOf(
            original
          )} given instead.${typeof original !== "object" ? ` If you are trying to mock a property, use \`jest.replaceProperty(object, '${String(
            methodKey
          )}', value)\` instead.` : ""}`
        );
      }
      const isMethodOwner = Object.prototype.hasOwnProperty.call(
        object,
        methodKey
      );
      let descriptor = Object.getOwnPropertyDescriptor(object, methodKey);
      let proto2 = Object.getPrototypeOf(object);
      while (!descriptor && proto2 !== null) {
        descriptor = Object.getOwnPropertyDescriptor(proto2, methodKey);
        proto2 = Object.getPrototypeOf(proto2);
      }
      let mock;
      if (descriptor && descriptor.get) {
        const originalGet = descriptor.get;
        mock = this._makeComponent(
          {
            type: "function"
          },
          () => {
            descriptor.get = originalGet;
            Object.defineProperty(object, methodKey, descriptor);
          }
        );
        descriptor.get = () => mock;
        Object.defineProperty(object, methodKey, descriptor);
      } else {
        mock = this._makeComponent(
          {
            type: "function"
          },
          () => {
            if (isMethodOwner) {
              object[methodKey] = original;
            } else {
              delete object[methodKey];
            }
          }
        );
        object[methodKey] = mock;
      }
      mock.mockImplementation(function() {
        return original.apply(this, arguments);
      });
    }
    return object[methodKey];
  }
  _spyOnProperty(object, propertyKey, accessType) {
    let descriptor = Object.getOwnPropertyDescriptor(object, propertyKey);
    let proto2 = Object.getPrototypeOf(object);
    while (!descriptor && proto2 !== null) {
      descriptor = Object.getOwnPropertyDescriptor(proto2, propertyKey);
      proto2 = Object.getPrototypeOf(proto2);
    }
    if (!descriptor) {
      throw new Error(
        `Property \`${String(
          propertyKey
        )}\` does not exist in the provided object`
      );
    }
    if (!descriptor.configurable) {
      throw new Error(
        `Property \`${String(propertyKey)}\` is not declared configurable`
      );
    }
    if (!descriptor[accessType]) {
      throw new Error(
        `Property \`${String(
          propertyKey
        )}\` does not have access type ${accessType}`
      );
    }
    const original = descriptor[accessType];
    if (!this.isMockFunction(original)) {
      if (typeof original !== "function") {
        throw new Error(
          `Cannot spy on the ${String(
            propertyKey
          )} property because it is not a function; ${this._typeOf(
            original
          )} given instead.${typeof original !== "object" ? ` If you are trying to mock a property, use \`jest.replaceProperty(object, '${String(
            propertyKey
          )}', value)\` instead.` : ""}`
        );
      }
      descriptor[accessType] = this._makeComponent(
        {
          type: "function"
        },
        () => {
          descriptor[accessType] = original;
          Object.defineProperty(object, propertyKey, descriptor);
        }
      );
      descriptor[accessType].mockImplementation(function() {
        return original.apply(this, arguments);
      });
    }
    Object.defineProperty(object, propertyKey, descriptor);
    return descriptor[accessType];
  }
  replaceProperty(object, propertyKey, value2) {
    if (object == null || typeof object !== "object" && typeof object !== "function") {
      throw new Error(
        `Cannot use replaceProperty on a primitive value; ${this._typeOf(
          object
        )} given`
      );
    }
    if (propertyKey == null) {
      throw new Error("No property name supplied");
    }
    let descriptor = Object.getOwnPropertyDescriptor(object, propertyKey);
    let proto2 = Object.getPrototypeOf(object);
    while (!descriptor && proto2 !== null) {
      descriptor = Object.getOwnPropertyDescriptor(proto2, propertyKey);
      proto2 = Object.getPrototypeOf(proto2);
    }
    if (!descriptor) {
      throw new Error(
        `Property \`${String(
          propertyKey
        )}\` does not exist in the provided object`
      );
    }
    if (!descriptor.configurable) {
      throw new Error(
        `Property \`${String(propertyKey)}\` is not declared configurable`
      );
    }
    if (descriptor.get !== void 0) {
      throw new Error(
        `Cannot replace the \`${String(
          propertyKey
        )}\` property because it has a getter. Use \`jest.spyOn(object, '${String(
          propertyKey
        )}', 'get').mockReturnValue(value)\` instead.`
      );
    }
    if (descriptor.set !== void 0) {
      throw new Error(
        `Cannot replace the \`${String(
          propertyKey
        )}\` property because it has a setter. Use \`jest.spyOn(object, '${String(
          propertyKey
        )}', 'set').mockReturnValue(value)\` instead.`
      );
    }
    if (typeof descriptor.value === "function") {
      throw new Error(
        `Cannot replace the \`${String(
          propertyKey
        )}\` property because it is a function. Use \`jest.spyOn(object, '${String(
          propertyKey
        )}')\` instead.`
      );
    }
    const existingRestore = this._findReplacedProperty(object, propertyKey);
    if (existingRestore) {
      return existingRestore.replaced.replaceValue(value2);
    }
    const isPropertyOwner = Object.prototype.hasOwnProperty.call(
      object,
      propertyKey
    );
    const originalValue = descriptor.value;
    const restore = () => {
      if (isPropertyOwner) {
        object[propertyKey] = originalValue;
      } else {
        delete object[propertyKey];
      }
    };
    const replaced = {
      replaceValue: (value3) => {
        object[propertyKey] = value3;
        return replaced;
      },
      restore: () => {
        restore();
        this._spyState.delete(restore);
      }
    };
    restore.object = object;
    restore.property = propertyKey;
    restore.replaced = replaced;
    this._spyState.add(restore);
    return replaced.replaceValue(value2);
  }
  clearAllMocks() {
    this._mockState = /* @__PURE__ */ new WeakMap();
  }
  resetAllMocks() {
    this._mockConfigRegistry = /* @__PURE__ */ new WeakMap();
    this._mockState = /* @__PURE__ */ new WeakMap();
  }
  restoreAllMocks() {
    this._spyState.forEach((restore) => restore());
    this._spyState = /* @__PURE__ */ new Set();
  }
  _typeOf(value2) {
    return value2 == null ? `${value2}` : typeof value2;
  }
  mocked(source2, _options) {
    return source2;
  }
}
var ModuleMocker_1 = build.ModuleMocker = ModuleMocker;
const JestMock = new ModuleMocker(globalThis);
const fn = JestMock.fn.bind(JestMock);
var fn_1 = build.fn = fn;
const spyOn = JestMock.spyOn.bind(JestMock);
spyOn_1 = build.spyOn = spyOn;
const mocked = JestMock.mocked.bind(JestMock);
var mocked_1 = build.mocked = mocked;
const replaceProperty = JestMock.replaceProperty.bind(JestMock);
var replaceProperty_1 = build.replaceProperty = replaceProperty;
const index$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  get ModuleMocker() {
    return ModuleMocker_1;
  },
  default: build,
  get fn() {
    return fn_1;
  },
  get mocked() {
    return mocked_1;
  },
  get replaceProperty() {
    return replaceProperty_1;
  },
  get spyOn() {
    return spyOn_1;
  }
}, [build]);
const expect$2 = expect$3;
const asymmetricMatchers = {
  any,
  anything,
  arrayContaining,
  arrayNotContaining,
  closeTo,
  notCloseTo,
  objectContaining,
  objectNotContaining,
  stringContaining,
  stringMatching,
  stringNotContaining,
  stringNotMatching
};
const matcherUtils = {
  stringify: stringify_1
};
const expectBundleImpl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  get EXPECTED_COLOR() {
    return EXPECTED_COLOR_1;
  },
  get INVERTED_COLOR() {
    return INVERTED_COLOR_1;
  },
  get RECEIVED_COLOR() {
    return RECEIVED_COLOR_1;
  },
  asymmetricMatchers,
  expect: expect$2,
  matcherUtils,
  mock: index$1,
  get printReceived() {
    return printReceived_1;
  }
}, Symbol.toStringTag, { value: "Module" }));
const require$$0$7 = /* @__PURE__ */ getAugmentedNamespace(expectBundleImpl);
const expect$1 = require$$0$7.expect;
require$$0$7.mock;
require$$0$7.asymmetricMatchers;
require$$0$7.matcherUtils;
const EXPECTED_COLOR = require$$0$7.EXPECTED_COLOR;
const INVERTED_COLOR = require$$0$7.INVERTED_COLOR;
const RECEIVED_COLOR = require$$0$7.RECEIVED_COLOR;
const printReceived = require$$0$7.printReceived;
async function toMatchText(matcherName, receiver, receiverType, query, expected, options2 = {}) {
  expectTypes(receiver, [receiverType], matcherName);
  const matcherOptions = {
    isNot: this.isNot,
    promise: this.promise
  };
  if (!(typeof expected === "string") && !(expected && typeof expected.test === "function")) {
    throw new Error([
      matcherHint$1(this, receiver, matcherName, receiver, expected, matcherOptions),
      `${colors$2.bold("Matcher error")}: ${EXPECTED_COLOR("expected")} value must be a string or regular expression`,
      this.utils.printWithType("Expected", expected, this.utils.printExpected)
    ].join("\n\n"));
  }
  const timeout = options2.timeout ?? this.timeout;
  const { matches: pass, received, log, timedOut } = await query(!!this.isNot, timeout);
  if (pass === !this.isNot) {
    return {
      name: matcherName,
      message: () => "",
      pass,
      expected
    };
  }
  const stringSubstring = options2.matchSubstring ? "substring" : "string";
  const receivedString = received || "";
  const messagePrefix = matcherHint$1(this, receiver, matcherName, "locator", void 0, matcherOptions, timedOut ? timeout : void 0);
  const notFound = received === kNoElementsFoundError;
  let printedReceived;
  let printedExpected;
  let printedDiff;
  if (pass) {
    if (typeof expected === "string") {
      if (notFound) {
        printedExpected = `Expected ${stringSubstring}: not ${this.utils.printExpected(expected)}`;
        printedReceived = `Received: ${received}`;
      } else {
        printedExpected = `Expected ${stringSubstring}: not ${this.utils.printExpected(expected)}`;
        const formattedReceived = printReceivedStringContainExpectedSubstring(receivedString, receivedString.indexOf(expected), expected.length);
        printedReceived = `Received string: ${formattedReceived}`;
      }
    } else {
      if (notFound) {
        printedExpected = `Expected pattern: not ${this.utils.printExpected(expected)}`;
        printedReceived = `Received: ${received}`;
      } else {
        printedExpected = `Expected pattern: not ${this.utils.printExpected(expected)}`;
        const formattedReceived = printReceivedStringContainExpectedResult(receivedString, typeof expected.exec === "function" ? expected.exec(receivedString) : null);
        printedReceived = `Received string: ${formattedReceived}`;
      }
    }
  } else {
    const labelExpected = `Expected ${typeof expected === "string" ? stringSubstring : "pattern"}`;
    if (notFound) {
      printedExpected = `${labelExpected}: ${this.utils.printExpected(expected)}`;
      printedReceived = `Received: ${received}`;
    } else {
      printedDiff = this.utils.printDiffOrStringify(expected, receivedString, labelExpected, "Received string", false);
    }
  }
  const message = () => {
    const resultDetails = printedDiff ? printedDiff : printedExpected + "\n" + printedReceived;
    return messagePrefix + resultDetails + callLogText(log);
  };
  return {
    name: matcherName,
    expected,
    message,
    pass,
    actual: received,
    log,
    timeout: timedOut ? timeout : void 0
  };
}
let currentTestInfoValue = null;
function currentTestInfo() {
  return currentTestInfoValue;
}
let currentFileSuite;
function setCurrentlyLoadingFileSuite(suite) {
  currentFileSuite = suite;
}
function currentlyLoadingFileSuite() {
  return currentFileSuite;
}
const kMaxDeadline = 2147483647;
class TimeoutManager {
  constructor(timeout) {
    this._ignoreTimeouts = false;
    this._defaultSlot = { timeout, elapsed: 0 };
  }
  setIgnoreTimeouts() {
    this._ignoreTimeouts = true;
    if (this._running)
      this._updateTimeout(this._running);
  }
  interrupt() {
    if (this._running)
      this._running.timeoutPromise.reject(this._createTimeoutError(this._running));
  }
  isTimeExhaustedFor(runnable) {
    var _a;
    const slot = ((_a = runnable.fixture) == null ? void 0 : _a.slot) || runnable.slot || this._defaultSlot;
    return slot.timeout > 0 && slot.elapsed >= slot.timeout - 1;
  }
  async withRunnable(runnable, cb) {
    var _a;
    if (!runnable)
      return await cb();
    if (this._running)
      throw new Error(`Internal error: duplicate runnable`);
    const running = this._running = {
      runnable,
      slot: ((_a = runnable.fixture) == null ? void 0 : _a.slot) || runnable.slot || this._defaultSlot,
      start: monotonicTime(),
      deadline: kMaxDeadline,
      timer: void 0,
      timeoutPromise: new ManualPromise()
    };
    try {
      this._updateTimeout(running);
      return await Promise.race([
        cb(),
        running.timeoutPromise
      ]);
    } finally {
      if (running.timer)
        clearTimeout(running.timer);
      running.timer = void 0;
      running.slot.elapsed += monotonicTime() - running.start;
      this._running = void 0;
    }
  }
  _updateTimeout(running) {
    if (running.timer)
      clearTimeout(running.timer);
    running.timer = void 0;
    if (this._ignoreTimeouts || !running.slot.timeout) {
      running.deadline = kMaxDeadline;
      return;
    }
    running.deadline = running.start + (running.slot.timeout - running.slot.elapsed);
    const timeout = running.deadline - monotonicTime() + 1;
    if (timeout <= 0)
      running.timeoutPromise.reject(this._createTimeoutError(running));
    else
      running.timer = setTimeout(() => running.timeoutPromise.reject(this._createTimeoutError(running)), timeout);
  }
  defaultSlot() {
    return this._defaultSlot;
  }
  slow() {
    const slot = this._running ? this._running.slot : this._defaultSlot;
    slot.timeout = slot.timeout * 3;
    if (this._running)
      this._updateTimeout(this._running);
  }
  setTimeout(timeout) {
    const slot = this._running ? this._running.slot : this._defaultSlot;
    slot.timeout = timeout;
    if (this._running)
      this._updateTimeout(this._running);
  }
  currentSlotDeadline() {
    return this._running ? this._running.deadline : kMaxDeadline;
  }
  currentSlotType() {
    return this._running ? this._running.runnable.type : "test";
  }
  _createTimeoutError(running) {
    var _a;
    let message = "";
    const timeout = running.slot.timeout;
    const runnable = running.runnable;
    switch (runnable.type) {
      case "test": {
        if (runnable.fixture) {
          if (runnable.fixture.phase === "setup")
            message = `Test timeout of ${timeout}ms exceeded while setting up "${runnable.fixture.title}".`;
          else
            message = `Tearing down "${runnable.fixture.title}" exceeded the test timeout of ${timeout}ms.`;
        } else {
          message = `Test timeout of ${timeout}ms exceeded.`;
        }
        break;
      }
      case "afterEach":
      case "beforeEach":
        message = `Test timeout of ${timeout}ms exceeded while running "${runnable.type}" hook.`;
        break;
      case "beforeAll":
      case "afterAll":
        message = `"${runnable.type}" hook timeout of ${timeout}ms exceeded.`;
        break;
      case "teardown": {
        if (runnable.fixture)
          message = `Worker teardown timeout of ${timeout}ms exceeded while ${runnable.fixture.phase === "setup" ? "setting up" : "tearing down"} "${runnable.fixture.title}".`;
        else
          message = `Worker teardown timeout of ${timeout}ms exceeded.`;
        break;
      }
      case "skip":
      case "slow":
      case "fixme":
      case "fail":
        message = `"${runnable.type}" modifier timeout of ${timeout}ms exceeded.`;
        break;
    }
    const fixtureWithSlot = ((_a = runnable.fixture) == null ? void 0 : _a.slot) ? runnable.fixture : void 0;
    if (fixtureWithSlot)
      message = `Fixture "${fixtureWithSlot.title}" timeout of ${timeout}ms exceeded during ${fixtureWithSlot.phase}.`;
    message = colors$2.red(message);
    const location = (fixtureWithSlot || runnable).location;
    const error2 = new TimeoutManagerError(message);
    error2.name = "";
    error2.stack = message + (location ? `
    at ${location.file}:${location.line}:${location.column}` : "");
    return error2;
  }
}
class TimeoutManagerError extends Error {
}
const testTraceEntryName = "test.trace";
const version = 7;
let traceOrdinal = 0;
class TestTracing {
  constructor(testInfo, artifactsDir) {
    this._traceEvents = [];
    this._temporaryTraceFiles = [];
    this._testInfo = testInfo;
    this._artifactsDir = artifactsDir;
    this._tracesDir = path$2.join(this._artifactsDir, "traces");
    this._contextCreatedEvent = {
      version,
      type: "context-options",
      origin: "testRunner",
      browserName: "",
      options: {},
      platform: process.platform,
      wallTime: Date.now(),
      monotonicTime: monotonicTime(),
      sdkLanguage: "javascript"
    };
    this._appendTraceEvent(this._contextCreatedEvent);
  }
  _shouldCaptureTrace() {
    var _a, _b, _c, _d, _e;
    if (process.env.PW_TEST_DISABLE_TRACING)
      return false;
    if (((_a = this._options) == null ? void 0 : _a.mode) === "on")
      return true;
    if (((_b = this._options) == null ? void 0 : _b.mode) === "retain-on-failure")
      return true;
    if (((_c = this._options) == null ? void 0 : _c.mode) === "on-first-retry" && this._testInfo.retry === 1)
      return true;
    if (((_d = this._options) == null ? void 0 : _d.mode) === "on-all-retries" && this._testInfo.retry > 0)
      return true;
    if (((_e = this._options) == null ? void 0 : _e.mode) === "retain-on-first-failure" && this._testInfo.retry === 0)
      return true;
    return false;
  }
  async startIfNeeded(value2) {
    const defaultTraceOptions = { screenshots: true, snapshots: true, sources: true, attachments: true, _live: false, mode: "off" };
    if (!value2) {
      this._options = defaultTraceOptions;
    } else if (typeof value2 === "string") {
      this._options = { ...defaultTraceOptions, mode: value2 === "retry-with-trace" ? "on-first-retry" : value2 };
    } else {
      const mode = value2.mode || "off";
      this._options = { ...defaultTraceOptions, ...value2, mode: mode === "retry-with-trace" ? "on-first-retry" : mode };
    }
    if (!this._shouldCaptureTrace()) {
      this._options = void 0;
      return;
    }
    if (!this._liveTraceFile && this._options._live) {
      this._liveTraceFile = { file: path$2.join(this._tracesDir, `${this._testInfo.testId}-test.trace`), fs: new SerializedFS() };
      this._liveTraceFile.fs.mkdir(path$2.dirname(this._liveTraceFile.file));
      const data = this._traceEvents.map((e) => JSON.stringify(e)).join("\n") + "\n";
      this._liveTraceFile.fs.writeFile(this._liveTraceFile.file, data);
    }
  }
  artifactsDir() {
    return this._artifactsDir;
  }
  tracesDir() {
    return this._tracesDir;
  }
  traceTitle() {
    return [path$2.relative(this._testInfo.project.testDir, this._testInfo.file) + ":" + this._testInfo.line, ...this._testInfo.titlePath.slice(1)].join(" › ");
  }
  generateNextTraceRecordingName() {
    const ordinalSuffix = traceOrdinal ? `-recording${traceOrdinal}` : "";
    ++traceOrdinal;
    const retrySuffix = this._testInfo.retry ? `-retry${this._testInfo.retry}` : "";
    return `${this._testInfo.testId}${retrySuffix}${ordinalSuffix}`;
  }
  generateNextTraceRecordingPath() {
    const file2 = path$2.join(this._artifactsDir, createGuid() + ".zip");
    this._temporaryTraceFiles.push(file2);
    return file2;
  }
  traceOptions() {
    return this._options;
  }
  async stopIfNeeded() {
    var _a, _b, _c;
    if (!this._options)
      return;
    const error2 = await ((_a = this._liveTraceFile) == null ? void 0 : _a.fs.syncAndGetError());
    if (error2)
      throw error2;
    const testFailed = this._testInfo.status !== this._testInfo.expectedStatus;
    const shouldAbandonTrace = !testFailed && (this._options.mode === "retain-on-failure" || this._options.mode === "retain-on-first-failure");
    if (shouldAbandonTrace) {
      for (const file2 of this._temporaryTraceFiles)
        await fs$1.promises.unlink(file2).catch(() => {
        });
      return;
    }
    const zipFile = new yazl.ZipFile();
    if (!((_b = this._options) == null ? void 0 : _b.attachments)) {
      for (const event of this._traceEvents) {
        if (event.type === "after")
          delete event.attachments;
      }
    }
    if ((_c = this._options) == null ? void 0 : _c.sources) {
      const sourceFiles = /* @__PURE__ */ new Set();
      for (const event of this._traceEvents) {
        if (event.type === "before") {
          for (const frame of event.stack || [])
            sourceFiles.add(frame.file);
        }
      }
      for (const sourceFile of sourceFiles) {
        await fs$1.promises.readFile(sourceFile, "utf8").then((source2) => {
          zipFile.addBuffer(Buffer.from(source2), "resources/src@" + calculateSha1(sourceFile) + ".txt");
        }).catch(() => {
        });
      }
    }
    const sha1s = /* @__PURE__ */ new Set();
    for (const event of this._traceEvents.filter((e) => e.type === "after")) {
      for (const attachment of event.attachments || []) {
        let contentPromise;
        if (attachment.path)
          contentPromise = fs$1.promises.readFile(attachment.path).catch(() => void 0);
        else if (attachment.base64)
          contentPromise = Promise.resolve(Buffer.from(attachment.base64, "base64"));
        const content = await contentPromise;
        if (content === void 0)
          continue;
        const sha1 = calculateSha1(content);
        attachment.sha1 = sha1;
        delete attachment.path;
        delete attachment.base64;
        if (sha1s.has(sha1))
          continue;
        sha1s.add(sha1);
        zipFile.addBuffer(content, "resources/" + sha1);
      }
    }
    const traceContent = Buffer.from(this._traceEvents.map((e) => JSON.stringify(e)).join("\n"));
    zipFile.addBuffer(traceContent, testTraceEntryName);
    await new Promise((f) => {
      zipFile.end(void 0, () => {
        zipFile.outputStream.pipe(fs$1.createWriteStream(this.generateNextTraceRecordingPath())).on("close", f);
      });
    });
    const tracePath = this._testInfo.outputPath("trace.zip");
    await mergeTraceFiles(tracePath, this._temporaryTraceFiles);
    this._testInfo.attachments.push({ name: "trace", path: tracePath, contentType: "application/zip" });
  }
  appendForError(error2) {
    var _a;
    const rawStack = ((_a = error2.stack) == null ? void 0 : _a.split("\n")) || [];
    const stack2 = rawStack ? filteredStackTrace(rawStack) : [];
    this._appendTraceEvent({
      type: "error",
      message: this._formatError(error2),
      stack: stack2
    });
  }
  _formatError(error2) {
    const parts = [error2.message || String(error2.value)];
    if (error2.cause)
      parts.push("[cause]: " + this._formatError(error2.cause));
    return parts.join("\n");
  }
  appendStdioToTrace(type, chunk) {
    this._appendTraceEvent({
      type,
      timestamp: monotonicTime(),
      text: typeof chunk === "string" ? chunk : void 0,
      base64: typeof chunk === "string" ? void 0 : chunk.toString("base64")
    });
  }
  appendBeforeActionForStep(callId, parentId, category, apiName, params, stack2) {
    this._appendTraceEvent({
      type: "before",
      callId,
      parentId,
      startTime: monotonicTime(),
      class: "Test",
      method: category,
      apiName,
      params: Object.fromEntries(Object.entries(params || {}).map(([name, value2]) => [name, generatePreview(value2)])),
      stack: stack2
    });
  }
  appendAfterActionForStep(callId, error2, attachments = []) {
    this._appendTraceEvent({
      type: "after",
      callId,
      endTime: monotonicTime(),
      attachments: serializeAttachments(attachments),
      error: error2
    });
  }
  _appendTraceEvent(event) {
    this._traceEvents.push(event);
    if (this._liveTraceFile)
      this._liveTraceFile.fs.appendFile(this._liveTraceFile.file, JSON.stringify(event) + "\n", true);
  }
}
function serializeAttachments(attachments) {
  return attachments.filter((a) => a.name !== "trace").map((a) => {
    var _a;
    return {
      name: a.name,
      contentType: a.contentType,
      path: a.path,
      base64: (_a = a.body) == null ? void 0 : _a.toString("base64")
    };
  });
}
function generatePreview(value2, visited = /* @__PURE__ */ new Set()) {
  if (visited.has(value2))
    return "";
  visited.add(value2);
  if (typeof value2 === "string")
    return value2;
  if (typeof value2 === "number")
    return value2.toString();
  if (typeof value2 === "boolean")
    return value2.toString();
  if (value2 === null)
    return "null";
  if (value2 === void 0)
    return "undefined";
  if (Array.isArray(value2))
    return "[" + value2.map((v) => generatePreview(v, visited)).join(", ") + "]";
  if (typeof value2 === "object")
    return "Object";
  return String(value2);
}
async function mergeTraceFiles(fileName, temporaryTraceFiles) {
  temporaryTraceFiles = temporaryTraceFiles.filter((file2) => fs$1.existsSync(file2));
  if (temporaryTraceFiles.length === 1) {
    await fs$1.promises.rename(temporaryTraceFiles[0], fileName);
    return;
  }
  const mergePromise = new ManualPromise();
  const zipFile = new yazl.ZipFile();
  const entryNames = /* @__PURE__ */ new Set();
  zipFile.on("error", (error2) => mergePromise.reject(error2));
  for (let i = temporaryTraceFiles.length - 1; i >= 0; --i) {
    const tempFile = temporaryTraceFiles[i];
    const promise = new ManualPromise();
    yauzl.open(tempFile, (err, inZipFile) => {
      if (err) {
        promise.reject(err);
        return;
      }
      let pendingEntries = inZipFile.entryCount;
      inZipFile.on("entry", (entry) => {
        let entryName = entry.fileName;
        if (entry.fileName === testTraceEntryName) ;
        else if (entry.fileName.match(/[\d-]*trace\./)) {
          entryName = i + "-" + entry.fileName;
        }
        if (entryNames.has(entryName)) {
          if (--pendingEntries === 0)
            promise.resolve();
          return;
        }
        entryNames.add(entryName);
        inZipFile.openReadStream(entry, (err2, readStream) => {
          if (err2) {
            promise.reject(err2);
            return;
          }
          zipFile.addReadStream(readStream, entryName);
          if (--pendingEntries === 0)
            promise.resolve();
        });
      });
    });
    await promise;
  }
  zipFile.end(void 0, () => {
    zipFile.outputStream.pipe(fs$1.createWriteStream(fileName)).on("close", () => {
      void Promise.all(temporaryTraceFiles.map((tempFile) => fs$1.promises.unlink(tempFile))).then(() => {
        mergePromise.resolve();
      }).catch((error2) => mergePromise.reject(error2));
    }).on("error", (error2) => mergePromise.reject(error2));
  });
  await mergePromise;
}
function testInfoError(error2) {
  const result = serializeError(error2);
  if (error2 instanceof ExpectError)
    result.matcherResult = error2.matcherResult;
  return result;
}
class TestInfoImpl {
  constructor(configInternal, projectInternal, workerParams, test2, retry, onStepBegin, onStepEnd, onAttach) {
    this._wasInterrupted = false;
    this._lastStepId = 0;
    this._steps = [];
    this._stepMap = /* @__PURE__ */ new Map();
    this._hasNonRetriableError = false;
    this._hasUnhandledError = false;
    this._allowSkips = false;
    this.duration = 0;
    this.annotations = [];
    this.attachments = [];
    this.status = "passed";
    this.snapshotSuffix = "";
    this.errors = [];
    this.testId = (test2 == null ? void 0 : test2.id) ?? "";
    this._onStepBegin = onStepBegin;
    this._onStepEnd = onStepEnd;
    this._onAttach = onAttach;
    this._startTime = monotonicTime();
    this._startWallTime = Date.now();
    this._requireFile = (test2 == null ? void 0 : test2._requireFile) ?? "";
    this.repeatEachIndex = workerParams.repeatEachIndex;
    this.retry = retry;
    this.workerIndex = workerParams.workerIndex;
    this.parallelIndex = workerParams.parallelIndex;
    this._projectInternal = projectInternal;
    this.project = projectInternal.project;
    this._configInternal = configInternal;
    this.config = configInternal.config;
    this.title = (test2 == null ? void 0 : test2.title) ?? "";
    this.titlePath = (test2 == null ? void 0 : test2.titlePath()) ?? [];
    this.file = (test2 == null ? void 0 : test2.location.file) ?? "";
    this.line = (test2 == null ? void 0 : test2.location.line) ?? 0;
    this.column = (test2 == null ? void 0 : test2.location.column) ?? 0;
    this.tags = (test2 == null ? void 0 : test2.tags) ?? [];
    this.fn = (test2 == null ? void 0 : test2.fn) ?? (() => {
    });
    this.expectedStatus = (test2 == null ? void 0 : test2.expectedStatus) ?? "skipped";
    this._timeoutManager = new TimeoutManager(this.project.timeout);
    if (configInternal.configCLIOverrides.debug)
      this._setDebugMode();
    this.outputDir = (() => {
      const relativeTestFilePath = path$2.relative(this.project.testDir, this._requireFile.replace(/\.(spec|test)\.(js|ts|jsx|tsx|mjs|mts|cjs|cts)$/, ""));
      const sanitizedRelativePath = relativeTestFilePath.replace(process.platform === "win32" ? new RegExp("\\\\", "g") : new RegExp("/", "g"), "-");
      const fullTitleWithoutSpec = this.titlePath.slice(1).join(" ");
      let testOutputDir = trimLongString(sanitizedRelativePath + "-" + sanitizeForFilePath(fullTitleWithoutSpec), windowsFilesystemFriendlyLength);
      if (projectInternal.id)
        testOutputDir += "-" + sanitizeForFilePath(projectInternal.id);
      if (this.retry)
        testOutputDir += "-retry" + this.retry;
      if (this.repeatEachIndex)
        testOutputDir += "-repeat" + this.repeatEachIndex;
      return path$2.join(this.project.outputDir, testOutputDir);
    })();
    this.snapshotDir = (() => {
      const relativeTestFilePath = path$2.relative(this.project.testDir, this._requireFile);
      return path$2.join(this.project.snapshotDir, relativeTestFilePath + "-snapshots");
    })();
    this._attachmentsPush = this.attachments.push.bind(this.attachments);
    this.attachments.push = (...attachments) => {
      var _a;
      for (const a of attachments)
        this._attach(a, (_a = this._parentStep()) == null ? void 0 : _a.stepId);
      return this.attachments.length;
    };
    this._tracing = new TestTracing(this, workerParams.artifactsDir);
  }
  get error() {
    return this.errors[0];
  }
  set error(e) {
    if (e === void 0)
      throw new Error("Cannot assign testInfo.error undefined value!");
    this.errors[0] = e;
  }
  get timeout() {
    return this._timeoutManager.defaultSlot().timeout;
  }
  set timeout(timeout) {
  }
  _deadlineForMatcher(timeout) {
    const startTime = monotonicTime();
    const matcherDeadline = timeout ? startTime + timeout : kMaxDeadline;
    const testDeadline = this._timeoutManager.currentSlotDeadline() - 250;
    const matcherMessage = `Timeout ${timeout}ms exceeded while waiting on the predicate`;
    const testMessage = `Test timeout of ${this.timeout}ms exceeded`;
    return { deadline: Math.min(testDeadline, matcherDeadline), timeoutMessage: testDeadline < matcherDeadline ? testMessage : matcherMessage };
  }
  static _defaultDeadlineForMatcher(timeout) {
    return { deadline: timeout ? monotonicTime() + timeout : 0, timeoutMessage: `Timeout ${timeout}ms exceeded while waiting on the predicate` };
  }
  _modifier(type, modifierArgs) {
    if (typeof modifierArgs[1] === "function") {
      throw new Error([
        "It looks like you are calling test.skip() inside the test and pass a callback.",
        "Pass a condition instead and optional description instead:",
        `test('my test', async ({ page, isMobile }) => {`,
        `  test.skip(isMobile, 'This test is not applicable on mobile');`,
        `});`
      ].join("\n"));
    }
    if (modifierArgs.length >= 1 && !modifierArgs[0])
      return;
    const description = modifierArgs[1];
    this.annotations.push({ type, description });
    if (type === "slow") {
      this._timeoutManager.slow();
    } else if (type === "skip" || type === "fixme") {
      this.expectedStatus = "skipped";
      throw new SkipError("Test is skipped: " + (description || ""));
    } else if (type === "fail") {
      if (this.expectedStatus !== "skipped")
        this.expectedStatus = "failed";
    }
  }
  _findLastStageStep(steps) {
    for (let i = steps.length - 1; i >= 0; i--) {
      const child = this._findLastStageStep(steps[i].steps);
      if (child)
        return child;
      if (steps[i].isStage && !steps[i].endWallTime)
        return steps[i];
    }
  }
  _parentStep() {
    return zones.zoneData("stepZone") ?? this._findLastStageStep(this._steps);
  }
  _addStep(data, parentStep) {
    const stepId = `${data.category}@${++this._lastStepId}`;
    if (data.isStage) {
      parentStep = this._findLastStageStep(this._steps);
    } else {
      if (!parentStep)
        parentStep = this._parentStep();
    }
    const filteredStack = filteredStackTrace(captureRawStack());
    data.boxedStack = parentStep == null ? void 0 : parentStep.boxedStack;
    if (!data.boxedStack && data.box) {
      data.boxedStack = filteredStack.slice(1);
      data.location = data.location || data.boxedStack[0];
    }
    data.location = data.location || filteredStack[0];
    const attachmentIndices = [];
    const step = {
      stepId,
      ...data,
      steps: [],
      attachmentIndices,
      complete: (result) => {
        var _a;
        if (step.endWallTime)
          return;
        step.endWallTime = Date.now();
        if (result.error) {
          if (typeof result.error === "object" && !((_a = result.error) == null ? void 0 : _a[stepSymbol]))
            result.error[stepSymbol] = step;
          const error2 = testInfoError(result.error);
          if (data.boxedStack)
            error2.stack = `${error2.message}
${stringifyStackFrames(data.boxedStack).join("\n")}`;
          step.error = error2;
        }
        if (!step.error) {
          for (const childStep of step.steps) {
            if (childStep.error && childStep.infectParentStepsWithError) {
              step.error = childStep.error;
              step.infectParentStepsWithError = true;
              break;
            }
          }
        }
        const payload2 = {
          testId: this.testId,
          stepId,
          wallTime: step.endWallTime,
          error: step.error,
          suggestedRebaseline: result.suggestedRebaseline
        };
        this._onStepEnd(payload2);
        const errorForTrace = step.error ? { name: "", message: step.error.message || "", stack: step.error.stack } : void 0;
        const attachments = attachmentIndices.map((i) => this.attachments[i]);
        this._tracing.appendAfterActionForStep(stepId, errorForTrace, attachments);
      }
    };
    const parentStepList = parentStep ? parentStep.steps : this._steps;
    parentStepList.push(step);
    this._stepMap.set(stepId, step);
    const payload = {
      testId: this.testId,
      stepId,
      parentStepId: parentStep ? parentStep.stepId : void 0,
      title: data.title,
      category: data.category,
      wallTime: Date.now(),
      location: data.location
    };
    this._onStepBegin(payload);
    this._tracing.appendBeforeActionForStep(stepId, parentStep == null ? void 0 : parentStep.stepId, data.category, data.apiName || data.title, data.params, data.location ? [data.location] : []);
    return step;
  }
  _interrupt() {
    this._wasInterrupted = true;
    this._timeoutManager.interrupt();
    if (this.status === "passed")
      this.status = "interrupted";
  }
  _failWithError(error2) {
    if (this.status === "passed" || this.status === "skipped")
      this.status = error2 instanceof TimeoutManagerError ? "timedOut" : "failed";
    const serialized = testInfoError(error2);
    const step = typeof error2 === "object" ? error2 == null ? void 0 : error2[stepSymbol] : void 0;
    if (step && step.boxedStack)
      serialized.stack = `${error2.name}: ${error2.message}
${stringifyStackFrames(step.boxedStack).join("\n")}`;
    this.errors.push(serialized);
    this._tracing.appendForError(serialized);
  }
  async _runAsStage(stage, cb) {
    var _a, _b, _c;
    if (debugTest.enabled) {
      const location = ((_a = stage.runnable) == null ? void 0 : _a.location) ? ` at "${formatLocation(stage.runnable.location)}"` : ``;
      debugTest(`started stage "${stage.title}"${location}`);
    }
    stage.step = stage.stepInfo ? this._addStep({ ...stage.stepInfo, title: stage.title, isStage: true }) : void 0;
    try {
      await this._timeoutManager.withRunnable(stage.runnable, async () => {
        try {
          await cb();
        } catch (e) {
          if (!stage.runnable)
            throw e;
          if (this._allowSkips && e instanceof SkipError) {
            if (this.status === "passed")
              this.status = "skipped";
          } else {
            this._failWithError(e);
          }
          throw e;
        }
      });
      (_b = stage.step) == null ? void 0 : _b.complete({});
    } catch (error2) {
      if (!this._wasInterrupted && error2 instanceof TimeoutManagerError && stage.runnable)
        this._failWithError(error2);
      (_c = stage.step) == null ? void 0 : _c.complete({ error: error2 });
      throw error2;
    } finally {
      debugTest(`finished stage "${stage.title}"`);
    }
  }
  _isFailure() {
    return this.status !== "skipped" && this.status !== this.expectedStatus;
  }
  _currentHookType() {
    const type = this._timeoutManager.currentSlotType();
    return ["beforeAll", "afterAll", "beforeEach", "afterEach"].includes(type) ? type : void 0;
  }
  _setDebugMode() {
    this._timeoutManager.setIgnoreTimeouts();
  }
  // ------------ TestInfo methods ------------
  async attach(name, options2 = {}) {
    const step = this._addStep({
      title: `attach "${name}"`,
      category: "attach"
    });
    this._attach(await normalizeAndSaveAttachment(this.outputPath(), name, options2), step.stepId);
    step.complete({});
  }
  _attach(attachment, stepId) {
    var _a, _b;
    const index2 = this._attachmentsPush(attachment) - 1;
    if (stepId) {
      this._stepMap.get(stepId).attachmentIndices.push(index2);
    } else {
      const callId = `attach@${++this._lastStepId}`;
      this._tracing.appendBeforeActionForStep(callId, (_a = this._findLastStageStep(this._steps)) == null ? void 0 : _a.stepId, "attach", `attach "${attachment.name}"`, void 0, []);
      this._tracing.appendAfterActionForStep(callId, void 0, [attachment]);
    }
    this._onAttach({
      testId: this.testId,
      name: attachment.name,
      contentType: attachment.contentType,
      path: attachment.path,
      body: (_b = attachment.body) == null ? void 0 : _b.toString("base64"),
      stepId
    });
  }
  outputPath(...pathSegments) {
    const outputPath = this._getOutputPath(...pathSegments);
    fs$1.mkdirSync(this.outputDir, { recursive: true });
    return outputPath;
  }
  _getOutputPath(...pathSegments) {
    const joinedPath = path$2.join(...pathSegments);
    const outputPath = getContainedPath(this.outputDir, joinedPath);
    if (outputPath)
      return outputPath;
    throw new Error(`The outputPath is not allowed outside of the parent directory. Please fix the defined path.

	outputPath: ${joinedPath}`);
  }
  _fsSanitizedTestName() {
    const fullTitleWithoutSpec = this.titlePath.slice(1).join(" ");
    return sanitizeForFilePath(trimLongString(fullTitleWithoutSpec));
  }
  snapshotPath(...pathSegments) {
    const subPath = path$2.join(...pathSegments);
    const parsedSubPath = path$2.parse(subPath);
    const relativeTestFilePath = path$2.relative(this.project.testDir, this._requireFile);
    const parsedRelativeTestFilePath = path$2.parse(relativeTestFilePath);
    const projectNamePathSegment = sanitizeForFilePath(this.project.name);
    const snapshotPath = (this._projectInternal.snapshotPathTemplate || "").replace(/\{(.)?testDir\}/g, "$1" + this.project.testDir).replace(/\{(.)?snapshotDir\}/g, "$1" + this.project.snapshotDir).replace(/\{(.)?snapshotSuffix\}/g, this.snapshotSuffix ? "$1" + this.snapshotSuffix : "").replace(/\{(.)?testFileDir\}/g, "$1" + parsedRelativeTestFilePath.dir).replace(/\{(.)?platform\}/g, "$1" + process.platform).replace(/\{(.)?projectName\}/g, projectNamePathSegment ? "$1" + projectNamePathSegment : "").replace(/\{(.)?testName\}/g, "$1" + this._fsSanitizedTestName()).replace(/\{(.)?testFileName\}/g, "$1" + parsedRelativeTestFilePath.base).replace(/\{(.)?testFilePath\}/g, "$1" + relativeTestFilePath).replace(/\{(.)?arg\}/g, "$1" + path$2.join(parsedSubPath.dir, parsedSubPath.name)).replace(/\{(.)?ext\}/g, parsedSubPath.ext ? "$1" + parsedSubPath.ext : "");
    return path$2.normalize(path$2.resolve(this._configInternal.configDir, snapshotPath));
  }
  skip(...args) {
    this._modifier("skip", args);
  }
  fixme(...args) {
    this._modifier("fixme", args);
  }
  fail(...args) {
    this._modifier("fail", args);
  }
  slow(...args) {
    this._modifier("slow", args);
  }
  setTimeout(timeout) {
    this._timeoutManager.setTimeout(timeout);
  }
}
class SkipError extends Error {
}
const stepSymbol = Symbol("step");
function takeFirst(...args) {
  for (const arg of args) {
    if (arg !== void 0)
      return arg;
  }
  return void 0;
}
process.env.CI ? "dot" : "list";
function toBeAttached(locator, options2) {
  const attached = !options2 || options2.attached === void 0 || options2.attached;
  const expected = attached ? "attached" : "detached";
  const arg = attached ? "" : "{ attached: false }";
  return toBeTruthy.call(this, "toBeAttached", locator, "Locator", expected, arg, async (isNot, timeout) => {
    return await locator._expect(attached ? "to.be.attached" : "to.be.detached", { isNot, timeout });
  }, options2);
}
function toBeChecked(locator, options2) {
  const checked = options2 == null ? void 0 : options2.checked;
  const indeterminate = options2 == null ? void 0 : options2.indeterminate;
  const expectedValue = {
    checked,
    indeterminate
  };
  let expected;
  let arg;
  if (options2 == null ? void 0 : options2.indeterminate) {
    expected = "indeterminate";
    arg = `{ indeterminate: true }`;
  } else {
    expected = (options2 == null ? void 0 : options2.checked) === false ? "unchecked" : "checked";
    arg = (options2 == null ? void 0 : options2.checked) === false ? `{ checked: false }` : "";
  }
  return toBeTruthy.call(this, "toBeChecked", locator, "Locator", expected, arg, async (isNot, timeout) => {
    return await locator._expect("to.be.checked", { isNot, timeout, expectedValue });
  }, options2);
}
function toBeDisabled(locator, options2) {
  return toBeTruthy.call(this, "toBeDisabled", locator, "Locator", "disabled", "", async (isNot, timeout) => {
    return await locator._expect("to.be.disabled", { isNot, timeout });
  }, options2);
}
function toBeEditable(locator, options2) {
  const editable2 = !options2 || options2.editable === void 0 || options2.editable;
  const expected = editable2 ? "editable" : "readOnly";
  const arg = editable2 ? "" : "{ editable: false }";
  return toBeTruthy.call(this, "toBeEditable", locator, "Locator", expected, arg, async (isNot, timeout) => {
    return await locator._expect(editable2 ? "to.be.editable" : "to.be.readonly", { isNot, timeout });
  }, options2);
}
function toBeEmpty(locator, options2) {
  return toBeTruthy.call(this, "toBeEmpty", locator, "Locator", "empty", "", async (isNot, timeout) => {
    return await locator._expect("to.be.empty", { isNot, timeout });
  }, options2);
}
function toBeEnabled(locator, options2) {
  const enabled = !options2 || options2.enabled === void 0 || options2.enabled;
  const expected = enabled ? "enabled" : "disabled";
  const arg = enabled ? "" : "{ enabled: false }";
  return toBeTruthy.call(this, "toBeEnabled", locator, "Locator", expected, arg, async (isNot, timeout) => {
    return await locator._expect(enabled ? "to.be.enabled" : "to.be.disabled", { isNot, timeout });
  }, options2);
}
function toBeFocused(locator, options2) {
  return toBeTruthy.call(this, "toBeFocused", locator, "Locator", "focused", "", async (isNot, timeout) => {
    return await locator._expect("to.be.focused", { isNot, timeout });
  }, options2);
}
function toBeHidden(locator, options2) {
  return toBeTruthy.call(this, "toBeHidden", locator, "Locator", "hidden", "", async (isNot, timeout) => {
    return await locator._expect("to.be.hidden", { isNot, timeout });
  }, options2);
}
function toBeVisible(locator, options2) {
  const visible = !options2 || options2.visible === void 0 || options2.visible;
  const expected = visible ? "visible" : "hidden";
  const arg = visible ? "" : "{ visible: false }";
  return toBeTruthy.call(this, "toBeVisible", locator, "Locator", expected, arg, async (isNot, timeout) => {
    return await locator._expect(visible ? "to.be.visible" : "to.be.hidden", { isNot, timeout });
  }, options2);
}
function toBeInViewport(locator, options2) {
  return toBeTruthy.call(this, "toBeInViewport", locator, "Locator", "in viewport", "", async (isNot, timeout) => {
    return await locator._expect("to.be.in.viewport", { isNot, expectedNumber: options2 == null ? void 0 : options2.ratio, timeout });
  }, options2);
}
function toContainText(locator, expected, options2 = {}) {
  if (Array.isArray(expected)) {
    return toEqual.call(this, "toContainText", locator, "Locator", async (isNot, timeout) => {
      const expectedText = serializeExpectedTextValues(expected, { matchSubstring: true, normalizeWhiteSpace: true, ignoreCase: options2.ignoreCase });
      return await locator._expect("to.contain.text.array", { expectedText, isNot, useInnerText: options2.useInnerText, timeout });
    }, expected, { ...options2, contains: true });
  } else {
    return toMatchText.call(this, "toContainText", locator, "Locator", async (isNot, timeout) => {
      const expectedText = serializeExpectedTextValues([expected], { matchSubstring: true, normalizeWhiteSpace: true, ignoreCase: options2.ignoreCase });
      return await locator._expect("to.have.text", { expectedText, isNot, useInnerText: options2.useInnerText, timeout });
    }, expected, options2);
  }
}
function toHaveAccessibleDescription(locator, expected, options2) {
  return toMatchText.call(this, "toHaveAccessibleDescription", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected], { ignoreCase: options2 == null ? void 0 : options2.ignoreCase, normalizeWhiteSpace: true });
    return await locator._expect("to.have.accessible.description", { expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveAccessibleName(locator, expected, options2) {
  return toMatchText.call(this, "toHaveAccessibleName", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected], { ignoreCase: options2 == null ? void 0 : options2.ignoreCase, normalizeWhiteSpace: true });
    return await locator._expect("to.have.accessible.name", { expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveAccessibleErrorMessage(locator, expected, options2) {
  return toMatchText.call(this, "toHaveAccessibleErrorMessage", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected], { ignoreCase: options2 == null ? void 0 : options2.ignoreCase, normalizeWhiteSpace: true });
    return await locator._expect("to.have.accessible.error.message", { expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveAttribute(locator, name, expected, options2) {
  if (!options2) {
    if (typeof expected === "object" && !isRegExp(expected)) {
      options2 = expected;
      expected = void 0;
    }
  }
  if (expected === void 0) {
    return toBeTruthy.call(this, "toHaveAttribute", locator, "Locator", "have attribute", "", async (isNot, timeout) => {
      return await locator._expect("to.have.attribute", { expressionArg: name, isNot, timeout });
    }, options2);
  }
  return toMatchText.call(this, "toHaveAttribute", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected], { ignoreCase: options2 == null ? void 0 : options2.ignoreCase });
    return await locator._expect("to.have.attribute.value", { expressionArg: name, expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveClass(locator, expected, options2) {
  if (Array.isArray(expected)) {
    return toEqual.call(this, "toHaveClass", locator, "Locator", async (isNot, timeout) => {
      const expectedText = serializeExpectedTextValues(expected);
      return await locator._expect("to.have.class.array", { expectedText, isNot, timeout });
    }, expected, options2);
  } else {
    return toMatchText.call(this, "toHaveClass", locator, "Locator", async (isNot, timeout) => {
      const expectedText = serializeExpectedTextValues([expected]);
      return await locator._expect("to.have.class", { expectedText, isNot, timeout });
    }, expected, options2);
  }
}
function toHaveCount(locator, expected, options2) {
  return toEqual.call(this, "toHaveCount", locator, "Locator", async (isNot, timeout) => {
    return await locator._expect("to.have.count", { expectedNumber: expected, isNot, timeout });
  }, expected, options2);
}
function toHaveCSS(locator, name, expected, options2) {
  return toMatchText.call(this, "toHaveCSS", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected]);
    return await locator._expect("to.have.css", { expressionArg: name, expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveId(locator, expected, options2) {
  return toMatchText.call(this, "toHaveId", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected]);
    return await locator._expect("to.have.id", { expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveJSProperty(locator, name, expected, options2) {
  return toEqual.call(this, "toHaveJSProperty", locator, "Locator", async (isNot, timeout) => {
    return await locator._expect("to.have.property", { expressionArg: name, expectedValue: expected, isNot, timeout });
  }, expected, options2);
}
function toHaveRole(locator, expected, options2) {
  if (!isString(expected))
    throw new Error(`"role" argument in toHaveRole must be a string`);
  return toMatchText.call(this, "toHaveRole", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected]);
    return await locator._expect("to.have.role", { expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveText(locator, expected, options2 = {}) {
  if (Array.isArray(expected)) {
    return toEqual.call(this, "toHaveText", locator, "Locator", async (isNot, timeout) => {
      const expectedText = serializeExpectedTextValues(expected, { normalizeWhiteSpace: true, ignoreCase: options2.ignoreCase });
      return await locator._expect("to.have.text.array", { expectedText, isNot, useInnerText: options2 == null ? void 0 : options2.useInnerText, timeout });
    }, expected, options2);
  } else {
    return toMatchText.call(this, "toHaveText", locator, "Locator", async (isNot, timeout) => {
      const expectedText = serializeExpectedTextValues([expected], { normalizeWhiteSpace: true, ignoreCase: options2.ignoreCase });
      return await locator._expect("to.have.text", { expectedText, isNot, useInnerText: options2 == null ? void 0 : options2.useInnerText, timeout });
    }, expected, options2);
  }
}
function toHaveValue(locator, expected, options2) {
  return toMatchText.call(this, "toHaveValue", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected]);
    return await locator._expect("to.have.value", { expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveValues(locator, expected, options2) {
  return toEqual.call(this, "toHaveValues", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues(expected);
    return await locator._expect("to.have.values", { expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveTitle(page, expected, options2 = {}) {
  const locator = page.locator(":root");
  return toMatchText.call(this, "toHaveTitle", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected], { normalizeWhiteSpace: true });
    return await locator._expect("to.have.title", { expectedText, isNot, timeout });
  }, expected, options2);
}
function toHaveURL(page, expected, options2) {
  const baseURL = page.context()._options.baseURL;
  expected = typeof expected === "string" ? constructURLBasedOnBaseURL(baseURL, expected) : expected;
  const locator = page.locator(":root");
  return toMatchText.call(this, "toHaveURL", locator, "Locator", async (isNot, timeout) => {
    const expectedText = serializeExpectedTextValues([expected], { ignoreCase: options2 == null ? void 0 : options2.ignoreCase });
    return await locator._expect("to.have.url", { expectedText, isNot, timeout });
  }, expected, options2);
}
async function toBeOK(response) {
  const matcherName = "toBeOK";
  expectTypes(response, ["APIResponse"], matcherName);
  const contentType = response.headers()["content-type"];
  const isTextEncoding = contentType && isTextualMimeType(contentType);
  const [log, text2] = this.isNot === response.ok() ? await Promise.all([
    response._fetchLog(),
    isTextEncoding ? response.text() : null
  ]) : [];
  const message = () => this.utils.matcherHint(matcherName, void 0, "", { isNot: this.isNot }) + callLogText(log) + (text2 === null ? "" : `
Response text:
${colors$2.dim((text2 == null ? void 0 : text2.substring(0, 1e3)) || "")}`);
  const pass = response.ok();
  return { message, pass };
}
async function toPass(callback, options2 = {}) {
  var _a, _b, _c, _d;
  const testInfo = currentTestInfo();
  const timeout = takeFirst(options2.timeout, (_b = (_a = testInfo == null ? void 0 : testInfo._projectInternal.expect) == null ? void 0 : _a.toPass) == null ? void 0 : _b.timeout, 0);
  const intervals = takeFirst(options2.intervals, (_d = (_c = testInfo == null ? void 0 : testInfo._projectInternal.expect) == null ? void 0 : _c.toPass) == null ? void 0 : _d.intervals, [100, 250, 500, 1e3]);
  const { deadline, timeoutMessage } = TestInfoImpl._defaultDeadlineForMatcher(timeout);
  const result = await pollAgainstDeadline(async () => {
    try {
      await callback();
      return { continuePolling: !!this.isNot, result: void 0 };
    } catch (e) {
      return { continuePolling: !this.isNot, result: e };
    }
  }, deadline, intervals);
  if (result.timedOut) {
    const message = result.result ? [
      result.result.message,
      "",
      `Call Log:`,
      `- ${timeoutMessage}`
    ].join("\n") : timeoutMessage;
    return { message: () => message, pass: !!this.isNot };
  }
  return { pass: !this.isNot, message: () => "" };
}
function toMatchSnapshot(received, nameOrOptions = {}, optOptions = {}) {
  throw new Error(`toMatchSnapshot() must be called during the test`);
}
async function toHaveScreenshot(pageOrLocator, nameOrOptions = {}, optOptions = {}) {
  throw new Error(`toHaveScreenshot() must be called during the test`);
}
async function toMatchAriaSnapshot(receiver, expectedParam, options2 = {}) {
  throw new Error(`toMatchAriaSnapshot() must be called during the test`);
}
const printSubstring = (val) => val.replace(/"|\\/g, "\\$&");
const printReceivedStringContainExpectedSubstring = (received, start, length) => RECEIVED_COLOR(
  '"' + printSubstring(received.slice(0, start)) + INVERTED_COLOR(printSubstring(received.slice(start, start + length))) + printSubstring(received.slice(start + length)) + '"'
);
const printReceivedStringContainExpectedResult = (received, result) => result === null ? printReceived(received) : printReceivedStringContainExpectedSubstring(
  received,
  result.index,
  result[0].length
);
function createMatchers(actual, info, prefix) {
  return new Proxy(expect$1(actual), new ExpectMetaInfoProxyHandler(info, prefix));
}
const getCustomMatchersSymbol = Symbol("get custom matchers");
function qualifiedMatcherName(qualifier, matcherName) {
  return qualifier.join(":") + "$" + matcherName;
}
function createExpect(info, prefix, customMatchers2) {
  const expectInstance = new Proxy(expect$1, {
    apply: function(target, thisArg, argumentsList) {
      const [actual, messageOrOptions] = argumentsList;
      const message = isString(messageOrOptions) ? messageOrOptions : (messageOrOptions == null ? void 0 : messageOrOptions.message) || info.message;
      const newInfo = { ...info, message };
      if (newInfo.poll) {
        if (typeof actual !== "function")
          throw new Error("`expect.poll()` accepts only function as a first argument");
        newInfo.poll.generator = actual;
      }
      return createMatchers(actual, newInfo, prefix);
    },
    get: function(target, property) {
      if (property === "configure")
        return configure;
      if (property === "extend") {
        return (matchers2) => {
          const qualifier = [...prefix, createGuid()];
          const wrappedMatchers = {};
          const extendedMatchers = { ...customMatchers2 };
          for (const [name, matcher] of Object.entries(matchers2)) {
            wrappedMatchers[name] = function(...args) {
              const { isNot, promise, utils: utils2 } = this;
              const newThis = {
                isNot,
                promise,
                utils: utils2,
                timeout: currentExpectTimeout()
              };
              newThis.equals = throwUnsupportedExpectMatcherError;
              return matcher.call(newThis, ...args);
            };
            const key2 = qualifiedMatcherName(qualifier, name);
            wrappedMatchers[key2] = wrappedMatchers[name];
            Object.defineProperty(wrappedMatchers[key2], "name", { value: name });
            extendedMatchers[name] = wrappedMatchers[key2];
          }
          expect$1.extend(wrappedMatchers);
          return createExpect(info, qualifier, extendedMatchers);
        };
      }
      if (property === "soft") {
        return (actual, messageOrOptions) => {
          return configure({ soft: true })(actual, messageOrOptions);
        };
      }
      if (property === getCustomMatchersSymbol)
        return customMatchers2;
      if (property === "poll") {
        return (actual, messageOrOptions) => {
          const poll = isString(messageOrOptions) ? {} : messageOrOptions || {};
          return configure({ _poll: poll })(actual, messageOrOptions);
        };
      }
      return expect$1[property];
    }
  });
  const configure = (configuration) => {
    const newInfo = { ...info };
    if ("message" in configuration)
      newInfo.message = configuration.message;
    if ("timeout" in configuration)
      newInfo.timeout = configuration.timeout;
    if ("soft" in configuration)
      newInfo.isSoft = configuration.soft;
    if ("_poll" in configuration) {
      newInfo.poll = configuration._poll ? { ...info.poll, generator: () => {
      } } : void 0;
      if (typeof configuration._poll === "object") {
        newInfo.poll.timeout = configuration._poll.timeout ?? newInfo.poll.timeout;
        newInfo.poll.intervals = configuration._poll.intervals ?? newInfo.poll.intervals;
      }
    }
    return createExpect(newInfo, prefix, customMatchers2);
  };
  return expectInstance;
}
function throwUnsupportedExpectMatcherError() {
  throw new Error("It looks like you are using custom expect matchers that are not compatible with Playwright. See https://aka.ms/playwright/expect-compatibility");
}
expect$1.setState({ expand: false });
const customAsyncMatchers = {
  toBeAttached,
  toBeChecked,
  toBeDisabled,
  toBeEditable,
  toBeEmpty,
  toBeEnabled,
  toBeFocused,
  toBeHidden,
  toBeInViewport,
  toBeOK,
  toBeVisible,
  toContainText,
  toHaveAccessibleDescription,
  toHaveAccessibleName,
  toHaveAccessibleErrorMessage,
  toHaveAttribute,
  toHaveClass,
  toHaveCount,
  toHaveCSS,
  toHaveId,
  toHaveJSProperty,
  toHaveRole,
  toHaveText,
  toHaveTitle,
  toHaveURL,
  toHaveValue,
  toHaveValues,
  toHaveScreenshot,
  toMatchAriaSnapshot,
  toPass
};
const customMatchers = {
  ...customAsyncMatchers,
  toMatchSnapshot
};
class ExpectMetaInfoProxyHandler {
  constructor(info, prefix) {
    this._info = { ...info };
    this._prefix = prefix;
  }
  get(target, matcherName, receiver) {
    let matcher = Reflect.get(target, matcherName, receiver);
    if (typeof matcherName !== "string")
      return matcher;
    let resolvedMatcherName = matcherName;
    for (let i = this._prefix.length; i > 0; i--) {
      const qualifiedName = qualifiedMatcherName(this._prefix.slice(0, i), matcherName);
      if (Reflect.has(target, qualifiedName)) {
        matcher = Reflect.get(target, qualifiedName, receiver);
        resolvedMatcherName = qualifiedName;
        break;
      }
    }
    if (matcher === void 0)
      throw new Error(`expect: Property '${matcherName}' not found.`);
    if (typeof matcher !== "function") {
      if (matcherName === "not")
        this._info.isNot = !this._info.isNot;
      return new Proxy(matcher, this);
    }
    if (this._info.poll) {
      if (customAsyncMatchers[matcherName] || matcherName === "resolves" || matcherName === "rejects")
        throw new Error(`\`expect.poll()\` does not support "${matcherName}" matcher.`);
      matcher = (...args) => pollMatcher(resolvedMatcherName, this._info, this._prefix, ...args);
    }
    return (...args) => {
      setCurrentExpectConfigureTimeout(this._info.timeout);
      return matcher.call(target, ...args);
    };
  }
}
async function pollMatcher(qualifiedMatcherName2, info, prefix, ...args) {
  const poll = info.poll;
  const timeout = poll.timeout ?? currentExpectTimeout();
  const { deadline, timeoutMessage } = TestInfoImpl._defaultDeadlineForMatcher(timeout);
  const result = await pollAgainstDeadline(async () => {
    const innerInfo = {
      ...info,
      isSoft: false,
      // soft is outside of poll, not inside
      poll: void 0
    };
    const value2 = await poll.generator();
    try {
      let matchers2 = createMatchers(value2, innerInfo, prefix);
      if (info.isNot)
        matchers2 = matchers2.not;
      matchers2[qualifiedMatcherName2](...args);
      return { continuePolling: false, result: void 0 };
    } catch (error2) {
      return { continuePolling: true, result: error2 };
    }
  }, deadline, poll.intervals ?? [100, 250, 500, 1e3]);
  if (result.timedOut) {
    const message = result.result ? [
      result.result.message,
      "",
      `Call Log:`,
      `- ${timeoutMessage}`
    ].join("\n") : timeoutMessage;
    throw new Error(message);
  }
}
let currentExpectConfigureTimeout;
function setCurrentExpectConfigureTimeout(timeout) {
  currentExpectConfigureTimeout = timeout;
}
function currentExpectTimeout() {
  var _a, _b;
  if (currentExpectConfigureTimeout !== void 0)
    return currentExpectConfigureTimeout;
  const testInfo = currentTestInfo();
  let defaultExpectTimeout = (_b = (_a = testInfo == null ? void 0 : testInfo._projectInternal) == null ? void 0 : _a.expect) == null ? void 0 : _b.timeout;
  if (typeof defaultExpectTimeout === "undefined")
    defaultExpectTimeout = 5e3;
  return defaultExpectTimeout;
}
const expect = createExpect({}, [], {}).extend(customMatchers);
({
  forbidOnly: false,
  fullyParallel: false,
  globalSetup: null,
  globalTeardown: null,
  globalTimeout: 0,
  grep: /.*/,
  grepInvert: null,
  maxFailures: 0,
  metadata: {},
  preserveOutput: "always",
  projects: [],
  reporter: [[process.env.CI ? "dot" : "list"]],
  reportSlowTests: { max: 5, threshold: 15e3 },
  configFile: "",
  rootDir: "",
  quiet: false,
  shard: null,
  updateSnapshots: "missing",
  updateSourceMethod: "patch",
  version: "",
  workers: 0,
  webServer: null
});
function computeTestCaseOutcome(test2) {
  let skipped = 0;
  let expected = 0;
  let unexpected = 0;
  for (const result of test2.results) {
    if (result.status === "interrupted") ;
    else if (result.status === "skipped" && test2.expectedStatus === "skipped") {
      ++skipped;
    } else if (result.status === "skipped") ;
    else if (result.status === test2.expectedStatus) {
      ++expected;
    } else {
      ++unexpected;
    }
  }
  if (expected === 0 && unexpected === 0)
    return "skipped";
  if (unexpected === 0)
    return "expected";
  if (expected === 0 && skipped === 0)
    return "unexpected";
  return "flaky";
}
class Base {
  constructor(title) {
    this._only = false;
    this._requireFile = "";
    this.title = title;
  }
}
class Suite extends Base {
  constructor(title, type) {
    super(title);
    this._use = [];
    this._entries = [];
    this._hooks = [];
    this._staticAnnotations = [];
    this._tags = [];
    this._modifiers = [];
    this._parallelMode = "none";
    this._type = type;
  }
  get type() {
    return this._type;
  }
  entries() {
    return this._entries;
  }
  get suites() {
    return this._entries.filter((entry) => entry instanceof Suite);
  }
  get tests() {
    return this._entries.filter((entry) => entry instanceof TestCase);
  }
  _addTest(test2) {
    test2.parent = this;
    this._entries.push(test2);
  }
  _addSuite(suite) {
    suite.parent = this;
    this._entries.push(suite);
  }
  _prependSuite(suite) {
    suite.parent = this;
    this._entries.unshift(suite);
  }
  allTests() {
    const result = [];
    const visit = (suite) => {
      for (const entry of suite._entries) {
        if (entry instanceof Suite)
          visit(entry);
        else
          result.push(entry);
      }
    };
    visit(this);
    return result;
  }
  _hasTests() {
    let result = false;
    const visit = (suite) => {
      for (const entry of suite._entries) {
        if (result)
          return;
        if (entry instanceof Suite)
          visit(entry);
        else
          result = true;
      }
    };
    visit(this);
    return result;
  }
  titlePath() {
    const titlePath = this.parent ? this.parent.titlePath() : [];
    if (this.title || this._type !== "describe")
      titlePath.push(this.title);
    return titlePath;
  }
  _collectGrepTitlePath(path2) {
    if (this.parent)
      this.parent._collectGrepTitlePath(path2);
    if (this.title || this._type !== "describe")
      path2.push(this.title);
    path2.push(...this._tags);
  }
  _getOnlyItems() {
    const items = [];
    if (this._only)
      items.push(this);
    for (const suite of this.suites)
      items.push(...suite._getOnlyItems());
    items.push(...this.tests.filter((test2) => test2._only));
    return items;
  }
  _deepClone() {
    const suite = this._clone();
    for (const entry of this._entries) {
      if (entry instanceof Suite)
        suite._addSuite(entry._deepClone());
      else
        suite._addTest(entry._clone());
    }
    return suite;
  }
  _deepSerialize() {
    const suite = this._serialize();
    suite.entries = [];
    for (const entry of this._entries) {
      if (entry instanceof Suite)
        suite.entries.push(entry._deepSerialize());
      else
        suite.entries.push(entry._serialize());
    }
    return suite;
  }
  static _deepParse(data) {
    const suite = Suite._parse(data);
    for (const entry of data.entries) {
      if (entry.kind === "suite")
        suite._addSuite(Suite._deepParse(entry));
      else
        suite._addTest(TestCase._parse(entry));
    }
    return suite;
  }
  forEachTest(visitor) {
    for (const entry of this._entries) {
      if (entry instanceof Suite)
        entry.forEachTest(visitor);
      else
        visitor(entry, this);
    }
  }
  _serialize() {
    return {
      kind: "suite",
      title: this.title,
      type: this._type,
      location: this.location,
      only: this._only,
      requireFile: this._requireFile,
      timeout: this._timeout,
      retries: this._retries,
      staticAnnotations: this._staticAnnotations.slice(),
      tags: this._tags.slice(),
      modifiers: this._modifiers.slice(),
      parallelMode: this._parallelMode,
      hooks: this._hooks.map((h) => ({ type: h.type, location: h.location, title: h.title })),
      fileId: this._fileId
    };
  }
  static _parse(data) {
    const suite = new Suite(data.title, data.type);
    suite.location = data.location;
    suite._only = data.only;
    suite._requireFile = data.requireFile;
    suite._timeout = data.timeout;
    suite._retries = data.retries;
    suite._staticAnnotations = data.staticAnnotations;
    suite._tags = data.tags;
    suite._modifiers = data.modifiers;
    suite._parallelMode = data.parallelMode;
    suite._hooks = data.hooks.map((h) => ({ type: h.type, location: h.location, title: h.title, fn: () => {
    } }));
    suite._fileId = data.fileId;
    return suite;
  }
  _clone() {
    const data = this._serialize();
    const suite = Suite._parse(data);
    suite._use = this._use.slice();
    suite._hooks = this._hooks.slice();
    suite._fullProject = this._fullProject;
    return suite;
  }
  project() {
    var _a, _b;
    return ((_a = this._fullProject) == null ? void 0 : _a.project) || ((_b = this.parent) == null ? void 0 : _b.project());
  }
}
class TestCase extends Base {
  constructor(title, fn2, testType, location) {
    super(title);
    this.results = [];
    this.type = "test";
    this.expectedStatus = "passed";
    this.timeout = 0;
    this.annotations = [];
    this.retries = 0;
    this.repeatEachIndex = 0;
    this.id = "";
    this._poolDigest = "";
    this._workerHash = "";
    this._projectId = "";
    this._staticAnnotations = [];
    this._tags = [];
    this.fn = fn2;
    this._testType = testType;
    this.location = location;
  }
  titlePath() {
    const titlePath = this.parent ? this.parent.titlePath() : [];
    titlePath.push(this.title);
    return titlePath;
  }
  outcome() {
    return computeTestCaseOutcome(this);
  }
  ok() {
    const status = this.outcome();
    return status === "expected" || status === "flaky" || status === "skipped";
  }
  get tags() {
    return this._grepTitle().match(/@[\S]+/g) || [];
  }
  _serialize() {
    return {
      kind: "test",
      id: this.id,
      title: this.title,
      retries: this.retries,
      timeout: this.timeout,
      expectedStatus: this.expectedStatus,
      location: this.location,
      only: this._only,
      requireFile: this._requireFile,
      poolDigest: this._poolDigest,
      workerHash: this._workerHash,
      staticAnnotations: this._staticAnnotations.slice(),
      annotations: this.annotations.slice(),
      tags: this._tags.slice(),
      projectId: this._projectId
    };
  }
  static _parse(data) {
    const test2 = new TestCase(data.title, () => {
    }, rootTestType, data.location);
    test2.id = data.id;
    test2.retries = data.retries;
    test2.timeout = data.timeout;
    test2.expectedStatus = data.expectedStatus;
    test2._only = data.only;
    test2._requireFile = data.requireFile;
    test2._poolDigest = data.poolDigest;
    test2._workerHash = data.workerHash;
    test2._staticAnnotations = data.staticAnnotations;
    test2.annotations = data.annotations;
    test2._tags = data.tags;
    test2._projectId = data.projectId;
    return test2;
  }
  _clone() {
    const data = this._serialize();
    const test2 = TestCase._parse(data);
    test2._testType = this._testType;
    test2.fn = this.fn;
    return test2;
  }
  _appendTestResult() {
    const result = {
      retry: this.results.length,
      parallelIndex: -1,
      workerIndex: -1,
      duration: 0,
      startTime: /* @__PURE__ */ new Date(),
      stdout: [],
      stderr: [],
      attachments: [],
      status: "skipped",
      steps: [],
      errors: []
    };
    this.results.push(result);
    return result;
  }
  _grepTitle() {
    const path2 = [];
    this.parent._collectGrepTitlePath(path2);
    path2.push(this.title);
    path2.push(...this._tags);
    return path2.join(" ");
  }
}
var lib$V = {};
var lib$U = {};
var hasRequiredLib$T;
function requireLib$T() {
  if (hasRequiredLib$T) return lib$U;
  hasRequiredLib$T = 1;
  Object.defineProperty(lib$U, "__esModule", {
    value: true
  });
  lib$U.declare = declare;
  lib$U.declarePreset = void 0;
  const apiPolyfills = {
    assertVersion: (api) => (range) => {
      throwVersionError(range, api.version);
    }
  };
  {
    Object.assign(apiPolyfills, {
      targets: () => () => {
        return {};
      },
      assumption: () => () => {
        return void 0;
      }
    });
  }
  function declare(builder2) {
    return (api, options2, dirname) => {
      var _clonedApi2;
      let clonedApi;
      for (const name of Object.keys(apiPolyfills)) {
        var _clonedApi;
        if (api[name]) continue;
        (_clonedApi = clonedApi) != null ? _clonedApi : clonedApi = copyApiObject(api);
        clonedApi[name] = apiPolyfills[name](clonedApi);
      }
      return builder2((_clonedApi2 = clonedApi) != null ? _clonedApi2 : api, options2 || {}, dirname);
    };
  }
  lib$U.declarePreset = declare;
  function copyApiObject(api) {
    let proto2 = null;
    if (typeof api.version === "string" && /^7\./.test(api.version)) {
      proto2 = Object.getPrototypeOf(api);
      if (proto2 && (!hasOwnProperty.call(proto2, "version") || !hasOwnProperty.call(proto2, "transform") || !hasOwnProperty.call(proto2, "template") || !hasOwnProperty.call(proto2, "types"))) {
        proto2 = null;
      }
    }
    return Object.assign({}, proto2, api);
  }
  function throwVersionError(range, version2) {
    if (typeof range === "number") {
      if (!Number.isInteger(range)) {
        throw new Error("Expected string or integer value.");
      }
      range = `^${range}.0.0-0`;
    }
    if (typeof range !== "string") {
      throw new Error("Expected string or integer value.");
    }
    const limit = Error.stackTraceLimit;
    if (typeof limit === "number" && limit < 25) {
      Error.stackTraceLimit = 25;
    }
    let err;
    if (version2.slice(0, 2) === "7.") {
      err = new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version2}". You'll need to update your @babel/core version.`);
    } else {
      err = new Error(`Requires Babel "${range}", but was loaded with "${version2}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
    }
    if (typeof limit === "number") {
      Error.stackTraceLimit = limit;
    }
    throw Object.assign(err, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version: version2,
      range
    });
  }
  return lib$U;
}
var hasRequiredLib$S;
function requireLib$S() {
  if (hasRequiredLib$S) return lib$V;
  hasRequiredLib$S = 1;
  Object.defineProperty(lib$V, "__esModule", {
    value: true
  });
  lib$V.default = void 0;
  var _helperPluginUtils = requireLib$T();
  lib$V.default = (0, _helperPluginUtils.declare)((api, {
    deprecatedAssertSyntax
  }) => {
    api.assertVersion("^7.22.0");
    if (deprecatedAssertSyntax != null && typeof deprecatedAssertSyntax !== "boolean") {
      throw new Error("'deprecatedAssertSyntax' must be a boolean, if specified.");
    }
    return {
      name: "syntax-import-attributes",
      manipulateOptions({
        parserOpts,
        generatorOpts
      }) {
        var _generatorOpts$import;
        (_generatorOpts$import = generatorOpts.importAttributesKeyword) != null ? _generatorOpts$import : generatorOpts.importAttributesKeyword = "with";
        parserOpts.plugins.push(["importAttributes", {
          deprecatedAssertSyntax: Boolean(deprecatedAssertSyntax)
        }]);
      }
    };
  });
  return lib$V;
}
var lib$T = {};
var lib$S = {};
var hasRequiredLib$R;
function requireLib$R() {
  if (hasRequiredLib$R) return lib$S;
  hasRequiredLib$R = 1;
  Object.defineProperty(lib$S, "__esModule", {
    value: true
  });
  lib$S.default = void 0;
  var _helperPluginUtils = requireLib$T();
  lib$S.default = (0, _helperPluginUtils.declare)((api, options2) => {
    api.assertVersion(7);
    let {
      version: version2
    } = options2;
    {
      const {
        legacy
      } = options2;
      if (legacy !== void 0) {
        if (typeof legacy !== "boolean") {
          throw new Error(".legacy must be a boolean.");
        }
        if (version2 !== void 0) {
          throw new Error("You can either use the .legacy or the .version option, not both.");
        }
      }
      if (version2 === void 0) {
        version2 = legacy ? "legacy" : "2018-09";
      } else if (version2 !== "2023-11" && version2 !== "2023-05" && version2 !== "2023-01" && version2 !== "2022-03" && version2 !== "2021-12" && version2 !== "2018-09" && version2 !== "legacy") {
        throw new Error("Unsupported decorators version: " + version2);
      }
      var {
        decoratorsBeforeExport
      } = options2;
      if (decoratorsBeforeExport === void 0) {
        if (version2 === "2021-12" || version2 === "2022-03") {
          decoratorsBeforeExport = false;
        } else if (version2 === "2018-09") {
          throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
        }
      } else {
        if (version2 === "legacy" || version2 === "2022-03" || version2 === "2023-01") {
          throw new Error(`'decoratorsBeforeExport' can't be used with ${version2} decorators.`);
        }
        if (typeof decoratorsBeforeExport !== "boolean") {
          throw new Error("'decoratorsBeforeExport' must be a boolean.");
        }
      }
    }
    return {
      name: "syntax-decorators",
      manipulateOptions({
        generatorOpts
      }, parserOpts) {
        if (version2 === "legacy") {
          parserOpts.plugins.push("decorators-legacy");
        } else {
          if (version2 === "2023-01" || version2 === "2023-05" || version2 === "2023-11") {
            parserOpts.plugins.push(["decorators", {
              allowCallParenthesized: false
            }], "decoratorAutoAccessors");
          } else if (version2 === "2022-03") {
            parserOpts.plugins.push(["decorators", {
              decoratorsBeforeExport: false,
              allowCallParenthesized: false
            }], "decoratorAutoAccessors");
          } else if (version2 === "2021-12") {
            parserOpts.plugins.push(["decorators", {
              decoratorsBeforeExport
            }], "decoratorAutoAccessors");
            generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport;
          } else if (version2 === "2018-09") {
            parserOpts.plugins.push(["decorators", {
              decoratorsBeforeExport
            }]);
            generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport;
          }
        }
      }
    };
  });
  return lib$S;
}
var lib$R = {};
var lib$Q = {};
var file = {};
var lib$P = {};
var lib$O = {};
var visitors = {};
var virtualTypes = {};
var hasRequiredVirtualTypes;
function requireVirtualTypes() {
  if (hasRequiredVirtualTypes) return virtualTypes;
  hasRequiredVirtualTypes = 1;
  Object.defineProperty(virtualTypes, "__esModule", {
    value: true
  });
  virtualTypes.Var = virtualTypes.User = virtualTypes.Statement = virtualTypes.SpreadProperty = virtualTypes.Scope = virtualTypes.RestProperty = virtualTypes.ReferencedMemberExpression = virtualTypes.ReferencedIdentifier = virtualTypes.Referenced = virtualTypes.Pure = virtualTypes.NumericLiteralTypeAnnotation = virtualTypes.Generated = virtualTypes.ForAwaitStatement = virtualTypes.Flow = virtualTypes.Expression = virtualTypes.ExistentialTypeParam = virtualTypes.BlockScoped = virtualTypes.BindingIdentifier = void 0;
  virtualTypes.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
  virtualTypes.ReferencedMemberExpression = ["MemberExpression"];
  virtualTypes.BindingIdentifier = ["Identifier"];
  virtualTypes.Statement = ["Statement"];
  virtualTypes.Expression = ["Expression"];
  virtualTypes.Scope = ["Scopable", "Pattern"];
  virtualTypes.Referenced = null;
  virtualTypes.BlockScoped = null;
  virtualTypes.Var = ["VariableDeclaration"];
  virtualTypes.User = null;
  virtualTypes.Generated = null;
  virtualTypes.Pure = null;
  virtualTypes.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];
  virtualTypes.RestProperty = ["RestElement"];
  virtualTypes.SpreadProperty = ["RestElement"];
  virtualTypes.ExistentialTypeParam = ["ExistsTypeAnnotation"];
  virtualTypes.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
  virtualTypes.ForAwaitStatement = ["ForOfStatement"];
  return virtualTypes;
}
var virtualTypesValidator = {};
var lib$N = {};
var isReactComponent = {};
var buildMatchMemberExpression = {};
var matchesPattern = {};
var generated$3 = {};
var shallowEqual = {};
var hasRequiredShallowEqual;
function requireShallowEqual() {
  if (hasRequiredShallowEqual) return shallowEqual;
  hasRequiredShallowEqual = 1;
  Object.defineProperty(shallowEqual, "__esModule", {
    value: true
  });
  shallowEqual.default = shallowEqual$1;
  function shallowEqual$1(actual, expected) {
    const keys2 = Object.keys(expected);
    for (const key2 of keys2) {
      if (actual[key2] !== expected[key2]) {
        return false;
      }
    }
    return true;
  }
  return shallowEqual;
}
var deprecationWarning = {};
var hasRequiredDeprecationWarning;
function requireDeprecationWarning() {
  if (hasRequiredDeprecationWarning) return deprecationWarning;
  hasRequiredDeprecationWarning = 1;
  Object.defineProperty(deprecationWarning, "__esModule", {
    value: true
  });
  deprecationWarning.default = deprecationWarning$1;
  const warnings = /* @__PURE__ */ new Set();
  function deprecationWarning$1(oldName, newName, prefix = "") {
    if (warnings.has(oldName)) return;
    warnings.add(oldName);
    const {
      internal,
      trace
    } = captureShortStackTrace(1, 2);
    if (internal) {
      return;
    }
    console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
  }
  function captureShortStackTrace(skip, length) {
    const {
      stackTraceLimit,
      prepareStackTrace
    } = Error;
    let stackTrace;
    Error.stackTraceLimit = 1 + skip + length;
    Error.prepareStackTrace = function(err, stack2) {
      stackTrace = stack2;
    };
    new Error().stack;
    Error.stackTraceLimit = stackTraceLimit;
    Error.prepareStackTrace = prepareStackTrace;
    if (!stackTrace) return {
      internal: false,
      trace: ""
    };
    const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
    return {
      internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),
      trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n")
    };
  }
  return deprecationWarning;
}
var hasRequiredGenerated$3;
function requireGenerated$3() {
  if (hasRequiredGenerated$3) return generated$3;
  hasRequiredGenerated$3 = 1;
  Object.defineProperty(generated$3, "__esModule", {
    value: true
  });
  generated$3.isAccessor = isAccessor;
  generated$3.isAnyTypeAnnotation = isAnyTypeAnnotation;
  generated$3.isArgumentPlaceholder = isArgumentPlaceholder;
  generated$3.isArrayExpression = isArrayExpression;
  generated$3.isArrayPattern = isArrayPattern;
  generated$3.isArrayTypeAnnotation = isArrayTypeAnnotation;
  generated$3.isArrowFunctionExpression = isArrowFunctionExpression;
  generated$3.isAssignmentExpression = isAssignmentExpression;
  generated$3.isAssignmentPattern = isAssignmentPattern;
  generated$3.isAwaitExpression = isAwaitExpression;
  generated$3.isBigIntLiteral = isBigIntLiteral;
  generated$3.isBinary = isBinary;
  generated$3.isBinaryExpression = isBinaryExpression;
  generated$3.isBindExpression = isBindExpression;
  generated$3.isBlock = isBlock;
  generated$3.isBlockParent = isBlockParent;
  generated$3.isBlockStatement = isBlockStatement;
  generated$3.isBooleanLiteral = isBooleanLiteral;
  generated$3.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
  generated$3.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
  generated$3.isBreakStatement = isBreakStatement;
  generated$3.isCallExpression = isCallExpression;
  generated$3.isCatchClause = isCatchClause;
  generated$3.isClass = isClass;
  generated$3.isClassAccessorProperty = isClassAccessorProperty;
  generated$3.isClassBody = isClassBody;
  generated$3.isClassDeclaration = isClassDeclaration;
  generated$3.isClassExpression = isClassExpression;
  generated$3.isClassImplements = isClassImplements;
  generated$3.isClassMethod = isClassMethod;
  generated$3.isClassPrivateMethod = isClassPrivateMethod;
  generated$3.isClassPrivateProperty = isClassPrivateProperty;
  generated$3.isClassProperty = isClassProperty;
  generated$3.isCompletionStatement = isCompletionStatement;
  generated$3.isConditional = isConditional;
  generated$3.isConditionalExpression = isConditionalExpression;
  generated$3.isContinueStatement = isContinueStatement;
  generated$3.isDebuggerStatement = isDebuggerStatement;
  generated$3.isDecimalLiteral = isDecimalLiteral;
  generated$3.isDeclaration = isDeclaration;
  generated$3.isDeclareClass = isDeclareClass;
  generated$3.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
  generated$3.isDeclareExportDeclaration = isDeclareExportDeclaration;
  generated$3.isDeclareFunction = isDeclareFunction;
  generated$3.isDeclareInterface = isDeclareInterface;
  generated$3.isDeclareModule = isDeclareModule;
  generated$3.isDeclareModuleExports = isDeclareModuleExports;
  generated$3.isDeclareOpaqueType = isDeclareOpaqueType;
  generated$3.isDeclareTypeAlias = isDeclareTypeAlias;
  generated$3.isDeclareVariable = isDeclareVariable;
  generated$3.isDeclaredPredicate = isDeclaredPredicate;
  generated$3.isDecorator = isDecorator;
  generated$3.isDirective = isDirective;
  generated$3.isDirectiveLiteral = isDirectiveLiteral;
  generated$3.isDoExpression = isDoExpression;
  generated$3.isDoWhileStatement = isDoWhileStatement;
  generated$3.isEmptyStatement = isEmptyStatement;
  generated$3.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
  generated$3.isEnumBody = isEnumBody;
  generated$3.isEnumBooleanBody = isEnumBooleanBody;
  generated$3.isEnumBooleanMember = isEnumBooleanMember;
  generated$3.isEnumDeclaration = isEnumDeclaration;
  generated$3.isEnumDefaultedMember = isEnumDefaultedMember;
  generated$3.isEnumMember = isEnumMember;
  generated$3.isEnumNumberBody = isEnumNumberBody;
  generated$3.isEnumNumberMember = isEnumNumberMember;
  generated$3.isEnumStringBody = isEnumStringBody;
  generated$3.isEnumStringMember = isEnumStringMember;
  generated$3.isEnumSymbolBody = isEnumSymbolBody;
  generated$3.isExistsTypeAnnotation = isExistsTypeAnnotation;
  generated$3.isExportAllDeclaration = isExportAllDeclaration;
  generated$3.isExportDeclaration = isExportDeclaration;
  generated$3.isExportDefaultDeclaration = isExportDefaultDeclaration;
  generated$3.isExportDefaultSpecifier = isExportDefaultSpecifier;
  generated$3.isExportNamedDeclaration = isExportNamedDeclaration;
  generated$3.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
  generated$3.isExportSpecifier = isExportSpecifier;
  generated$3.isExpression = isExpression;
  generated$3.isExpressionStatement = isExpressionStatement;
  generated$3.isExpressionWrapper = isExpressionWrapper;
  generated$3.isFile = isFile;
  generated$3.isFlow = isFlow;
  generated$3.isFlowBaseAnnotation = isFlowBaseAnnotation;
  generated$3.isFlowDeclaration = isFlowDeclaration;
  generated$3.isFlowPredicate = isFlowPredicate;
  generated$3.isFlowType = isFlowType;
  generated$3.isFor = isFor;
  generated$3.isForInStatement = isForInStatement;
  generated$3.isForOfStatement = isForOfStatement;
  generated$3.isForStatement = isForStatement;
  generated$3.isForXStatement = isForXStatement;
  generated$3.isFunction = isFunction;
  generated$3.isFunctionDeclaration = isFunctionDeclaration;
  generated$3.isFunctionExpression = isFunctionExpression;
  generated$3.isFunctionParent = isFunctionParent;
  generated$3.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
  generated$3.isFunctionTypeParam = isFunctionTypeParam;
  generated$3.isGenericTypeAnnotation = isGenericTypeAnnotation;
  generated$3.isIdentifier = isIdentifier;
  generated$3.isIfStatement = isIfStatement;
  generated$3.isImmutable = isImmutable2;
  generated$3.isImport = isImport;
  generated$3.isImportAttribute = isImportAttribute;
  generated$3.isImportDeclaration = isImportDeclaration;
  generated$3.isImportDefaultSpecifier = isImportDefaultSpecifier;
  generated$3.isImportExpression = isImportExpression;
  generated$3.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
  generated$3.isImportOrExportDeclaration = isImportOrExportDeclaration;
  generated$3.isImportSpecifier = isImportSpecifier;
  generated$3.isIndexedAccessType = isIndexedAccessType;
  generated$3.isInferredPredicate = isInferredPredicate;
  generated$3.isInterfaceDeclaration = isInterfaceDeclaration;
  generated$3.isInterfaceExtends = isInterfaceExtends;
  generated$3.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
  generated$3.isInterpreterDirective = isInterpreterDirective;
  generated$3.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
  generated$3.isJSX = isJSX;
  generated$3.isJSXAttribute = isJSXAttribute;
  generated$3.isJSXClosingElement = isJSXClosingElement;
  generated$3.isJSXClosingFragment = isJSXClosingFragment;
  generated$3.isJSXElement = isJSXElement;
  generated$3.isJSXEmptyExpression = isJSXEmptyExpression;
  generated$3.isJSXExpressionContainer = isJSXExpressionContainer;
  generated$3.isJSXFragment = isJSXFragment;
  generated$3.isJSXIdentifier = isJSXIdentifier;
  generated$3.isJSXMemberExpression = isJSXMemberExpression;
  generated$3.isJSXNamespacedName = isJSXNamespacedName;
  generated$3.isJSXOpeningElement = isJSXOpeningElement;
  generated$3.isJSXOpeningFragment = isJSXOpeningFragment;
  generated$3.isJSXSpreadAttribute = isJSXSpreadAttribute;
  generated$3.isJSXSpreadChild = isJSXSpreadChild;
  generated$3.isJSXText = isJSXText;
  generated$3.isLVal = isLVal;
  generated$3.isLabeledStatement = isLabeledStatement;
  generated$3.isLiteral = isLiteral;
  generated$3.isLogicalExpression = isLogicalExpression;
  generated$3.isLoop = isLoop;
  generated$3.isMemberExpression = isMemberExpression;
  generated$3.isMetaProperty = isMetaProperty;
  generated$3.isMethod = isMethod;
  generated$3.isMiscellaneous = isMiscellaneous;
  generated$3.isMixedTypeAnnotation = isMixedTypeAnnotation;
  generated$3.isModuleDeclaration = isModuleDeclaration;
  generated$3.isModuleExpression = isModuleExpression;
  generated$3.isModuleSpecifier = isModuleSpecifier;
  generated$3.isNewExpression = isNewExpression;
  generated$3.isNoop = isNoop;
  generated$3.isNullLiteral = isNullLiteral;
  generated$3.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
  generated$3.isNullableTypeAnnotation = isNullableTypeAnnotation;
  generated$3.isNumberLiteral = isNumberLiteral;
  generated$3.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
  generated$3.isNumberTypeAnnotation = isNumberTypeAnnotation;
  generated$3.isNumericLiteral = isNumericLiteral;
  generated$3.isObjectExpression = isObjectExpression;
  generated$3.isObjectMember = isObjectMember;
  generated$3.isObjectMethod = isObjectMethod;
  generated$3.isObjectPattern = isObjectPattern;
  generated$3.isObjectProperty = isObjectProperty;
  generated$3.isObjectTypeAnnotation = isObjectTypeAnnotation;
  generated$3.isObjectTypeCallProperty = isObjectTypeCallProperty;
  generated$3.isObjectTypeIndexer = isObjectTypeIndexer;
  generated$3.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
  generated$3.isObjectTypeProperty = isObjectTypeProperty;
  generated$3.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
  generated$3.isOpaqueType = isOpaqueType;
  generated$3.isOptionalCallExpression = isOptionalCallExpression;
  generated$3.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
  generated$3.isOptionalMemberExpression = isOptionalMemberExpression;
  generated$3.isParenthesizedExpression = isParenthesizedExpression;
  generated$3.isPattern = isPattern;
  generated$3.isPatternLike = isPatternLike;
  generated$3.isPipelineBareFunction = isPipelineBareFunction;
  generated$3.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
  generated$3.isPipelineTopicExpression = isPipelineTopicExpression;
  generated$3.isPlaceholder = isPlaceholder;
  generated$3.isPrivate = isPrivate;
  generated$3.isPrivateName = isPrivateName;
  generated$3.isProgram = isProgram;
  generated$3.isProperty = isProperty;
  generated$3.isPureish = isPureish;
  generated$3.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
  generated$3.isRecordExpression = isRecordExpression;
  generated$3.isRegExpLiteral = isRegExpLiteral;
  generated$3.isRegexLiteral = isRegexLiteral;
  generated$3.isRestElement = isRestElement;
  generated$3.isRestProperty = isRestProperty;
  generated$3.isReturnStatement = isReturnStatement;
  generated$3.isScopable = isScopable;
  generated$3.isSequenceExpression = isSequenceExpression;
  generated$3.isSpreadElement = isSpreadElement;
  generated$3.isSpreadProperty = isSpreadProperty;
  generated$3.isStandardized = isStandardized;
  generated$3.isStatement = isStatement;
  generated$3.isStaticBlock = isStaticBlock;
  generated$3.isStringLiteral = isStringLiteral;
  generated$3.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
  generated$3.isStringTypeAnnotation = isStringTypeAnnotation;
  generated$3.isSuper = isSuper;
  generated$3.isSwitchCase = isSwitchCase;
  generated$3.isSwitchStatement = isSwitchStatement;
  generated$3.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
  generated$3.isTSAnyKeyword = isTSAnyKeyword;
  generated$3.isTSArrayType = isTSArrayType;
  generated$3.isTSAsExpression = isTSAsExpression;
  generated$3.isTSBaseType = isTSBaseType;
  generated$3.isTSBigIntKeyword = isTSBigIntKeyword;
  generated$3.isTSBooleanKeyword = isTSBooleanKeyword;
  generated$3.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
  generated$3.isTSConditionalType = isTSConditionalType;
  generated$3.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
  generated$3.isTSConstructorType = isTSConstructorType;
  generated$3.isTSDeclareFunction = isTSDeclareFunction;
  generated$3.isTSDeclareMethod = isTSDeclareMethod;
  generated$3.isTSEntityName = isTSEntityName;
  generated$3.isTSEnumDeclaration = isTSEnumDeclaration;
  generated$3.isTSEnumMember = isTSEnumMember;
  generated$3.isTSExportAssignment = isTSExportAssignment;
  generated$3.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
  generated$3.isTSExternalModuleReference = isTSExternalModuleReference;
  generated$3.isTSFunctionType = isTSFunctionType;
  generated$3.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
  generated$3.isTSImportType = isTSImportType;
  generated$3.isTSIndexSignature = isTSIndexSignature;
  generated$3.isTSIndexedAccessType = isTSIndexedAccessType;
  generated$3.isTSInferType = isTSInferType;
  generated$3.isTSInstantiationExpression = isTSInstantiationExpression;
  generated$3.isTSInterfaceBody = isTSInterfaceBody;
  generated$3.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
  generated$3.isTSIntersectionType = isTSIntersectionType;
  generated$3.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
  generated$3.isTSLiteralType = isTSLiteralType;
  generated$3.isTSMappedType = isTSMappedType;
  generated$3.isTSMethodSignature = isTSMethodSignature;
  generated$3.isTSModuleBlock = isTSModuleBlock;
  generated$3.isTSModuleDeclaration = isTSModuleDeclaration;
  generated$3.isTSNamedTupleMember = isTSNamedTupleMember;
  generated$3.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
  generated$3.isTSNeverKeyword = isTSNeverKeyword;
  generated$3.isTSNonNullExpression = isTSNonNullExpression;
  generated$3.isTSNullKeyword = isTSNullKeyword;
  generated$3.isTSNumberKeyword = isTSNumberKeyword;
  generated$3.isTSObjectKeyword = isTSObjectKeyword;
  generated$3.isTSOptionalType = isTSOptionalType;
  generated$3.isTSParameterProperty = isTSParameterProperty;
  generated$3.isTSParenthesizedType = isTSParenthesizedType;
  generated$3.isTSPropertySignature = isTSPropertySignature;
  generated$3.isTSQualifiedName = isTSQualifiedName;
  generated$3.isTSRestType = isTSRestType;
  generated$3.isTSSatisfiesExpression = isTSSatisfiesExpression;
  generated$3.isTSStringKeyword = isTSStringKeyword;
  generated$3.isTSSymbolKeyword = isTSSymbolKeyword;
  generated$3.isTSThisType = isTSThisType;
  generated$3.isTSTupleType = isTSTupleType;
  generated$3.isTSType = isTSType;
  generated$3.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
  generated$3.isTSTypeAnnotation = isTSTypeAnnotation;
  generated$3.isTSTypeAssertion = isTSTypeAssertion;
  generated$3.isTSTypeElement = isTSTypeElement;
  generated$3.isTSTypeLiteral = isTSTypeLiteral;
  generated$3.isTSTypeOperator = isTSTypeOperator;
  generated$3.isTSTypeParameter = isTSTypeParameter;
  generated$3.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
  generated$3.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
  generated$3.isTSTypePredicate = isTSTypePredicate;
  generated$3.isTSTypeQuery = isTSTypeQuery;
  generated$3.isTSTypeReference = isTSTypeReference;
  generated$3.isTSUndefinedKeyword = isTSUndefinedKeyword;
  generated$3.isTSUnionType = isTSUnionType;
  generated$3.isTSUnknownKeyword = isTSUnknownKeyword;
  generated$3.isTSVoidKeyword = isTSVoidKeyword;
  generated$3.isTaggedTemplateExpression = isTaggedTemplateExpression;
  generated$3.isTemplateElement = isTemplateElement;
  generated$3.isTemplateLiteral = isTemplateLiteral;
  generated$3.isTerminatorless = isTerminatorless;
  generated$3.isThisExpression = isThisExpression;
  generated$3.isThisTypeAnnotation = isThisTypeAnnotation;
  generated$3.isThrowStatement = isThrowStatement;
  generated$3.isTopicReference = isTopicReference;
  generated$3.isTryStatement = isTryStatement;
  generated$3.isTupleExpression = isTupleExpression;
  generated$3.isTupleTypeAnnotation = isTupleTypeAnnotation;
  generated$3.isTypeAlias = isTypeAlias;
  generated$3.isTypeAnnotation = isTypeAnnotation;
  generated$3.isTypeCastExpression = isTypeCastExpression;
  generated$3.isTypeParameter = isTypeParameter;
  generated$3.isTypeParameterDeclaration = isTypeParameterDeclaration;
  generated$3.isTypeParameterInstantiation = isTypeParameterInstantiation;
  generated$3.isTypeScript = isTypeScript2;
  generated$3.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
  generated$3.isUnaryExpression = isUnaryExpression;
  generated$3.isUnaryLike = isUnaryLike;
  generated$3.isUnionTypeAnnotation = isUnionTypeAnnotation;
  generated$3.isUpdateExpression = isUpdateExpression;
  generated$3.isUserWhitespacable = isUserWhitespacable;
  generated$3.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
  generated$3.isVariableDeclaration = isVariableDeclaration;
  generated$3.isVariableDeclarator = isVariableDeclarator;
  generated$3.isVariance = isVariance;
  generated$3.isVoidTypeAnnotation = isVoidTypeAnnotation;
  generated$3.isWhile = isWhile;
  generated$3.isWhileStatement = isWhileStatement;
  generated$3.isWithStatement = isWithStatement;
  generated$3.isYieldExpression = isYieldExpression;
  var _shallowEqual = requireShallowEqual();
  var _deprecationWarning = requireDeprecationWarning();
  function isArrayExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArrayExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAssignmentExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "AssignmentExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBinaryExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BinaryExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInterpreterDirective(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InterpreterDirective") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDirective(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Directive") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDirectiveLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DirectiveLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBlockStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BlockStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBreakStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BreakStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isCallExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "CallExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isCatchClause(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "CatchClause") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isConditionalExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ConditionalExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isContinueStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ContinueStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDebuggerStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DebuggerStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDoWhileStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DoWhileStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEmptyStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EmptyStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExpressionStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExpressionStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFile(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "File") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isForInStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ForInStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isForStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ForStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "FunctionDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "FunctionExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isIdentifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Identifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isIfStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "IfStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLabeledStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "LabeledStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStringLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "StringLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNumericLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NumericLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNullLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NullLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBooleanLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BooleanLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRegExpLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "RegExpLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLogicalExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "LogicalExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMemberExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "MemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNewExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NewExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isProgram(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Program") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectMethod(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRestElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "RestElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isReturnStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ReturnStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSequenceExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SequenceExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isParenthesizedExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ParenthesizedExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSwitchCase(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SwitchCase") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSwitchStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SwitchStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isThisExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ThisExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isThrowStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ThrowStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTryStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TryStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUnaryExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "UnaryExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUpdateExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "UpdateExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isVariableDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "VariableDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isVariableDeclarator(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "VariableDeclarator") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isWhileStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "WhileStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isWithStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "WithStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAssignmentPattern(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "AssignmentPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isArrayPattern(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArrayPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isArrowFunctionExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArrowFunctionExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportAllDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportAllDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportDefaultDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportDefaultDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportNamedDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportNamedDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isForOfStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ForOfStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportDefaultSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportDefaultSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportNamespaceSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportNamespaceSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMetaProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "MetaProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassMethod(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectPattern(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSpreadElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SpreadElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSuper(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Super") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTaggedTemplateExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TaggedTemplateExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTemplateElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TemplateElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTemplateLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TemplateLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isYieldExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "YieldExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAwaitExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "AwaitExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImport(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Import") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBigIntLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BigIntLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportNamespaceSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportNamespaceSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isOptionalMemberExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "OptionalMemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isOptionalCallExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "OptionalCallExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassAccessorProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassAccessorProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassPrivateProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassPrivateProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassPrivateMethod(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassPrivateMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPrivateName(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "PrivateName") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStaticBlock(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "StaticBlock") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAnyTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "AnyTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isArrayTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArrayTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBooleanTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BooleanTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBooleanLiteralTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BooleanLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNullLiteralTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NullLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassImplements(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassImplements") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareClass(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareClass") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareFunction(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareInterface(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareInterface") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareModule(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareModule") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareModuleExports(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareModuleExports") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareTypeAlias(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareTypeAlias") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareOpaqueType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareOpaqueType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareVariable(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareVariable") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareExportDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareExportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareExportAllDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareExportAllDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclaredPredicate(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclaredPredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExistsTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExistsTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "FunctionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionTypeParam(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "FunctionTypeParam") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isGenericTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "GenericTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInferredPredicate(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InferredPredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInterfaceExtends(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InterfaceExtends") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInterfaceDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InterfaceDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInterfaceTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InterfaceTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isIntersectionTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "IntersectionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMixedTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "MixedTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEmptyTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EmptyTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNullableTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NullableTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNumberLiteralTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NumberLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNumberTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NumberTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeInternalSlot(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeInternalSlot") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeCallProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeCallProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeIndexer(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeIndexer") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeSpreadProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeSpreadProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isOpaqueType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "OpaqueType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isQualifiedTypeIdentifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "QualifiedTypeIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStringLiteralTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "StringLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStringTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "StringTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSymbolTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SymbolTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isThisTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ThisTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTupleTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TupleTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeofTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeofTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeAlias(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeAlias") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeCastExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeCastExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeParameter(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeParameter") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeParameterDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeParameterDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeParameterInstantiation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeParameterInstantiation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUnionTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "UnionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isVariance(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Variance") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isVoidTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "VoidTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumBooleanBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumBooleanBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumNumberBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumNumberBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumStringBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumStringBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumSymbolBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumSymbolBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumBooleanMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumBooleanMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumNumberMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumNumberMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumStringMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumStringMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumDefaultedMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumDefaultedMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isIndexedAccessType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "IndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isOptionalIndexedAccessType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "OptionalIndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXAttribute(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXClosingElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXClosingElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXEmptyExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXEmptyExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXExpressionContainer(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXExpressionContainer") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXSpreadChild(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXSpreadChild") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXIdentifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXMemberExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXMemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXNamespacedName(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXNamespacedName") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXOpeningElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXOpeningElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXSpreadAttribute(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXSpreadAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXText(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXText") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXFragment(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXOpeningFragment(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXOpeningFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXClosingFragment(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXClosingFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNoop(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Noop") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPlaceholder(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Placeholder") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isV8IntrinsicIdentifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "V8IntrinsicIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isArgumentPlaceholder(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArgumentPlaceholder") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBindExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BindExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportAttribute(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDecorator(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Decorator") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDoExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DoExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportDefaultSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportDefaultSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRecordExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "RecordExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTupleExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TupleExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDecimalLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DecimalLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isModuleExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ModuleExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTopicReference(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TopicReference") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPipelineTopicExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "PipelineTopicExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPipelineBareFunction(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "PipelineBareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPipelinePrimaryTopicReference(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "PipelinePrimaryTopicReference") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSParameterProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSParameterProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSDeclareFunction(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSDeclareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSDeclareMethod(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSDeclareMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSQualifiedName(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSQualifiedName") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSCallSignatureDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSCallSignatureDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSConstructSignatureDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSConstructSignatureDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSPropertySignature(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSPropertySignature") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSMethodSignature(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSMethodSignature") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSIndexSignature(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSIndexSignature") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSAnyKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSAnyKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSBooleanKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSBooleanKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSBigIntKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSBigIntKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSIntrinsicKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSIntrinsicKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNeverKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNeverKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNullKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNullKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNumberKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNumberKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSObjectKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSObjectKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSStringKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSStringKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSSymbolKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSSymbolKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSUndefinedKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSUndefinedKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSUnknownKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSUnknownKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSVoidKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSVoidKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSThisType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSThisType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSFunctionType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSFunctionType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSConstructorType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSConstructorType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeReference(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeReference") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypePredicate(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypePredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeQuery(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeQuery") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSArrayType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSArrayType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTupleType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTupleType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSOptionalType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSOptionalType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSRestType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSRestType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNamedTupleMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNamedTupleMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSUnionType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSUnionType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSIntersectionType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSIntersectionType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSConditionalType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSConditionalType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSInferType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSInferType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSParenthesizedType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSParenthesizedType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeOperator(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeOperator") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSIndexedAccessType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSIndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSMappedType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSMappedType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSLiteralType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSLiteralType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSExpressionWithTypeArguments(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSExpressionWithTypeArguments") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSInterfaceDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSInterfaceDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSInterfaceBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSInterfaceBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeAliasDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeAliasDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSInstantiationExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSInstantiationExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSAsExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSAsExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSSatisfiesExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSSatisfiesExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeAssertion(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeAssertion") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSEnumDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSEnumDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSEnumMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSEnumMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSModuleDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSModuleDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSModuleBlock(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSModuleBlock") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSImportType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSImportType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSImportEqualsDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSImportEqualsDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSExternalModuleReference(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSExternalModuleReference") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNonNullExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNonNullExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSExportAssignment(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSExportAssignment") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNamespaceExportDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNamespaceExportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeParameterInstantiation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeParameterInstantiation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeParameterDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeParameterDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeParameter(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeParameter") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStandardized(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "InterpreterDirective":
      case "Directive":
      case "DirectiveLiteral":
      case "BlockStatement":
      case "BreakStatement":
      case "CallExpression":
      case "CatchClause":
      case "ConditionalExpression":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "File":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Identifier":
      case "IfStatement":
      case "LabeledStatement":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "Program":
      case "ObjectExpression":
      case "ObjectMethod":
      case "ObjectProperty":
      case "RestElement":
      case "ReturnStatement":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "SwitchCase":
      case "SwitchStatement":
      case "ThisExpression":
      case "ThrowStatement":
      case "TryStatement":
      case "UnaryExpression":
      case "UpdateExpression":
      case "VariableDeclaration":
      case "VariableDeclarator":
      case "WhileStatement":
      case "WithStatement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ArrowFunctionExpression":
      case "ClassBody":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ExportSpecifier":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ImportExpression":
      case "MetaProperty":
      case "ClassMethod":
      case "ObjectPattern":
      case "SpreadElement":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateElement":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "ExportNamespaceSpecifier":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
      case "StaticBlock":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Identifier":
          case "StringLiteral":
          case "BlockStatement":
          case "ClassBody":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExpression(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "CallExpression":
      case "ConditionalExpression":
      case "FunctionExpression":
      case "Identifier":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "ObjectExpression":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "ThisExpression":
      case "UnaryExpression":
      case "UpdateExpression":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ImportExpression":
      case "MetaProperty":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "TypeCastExpression":
      case "JSXElement":
      case "JSXFragment":
      case "BindExpression":
      case "DoExpression":
      case "RecordExpression":
      case "TupleExpression":
      case "DecimalLiteral":
      case "ModuleExpression":
      case "TopicReference":
      case "PipelineTopicExpression":
      case "PipelineBareFunction":
      case "PipelinePrimaryTopicReference":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Expression":
          case "Identifier":
          case "StringLiteral":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBinary(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BinaryExpression":
      case "LogicalExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isScopable(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node2.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBlockParent(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node2.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBlock(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BlockStatement":
      case "Program":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node2.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStatement(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BlockStatement":
      case "BreakStatement":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "IfStatement":
      case "LabeledStatement":
      case "ReturnStatement":
      case "SwitchStatement":
      case "ThrowStatement":
      case "TryStatement":
      case "VariableDeclaration":
      case "WhileStatement":
      case "WithStatement":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
      case "TSImportEqualsDeclaration":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Statement":
          case "Declaration":
          case "BlockStatement":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTerminatorless(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
      case "YieldExpression":
      case "AwaitExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isCompletionStatement(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isConditional(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ConditionalExpression":
      case "IfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLoop(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "WhileStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isWhile(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "DoWhileStatement":
      case "WhileStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExpressionWrapper(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ExpressionStatement":
      case "ParenthesizedExpression":
      case "TypeCastExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFor(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ForInStatement":
      case "ForStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isForXStatement(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ForInStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunction(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionParent(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPureish(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "ArrowFunctionExpression":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node2.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclaration(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "FunctionDeclaration":
      case "VariableDeclaration":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
        break;
      case "Placeholder":
        if (node2.expectedNode === "Declaration") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPatternLike(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "Identifier":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLVal(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "Identifier":
      case "MemberExpression":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSParameterProperty":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSEntityName(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "Identifier":
      case "TSQualifiedName":
        break;
      case "Placeholder":
        if (node2.expectedNode === "Identifier") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLiteral(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "TemplateLiteral":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node2.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImmutable2(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "BigIntLiteral":
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXOpeningElement":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node2.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUserWhitespacable(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ObjectMethod":
      case "ObjectProperty":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMethod(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ObjectMethod":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectMember(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ObjectMethod":
      case "ObjectProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isProperty(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ObjectProperty":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUnaryLike(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "UnaryExpression":
      case "SpreadElement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPattern(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
        break;
      case "Placeholder":
        if (node2.expectedNode === "Pattern") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClass(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ClassExpression":
      case "ClassDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportOrExportDeclaration(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportDeclaration(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isModuleSpecifier(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ExportSpecifier":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAccessor(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ClassAccessorProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPrivate(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlow(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ClassImplements":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "DeclaredPredicate":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "FunctionTypeParam":
      case "GenericTypeAnnotation":
      case "InferredPredicate":
      case "InterfaceExtends":
      case "InterfaceDeclaration":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
      case "OpaqueType":
      case "QualifiedTypeIdentifier":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "TypeAlias":
      case "TypeAnnotation":
      case "TypeCastExpression":
      case "TypeParameter":
      case "TypeParameterDeclaration":
      case "TypeParameterInstantiation":
      case "UnionTypeAnnotation":
      case "Variance":
      case "VoidTypeAnnotation":
      case "EnumDeclaration":
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlowType(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "GenericTypeAnnotation":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "UnionTypeAnnotation":
      case "VoidTypeAnnotation":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlowBaseAnnotation(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "AnyTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NumberTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "VoidTypeAnnotation":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlowDeclaration(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlowPredicate(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "DeclaredPredicate":
      case "InferredPredicate":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumBody(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumMember(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSX(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXEmptyExpression":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXIdentifier":
      case "JSXMemberExpression":
      case "JSXNamespacedName":
      case "JSXOpeningElement":
      case "JSXSpreadAttribute":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMiscellaneous(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "Noop":
      case "Placeholder":
      case "V8IntrinsicIdentifier":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeScript2(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "TSParameterProperty":
      case "TSDeclareFunction":
      case "TSDeclareMethod":
      case "TSQualifiedName":
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSNamedTupleMember":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSInterfaceDeclaration":
      case "TSInterfaceBody":
      case "TSTypeAliasDeclaration":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSEnumDeclaration":
      case "TSEnumMember":
      case "TSModuleDeclaration":
      case "TSModuleBlock":
      case "TSImportType":
      case "TSImportEqualsDeclaration":
      case "TSExternalModuleReference":
      case "TSNonNullExpression":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
      case "TSTypeAnnotation":
      case "TSTypeParameterInstantiation":
      case "TSTypeParameterDeclaration":
      case "TSTypeParameter":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeElement(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSType(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSImportType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSBaseType(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSLiteralType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNumberLiteral(node2, opts) {
    (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral");
    if (!node2) return false;
    if (node2.type !== "NumberLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRegexLiteral(node2, opts) {
    (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral");
    if (!node2) return false;
    if (node2.type !== "RegexLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRestProperty(node2, opts) {
    (0, _deprecationWarning.default)("isRestProperty", "isRestElement");
    if (!node2) return false;
    if (node2.type !== "RestProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSpreadProperty(node2, opts) {
    (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement");
    if (!node2) return false;
    if (node2.type !== "SpreadProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isModuleDeclaration(node2, opts) {
    (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration");
    return isImportOrExportDeclaration(node2, opts);
  }
  return generated$3;
}
var hasRequiredMatchesPattern;
function requireMatchesPattern() {
  if (hasRequiredMatchesPattern) return matchesPattern;
  hasRequiredMatchesPattern = 1;
  Object.defineProperty(matchesPattern, "__esModule", {
    value: true
  });
  matchesPattern.default = matchesPattern$1;
  var _index = requireGenerated$3();
  function matchesPattern$1(member, match, allowPartial) {
    if (!(0, _index.isMemberExpression)(member)) return false;
    const parts = Array.isArray(match) ? match : match.split(".");
    const nodes = [];
    let node2;
    for (node2 = member; (0, _index.isMemberExpression)(node2); node2 = node2.object) {
      nodes.push(node2.property);
    }
    nodes.push(node2);
    if (nodes.length < parts.length) return false;
    if (!allowPartial && nodes.length > parts.length) return false;
    for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
      const node3 = nodes[j];
      let value2;
      if ((0, _index.isIdentifier)(node3)) {
        value2 = node3.name;
      } else if ((0, _index.isStringLiteral)(node3)) {
        value2 = node3.value;
      } else if ((0, _index.isThisExpression)(node3)) {
        value2 = "this";
      } else {
        return false;
      }
      if (parts[i] !== value2) return false;
    }
    return true;
  }
  return matchesPattern;
}
var hasRequiredBuildMatchMemberExpression;
function requireBuildMatchMemberExpression() {
  if (hasRequiredBuildMatchMemberExpression) return buildMatchMemberExpression;
  hasRequiredBuildMatchMemberExpression = 1;
  Object.defineProperty(buildMatchMemberExpression, "__esModule", {
    value: true
  });
  buildMatchMemberExpression.default = buildMatchMemberExpression$1;
  var _matchesPattern = requireMatchesPattern();
  function buildMatchMemberExpression$1(match, allowPartial) {
    const parts = match.split(".");
    return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
  }
  return buildMatchMemberExpression;
}
var hasRequiredIsReactComponent;
function requireIsReactComponent() {
  if (hasRequiredIsReactComponent) return isReactComponent;
  hasRequiredIsReactComponent = 1;
  Object.defineProperty(isReactComponent, "__esModule", {
    value: true
  });
  isReactComponent.default = void 0;
  var _buildMatchMemberExpression = requireBuildMatchMemberExpression();
  const isReactComponent$1 = (0, _buildMatchMemberExpression.default)("React.Component");
  isReactComponent.default = isReactComponent$1;
  return isReactComponent;
}
var isCompatTag = {};
var hasRequiredIsCompatTag;
function requireIsCompatTag() {
  if (hasRequiredIsCompatTag) return isCompatTag;
  hasRequiredIsCompatTag = 1;
  Object.defineProperty(isCompatTag, "__esModule", {
    value: true
  });
  isCompatTag.default = isCompatTag$1;
  function isCompatTag$1(tagName) {
    return !!tagName && /^[a-z]/.test(tagName);
  }
  return isCompatTag;
}
var buildChildren = {};
var cleanJSXElementLiteralChild = {};
var generated$2 = {};
var validateNode = {};
var validate$1 = {};
var definitions = {};
var toFastProperties;
var hasRequiredToFastProperties;
function requireToFastProperties() {
  if (hasRequiredToFastProperties) return toFastProperties;
  hasRequiredToFastProperties = 1;
  let fastProto = null;
  function FastObject(o) {
    if (fastProto !== null && typeof fastProto.property) {
      const result = fastProto;
      fastProto = FastObject.prototype = null;
      return result;
    }
    fastProto = FastObject.prototype = o == null ? /* @__PURE__ */ Object.create(null) : o;
    return new FastObject();
  }
  FastObject();
  toFastProperties = function toFastproperties(o) {
    return FastObject(o);
  };
  return toFastProperties;
}
var core = {};
var is = {};
var isType = {};
var hasRequiredIsType;
function requireIsType() {
  if (hasRequiredIsType) return isType;
  hasRequiredIsType = 1;
  Object.defineProperty(isType, "__esModule", {
    value: true
  });
  isType.default = isType$1;
  var _index = requireDefinitions();
  function isType$1(nodeType, targetType) {
    if (nodeType === targetType) return true;
    if (nodeType == null) return false;
    if (_index.ALIAS_KEYS[targetType]) return false;
    const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
    if (aliases) {
      if (aliases[0] === nodeType) return true;
      for (const alias of aliases) {
        if (nodeType === alias) return true;
      }
    }
    return false;
  }
  return isType;
}
var isPlaceholderType = {};
var hasRequiredIsPlaceholderType;
function requireIsPlaceholderType() {
  if (hasRequiredIsPlaceholderType) return isPlaceholderType;
  hasRequiredIsPlaceholderType = 1;
  Object.defineProperty(isPlaceholderType, "__esModule", {
    value: true
  });
  isPlaceholderType.default = isPlaceholderType$1;
  var _index = requireDefinitions();
  function isPlaceholderType$1(placeholderType, targetType) {
    if (placeholderType === targetType) return true;
    const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
    if (aliases) {
      for (const alias of aliases) {
        if (targetType === alias) return true;
      }
    }
    return false;
  }
  return isPlaceholderType;
}
var hasRequiredIs;
function requireIs() {
  if (hasRequiredIs) return is;
  hasRequiredIs = 1;
  Object.defineProperty(is, "__esModule", {
    value: true
  });
  is.default = is$1;
  var _shallowEqual = requireShallowEqual();
  var _isType = requireIsType();
  var _isPlaceholderType = requireIsPlaceholderType();
  var _index = requireDefinitions();
  function is$1(type, node2, opts) {
    if (!node2) return false;
    const matches = (0, _isType.default)(node2.type, type);
    if (!matches) {
      if (!opts && node2.type === "Placeholder" && type in _index.FLIPPED_ALIAS_KEYS) {
        return (0, _isPlaceholderType.default)(node2.expectedNode, type);
      }
      return false;
    }
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node2, opts);
    }
  }
  return is;
}
var isValidIdentifier = {};
var lib$M = {};
var identifier = {};
var hasRequiredIdentifier;
function requireIdentifier() {
  if (hasRequiredIdentifier) return identifier;
  hasRequiredIdentifier = 1;
  Object.defineProperty(identifier, "__esModule", {
    value: true
  });
  identifier.isIdentifierChar = isIdentifierChar2;
  identifier.isIdentifierName = isIdentifierName2;
  identifier.isIdentifierStart = isIdentifierStart2;
  let nonASCIIidentifierStartChars2 = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
  let nonASCIIidentifierChars2 = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
  const nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]");
  const nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + nonASCIIidentifierChars2 + "]");
  nonASCIIidentifierStartChars2 = nonASCIIidentifierChars2 = null;
  const astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
  const astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function isInAstralSet2(code, set) {
    let pos2 = 65536;
    for (let i = 0, length = set.length; i < length; i += 2) {
      pos2 += set[i];
      if (pos2 > code) return false;
      pos2 += set[i + 1];
      if (pos2 >= code) return true;
    }
    return false;
  }
  function isIdentifierStart2(code) {
    if (code < 65) return code === 36;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code));
    }
    return isInAstralSet2(code, astralIdentifierStartCodes2);
  }
  function isIdentifierChar2(code) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code));
    }
    return isInAstralSet2(code, astralIdentifierStartCodes2) || isInAstralSet2(code, astralIdentifierCodes2);
  }
  function isIdentifierName2(name) {
    let isFirst = true;
    for (let i = 0; i < name.length; i++) {
      let cp = name.charCodeAt(i);
      if ((cp & 64512) === 55296 && i + 1 < name.length) {
        const trail = name.charCodeAt(++i);
        if ((trail & 64512) === 56320) {
          cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
        }
      }
      if (isFirst) {
        isFirst = false;
        if (!isIdentifierStart2(cp)) {
          return false;
        }
      } else if (!isIdentifierChar2(cp)) {
        return false;
      }
    }
    return !isFirst;
  }
  return identifier;
}
var keyword = {};
var hasRequiredKeyword;
function requireKeyword() {
  if (hasRequiredKeyword) return keyword;
  hasRequiredKeyword = 1;
  Object.defineProperty(keyword, "__esModule", {
    value: true
  });
  keyword.isKeyword = isKeyword2;
  keyword.isReservedWord = isReservedWord2;
  keyword.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord2;
  keyword.isStrictBindReservedWord = isStrictBindReservedWord2;
  keyword.isStrictReservedWord = isStrictReservedWord2;
  const reservedWords2 = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  };
  const keywords2 = new Set(reservedWords2.keyword);
  const reservedWordsStrictSet2 = new Set(reservedWords2.strict);
  const reservedWordsStrictBindSet2 = new Set(reservedWords2.strictBind);
  function isReservedWord2(word, inModule) {
    return inModule && word === "await" || word === "enum";
  }
  function isStrictReservedWord2(word, inModule) {
    return isReservedWord2(word, inModule) || reservedWordsStrictSet2.has(word);
  }
  function isStrictBindOnlyReservedWord2(word) {
    return reservedWordsStrictBindSet2.has(word);
  }
  function isStrictBindReservedWord2(word, inModule) {
    return isStrictReservedWord2(word, inModule) || isStrictBindOnlyReservedWord2(word);
  }
  function isKeyword2(word) {
    return keywords2.has(word);
  }
  return keyword;
}
var hasRequiredLib$Q;
function requireLib$Q() {
  if (hasRequiredLib$Q) return lib$M;
  hasRequiredLib$Q = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "isIdentifierChar", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierChar;
      }
    });
    Object.defineProperty(exports, "isIdentifierName", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierName;
      }
    });
    Object.defineProperty(exports, "isIdentifierStart", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierStart;
      }
    });
    Object.defineProperty(exports, "isKeyword", {
      enumerable: true,
      get: function() {
        return _keyword.isKeyword;
      }
    });
    Object.defineProperty(exports, "isReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindOnlyReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictBindReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictReservedWord;
      }
    });
    var _identifier = requireIdentifier();
    var _keyword = requireKeyword();
  })(lib$M);
  return lib$M;
}
var hasRequiredIsValidIdentifier;
function requireIsValidIdentifier() {
  if (hasRequiredIsValidIdentifier) return isValidIdentifier;
  hasRequiredIsValidIdentifier = 1;
  Object.defineProperty(isValidIdentifier, "__esModule", {
    value: true
  });
  isValidIdentifier.default = isValidIdentifier$1;
  var _helperValidatorIdentifier2 = requireLib$Q();
  function isValidIdentifier$1(name, reserved = true) {
    if (typeof name !== "string") return false;
    if (reserved) {
      if ((0, _helperValidatorIdentifier2.isKeyword)(name) || (0, _helperValidatorIdentifier2.isStrictReservedWord)(name, true)) {
        return false;
      }
    }
    return (0, _helperValidatorIdentifier2.isIdentifierName)(name);
  }
  return isValidIdentifier;
}
var lib$L = {};
var hasRequiredLib$P;
function requireLib$P() {
  if (hasRequiredLib$P) return lib$L;
  hasRequiredLib$P = 1;
  Object.defineProperty(lib$L, "__esModule", {
    value: true
  });
  lib$L.readCodePoint = readCodePoint;
  lib$L.readInt = readInt;
  lib$L.readStringContents = readStringContents;
  var _isDigit = function isDigit(code) {
    return code >= 48 && code <= 57;
  };
  const forbiddenNumericSeparatorSiblings = {
    decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
  };
  const isAllowedNumericSeparatorSibling = {
    bin: (ch) => ch === 48 || ch === 49,
    oct: (ch) => ch >= 48 && ch <= 55,
    dec: (ch) => ch >= 48 && ch <= 57,
    hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
  };
  function readStringContents(type, input2, pos2, lineStart, curLine, errors) {
    const initialPos = pos2;
    const initialLineStart = lineStart;
    const initialCurLine = curLine;
    let out = "";
    let firstInvalidLoc = null;
    let chunkStart = pos2;
    const {
      length
    } = input2;
    for (; ; ) {
      if (pos2 >= length) {
        errors.unterminated(initialPos, initialLineStart, initialCurLine);
        out += input2.slice(chunkStart, pos2);
        break;
      }
      const ch = input2.charCodeAt(pos2);
      if (isStringEnd(type, ch, input2, pos2)) {
        out += input2.slice(chunkStart, pos2);
        break;
      }
      if (ch === 92) {
        out += input2.slice(chunkStart, pos2);
        const res = readEscapedChar(input2, pos2, lineStart, curLine, type === "template", errors);
        if (res.ch === null && !firstInvalidLoc) {
          firstInvalidLoc = {
            pos: pos2,
            lineStart,
            curLine
          };
        } else {
          out += res.ch;
        }
        ({
          pos: pos2,
          lineStart,
          curLine
        } = res);
        chunkStart = pos2;
      } else if (ch === 8232 || ch === 8233) {
        ++pos2;
        ++curLine;
        lineStart = pos2;
      } else if (ch === 10 || ch === 13) {
        if (type === "template") {
          out += input2.slice(chunkStart, pos2) + "\n";
          ++pos2;
          if (ch === 13 && input2.charCodeAt(pos2) === 10) {
            ++pos2;
          }
          ++curLine;
          chunkStart = lineStart = pos2;
        } else {
          errors.unterminated(initialPos, initialLineStart, initialCurLine);
        }
      } else {
        ++pos2;
      }
    }
    return {
      pos: pos2,
      str: out,
      firstInvalidLoc,
      lineStart,
      curLine,
      containsInvalid: !!firstInvalidLoc
    };
  }
  function isStringEnd(type, ch, input2, pos2) {
    if (type === "template") {
      return ch === 96 || ch === 36 && input2.charCodeAt(pos2 + 1) === 123;
    }
    return ch === (type === "double" ? 34 : 39);
  }
  function readEscapedChar(input2, pos2, lineStart, curLine, inTemplate, errors) {
    const throwOnInvalid = !inTemplate;
    pos2++;
    const res = (ch2) => ({
      pos: pos2,
      ch: ch2,
      lineStart,
      curLine
    });
    const ch = input2.charCodeAt(pos2++);
    switch (ch) {
      case 110:
        return res("\n");
      case 114:
        return res("\r");
      case 120: {
        let code;
        ({
          code,
          pos: pos2
        } = readHexChar(input2, pos2, lineStart, curLine, 2, false, throwOnInvalid, errors));
        return res(code === null ? null : String.fromCharCode(code));
      }
      case 117: {
        let code;
        ({
          code,
          pos: pos2
        } = readCodePoint(input2, pos2, lineStart, curLine, throwOnInvalid, errors));
        return res(code === null ? null : String.fromCodePoint(code));
      }
      case 116:
        return res("	");
      case 98:
        return res("\b");
      case 118:
        return res("\v");
      case 102:
        return res("\f");
      case 13:
        if (input2.charCodeAt(pos2) === 10) {
          ++pos2;
        }
      case 10:
        lineStart = pos2;
        ++curLine;
      case 8232:
      case 8233:
        return res("");
      case 56:
      case 57:
        if (inTemplate) {
          return res(null);
        } else {
          errors.strictNumericEscape(pos2 - 1, lineStart, curLine);
        }
      default:
        if (ch >= 48 && ch <= 55) {
          const startPos = pos2 - 1;
          const match = input2.slice(startPos, pos2 + 2).match(/^[0-7]+/);
          let octalStr = match[0];
          let octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          pos2 += octalStr.length - 1;
          const next = input2.charCodeAt(pos2);
          if (octalStr !== "0" || next === 56 || next === 57) {
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(startPos, lineStart, curLine);
            }
          }
          return res(String.fromCharCode(octal));
        }
        return res(String.fromCharCode(ch));
    }
  }
  function readHexChar(input2, pos2, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
    const initialPos = pos2;
    let n;
    ({
      n,
      pos: pos2
    } = readInt(input2, pos2, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
    if (n === null) {
      if (throwOnInvalid) {
        errors.invalidEscapeSequence(initialPos, lineStart, curLine);
      } else {
        pos2 = initialPos - 1;
      }
    }
    return {
      code: n,
      pos: pos2
    };
  }
  function readInt(input2, pos2, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
    const start = pos2;
    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
    let invalid = false;
    let total = 0;
    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
      const code = input2.charCodeAt(pos2);
      let val;
      if (code === 95 && allowNumSeparator !== "bail") {
        const prev = input2.charCodeAt(pos2 - 1);
        const next = input2.charCodeAt(pos2 + 1);
        if (!allowNumSeparator) {
          if (bailOnError) return {
            n: null,
            pos: pos2
          };
          errors.numericSeparatorInEscapeSequence(pos2, lineStart, curLine);
        } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
          if (bailOnError) return {
            n: null,
            pos: pos2
          };
          errors.unexpectedNumericSeparator(pos2, lineStart, curLine);
        }
        ++pos2;
        continue;
      }
      if (code >= 97) {
        val = code - 97 + 10;
      } else if (code >= 65) {
        val = code - 65 + 10;
      } else if (_isDigit(code)) {
        val = code - 48;
      } else {
        val = Infinity;
      }
      if (val >= radix) {
        if (val <= 9 && bailOnError) {
          return {
            n: null,
            pos: pos2
          };
        } else if (val <= 9 && errors.invalidDigit(pos2, lineStart, curLine, radix)) {
          val = 0;
        } else if (forceLen) {
          val = 0;
          invalid = true;
        } else {
          break;
        }
      }
      ++pos2;
      total = total * radix + val;
    }
    if (pos2 === start || len != null && pos2 - start !== len || invalid) {
      return {
        n: null,
        pos: pos2
      };
    }
    return {
      n: total,
      pos: pos2
    };
  }
  function readCodePoint(input2, pos2, lineStart, curLine, throwOnInvalid, errors) {
    const ch = input2.charCodeAt(pos2);
    let code;
    if (ch === 123) {
      ++pos2;
      ({
        code,
        pos: pos2
      } = readHexChar(input2, pos2, lineStart, curLine, input2.indexOf("}", pos2) - pos2, true, throwOnInvalid, errors));
      ++pos2;
      if (code !== null && code > 1114111) {
        if (throwOnInvalid) {
          errors.invalidCodePoint(pos2, lineStart, curLine);
        } else {
          return {
            code: null,
            pos: pos2
          };
        }
      }
    } else {
      ({
        code,
        pos: pos2
      } = readHexChar(input2, pos2, lineStart, curLine, 4, false, throwOnInvalid, errors));
    }
    return {
      code,
      pos: pos2
    };
  }
  return lib$L;
}
var constants = {};
var hasRequiredConstants;
function requireConstants() {
  if (hasRequiredConstants) return constants;
  hasRequiredConstants = 1;
  Object.defineProperty(constants, "__esModule", {
    value: true
  });
  constants.UPDATE_OPERATORS = constants.UNARY_OPERATORS = constants.STRING_UNARY_OPERATORS = constants.STATEMENT_OR_BLOCK_KEYS = constants.NUMBER_UNARY_OPERATORS = constants.NUMBER_BINARY_OPERATORS = constants.NOT_LOCAL_BINDING = constants.LOGICAL_OPERATORS = constants.INHERIT_KEYS = constants.FOR_INIT_KEYS = constants.FLATTENABLE_KEYS = constants.EQUALITY_BINARY_OPERATORS = constants.COMPARISON_BINARY_OPERATORS = constants.COMMENT_KEYS = constants.BOOLEAN_UNARY_OPERATORS = constants.BOOLEAN_NUMBER_BINARY_OPERATORS = constants.BOOLEAN_BINARY_OPERATORS = constants.BLOCK_SCOPED_SYMBOL = constants.BINARY_OPERATORS = constants.ASSIGNMENT_OPERATORS = void 0;
  constants.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
  constants.FLATTENABLE_KEYS = ["body", "expressions"];
  constants.FOR_INIT_KEYS = ["left", "init"];
  constants.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
  const LOGICAL_OPERATORS = constants.LOGICAL_OPERATORS = ["||", "&&", "??"];
  constants.UPDATE_OPERATORS = ["++", "--"];
  const BOOLEAN_NUMBER_BINARY_OPERATORS = constants.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
  const EQUALITY_BINARY_OPERATORS = constants.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
  const COMPARISON_BINARY_OPERATORS = constants.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
  const BOOLEAN_BINARY_OPERATORS = constants.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
  const NUMBER_BINARY_OPERATORS = constants.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
  constants.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];
  constants.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")];
  const BOOLEAN_UNARY_OPERATORS = constants.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
  const NUMBER_UNARY_OPERATORS = constants.NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
  const STRING_UNARY_OPERATORS = constants.STRING_UNARY_OPERATORS = ["typeof"];
  constants.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
  constants.INHERIT_KEYS = {
    optional: ["typeAnnotation", "typeParameters", "returnType"],
    force: ["start", "loc", "end"]
  };
  constants.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
  constants.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
  return constants;
}
var utils$3 = {};
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1) return utils$3;
  hasRequiredUtils$1 = 1;
  Object.defineProperty(utils$3, "__esModule", {
    value: true
  });
  utils$3.VISITOR_KEYS = utils$3.NODE_PARENT_VALIDATIONS = utils$3.NODE_FIELDS = utils$3.FLIPPED_ALIAS_KEYS = utils$3.DEPRECATED_KEYS = utils$3.BUILDER_KEYS = utils$3.ALIAS_KEYS = void 0;
  utils$3.arrayOf = arrayOf;
  utils$3.arrayOfType = arrayOfType;
  utils$3.assertEach = assertEach;
  utils$3.assertNodeOrValueType = assertNodeOrValueType;
  utils$3.assertNodeType = assertNodeType;
  utils$3.assertOneOf = assertOneOf;
  utils$3.assertOptionalChainStart = assertOptionalChainStart;
  utils$3.assertShape = assertShape;
  utils$3.assertValueType = assertValueType;
  utils$3.chain = chain;
  utils$3.default = defineType;
  utils$3.defineAliasedType = defineAliasedType;
  utils$3.typeIs = typeIs;
  utils$3.validate = validate2;
  utils$3.validateArrayOfType = validateArrayOfType;
  utils$3.validateOptional = validateOptional;
  utils$3.validateOptionalType = validateOptionalType;
  utils$3.validateType = validateType;
  var _is = requireIs();
  var _validate = requireValidate();
  const VISITOR_KEYS = utils$3.VISITOR_KEYS = {};
  const ALIAS_KEYS = utils$3.ALIAS_KEYS = {};
  const FLIPPED_ALIAS_KEYS = utils$3.FLIPPED_ALIAS_KEYS = {};
  const NODE_FIELDS = utils$3.NODE_FIELDS = {};
  const BUILDER_KEYS = utils$3.BUILDER_KEYS = {};
  const DEPRECATED_KEYS = utils$3.DEPRECATED_KEYS = {};
  const NODE_PARENT_VALIDATIONS = utils$3.NODE_PARENT_VALIDATIONS = {};
  function getType2(val) {
    if (Array.isArray(val)) {
      return "array";
    } else if (val === null) {
      return "null";
    } else {
      return typeof val;
    }
  }
  function validate2(validate3) {
    return {
      validate: validate3
    };
  }
  function typeIs(typeName) {
    return typeof typeName === "string" ? assertNodeType(typeName) : assertNodeType(...typeName);
  }
  function validateType(typeName) {
    return validate2(typeIs(typeName));
  }
  function validateOptional(validate3) {
    return {
      validate: validate3,
      optional: true
    };
  }
  function validateOptionalType(typeName) {
    return {
      validate: typeIs(typeName),
      optional: true
    };
  }
  function arrayOf(elementType) {
    return chain(assertValueType("array"), assertEach(elementType));
  }
  function arrayOfType(typeName) {
    return arrayOf(typeIs(typeName));
  }
  function validateArrayOfType(typeName) {
    return validate2(arrayOfType(typeName));
  }
  function assertEach(callback) {
    function validator2(node2, key2, val) {
      if (!Array.isArray(val)) return;
      for (let i = 0; i < val.length; i++) {
        const subkey = `${key2}[${i}]`;
        const v = val[i];
        callback(node2, subkey, v);
        if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node2, subkey, v);
      }
    }
    validator2.each = callback;
    return validator2;
  }
  function assertOneOf(...values) {
    function validate3(node2, key2, val) {
      if (values.indexOf(val) < 0) {
        throw new TypeError(`Property ${key2} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
      }
    }
    validate3.oneOf = values;
    return validate3;
  }
  function assertNodeType(...types2) {
    function validate3(node2, key2, val) {
      for (const type of types2) {
        if ((0, _is.default)(type, val)) {
          (0, _validate.validateChild)(node2, key2, val);
          return;
        }
      }
      throw new TypeError(`Property ${key2} of ${node2.type} expected node to be of a type ${JSON.stringify(types2)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
    }
    validate3.oneOfNodeTypes = types2;
    return validate3;
  }
  function assertNodeOrValueType(...types2) {
    function validate3(node2, key2, val) {
      for (const type of types2) {
        if (getType2(val) === type || (0, _is.default)(type, val)) {
          (0, _validate.validateChild)(node2, key2, val);
          return;
        }
      }
      throw new TypeError(`Property ${key2} of ${node2.type} expected node to be of a type ${JSON.stringify(types2)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
    }
    validate3.oneOfNodeOrValueTypes = types2;
    return validate3;
  }
  function assertValueType(type) {
    function validate3(node2, key2, val) {
      const valid = getType2(val) === type;
      if (!valid) {
        throw new TypeError(`Property ${key2} expected type of ${type} but got ${getType2(val)}`);
      }
    }
    validate3.type = type;
    return validate3;
  }
  function assertShape(shape) {
    function validate3(node2, key2, val) {
      const errors = [];
      for (const property of Object.keys(shape)) {
        try {
          (0, _validate.validateField)(node2, property, val[property], shape[property]);
        } catch (error2) {
          if (error2 instanceof TypeError) {
            errors.push(error2.message);
            continue;
          }
          throw error2;
        }
      }
      if (errors.length) {
        throw new TypeError(`Property ${key2} of ${node2.type} expected to have the following:
${errors.join("\n")}`);
      }
    }
    validate3.shapeOf = shape;
    return validate3;
  }
  function assertOptionalChainStart() {
    function validate3(node2) {
      var _current;
      let current = node2;
      while (node2) {
        const {
          type
        } = current;
        if (type === "OptionalCallExpression") {
          if (current.optional) return;
          current = current.callee;
          continue;
        }
        if (type === "OptionalMemberExpression") {
          if (current.optional) return;
          current = current.object;
          continue;
        }
        break;
      }
      throw new TypeError(`Non-optional ${node2.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);
    }
    return validate3;
  }
  function chain(...fns) {
    function validate3(...args) {
      for (const fn2 of fns) {
        fn2(...args);
      }
    }
    validate3.chainOf = fns;
    if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) {
      throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);
    }
    return validate3;
  }
  const validTypeOpts = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"];
  const validFieldKeys = ["default", "optional", "deprecated", "validate"];
  const store = {};
  function defineAliasedType(...aliases) {
    return (type, opts = {}) => {
      let defined = opts.aliases;
      if (!defined) {
        var _store$opts$inherits$, _defined;
        if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();
        (_defined = defined) != null ? _defined : defined = [];
        opts.aliases = defined;
      }
      const additional = aliases.filter((a) => !defined.includes(a));
      defined.unshift(...additional);
      defineType(type, opts);
    };
  }
  function defineType(type, opts = {}) {
    const inherits2 = opts.inherits && store[opts.inherits] || {};
    let fields2 = opts.fields;
    if (!fields2) {
      fields2 = {};
      if (inherits2.fields) {
        const keys2 = Object.getOwnPropertyNames(inherits2.fields);
        for (const key2 of keys2) {
          const field = inherits2.fields[key2];
          const def = field.default;
          if (Array.isArray(def) ? def.length > 0 : def && typeof def === "object") {
            throw new Error("field defaults can only be primitives or empty arrays currently");
          }
          fields2[key2] = {
            default: Array.isArray(def) ? [] : def,
            optional: field.optional,
            deprecated: field.deprecated,
            validate: field.validate
          };
        }
      }
    }
    const visitor = opts.visitor || inherits2.visitor || [];
    const aliases = opts.aliases || inherits2.aliases || [];
    const builder2 = opts.builder || inherits2.builder || opts.visitor || [];
    for (const k of Object.keys(opts)) {
      if (validTypeOpts.indexOf(k) === -1) {
        throw new Error(`Unknown type option "${k}" on ${type}`);
      }
    }
    if (opts.deprecatedAlias) {
      DEPRECATED_KEYS[opts.deprecatedAlias] = type;
    }
    for (const key2 of visitor.concat(builder2)) {
      fields2[key2] = fields2[key2] || {};
    }
    for (const key2 of Object.keys(fields2)) {
      const field = fields2[key2];
      if (field.default !== void 0 && builder2.indexOf(key2) === -1) {
        field.optional = true;
      }
      if (field.default === void 0) {
        field.default = null;
      } else if (!field.validate && field.default != null) {
        field.validate = assertValueType(getType2(field.default));
      }
      for (const k of Object.keys(field)) {
        if (validFieldKeys.indexOf(k) === -1) {
          throw new Error(`Unknown field key "${k}" on ${type}.${key2}`);
        }
      }
    }
    VISITOR_KEYS[type] = opts.visitor = visitor;
    BUILDER_KEYS[type] = opts.builder = builder2;
    NODE_FIELDS[type] = opts.fields = fields2;
    ALIAS_KEYS[type] = opts.aliases = aliases;
    aliases.forEach((alias) => {
      FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
      FLIPPED_ALIAS_KEYS[alias].push(type);
    });
    if (opts.validate) {
      NODE_PARENT_VALIDATIONS[type] = opts.validate;
    }
    store[type] = opts;
  }
  return utils$3;
}
var hasRequiredCore;
function requireCore() {
  if (hasRequiredCore) return core;
  hasRequiredCore = 1;
  Object.defineProperty(core, "__esModule", {
    value: true
  });
  core.patternLikeCommon = core.functionTypeAnnotationCommon = core.functionDeclarationCommon = core.functionCommon = core.classMethodOrPropertyCommon = core.classMethodOrDeclareMethodCommon = void 0;
  var _is = requireIs();
  var _isValidIdentifier = requireIsValidIdentifier();
  var _helperValidatorIdentifier2 = requireLib$Q();
  var _helperStringParser = requireLib$P();
  var _index = requireConstants();
  var _utils = requireUtils$1();
  const defineType = (0, _utils.defineAliasedType)("Standardized");
  defineType("ArrayExpression", {
    fields: {
      elements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
        default: !process.env.BABEL_TYPES_8_BREAKING ? [] : void 0
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  defineType("AssignmentExpression", {
    fields: {
      operator: {
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) {
            return (0, _utils.assertValueType)("string");
          }
          const identifier2 = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS);
          const pattern = (0, _utils.assertOneOf)("=");
          return function(node2, key2, val) {
            const validator2 = (0, _is.default)("Pattern", node2.left) ? pattern : identifier2;
            validator2(node2, key2, val);
          };
        }()
      },
      left: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Expression"]
  });
  defineType("BinaryExpression", {
    builder: ["operator", "left", "right"],
    fields: {
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS)
      },
      left: {
        validate: function() {
          const expression = (0, _utils.assertNodeType)("Expression");
          const inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
          const validator2 = Object.assign(function(node2, key2, val) {
            const validator3 = node2.operator === "in" ? inOp : expression;
            validator3(node2, key2, val);
          }, {
            oneOfNodeTypes: ["Expression", "PrivateName"]
          });
          return validator2;
        }()
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"]
  });
  defineType("InterpreterDirective", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("Directive", {
    visitor: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertNodeType)("DirectiveLiteral")
      }
    }
  });
  defineType("DirectiveLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("BlockStatement", {
    builder: ["body", "directives"],
    visitor: ["directives", "body"],
    fields: {
      directives: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),
        default: []
      },
      body: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "Block", "Statement"]
  });
  defineType("BreakStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  defineType("CallExpression", {
    visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
    builder: ["callee", "arguments"],
    aliases: ["Expression"],
    fields: Object.assign({
      callee: {
        validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier")
      },
      arguments: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
      }
    }, !process.env.BABEL_TYPES_8_BREAKING ? {
      optional: {
        validate: (0, _utils.assertOneOf)(true, false),
        optional: true
      }
    } : {}, {
      typeArguments: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
        optional: true
      }
    })
  });
  defineType("CatchClause", {
    visitor: ["param", "body"],
    fields: {
      param: {
        validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    },
    aliases: ["Scopable", "BlockParent"]
  });
  defineType("ConditionalExpression", {
    visitor: ["test", "consequent", "alternate"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      alternate: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression", "Conditional"]
  });
  defineType("ContinueStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  defineType("DebuggerStatement", {
    aliases: ["Statement"]
  });
  defineType("DoWhileStatement", {
    visitor: ["test", "body"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    },
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
  });
  defineType("EmptyStatement", {
    aliases: ["Statement"]
  });
  defineType("ExpressionStatement", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Statement", "ExpressionWrapper"]
  });
  defineType("File", {
    builder: ["program", "comments", "tokens"],
    visitor: ["program"],
    fields: {
      program: {
        validate: (0, _utils.assertNodeType)("Program")
      },
      comments: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {
        }, {
          each: {
            oneOfNodeTypes: ["CommentBlock", "CommentLine"]
          }
        }) : (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")),
        optional: true
      },
      tokens: {
        validate: (0, _utils.assertEach)(Object.assign(() => {
        }, {
          type: "any"
        })),
        optional: true
      }
    }
  });
  defineType("ForInStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("ForStatement", {
    visitor: ["init", "test", "update", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
    fields: {
      init: {
        validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"),
        optional: true
      },
      test: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      update: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  const functionCommon = () => ({
    params: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement")))
    },
    generator: {
      default: false
    },
    async: {
      default: false
    }
  });
  core.functionCommon = functionCommon;
  const functionTypeAnnotationCommon = () => ({
    returnType: {
      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
      optional: true
    }
  });
  core.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
  const functionDeclarationCommon = () => Object.assign({}, functionCommon(), {
    declare: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    id: {
      validate: (0, _utils.assertNodeType)("Identifier"),
      optional: true
    }
  });
  core.functionDeclarationCommon = functionDeclarationCommon;
  defineType("FunctionDeclaration", {
    builder: ["id", "params", "body", "generator", "async"],
    visitor: ["id", "params", "body", "returnType", "typeParameters"],
    fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    }),
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
    validate: function() {
      if (!process.env.BABEL_TYPES_8_BREAKING) return () => {
      };
      const identifier2 = (0, _utils.assertNodeType)("Identifier");
      return function(parent, key2, node2) {
        if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
          identifier2(node2, "id", node2.id);
        }
      };
    }()
  });
  defineType("FunctionExpression", {
    inherits: "FunctionDeclaration",
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    })
  });
  const patternLikeCommon = () => ({
    typeAnnotation: {
      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: true
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    }
  });
  core.patternLikeCommon = patternLikeCommon;
  defineType("Identifier", {
    builder: ["name"],
    visitor: ["typeAnnotation", "decorators"],
    aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
    fields: Object.assign({}, patternLikeCommon(), {
      name: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node2, key2, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (!(0, _isValidIdentifier.default)(val, false)) {
            throw new TypeError(`"${val}" is not a valid identifier name`);
          }
        }, {
          type: "string"
        }))
      }
    }),
    validate(parent, key2, node2) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      const match = /\.(\w+)$/.exec(key2);
      if (!match) return;
      const [, parentKey] = match;
      const nonComp = {
        computed: false
      };
      if (parentKey === "property") {
        if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
        if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
      } else if (parentKey === "key") {
        if ((0, _is.default)("Property", parent, nonComp)) return;
        if ((0, _is.default)("Method", parent, nonComp)) return;
      } else if (parentKey === "exported") {
        if ((0, _is.default)("ExportSpecifier", parent)) return;
      } else if (parentKey === "imported") {
        if ((0, _is.default)("ImportSpecifier", parent, {
          imported: node2
        })) return;
      } else if (parentKey === "meta") {
        if ((0, _is.default)("MetaProperty", parent, {
          meta: node2
        })) return;
      }
      if (((0, _helperValidatorIdentifier2.isKeyword)(node2.name) || (0, _helperValidatorIdentifier2.isReservedWord)(node2.name, false)) && node2.name !== "this") {
        throw new TypeError(`"${node2.name}" is not a valid identifier`);
      }
    }
  });
  defineType("IfStatement", {
    visitor: ["test", "consequent", "alternate"],
    aliases: ["Statement", "Conditional"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, _utils.assertNodeType)("Statement")
      },
      alternate: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("LabeledStatement", {
    visitor: ["label", "body"],
    aliases: ["Statement"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("StringLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("NumericLiteral", {
    builder: ["value"],
    deprecatedAlias: "NumberLiteral",
    fields: {
      value: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node2, key2, val) {
        }, {
          type: "number"
        }))
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("NullLiteral", {
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("BooleanLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("boolean")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("RegExpLiteral", {
    builder: ["pattern", "flags"],
    deprecatedAlias: "RegexLiteral",
    aliases: ["Expression", "Pureish", "Literal"],
    fields: {
      pattern: {
        validate: (0, _utils.assertValueType)("string")
      },
      flags: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node2, key2, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          const invalid = /[^gimsuy]/.exec(val);
          if (invalid) {
            throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
          }
        }, {
          type: "string"
        })),
        default: ""
      }
    }
  });
  defineType("LogicalExpression", {
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"],
    fields: {
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS)
      },
      left: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("MemberExpression", {
    builder: ["object", "property", "computed", ...!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : []],
    visitor: ["object", "property"],
    aliases: ["Expression", "LVal"],
    fields: Object.assign({
      object: {
        validate: (0, _utils.assertNodeType)("Expression", "Super")
      },
      property: {
        validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator2 = function(node2, key2, val) {
            const validator3 = node2.computed ? computed : normal;
            validator3(node2, key2, val);
          };
          validator2.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"];
          return validator2;
        }()
      },
      computed: {
        default: false
      }
    }, !process.env.BABEL_TYPES_8_BREAKING ? {
      optional: {
        validate: (0, _utils.assertOneOf)(true, false),
        optional: true
      }
    } : {})
  });
  defineType("NewExpression", {
    inherits: "CallExpression"
  });
  defineType("Program", {
    visitor: ["directives", "body"],
    builder: ["body", "directives", "sourceType", "interpreter"],
    fields: {
      sourceType: {
        validate: (0, _utils.assertOneOf)("script", "module"),
        default: "script"
      },
      interpreter: {
        validate: (0, _utils.assertNodeType)("InterpreterDirective"),
        default: null,
        optional: true
      },
      directives: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),
        default: []
      },
      body: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "Block"]
  });
  defineType("ObjectExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement")))
      }
    }
  });
  defineType("ObjectMethod", {
    builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      kind: Object.assign({
        validate: (0, _utils.assertOneOf)("method", "get", "set")
      }, !process.env.BABEL_TYPES_8_BREAKING ? {
        default: "method"
      } : {}),
      computed: {
        default: false
      },
      key: {
        validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator2 = function(node2, key2, val) {
            const validator3 = node2.computed ? computed : normal;
            validator3(node2, key2, val);
          };
          validator2.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"];
          return validator2;
        }()
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    }),
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
  });
  defineType("ObjectProperty", {
    builder: ["key", "value", "computed", "shorthand", ...!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : []],
    fields: {
      computed: {
        default: false
      },
      key: {
        validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator2 = Object.assign(function(node2, key2, val) {
            const validator3 = node2.computed ? computed : normal;
            validator3(node2, key2, val);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"]
          });
          return validator2;
        }()
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression", "PatternLike")
      },
      shorthand: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node2, key2, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && node2.computed) {
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
          }
        }, {
          type: "boolean"
        }), function(node2, key2, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && !(0, _is.default)("Identifier", node2.key)) {
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
          }
        }),
        default: false
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      }
    },
    visitor: ["key", "value", "decorators"],
    aliases: ["UserWhitespacable", "Property", "ObjectMember"],
    validate: function() {
      const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion");
      const expression = (0, _utils.assertNodeType)("Expression");
      return function(parent, key2, node2) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;
        const validator2 = (0, _is.default)("ObjectPattern", parent) ? pattern : expression;
        validator2(node2, "value", node2.value);
      };
    }()
  });
  defineType("RestElement", {
    visitor: ["argument", "typeAnnotation"],
    builder: ["argument"],
    aliases: ["LVal", "PatternLike"],
    deprecatedAlias: "RestProperty",
    fields: Object.assign({}, patternLikeCommon(), {
      argument: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      }
    }),
    validate(parent, key2) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      const match = /(\w+)\[(\d+)\]/.exec(key2);
      if (!match) throw new Error("Internal Babel error: malformed key.");
      const [, listKey, index2] = match;
      if (parent[listKey].length > +index2 + 1) {
        throw new TypeError(`RestElement must be last element of ${listKey}`);
      }
    }
  });
  defineType("ReturnStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      }
    }
  });
  defineType("SequenceExpression", {
    visitor: ["expressions"],
    fields: {
      expressions: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression")))
      }
    },
    aliases: ["Expression"]
  });
  defineType("ParenthesizedExpression", {
    visitor: ["expression"],
    aliases: ["Expression", "ExpressionWrapper"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("SwitchCase", {
    visitor: ["test", "consequent"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      consequent: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
      }
    }
  });
  defineType("SwitchStatement", {
    visitor: ["discriminant", "cases"],
    aliases: ["Statement", "BlockParent", "Scopable"],
    fields: {
      discriminant: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      cases: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase")))
      }
    }
  });
  defineType("ThisExpression", {
    aliases: ["Expression"]
  });
  defineType("ThrowStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("TryStatement", {
    visitor: ["block", "handler", "finalizer"],
    aliases: ["Statement"],
    fields: {
      block: {
        validate: (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node2) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (!node2.handler && !node2.finalizer) {
            throw new TypeError("TryStatement expects either a handler or finalizer, or both");
          }
        }, {
          oneOfNodeTypes: ["BlockStatement"]
        }))
      },
      handler: {
        optional: true,
        validate: (0, _utils.assertNodeType)("CatchClause")
      },
      finalizer: {
        optional: true,
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    }
  });
  defineType("UnaryExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: true
      },
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["UnaryLike", "Expression"]
  });
  defineType("UpdateExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: false
      },
      argument: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Expression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression")
      },
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["Expression"]
  });
  defineType("VariableDeclaration", {
    builder: ["kind", "declarations"],
    visitor: ["declarations"],
    aliases: ["Statement", "Declaration"],
    fields: {
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      kind: {
        validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using")
      },
      declarations: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("VariableDeclarator")))
      }
    },
    validate(parent, key2, node2) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      if (!(0, _is.default)("ForXStatement", parent, {
        left: node2
      })) return;
      if (node2.declarations.length !== 1) {
        throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
      }
    }
  });
  defineType("VariableDeclarator", {
    visitor: ["id", "init"],
    fields: {
      id: {
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) {
            return (0, _utils.assertNodeType)("LVal");
          }
          const normal = (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern");
          const without = (0, _utils.assertNodeType)("Identifier");
          return function(node2, key2, val) {
            const validator2 = node2.init ? normal : without;
            validator2(node2, key2, val);
          };
        }()
      },
      definite: {
        optional: true,
        validate: (0, _utils.assertValueType)("boolean")
      },
      init: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("WhileStatement", {
    visitor: ["test", "body"],
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("WithStatement", {
    visitor: ["object", "body"],
    aliases: ["Statement"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("AssignmentPattern", {
    visitor: ["left", "right", "decorators"],
    builder: ["left", "right"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      left: {
        validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      }
    })
  });
  defineType("ArrayPattern", {
    visitor: ["elements", "typeAnnotation"],
    builder: ["elements"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      elements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal")))
      }
    })
  });
  defineType("ArrowFunctionExpression", {
    builder: ["params", "body", "async"],
    visitor: ["params", "body", "returnType", "typeParameters"],
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      expression: {
        validate: (0, _utils.assertValueType)("boolean")
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement", "Expression")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    })
  });
  defineType("ClassBody", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock")))
      }
    }
  });
  defineType("ClassExpression", {
    builder: ["id", "superClass", "body", "decorators"],
    visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
    aliases: ["Scopable", "Class", "Expression"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      },
      superTypeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      },
      implements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      mixins: {
        validate: (0, _utils.assertNodeType)("InterfaceExtends"),
        optional: true
      }
    }
  });
  defineType("ClassDeclaration", {
    inherits: "ClassExpression",
    aliases: ["Scopable", "Class", "Statement", "Declaration"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      },
      superTypeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      },
      implements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      mixins: {
        validate: (0, _utils.assertNodeType)("InterfaceExtends"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      abstract: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      }
    },
    validate: function() {
      const identifier2 = (0, _utils.assertNodeType)("Identifier");
      return function(parent, key2, node2) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;
        if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
          identifier2(node2, "id", node2.id);
        }
      };
    }()
  });
  defineType("ExportAllDeclaration", {
    builder: ["source"],
    visitor: ["source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      },
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")),
      attributes: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      }
    }
  });
  defineType("ExportDefaultDeclaration", {
    visitor: ["declaration"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        validate: (0, _utils.assertNodeType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression")
      },
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))
    }
  });
  defineType("ExportNamedDeclaration", {
    builder: ["declaration", "specifiers", "source"],
    visitor: ["declaration", "specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node2, key2, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && node2.specifiers.length) {
            throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
          }
        }, {
          oneOfNodeTypes: ["Declaration"]
        }), function(node2, key2, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && node2.source) {
            throw new TypeError("Cannot export a declaration from a source");
          }
        })
      },
      attributes: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      specifiers: {
        default: [],
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)(function() {
          const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
          const sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
          if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;
          return function(node2, key2, val) {
            const validator2 = node2.source ? sourced : sourceless;
            validator2(node2, key2, val);
          };
        }()))
      },
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral"),
        optional: true
      },
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
    }
  });
  defineType("ExportSpecifier", {
    visitor: ["local", "exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      exportKind: {
        validate: (0, _utils.assertOneOf)("type", "value"),
        optional: true
      }
    }
  });
  defineType("ForOfStatement", {
    visitor: ["left", "right", "body"],
    builder: ["left", "right", "body", "await"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) {
            return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
          }
          const declaration = (0, _utils.assertNodeType)("VariableDeclaration");
          const lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return function(node2, key2, val) {
            if ((0, _is.default)("VariableDeclaration", val)) {
              declaration(node2, key2, val);
            } else {
              lval(node2, key2, val);
            }
          };
        }()
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      },
      await: {
        default: false
      }
    }
  });
  defineType("ImportDeclaration", {
    builder: ["specifiers", "source"],
    visitor: ["specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"],
    fields: {
      attributes: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      module: {
        optional: true,
        validate: (0, _utils.assertValueType)("boolean")
      },
      phase: {
        default: null,
        validate: (0, _utils.assertOneOf)("source", "defer")
      },
      specifiers: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
      },
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      },
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
        optional: true
      }
    }
  });
  defineType("ImportDefaultSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("ImportNamespaceSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("ImportSpecifier", {
    visitor: ["local", "imported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      imported: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
        optional: true
      }
    }
  });
  defineType("ImportExpression", {
    visitor: ["source", "options"],
    aliases: ["Expression"],
    fields: {
      phase: {
        default: null,
        validate: (0, _utils.assertOneOf)("source", "defer")
      },
      source: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      options: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      }
    }
  });
  defineType("MetaProperty", {
    visitor: ["meta", "property"],
    aliases: ["Expression"],
    fields: {
      meta: {
        validate: (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node2, key2, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          let property;
          switch (val.name) {
            case "function":
              property = "sent";
              break;
            case "new":
              property = "target";
              break;
            case "import":
              property = "meta";
              break;
          }
          if (!(0, _is.default)("Identifier", node2.property, {
            name: property
          })) {
            throw new TypeError("Unrecognised MetaProperty");
          }
        }, {
          oneOfNodeTypes: ["Identifier"]
        }))
      },
      property: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  const classMethodOrPropertyCommon = () => ({
    abstract: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    accessibility: {
      validate: (0, _utils.assertOneOf)("public", "private", "protected"),
      optional: true
    },
    static: {
      default: false
    },
    override: {
      default: false
    },
    computed: {
      default: false
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    key: {
      validate: (0, _utils.chain)(function() {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
        const computed = (0, _utils.assertNodeType)("Expression");
        return function(node2, key2, val) {
          const validator2 = node2.computed ? computed : normal;
          validator2(node2, key2, val);
        };
      }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression"))
    }
  });
  core.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
  const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {
    params: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty")))
    },
    kind: {
      validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"),
      default: "method"
    },
    access: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    }
  });
  core.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
  defineType("ClassMethod", {
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
    builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    })
  });
  defineType("ObjectPattern", {
    visitor: ["properties", "typeAnnotation", "decorators"],
    builder: ["properties"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      properties: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("RestElement", "ObjectProperty")))
      }
    })
  });
  defineType("SpreadElement", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    deprecatedAlias: "SpreadProperty",
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("Super", {
    aliases: ["Expression"]
  });
  defineType("TaggedTemplateExpression", {
    visitor: ["tag", "quasi", "typeParameters"],
    builder: ["tag", "quasi"],
    aliases: ["Expression"],
    fields: {
      tag: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      quasi: {
        validate: (0, _utils.assertNodeType)("TemplateLiteral")
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      }
    }
  });
  defineType("TemplateElement", {
    builder: ["value", "tail"],
    fields: {
      value: {
        validate: (0, _utils.chain)((0, _utils.assertShape)({
          raw: {
            validate: (0, _utils.assertValueType)("string")
          },
          cooked: {
            validate: (0, _utils.assertValueType)("string"),
            optional: true
          }
        }), function templateElementCookedValidator(node2) {
          const raw = node2.value.raw;
          let unterminatedCalled = false;
          const error2 = () => {
            throw new Error("Internal @babel/types error.");
          };
          const {
            str,
            firstInvalidLoc
          } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, {
            unterminated() {
              unterminatedCalled = true;
            },
            strictNumericEscape: error2,
            invalidEscapeSequence: error2,
            numericSeparatorInEscapeSequence: error2,
            unexpectedNumericSeparator: error2,
            invalidDigit: error2,
            invalidCodePoint: error2
          });
          if (!unterminatedCalled) throw new Error("Invalid raw");
          node2.value.cooked = firstInvalidLoc ? null : str;
        })
      },
      tail: {
        default: false
      }
    }
  });
  defineType("TemplateLiteral", {
    visitor: ["quasis", "expressions"],
    aliases: ["Expression", "Literal"],
    fields: {
      quasis: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TemplateElement")))
      },
      expressions: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node2, key2, val) {
          if (node2.quasis.length !== val.length + 1) {
            throw new TypeError(`Number of ${node2.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node2.quasis.length}`);
          }
        })
      }
    }
  });
  defineType("YieldExpression", {
    builder: ["argument", "delegate"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      delegate: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node2, key2, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && !node2.argument) {
            throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
          }
        }, {
          type: "boolean"
        })),
        default: false
      },
      argument: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("AwaitExpression", {
    builder: ["argument"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("Import", {
    aliases: ["Expression"]
  });
  defineType("BigIntLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("ExportNamespaceSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("OptionalMemberExpression", {
    builder: ["object", "property", "computed", "optional"],
    visitor: ["object", "property"],
    aliases: ["Expression"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      property: {
        validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator2 = Object.assign(function(node2, key2, val) {
            const validator3 = node2.computed ? computed : normal;
            validator3(node2, key2, val);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier"]
          });
          return validator2;
        }()
      },
      computed: {
        default: false
      },
      optional: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
      }
    }
  });
  defineType("OptionalCallExpression", {
    visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
    builder: ["callee", "arguments", "optional"],
    aliases: ["Expression"],
    fields: {
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      arguments: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
      },
      optional: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
      },
      typeArguments: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
        optional: true
      }
    }
  });
  defineType("ClassProperty", {
    visitor: ["key", "value", "typeAnnotation", "decorators"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property"],
    fields: Object.assign({}, classMethodOrPropertyCommon(), {
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    })
  });
  defineType("ClassAccessorProperty", {
    visitor: ["key", "value", "typeAnnotation", "decorators"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property", "Accessor"],
    fields: Object.assign({}, classMethodOrPropertyCommon(), {
      key: {
        validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          return function(node2, key2, val) {
            const validator2 = node2.computed ? computed : normal;
            validator2(node2, key2, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName"))
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    })
  });
  defineType("ClassPrivateProperty", {
    visitor: ["key", "value", "decorators", "typeAnnotation"],
    builder: ["key", "value", "decorators", "static"],
    aliases: ["Property", "Private"],
    fields: {
      key: {
        validate: (0, _utils.assertNodeType)("PrivateName")
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      static: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    }
  });
  defineType("ClassPrivateMethod", {
    builder: ["kind", "key", "params", "body", "static"],
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
    fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
      kind: {
        validate: (0, _utils.assertOneOf)("get", "set", "method"),
        default: "method"
      },
      key: {
        validate: (0, _utils.assertNodeType)("PrivateName")
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    })
  });
  defineType("PrivateName", {
    visitor: ["id"],
    aliases: ["Private"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("StaticBlock", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "FunctionParent"]
  });
  return core;
}
var flow$1 = {};
var hasRequiredFlow$1;
function requireFlow$1() {
  if (hasRequiredFlow$1) return flow$1;
  hasRequiredFlow$1 = 1;
  var _utils = requireUtils$1();
  const defineType = (0, _utils.defineAliasedType)("Flow");
  const defineInterfaceishType = (name) => {
    const isDeclareClass = name === "DeclareClass";
    defineType(name, {
      builder: ["id", "typeParameters", "extends", "body"],
      visitor: ["id", "typeParameters", "extends", ...isDeclareClass ? ["mixins", "implements"] : [], "body"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: Object.assign({
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
        extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends"))
      }, isDeclareClass ? {
        mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
        implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements"))
      } : {}, {
        body: (0, _utils.validateType)("ObjectTypeAnnotation")
      })
    });
  };
  defineType("AnyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ArrayTypeAnnotation", {
    visitor: ["elementType"],
    aliases: ["FlowType"],
    fields: {
      elementType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("BooleanTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("BooleanLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("NullLiteralTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ClassImplements", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineInterfaceishType("DeclareClass");
  defineType("DeclareFunction", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
    }
  });
  defineInterfaceishType("DeclareInterface");
  defineType("DeclareModule", {
    builder: ["id", "body", "kind"],
    visitor: ["id", "body"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
      body: (0, _utils.validateType)("BlockStatement"),
      kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))
    }
  });
  defineType("DeclareModuleExports", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
    }
  });
  defineType("DeclareTypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("DeclareOpaqueType", {
    visitor: ["id", "typeParameters", "supertype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, _utils.validateOptionalType)("FlowType"),
      impltype: (0, _utils.validateOptionalType)("FlowType")
    }
  });
  defineType("DeclareVariable", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("DeclareExportDeclaration", {
    visitor: ["declaration", "specifiers", "source"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      declaration: (0, _utils.validateOptionalType)("Flow"),
      specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])),
      source: (0, _utils.validateOptionalType)("StringLiteral"),
      default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("DeclareExportAllDeclaration", {
    visitor: ["source"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      source: (0, _utils.validateType)("StringLiteral"),
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
    }
  });
  defineType("DeclaredPredicate", {
    visitor: ["value"],
    aliases: ["FlowPredicate"],
    fields: {
      value: (0, _utils.validateType)("Flow")
    }
  });
  defineType("ExistsTypeAnnotation", {
    aliases: ["FlowType"]
  });
  defineType("FunctionTypeAnnotation", {
    visitor: ["typeParameters", "params", "rest", "returnType"],
    aliases: ["FlowType"],
    fields: {
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      params: (0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")),
      rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
      this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
      returnType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("FunctionTypeParam", {
    visitor: ["name", "typeAnnotation"],
    fields: {
      name: (0, _utils.validateOptionalType)("Identifier"),
      typeAnnotation: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("GenericTypeAnnotation", {
    visitor: ["id", "typeParameters"],
    aliases: ["FlowType"],
    fields: {
      id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineType("InferredPredicate", {
    aliases: ["FlowPredicate"]
  });
  defineType("InterfaceExtends", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineInterfaceishType("InterfaceDeclaration");
  defineType("InterfaceTypeAnnotation", {
    visitor: ["extends", "body"],
    aliases: ["FlowType"],
    fields: {
      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
      body: (0, _utils.validateType)("ObjectTypeAnnotation")
    }
  });
  defineType("IntersectionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("MixedTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("EmptyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("NullableTypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowType"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("NumberLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("number"))
    }
  });
  defineType("NumberTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ObjectTypeAnnotation", {
    visitor: ["properties", "indexers", "callProperties", "internalSlots"],
    aliases: ["FlowType"],
    builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
    fields: {
      properties: (0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])),
      indexers: {
        validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"),
        optional: true,
        default: []
      },
      callProperties: {
        validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"),
        optional: true,
        default: []
      },
      internalSlots: {
        validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"),
        optional: true,
        default: []
      },
      exact: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      },
      inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeInternalSlot", {
    visitor: ["id", "value", "optional", "static", "method"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      value: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeCallProperty", {
    visitor: ["value"],
    aliases: ["UserWhitespacable"],
    fields: {
      value: (0, _utils.validateType)("FlowType"),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeIndexer", {
    visitor: ["id", "key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, _utils.validateOptionalType)("Identifier"),
      key: (0, _utils.validateType)("FlowType"),
      value: (0, _utils.validateType)("FlowType"),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      variance: (0, _utils.validateOptionalType)("Variance")
    }
  });
  defineType("ObjectTypeProperty", {
    visitor: ["key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      key: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
      value: (0, _utils.validateType)("FlowType"),
      kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      variance: (0, _utils.validateOptionalType)("Variance"),
      method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeSpreadProperty", {
    visitor: ["argument"],
    aliases: ["UserWhitespacable"],
    fields: {
      argument: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("OpaqueType", {
    visitor: ["id", "typeParameters", "supertype", "impltype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, _utils.validateOptionalType)("FlowType"),
      impltype: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("QualifiedTypeIdentifier", {
    visitor: ["id", "qualification"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      qualification: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"])
    }
  });
  defineType("StringLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("string"))
    }
  });
  defineType("StringTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("SymbolTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ThisTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("TupleTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("TypeofTypeAnnotation", {
    visitor: ["argument"],
    aliases: ["FlowType"],
    fields: {
      argument: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeCastExpression", {
    visitor: ["expression", "typeAnnotation"],
    aliases: ["ExpressionWrapper", "Expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
    }
  });
  defineType("TypeParameter", {
    visitor: ["bound", "default", "variance"],
    fields: {
      name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
      bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
      default: (0, _utils.validateOptionalType)("FlowType"),
      variance: (0, _utils.validateOptionalType)("Variance")
    }
  });
  defineType("TypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))
    }
  });
  defineType("TypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("UnionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("Variance", {
    builder: ["kind"],
    fields: {
      kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))
    }
  });
  defineType("VoidTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("EnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      body: (0, _utils.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"])
    }
  });
  defineType("EnumBooleanBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumNumberBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumStringBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumSymbolBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumBooleanMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("BooleanLiteral")
    }
  });
  defineType("EnumNumberMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("NumericLiteral")
    }
  });
  defineType("EnumStringMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("StringLiteral")
    }
  });
  defineType("EnumDefaultedMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("IndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, _utils.validateType)("FlowType"),
      indexType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("OptionalIndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, _utils.validateType)("FlowType"),
      indexType: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  return flow$1;
}
var jsx$1 = {};
var hasRequiredJsx$1;
function requireJsx$1() {
  if (hasRequiredJsx$1) return jsx$1;
  hasRequiredJsx$1 = 1;
  var _utils = requireUtils$1();
  const defineType = (0, _utils.defineAliasedType)("JSX");
  defineType("JSXAttribute", {
    visitor: ["name", "value"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
      },
      value: {
        optional: true,
        validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
      }
    }
  });
  defineType("JSXClosingElement", {
    visitor: ["name"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      }
    }
  });
  defineType("JSXElement", {
    builder: ["openingElement", "closingElement", "children", "selfClosing"],
    visitor: ["openingElement", "children", "closingElement"],
    aliases: ["Immutable", "Expression"],
    fields: Object.assign({
      openingElement: {
        validate: (0, _utils.assertNodeType)("JSXOpeningElement")
      },
      closingElement: {
        optional: true,
        validate: (0, _utils.assertNodeType)("JSXClosingElement")
      },
      children: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
      }
    }, {
      selfClosing: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      }
    })
  });
  defineType("JSXEmptyExpression", {});
  defineType("JSXExpressionContainer", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression")
      }
    }
  });
  defineType("JSXSpreadChild", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("JSXIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("JSXMemberExpression", {
    visitor: ["object", "property"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
      },
      property: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      }
    }
  });
  defineType("JSXNamespacedName", {
    visitor: ["namespace", "name"],
    fields: {
      namespace: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      },
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      }
    }
  });
  defineType("JSXOpeningElement", {
    builder: ["name", "attributes", "selfClosing"],
    visitor: ["name", "attributes"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      },
      selfClosing: {
        default: false
      },
      attributes: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      }
    }
  });
  defineType("JSXSpreadAttribute", {
    visitor: ["argument"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("JSXText", {
    aliases: ["Immutable"],
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("JSXFragment", {
    builder: ["openingFragment", "closingFragment", "children"],
    visitor: ["openingFragment", "children", "closingFragment"],
    aliases: ["Immutable", "Expression"],
    fields: {
      openingFragment: {
        validate: (0, _utils.assertNodeType)("JSXOpeningFragment")
      },
      closingFragment: {
        validate: (0, _utils.assertNodeType)("JSXClosingFragment")
      },
      children: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
      }
    }
  });
  defineType("JSXOpeningFragment", {
    aliases: ["Immutable"]
  });
  defineType("JSXClosingFragment", {
    aliases: ["Immutable"]
  });
  return jsx$1;
}
var misc$1 = {};
var placeholders = {};
var hasRequiredPlaceholders;
function requirePlaceholders() {
  if (hasRequiredPlaceholders) return placeholders;
  hasRequiredPlaceholders = 1;
  Object.defineProperty(placeholders, "__esModule", {
    value: true
  });
  placeholders.PLACEHOLDERS_FLIPPED_ALIAS = placeholders.PLACEHOLDERS_ALIAS = placeholders.PLACEHOLDERS = void 0;
  var _utils = requireUtils$1();
  const PLACEHOLDERS = placeholders.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
  const PLACEHOLDERS_ALIAS = placeholders.PLACEHOLDERS_ALIAS = {
    Declaration: ["Statement"],
    Pattern: ["PatternLike", "LVal"]
  };
  for (const type of PLACEHOLDERS) {
    const alias = _utils.ALIAS_KEYS[type];
    if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;
  }
  const PLACEHOLDERS_FLIPPED_ALIAS = placeholders.PLACEHOLDERS_FLIPPED_ALIAS = {};
  Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
    PLACEHOLDERS_ALIAS[type].forEach((alias) => {
      if (!hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {
        PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
      }
      PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
    });
  });
  return placeholders;
}
var hasRequiredMisc$1;
function requireMisc$1() {
  if (hasRequiredMisc$1) return misc$1;
  hasRequiredMisc$1 = 1;
  var _utils = requireUtils$1();
  var _placeholders = requirePlaceholders();
  const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
  {
    defineType("Noop", {
      visitor: []
    });
  }
  defineType("Placeholder", {
    visitor: [],
    builder: ["expectedNode", "name"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      expectedNode: {
        validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)
      }
    }
  });
  defineType("V8IntrinsicIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  return misc$1;
}
var experimental = {};
var hasRequiredExperimental;
function requireExperimental() {
  if (hasRequiredExperimental) return experimental;
  hasRequiredExperimental = 1;
  var _utils = requireUtils$1();
  (0, _utils.default)("ArgumentPlaceholder", {});
  (0, _utils.default)("BindExpression", {
    visitor: ["object", "callee"],
    aliases: ["Expression"],
    fields: !process.env.BABEL_TYPES_8_BREAKING ? {
      object: {
        validate: Object.assign(() => {
        }, {
          oneOfNodeTypes: ["Expression"]
        })
      },
      callee: {
        validate: Object.assign(() => {
        }, {
          oneOfNodeTypes: ["Expression"]
        })
      }
    } : {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  (0, _utils.default)("ImportAttribute", {
    visitor: ["key", "value"],
    fields: {
      key: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      value: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      }
    }
  });
  (0, _utils.default)("Decorator", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  (0, _utils.default)("DoExpression", {
    visitor: ["body"],
    builder: ["body", "async"],
    aliases: ["Expression"],
    fields: {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      async: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      }
    }
  });
  (0, _utils.default)("ExportDefaultSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  (0, _utils.default)("RecordExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectProperty", "SpreadElement")))
      }
    }
  });
  (0, _utils.default)("TupleExpression", {
    fields: {
      elements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement"))),
        default: []
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  (0, _utils.default)("DecimalLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  (0, _utils.default)("ModuleExpression", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, _utils.assertNodeType)("Program")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("TopicReference", {
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelineTopicExpression", {
    builder: ["expression"],
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelineBareFunction", {
    builder: ["callee"],
    visitor: ["callee"],
    fields: {
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelinePrimaryTopicReference", {
    aliases: ["Expression"]
  });
  return experimental;
}
var typescript$2 = {};
var hasRequiredTypescript$2;
function requireTypescript$2() {
  if (hasRequiredTypescript$2) return typescript$2;
  hasRequiredTypescript$2 = 1;
  var _utils = requireUtils$1();
  var _core = requireCore();
  var _is = requireIs();
  const defineType = (0, _utils.defineAliasedType)("TypeScript");
  const bool = (0, _utils.assertValueType)("boolean");
  const tSFunctionTypeAnnotationCommon = () => ({
    returnType: {
      validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
      optional: true
    }
  });
  defineType("TSParameterProperty", {
    aliases: ["LVal"],
    visitor: ["parameter"],
    fields: {
      accessibility: {
        validate: (0, _utils.assertOneOf)("public", "private", "protected"),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      parameter: {
        validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern")
      },
      override: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      }
    }
  });
  defineType("TSDeclareFunction", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())
  });
  defineType("TSDeclareMethod", {
    visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())
  });
  defineType("TSQualifiedName", {
    aliases: ["TSEntityName"],
    visitor: ["left", "right"],
    fields: {
      left: (0, _utils.validateType)("TSEntityName"),
      right: (0, _utils.validateType)("Identifier")
    }
  });
  const signatureDeclarationCommon = () => ({
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
    ["parameters"]: (0, _utils.validateArrayOfType)(["ArrayPattern", "Identifier", "ObjectPattern", "RestElement"]),
    ["typeAnnotation"]: (0, _utils.validateOptionalType)("TSTypeAnnotation")
  });
  const callConstructSignatureDeclaration = {
    aliases: ["TSTypeElement"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"],
    fields: signatureDeclarationCommon()
  };
  defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
  defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
  const namedTypeElementCommon = () => ({
    key: (0, _utils.validateType)("Expression"),
    computed: {
      default: false
    },
    optional: (0, _utils.validateOptional)(bool)
  });
  defineType("TSPropertySignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeAnnotation"],
    fields: Object.assign({}, namedTypeElementCommon(), {
      readonly: (0, _utils.validateOptional)(bool),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
      kind: {
        validate: (0, _utils.assertOneOf)("get", "set")
      }
    })
  });
  defineType("TSMethodSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
    fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), {
      kind: {
        validate: (0, _utils.assertOneOf)("method", "get", "set")
      }
    })
  });
  defineType("TSIndexSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["parameters", "typeAnnotation"],
    fields: {
      readonly: (0, _utils.validateOptional)(bool),
      static: (0, _utils.validateOptional)(bool),
      parameters: (0, _utils.validateArrayOfType)("Identifier"),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
    }
  });
  const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
  for (const type of tsKeywordTypes) {
    defineType(type, {
      aliases: ["TSType", "TSBaseType"],
      visitor: [],
      fields: {}
    });
  }
  defineType("TSThisType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: [],
    fields: {}
  });
  const fnOrCtrBase = {
    aliases: ["TSType"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"]
  };
  defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, {
    fields: signatureDeclarationCommon()
  }));
  defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, {
    fields: Object.assign({}, signatureDeclarationCommon(), {
      abstract: (0, _utils.validateOptional)(bool)
    })
  }));
  defineType("TSTypeReference", {
    aliases: ["TSType"],
    visitor: ["typeName", "typeParameters"],
    fields: {
      typeName: (0, _utils.validateType)("TSEntityName"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  defineType("TSTypePredicate", {
    aliases: ["TSType"],
    visitor: ["parameterName", "typeAnnotation"],
    builder: ["parameterName", "typeAnnotation", "asserts"],
    fields: {
      parameterName: (0, _utils.validateType)(["Identifier", "TSThisType"]),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
      asserts: (0, _utils.validateOptional)(bool)
    }
  });
  defineType("TSTypeQuery", {
    aliases: ["TSType"],
    visitor: ["exprName", "typeParameters"],
    fields: {
      exprName: (0, _utils.validateType)(["TSEntityName", "TSImportType"]),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  defineType("TSTypeLiteral", {
    aliases: ["TSType"],
    visitor: ["members"],
    fields: {
      members: (0, _utils.validateArrayOfType)("TSTypeElement")
    }
  });
  defineType("TSArrayType", {
    aliases: ["TSType"],
    visitor: ["elementType"],
    fields: {
      elementType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSTupleType", {
    aliases: ["TSType"],
    visitor: ["elementTypes"],
    fields: {
      elementTypes: (0, _utils.validateArrayOfType)(["TSType", "TSNamedTupleMember"])
    }
  });
  defineType("TSOptionalType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSRestType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSNamedTupleMember", {
    visitor: ["label", "elementType"],
    builder: ["label", "elementType", "optional"],
    fields: {
      label: (0, _utils.validateType)("Identifier"),
      optional: {
        validate: bool,
        default: false
      },
      elementType: (0, _utils.validateType)("TSType")
    }
  });
  const unionOrIntersection = {
    aliases: ["TSType"],
    visitor: ["types"],
    fields: {
      types: (0, _utils.validateArrayOfType)("TSType")
    }
  };
  defineType("TSUnionType", unionOrIntersection);
  defineType("TSIntersectionType", unionOrIntersection);
  defineType("TSConditionalType", {
    aliases: ["TSType"],
    visitor: ["checkType", "extendsType", "trueType", "falseType"],
    fields: {
      checkType: (0, _utils.validateType)("TSType"),
      extendsType: (0, _utils.validateType)("TSType"),
      trueType: (0, _utils.validateType)("TSType"),
      falseType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSInferType", {
    aliases: ["TSType"],
    visitor: ["typeParameter"],
    fields: {
      typeParameter: (0, _utils.validateType)("TSTypeParameter")
    }
  });
  defineType("TSParenthesizedType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSTypeOperator", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSIndexedAccessType", {
    aliases: ["TSType"],
    visitor: ["objectType", "indexType"],
    fields: {
      objectType: (0, _utils.validateType)("TSType"),
      indexType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSMappedType", {
    aliases: ["TSType"],
    visitor: ["typeParameter", "typeAnnotation", "nameType"],
    fields: {
      readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
      typeParameter: (0, _utils.validateType)("TSTypeParameter"),
      optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
      typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
      nameType: (0, _utils.validateOptionalType)("TSType")
    }
  });
  defineType("TSLiteralType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: ["literal"],
    fields: {
      literal: {
        validate: function() {
          const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral");
          const unaryOperator = (0, _utils.assertOneOf)("-");
          const literal2 = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function validator2(parent, key2, node2) {
            if ((0, _is.default)("UnaryExpression", node2)) {
              unaryOperator(node2, "operator", node2.operator);
              unaryExpression(node2, "argument", node2.argument);
            } else {
              literal2(parent, key2, node2);
            }
          }
          validator2.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"];
          return validator2;
        }()
      }
    }
  });
  defineType("TSExpressionWithTypeArguments", {
    aliases: ["TSType"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, _utils.validateType)("TSEntityName"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  defineType("TSInterfaceDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "extends", "body"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),
      body: (0, _utils.validateType)("TSInterfaceBody")
    }
  });
  defineType("TSInterfaceBody", {
    visitor: ["body"],
    fields: {
      body: (0, _utils.validateArrayOfType)("TSTypeElement")
    }
  });
  defineType("TSTypeAliasDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "typeAnnotation"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSInstantiationExpression", {
    aliases: ["Expression"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  const TSTypeExpression = {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression", "typeAnnotation"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  };
  defineType("TSAsExpression", TSTypeExpression);
  defineType("TSSatisfiesExpression", TSTypeExpression);
  defineType("TSTypeAssertion", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["typeAnnotation", "expression"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType"),
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSEnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "members"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      const: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)("Identifier"),
      members: (0, _utils.validateArrayOfType)("TSEnumMember"),
      initializer: (0, _utils.validateOptionalType)("Expression")
    }
  });
  defineType("TSEnumMember", {
    visitor: ["id", "initializer"],
    fields: {
      id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
      initializer: (0, _utils.validateOptionalType)("Expression")
    }
  });
  defineType("TSModuleDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      global: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
      body: (0, _utils.validateType)(["TSModuleBlock", "TSModuleDeclaration"])
    }
  });
  defineType("TSModuleBlock", {
    aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],
    visitor: ["body"],
    fields: {
      body: (0, _utils.validateArrayOfType)("Statement")
    }
  });
  defineType("TSImportType", {
    aliases: ["TSType"],
    visitor: ["argument", "qualifier", "typeParameters"],
    fields: {
      argument: (0, _utils.validateType)("StringLiteral"),
      qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"),
      options: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      }
    }
  });
  defineType("TSImportEqualsDeclaration", {
    aliases: ["Statement"],
    visitor: ["id", "moduleReference"],
    fields: {
      isExport: (0, _utils.validate)(bool),
      id: (0, _utils.validateType)("Identifier"),
      moduleReference: (0, _utils.validateType)(["TSEntityName", "TSExternalModuleReference"]),
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "value"),
        optional: true
      }
    }
  });
  defineType("TSExternalModuleReference", {
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("StringLiteral")
    }
  });
  defineType("TSNonNullExpression", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSExportAssignment", {
    aliases: ["Statement"],
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSNamespaceExportDeclaration", {
    aliases: ["Statement"],
    visitor: ["id"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("TSTypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TSType")
      }
    }
  });
  defineType("TSTypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType")))
      }
    }
  });
  defineType("TSTypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter")))
      }
    }
  });
  defineType("TSTypeParameter", {
    builder: ["constraint", "default", "name"],
    visitor: ["constraint", "default"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      },
      in: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      out: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      const: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      constraint: {
        validate: (0, _utils.assertNodeType)("TSType"),
        optional: true
      },
      default: {
        validate: (0, _utils.assertNodeType)("TSType"),
        optional: true
      }
    }
  });
  return typescript$2;
}
var deprecatedAliases = {};
var hasRequiredDeprecatedAliases;
function requireDeprecatedAliases() {
  if (hasRequiredDeprecatedAliases) return deprecatedAliases;
  hasRequiredDeprecatedAliases = 1;
  Object.defineProperty(deprecatedAliases, "__esModule", {
    value: true
  });
  deprecatedAliases.DEPRECATED_ALIASES = void 0;
  deprecatedAliases.DEPRECATED_ALIASES = {
    ModuleDeclaration: "ImportOrExportDeclaration"
  };
  return deprecatedAliases;
}
var hasRequiredDefinitions;
function requireDefinitions() {
  if (hasRequiredDefinitions) return definitions;
  hasRequiredDefinitions = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "ALIAS_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.ALIAS_KEYS;
      }
    });
    Object.defineProperty(exports, "BUILDER_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.BUILDER_KEYS;
      }
    });
    Object.defineProperty(exports, "DEPRECATED_ALIASES", {
      enumerable: true,
      get: function() {
        return _deprecatedAliases.DEPRECATED_ALIASES;
      }
    });
    Object.defineProperty(exports, "DEPRECATED_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.DEPRECATED_KEYS;
      }
    });
    Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.FLIPPED_ALIAS_KEYS;
      }
    });
    Object.defineProperty(exports, "NODE_FIELDS", {
      enumerable: true,
      get: function() {
        return _utils.NODE_FIELDS;
      }
    });
    Object.defineProperty(exports, "NODE_PARENT_VALIDATIONS", {
      enumerable: true,
      get: function() {
        return _utils.NODE_PARENT_VALIDATIONS;
      }
    });
    Object.defineProperty(exports, "PLACEHOLDERS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS;
      }
    });
    Object.defineProperty(exports, "PLACEHOLDERS_ALIAS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS_ALIAS;
      }
    });
    Object.defineProperty(exports, "PLACEHOLDERS_FLIPPED_ALIAS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
      }
    });
    exports.TYPES = void 0;
    Object.defineProperty(exports, "VISITOR_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.VISITOR_KEYS;
      }
    });
    var _toFastProperties = requireToFastProperties();
    requireCore();
    requireFlow$1();
    requireJsx$1();
    requireMisc$1();
    requireExperimental();
    requireTypescript$2();
    var _utils = requireUtils$1();
    var _placeholders = requirePlaceholders();
    var _deprecatedAliases = requireDeprecatedAliases();
    Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
      _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
    });
    _toFastProperties(_utils.VISITOR_KEYS);
    _toFastProperties(_utils.ALIAS_KEYS);
    _toFastProperties(_utils.FLIPPED_ALIAS_KEYS);
    _toFastProperties(_utils.NODE_FIELDS);
    _toFastProperties(_utils.BUILDER_KEYS);
    _toFastProperties(_utils.DEPRECATED_KEYS);
    _toFastProperties(_placeholders.PLACEHOLDERS_ALIAS);
    _toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);
    exports.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
  })(definitions);
  return definitions;
}
var hasRequiredValidate;
function requireValidate() {
  if (hasRequiredValidate) return validate$1;
  hasRequiredValidate = 1;
  Object.defineProperty(validate$1, "__esModule", {
    value: true
  });
  validate$1.default = validate2;
  validate$1.validateChild = validateChild;
  validate$1.validateField = validateField;
  var _index = requireDefinitions();
  function validate2(node2, key2, val) {
    if (!node2) return;
    const fields2 = _index.NODE_FIELDS[node2.type];
    if (!fields2) return;
    const field = fields2[key2];
    validateField(node2, key2, val, field);
    validateChild(node2, key2, val);
  }
  function validateField(node2, key2, val, field) {
    if (!(field != null && field.validate)) return;
    if (field.optional && val == null) return;
    field.validate(node2, key2, val);
  }
  function validateChild(node2, key2, val) {
    if (val == null) return;
    const validate3 = _index.NODE_PARENT_VALIDATIONS[val.type];
    if (!validate3) return;
    validate3(node2, key2, val);
  }
  return validate$1;
}
var hasRequiredValidateNode;
function requireValidateNode() {
  if (hasRequiredValidateNode) return validateNode;
  hasRequiredValidateNode = 1;
  Object.defineProperty(validateNode, "__esModule", {
    value: true
  });
  validateNode.default = validateNode$1;
  var _validate = requireValidate();
  var _index = requireLib$O();
  function validateNode$1(node2) {
    const keys2 = _index.BUILDER_KEYS[node2.type];
    for (const key2 of keys2) {
      (0, _validate.default)(node2, key2, node2[key2]);
    }
    return node2;
  }
  return validateNode;
}
var hasRequiredGenerated$2;
function requireGenerated$2() {
  if (hasRequiredGenerated$2) return generated$2;
  hasRequiredGenerated$2 = 1;
  Object.defineProperty(generated$2, "__esModule", {
    value: true
  });
  generated$2.anyTypeAnnotation = anyTypeAnnotation;
  generated$2.argumentPlaceholder = argumentPlaceholder;
  generated$2.arrayExpression = arrayExpression;
  generated$2.arrayPattern = arrayPattern;
  generated$2.arrayTypeAnnotation = arrayTypeAnnotation;
  generated$2.arrowFunctionExpression = arrowFunctionExpression;
  generated$2.assignmentExpression = assignmentExpression;
  generated$2.assignmentPattern = assignmentPattern;
  generated$2.awaitExpression = awaitExpression;
  generated$2.bigIntLiteral = bigIntLiteral;
  generated$2.binaryExpression = binaryExpression;
  generated$2.bindExpression = bindExpression;
  generated$2.blockStatement = blockStatement;
  generated$2.booleanLiteral = booleanLiteral;
  generated$2.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
  generated$2.booleanTypeAnnotation = booleanTypeAnnotation;
  generated$2.breakStatement = breakStatement;
  generated$2.callExpression = callExpression;
  generated$2.catchClause = catchClause;
  generated$2.classAccessorProperty = classAccessorProperty;
  generated$2.classBody = classBody;
  generated$2.classDeclaration = classDeclaration;
  generated$2.classExpression = classExpression;
  generated$2.classImplements = classImplements;
  generated$2.classMethod = classMethod;
  generated$2.classPrivateMethod = classPrivateMethod;
  generated$2.classPrivateProperty = classPrivateProperty;
  generated$2.classProperty = classProperty;
  generated$2.conditionalExpression = conditionalExpression;
  generated$2.continueStatement = continueStatement;
  generated$2.debuggerStatement = debuggerStatement;
  generated$2.decimalLiteral = decimalLiteral;
  generated$2.declareClass = declareClass;
  generated$2.declareExportAllDeclaration = declareExportAllDeclaration;
  generated$2.declareExportDeclaration = declareExportDeclaration;
  generated$2.declareFunction = declareFunction;
  generated$2.declareInterface = declareInterface;
  generated$2.declareModule = declareModule;
  generated$2.declareModuleExports = declareModuleExports;
  generated$2.declareOpaqueType = declareOpaqueType;
  generated$2.declareTypeAlias = declareTypeAlias;
  generated$2.declareVariable = declareVariable;
  generated$2.declaredPredicate = declaredPredicate;
  generated$2.decorator = decorator;
  generated$2.directive = directive;
  generated$2.directiveLiteral = directiveLiteral;
  generated$2.doExpression = doExpression;
  generated$2.doWhileStatement = doWhileStatement;
  generated$2.emptyStatement = emptyStatement;
  generated$2.emptyTypeAnnotation = emptyTypeAnnotation;
  generated$2.enumBooleanBody = enumBooleanBody;
  generated$2.enumBooleanMember = enumBooleanMember;
  generated$2.enumDeclaration = enumDeclaration;
  generated$2.enumDefaultedMember = enumDefaultedMember;
  generated$2.enumNumberBody = enumNumberBody;
  generated$2.enumNumberMember = enumNumberMember;
  generated$2.enumStringBody = enumStringBody;
  generated$2.enumStringMember = enumStringMember;
  generated$2.enumSymbolBody = enumSymbolBody;
  generated$2.existsTypeAnnotation = existsTypeAnnotation;
  generated$2.exportAllDeclaration = exportAllDeclaration;
  generated$2.exportDefaultDeclaration = exportDefaultDeclaration;
  generated$2.exportDefaultSpecifier = exportDefaultSpecifier;
  generated$2.exportNamedDeclaration = exportNamedDeclaration;
  generated$2.exportNamespaceSpecifier = exportNamespaceSpecifier;
  generated$2.exportSpecifier = exportSpecifier;
  generated$2.expressionStatement = expressionStatement;
  generated$2.file = file2;
  generated$2.forInStatement = forInStatement;
  generated$2.forOfStatement = forOfStatement;
  generated$2.forStatement = forStatement;
  generated$2.functionDeclaration = functionDeclaration;
  generated$2.functionExpression = functionExpression;
  generated$2.functionTypeAnnotation = functionTypeAnnotation;
  generated$2.functionTypeParam = functionTypeParam;
  generated$2.genericTypeAnnotation = genericTypeAnnotation;
  generated$2.identifier = identifier2;
  generated$2.ifStatement = ifStatement;
  generated$2.import = _import;
  generated$2.importAttribute = importAttribute;
  generated$2.importDeclaration = importDeclaration;
  generated$2.importDefaultSpecifier = importDefaultSpecifier;
  generated$2.importExpression = importExpression;
  generated$2.importNamespaceSpecifier = importNamespaceSpecifier;
  generated$2.importSpecifier = importSpecifier;
  generated$2.indexedAccessType = indexedAccessType;
  generated$2.inferredPredicate = inferredPredicate;
  generated$2.interfaceDeclaration = interfaceDeclaration;
  generated$2.interfaceExtends = interfaceExtends;
  generated$2.interfaceTypeAnnotation = interfaceTypeAnnotation;
  generated$2.interpreterDirective = interpreterDirective;
  generated$2.intersectionTypeAnnotation = intersectionTypeAnnotation;
  generated$2.jSXAttribute = generated$2.jsxAttribute = jsxAttribute;
  generated$2.jSXClosingElement = generated$2.jsxClosingElement = jsxClosingElement;
  generated$2.jSXClosingFragment = generated$2.jsxClosingFragment = jsxClosingFragment;
  generated$2.jSXElement = generated$2.jsxElement = jsxElement;
  generated$2.jSXEmptyExpression = generated$2.jsxEmptyExpression = jsxEmptyExpression;
  generated$2.jSXExpressionContainer = generated$2.jsxExpressionContainer = jsxExpressionContainer;
  generated$2.jSXFragment = generated$2.jsxFragment = jsxFragment;
  generated$2.jSXIdentifier = generated$2.jsxIdentifier = jsxIdentifier;
  generated$2.jSXMemberExpression = generated$2.jsxMemberExpression = jsxMemberExpression;
  generated$2.jSXNamespacedName = generated$2.jsxNamespacedName = jsxNamespacedName;
  generated$2.jSXOpeningElement = generated$2.jsxOpeningElement = jsxOpeningElement;
  generated$2.jSXOpeningFragment = generated$2.jsxOpeningFragment = jsxOpeningFragment;
  generated$2.jSXSpreadAttribute = generated$2.jsxSpreadAttribute = jsxSpreadAttribute;
  generated$2.jSXSpreadChild = generated$2.jsxSpreadChild = jsxSpreadChild;
  generated$2.jSXText = generated$2.jsxText = jsxText;
  generated$2.labeledStatement = labeledStatement;
  generated$2.logicalExpression = logicalExpression;
  generated$2.memberExpression = memberExpression;
  generated$2.metaProperty = metaProperty;
  generated$2.mixedTypeAnnotation = mixedTypeAnnotation;
  generated$2.moduleExpression = moduleExpression;
  generated$2.newExpression = newExpression;
  generated$2.noop = noop2;
  generated$2.nullLiteral = nullLiteral;
  generated$2.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
  generated$2.nullableTypeAnnotation = nullableTypeAnnotation;
  generated$2.numberLiteral = NumberLiteral;
  generated$2.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
  generated$2.numberTypeAnnotation = numberTypeAnnotation;
  generated$2.numericLiteral = numericLiteral;
  generated$2.objectExpression = objectExpression;
  generated$2.objectMethod = objectMethod;
  generated$2.objectPattern = objectPattern;
  generated$2.objectProperty = objectProperty;
  generated$2.objectTypeAnnotation = objectTypeAnnotation;
  generated$2.objectTypeCallProperty = objectTypeCallProperty;
  generated$2.objectTypeIndexer = objectTypeIndexer;
  generated$2.objectTypeInternalSlot = objectTypeInternalSlot;
  generated$2.objectTypeProperty = objectTypeProperty;
  generated$2.objectTypeSpreadProperty = objectTypeSpreadProperty;
  generated$2.opaqueType = opaqueType;
  generated$2.optionalCallExpression = optionalCallExpression;
  generated$2.optionalIndexedAccessType = optionalIndexedAccessType;
  generated$2.optionalMemberExpression = optionalMemberExpression;
  generated$2.parenthesizedExpression = parenthesizedExpression;
  generated$2.pipelineBareFunction = pipelineBareFunction;
  generated$2.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
  generated$2.pipelineTopicExpression = pipelineTopicExpression;
  generated$2.placeholder = placeholder2;
  generated$2.privateName = privateName;
  generated$2.program = program;
  generated$2.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
  generated$2.recordExpression = recordExpression;
  generated$2.regExpLiteral = regExpLiteral;
  generated$2.regexLiteral = RegexLiteral;
  generated$2.restElement = restElement;
  generated$2.restProperty = RestProperty;
  generated$2.returnStatement = returnStatement;
  generated$2.sequenceExpression = sequenceExpression;
  generated$2.spreadElement = spreadElement;
  generated$2.spreadProperty = SpreadProperty;
  generated$2.staticBlock = staticBlock;
  generated$2.stringLiteral = stringLiteral;
  generated$2.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
  generated$2.stringTypeAnnotation = stringTypeAnnotation;
  generated$2.super = _super;
  generated$2.switchCase = switchCase;
  generated$2.switchStatement = switchStatement;
  generated$2.symbolTypeAnnotation = symbolTypeAnnotation;
  generated$2.taggedTemplateExpression = taggedTemplateExpression;
  generated$2.templateElement = templateElement;
  generated$2.templateLiteral = templateLiteral;
  generated$2.thisExpression = thisExpression;
  generated$2.thisTypeAnnotation = thisTypeAnnotation;
  generated$2.throwStatement = throwStatement;
  generated$2.topicReference = topicReference;
  generated$2.tryStatement = tryStatement;
  generated$2.tSAnyKeyword = generated$2.tsAnyKeyword = tsAnyKeyword;
  generated$2.tSArrayType = generated$2.tsArrayType = tsArrayType;
  generated$2.tSAsExpression = generated$2.tsAsExpression = tsAsExpression;
  generated$2.tSBigIntKeyword = generated$2.tsBigIntKeyword = tsBigIntKeyword;
  generated$2.tSBooleanKeyword = generated$2.tsBooleanKeyword = tsBooleanKeyword;
  generated$2.tSCallSignatureDeclaration = generated$2.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
  generated$2.tSConditionalType = generated$2.tsConditionalType = tsConditionalType;
  generated$2.tSConstructSignatureDeclaration = generated$2.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
  generated$2.tSConstructorType = generated$2.tsConstructorType = tsConstructorType;
  generated$2.tSDeclareFunction = generated$2.tsDeclareFunction = tsDeclareFunction;
  generated$2.tSDeclareMethod = generated$2.tsDeclareMethod = tsDeclareMethod;
  generated$2.tSEnumDeclaration = generated$2.tsEnumDeclaration = tsEnumDeclaration;
  generated$2.tSEnumMember = generated$2.tsEnumMember = tsEnumMember;
  generated$2.tSExportAssignment = generated$2.tsExportAssignment = tsExportAssignment;
  generated$2.tSExpressionWithTypeArguments = generated$2.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
  generated$2.tSExternalModuleReference = generated$2.tsExternalModuleReference = tsExternalModuleReference;
  generated$2.tSFunctionType = generated$2.tsFunctionType = tsFunctionType;
  generated$2.tSImportEqualsDeclaration = generated$2.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
  generated$2.tSImportType = generated$2.tsImportType = tsImportType;
  generated$2.tSIndexSignature = generated$2.tsIndexSignature = tsIndexSignature;
  generated$2.tSIndexedAccessType = generated$2.tsIndexedAccessType = tsIndexedAccessType;
  generated$2.tSInferType = generated$2.tsInferType = tsInferType;
  generated$2.tSInstantiationExpression = generated$2.tsInstantiationExpression = tsInstantiationExpression;
  generated$2.tSInterfaceBody = generated$2.tsInterfaceBody = tsInterfaceBody;
  generated$2.tSInterfaceDeclaration = generated$2.tsInterfaceDeclaration = tsInterfaceDeclaration;
  generated$2.tSIntersectionType = generated$2.tsIntersectionType = tsIntersectionType;
  generated$2.tSIntrinsicKeyword = generated$2.tsIntrinsicKeyword = tsIntrinsicKeyword;
  generated$2.tSLiteralType = generated$2.tsLiteralType = tsLiteralType;
  generated$2.tSMappedType = generated$2.tsMappedType = tsMappedType;
  generated$2.tSMethodSignature = generated$2.tsMethodSignature = tsMethodSignature;
  generated$2.tSModuleBlock = generated$2.tsModuleBlock = tsModuleBlock;
  generated$2.tSModuleDeclaration = generated$2.tsModuleDeclaration = tsModuleDeclaration;
  generated$2.tSNamedTupleMember = generated$2.tsNamedTupleMember = tsNamedTupleMember;
  generated$2.tSNamespaceExportDeclaration = generated$2.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
  generated$2.tSNeverKeyword = generated$2.tsNeverKeyword = tsNeverKeyword;
  generated$2.tSNonNullExpression = generated$2.tsNonNullExpression = tsNonNullExpression;
  generated$2.tSNullKeyword = generated$2.tsNullKeyword = tsNullKeyword;
  generated$2.tSNumberKeyword = generated$2.tsNumberKeyword = tsNumberKeyword;
  generated$2.tSObjectKeyword = generated$2.tsObjectKeyword = tsObjectKeyword;
  generated$2.tSOptionalType = generated$2.tsOptionalType = tsOptionalType;
  generated$2.tSParameterProperty = generated$2.tsParameterProperty = tsParameterProperty;
  generated$2.tSParenthesizedType = generated$2.tsParenthesizedType = tsParenthesizedType;
  generated$2.tSPropertySignature = generated$2.tsPropertySignature = tsPropertySignature;
  generated$2.tSQualifiedName = generated$2.tsQualifiedName = tsQualifiedName;
  generated$2.tSRestType = generated$2.tsRestType = tsRestType;
  generated$2.tSSatisfiesExpression = generated$2.tsSatisfiesExpression = tsSatisfiesExpression;
  generated$2.tSStringKeyword = generated$2.tsStringKeyword = tsStringKeyword;
  generated$2.tSSymbolKeyword = generated$2.tsSymbolKeyword = tsSymbolKeyword;
  generated$2.tSThisType = generated$2.tsThisType = tsThisType;
  generated$2.tSTupleType = generated$2.tsTupleType = tsTupleType;
  generated$2.tSTypeAliasDeclaration = generated$2.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
  generated$2.tSTypeAnnotation = generated$2.tsTypeAnnotation = tsTypeAnnotation;
  generated$2.tSTypeAssertion = generated$2.tsTypeAssertion = tsTypeAssertion;
  generated$2.tSTypeLiteral = generated$2.tsTypeLiteral = tsTypeLiteral;
  generated$2.tSTypeOperator = generated$2.tsTypeOperator = tsTypeOperator;
  generated$2.tSTypeParameter = generated$2.tsTypeParameter = tsTypeParameter;
  generated$2.tSTypeParameterDeclaration = generated$2.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
  generated$2.tSTypeParameterInstantiation = generated$2.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
  generated$2.tSTypePredicate = generated$2.tsTypePredicate = tsTypePredicate;
  generated$2.tSTypeQuery = generated$2.tsTypeQuery = tsTypeQuery;
  generated$2.tSTypeReference = generated$2.tsTypeReference = tsTypeReference;
  generated$2.tSUndefinedKeyword = generated$2.tsUndefinedKeyword = tsUndefinedKeyword;
  generated$2.tSUnionType = generated$2.tsUnionType = tsUnionType;
  generated$2.tSUnknownKeyword = generated$2.tsUnknownKeyword = tsUnknownKeyword;
  generated$2.tSVoidKeyword = generated$2.tsVoidKeyword = tsVoidKeyword;
  generated$2.tupleExpression = tupleExpression;
  generated$2.tupleTypeAnnotation = tupleTypeAnnotation;
  generated$2.typeAlias = typeAlias;
  generated$2.typeAnnotation = typeAnnotation;
  generated$2.typeCastExpression = typeCastExpression;
  generated$2.typeParameter = typeParameter;
  generated$2.typeParameterDeclaration = typeParameterDeclaration;
  generated$2.typeParameterInstantiation = typeParameterInstantiation;
  generated$2.typeofTypeAnnotation = typeofTypeAnnotation;
  generated$2.unaryExpression = unaryExpression;
  generated$2.unionTypeAnnotation = unionTypeAnnotation;
  generated$2.updateExpression = updateExpression;
  generated$2.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
  generated$2.variableDeclaration = variableDeclaration;
  generated$2.variableDeclarator = variableDeclarator;
  generated$2.variance = variance;
  generated$2.voidTypeAnnotation = voidTypeAnnotation;
  generated$2.whileStatement = whileStatement;
  generated$2.withStatement = withStatement;
  generated$2.yieldExpression = yieldExpression;
  var _validateNode = requireValidateNode();
  var _deprecationWarning = requireDeprecationWarning();
  function arrayExpression(elements = []) {
    return (0, _validateNode.default)({
      type: "ArrayExpression",
      elements
    });
  }
  function assignmentExpression(operator, left, right) {
    return (0, _validateNode.default)({
      type: "AssignmentExpression",
      operator,
      left,
      right
    });
  }
  function binaryExpression(operator, left, right) {
    return (0, _validateNode.default)({
      type: "BinaryExpression",
      operator,
      left,
      right
    });
  }
  function interpreterDirective(value2) {
    return (0, _validateNode.default)({
      type: "InterpreterDirective",
      value: value2
    });
  }
  function directive(value2) {
    return (0, _validateNode.default)({
      type: "Directive",
      value: value2
    });
  }
  function directiveLiteral(value2) {
    return (0, _validateNode.default)({
      type: "DirectiveLiteral",
      value: value2
    });
  }
  function blockStatement(body, directives = []) {
    return (0, _validateNode.default)({
      type: "BlockStatement",
      body,
      directives
    });
  }
  function breakStatement(label = null) {
    return (0, _validateNode.default)({
      type: "BreakStatement",
      label
    });
  }
  function callExpression(callee, _arguments) {
    return (0, _validateNode.default)({
      type: "CallExpression",
      callee,
      arguments: _arguments
    });
  }
  function catchClause(param = null, body) {
    return (0, _validateNode.default)({
      type: "CatchClause",
      param,
      body
    });
  }
  function conditionalExpression(test2, consequent, alternate) {
    return (0, _validateNode.default)({
      type: "ConditionalExpression",
      test: test2,
      consequent,
      alternate
    });
  }
  function continueStatement(label = null) {
    return (0, _validateNode.default)({
      type: "ContinueStatement",
      label
    });
  }
  function debuggerStatement() {
    return {
      type: "DebuggerStatement"
    };
  }
  function doWhileStatement(test2, body) {
    return (0, _validateNode.default)({
      type: "DoWhileStatement",
      test: test2,
      body
    });
  }
  function emptyStatement() {
    return {
      type: "EmptyStatement"
    };
  }
  function expressionStatement(expression) {
    return (0, _validateNode.default)({
      type: "ExpressionStatement",
      expression
    });
  }
  function file2(program2, comments2 = null, tokens = null) {
    return (0, _validateNode.default)({
      type: "File",
      program: program2,
      comments: comments2,
      tokens
    });
  }
  function forInStatement(left, right, body) {
    return (0, _validateNode.default)({
      type: "ForInStatement",
      left,
      right,
      body
    });
  }
  function forStatement(init = null, test2 = null, update = null, body) {
    return (0, _validateNode.default)({
      type: "ForStatement",
      init,
      test: test2,
      update,
      body
    });
  }
  function functionDeclaration(id = null, params, body, generator = false, async2 = false) {
    return (0, _validateNode.default)({
      type: "FunctionDeclaration",
      id,
      params,
      body,
      generator,
      async: async2
    });
  }
  function functionExpression(id = null, params, body, generator = false, async2 = false) {
    return (0, _validateNode.default)({
      type: "FunctionExpression",
      id,
      params,
      body,
      generator,
      async: async2
    });
  }
  function identifier2(name) {
    return (0, _validateNode.default)({
      type: "Identifier",
      name
    });
  }
  function ifStatement(test2, consequent, alternate = null) {
    return (0, _validateNode.default)({
      type: "IfStatement",
      test: test2,
      consequent,
      alternate
    });
  }
  function labeledStatement(label, body) {
    return (0, _validateNode.default)({
      type: "LabeledStatement",
      label,
      body
    });
  }
  function stringLiteral(value2) {
    return (0, _validateNode.default)({
      type: "StringLiteral",
      value: value2
    });
  }
  function numericLiteral(value2) {
    return (0, _validateNode.default)({
      type: "NumericLiteral",
      value: value2
    });
  }
  function nullLiteral() {
    return {
      type: "NullLiteral"
    };
  }
  function booleanLiteral(value2) {
    return (0, _validateNode.default)({
      type: "BooleanLiteral",
      value: value2
    });
  }
  function regExpLiteral(pattern, flags = "") {
    return (0, _validateNode.default)({
      type: "RegExpLiteral",
      pattern,
      flags
    });
  }
  function logicalExpression(operator, left, right) {
    return (0, _validateNode.default)({
      type: "LogicalExpression",
      operator,
      left,
      right
    });
  }
  function memberExpression(object, property, computed = false, optional = null) {
    return (0, _validateNode.default)({
      type: "MemberExpression",
      object,
      property,
      computed,
      optional
    });
  }
  function newExpression(callee, _arguments) {
    return (0, _validateNode.default)({
      type: "NewExpression",
      callee,
      arguments: _arguments
    });
  }
  function program(body, directives = [], sourceType = "script", interpreter = null) {
    return (0, _validateNode.default)({
      type: "Program",
      body,
      directives,
      sourceType,
      interpreter
    });
  }
  function objectExpression(properties) {
    return (0, _validateNode.default)({
      type: "ObjectExpression",
      properties
    });
  }
  function objectMethod(kind = "method", key2, params, body, computed = false, generator = false, async2 = false) {
    return (0, _validateNode.default)({
      type: "ObjectMethod",
      kind,
      key: key2,
      params,
      body,
      computed,
      generator,
      async: async2
    });
  }
  function objectProperty(key2, value2, computed = false, shorthand = false, decorators2 = null) {
    return (0, _validateNode.default)({
      type: "ObjectProperty",
      key: key2,
      value: value2,
      computed,
      shorthand,
      decorators: decorators2
    });
  }
  function restElement(argument) {
    return (0, _validateNode.default)({
      type: "RestElement",
      argument
    });
  }
  function returnStatement(argument = null) {
    return (0, _validateNode.default)({
      type: "ReturnStatement",
      argument
    });
  }
  function sequenceExpression(expressions2) {
    return (0, _validateNode.default)({
      type: "SequenceExpression",
      expressions: expressions2
    });
  }
  function parenthesizedExpression(expression) {
    return (0, _validateNode.default)({
      type: "ParenthesizedExpression",
      expression
    });
  }
  function switchCase(test2 = null, consequent) {
    return (0, _validateNode.default)({
      type: "SwitchCase",
      test: test2,
      consequent
    });
  }
  function switchStatement(discriminant, cases) {
    return (0, _validateNode.default)({
      type: "SwitchStatement",
      discriminant,
      cases
    });
  }
  function thisExpression() {
    return {
      type: "ThisExpression"
    };
  }
  function throwStatement(argument) {
    return (0, _validateNode.default)({
      type: "ThrowStatement",
      argument
    });
  }
  function tryStatement(block, handler = null, finalizer = null) {
    return (0, _validateNode.default)({
      type: "TryStatement",
      block,
      handler,
      finalizer
    });
  }
  function unaryExpression(operator, argument, prefix = true) {
    return (0, _validateNode.default)({
      type: "UnaryExpression",
      operator,
      argument,
      prefix
    });
  }
  function updateExpression(operator, argument, prefix = false) {
    return (0, _validateNode.default)({
      type: "UpdateExpression",
      operator,
      argument,
      prefix
    });
  }
  function variableDeclaration(kind, declarations) {
    return (0, _validateNode.default)({
      type: "VariableDeclaration",
      kind,
      declarations
    });
  }
  function variableDeclarator(id, init = null) {
    return (0, _validateNode.default)({
      type: "VariableDeclarator",
      id,
      init
    });
  }
  function whileStatement(test2, body) {
    return (0, _validateNode.default)({
      type: "WhileStatement",
      test: test2,
      body
    });
  }
  function withStatement(object, body) {
    return (0, _validateNode.default)({
      type: "WithStatement",
      object,
      body
    });
  }
  function assignmentPattern(left, right) {
    return (0, _validateNode.default)({
      type: "AssignmentPattern",
      left,
      right
    });
  }
  function arrayPattern(elements) {
    return (0, _validateNode.default)({
      type: "ArrayPattern",
      elements
    });
  }
  function arrowFunctionExpression(params, body, async2 = false) {
    return (0, _validateNode.default)({
      type: "ArrowFunctionExpression",
      params,
      body,
      async: async2,
      expression: null
    });
  }
  function classBody(body) {
    return (0, _validateNode.default)({
      type: "ClassBody",
      body
    });
  }
  function classExpression(id = null, superClass = null, body, decorators2 = null) {
    return (0, _validateNode.default)({
      type: "ClassExpression",
      id,
      superClass,
      body,
      decorators: decorators2
    });
  }
  function classDeclaration(id = null, superClass = null, body, decorators2 = null) {
    return (0, _validateNode.default)({
      type: "ClassDeclaration",
      id,
      superClass,
      body,
      decorators: decorators2
    });
  }
  function exportAllDeclaration(source2) {
    return (0, _validateNode.default)({
      type: "ExportAllDeclaration",
      source: source2
    });
  }
  function exportDefaultDeclaration(declaration) {
    return (0, _validateNode.default)({
      type: "ExportDefaultDeclaration",
      declaration
    });
  }
  function exportNamedDeclaration(declaration = null, specifiers = [], source2 = null) {
    return (0, _validateNode.default)({
      type: "ExportNamedDeclaration",
      declaration,
      specifiers,
      source: source2
    });
  }
  function exportSpecifier(local, exported) {
    return (0, _validateNode.default)({
      type: "ExportSpecifier",
      local,
      exported
    });
  }
  function forOfStatement(left, right, body, _await = false) {
    return (0, _validateNode.default)({
      type: "ForOfStatement",
      left,
      right,
      body,
      await: _await
    });
  }
  function importDeclaration(specifiers, source2) {
    return (0, _validateNode.default)({
      type: "ImportDeclaration",
      specifiers,
      source: source2
    });
  }
  function importDefaultSpecifier(local) {
    return (0, _validateNode.default)({
      type: "ImportDefaultSpecifier",
      local
    });
  }
  function importNamespaceSpecifier(local) {
    return (0, _validateNode.default)({
      type: "ImportNamespaceSpecifier",
      local
    });
  }
  function importSpecifier(local, imported) {
    return (0, _validateNode.default)({
      type: "ImportSpecifier",
      local,
      imported
    });
  }
  function importExpression(source2, options2 = null) {
    return (0, _validateNode.default)({
      type: "ImportExpression",
      source: source2,
      options: options2
    });
  }
  function metaProperty(meta, property) {
    return (0, _validateNode.default)({
      type: "MetaProperty",
      meta,
      property
    });
  }
  function classMethod(kind = "method", key2, params, body, computed = false, _static = false, generator = false, async2 = false) {
    return (0, _validateNode.default)({
      type: "ClassMethod",
      kind,
      key: key2,
      params,
      body,
      computed,
      static: _static,
      generator,
      async: async2
    });
  }
  function objectPattern(properties) {
    return (0, _validateNode.default)({
      type: "ObjectPattern",
      properties
    });
  }
  function spreadElement(argument) {
    return (0, _validateNode.default)({
      type: "SpreadElement",
      argument
    });
  }
  function _super() {
    return {
      type: "Super"
    };
  }
  function taggedTemplateExpression(tag, quasi) {
    return (0, _validateNode.default)({
      type: "TaggedTemplateExpression",
      tag,
      quasi
    });
  }
  function templateElement(value2, tail = false) {
    return (0, _validateNode.default)({
      type: "TemplateElement",
      value: value2,
      tail
    });
  }
  function templateLiteral(quasis, expressions2) {
    return (0, _validateNode.default)({
      type: "TemplateLiteral",
      quasis,
      expressions: expressions2
    });
  }
  function yieldExpression(argument = null, delegate = false) {
    return (0, _validateNode.default)({
      type: "YieldExpression",
      argument,
      delegate
    });
  }
  function awaitExpression(argument) {
    return (0, _validateNode.default)({
      type: "AwaitExpression",
      argument
    });
  }
  function _import() {
    return {
      type: "Import"
    };
  }
  function bigIntLiteral(value2) {
    return (0, _validateNode.default)({
      type: "BigIntLiteral",
      value: value2
    });
  }
  function exportNamespaceSpecifier(exported) {
    return (0, _validateNode.default)({
      type: "ExportNamespaceSpecifier",
      exported
    });
  }
  function optionalMemberExpression(object, property, computed = false, optional) {
    return (0, _validateNode.default)({
      type: "OptionalMemberExpression",
      object,
      property,
      computed,
      optional
    });
  }
  function optionalCallExpression(callee, _arguments, optional) {
    return (0, _validateNode.default)({
      type: "OptionalCallExpression",
      callee,
      arguments: _arguments,
      optional
    });
  }
  function classProperty(key2, value2 = null, typeAnnotation2 = null, decorators2 = null, computed = false, _static = false) {
    return (0, _validateNode.default)({
      type: "ClassProperty",
      key: key2,
      value: value2,
      typeAnnotation: typeAnnotation2,
      decorators: decorators2,
      computed,
      static: _static
    });
  }
  function classAccessorProperty(key2, value2 = null, typeAnnotation2 = null, decorators2 = null, computed = false, _static = false) {
    return (0, _validateNode.default)({
      type: "ClassAccessorProperty",
      key: key2,
      value: value2,
      typeAnnotation: typeAnnotation2,
      decorators: decorators2,
      computed,
      static: _static
    });
  }
  function classPrivateProperty(key2, value2 = null, decorators2 = null, _static = false) {
    return (0, _validateNode.default)({
      type: "ClassPrivateProperty",
      key: key2,
      value: value2,
      decorators: decorators2,
      static: _static
    });
  }
  function classPrivateMethod(kind = "method", key2, params, body, _static = false) {
    return (0, _validateNode.default)({
      type: "ClassPrivateMethod",
      kind,
      key: key2,
      params,
      body,
      static: _static
    });
  }
  function privateName(id) {
    return (0, _validateNode.default)({
      type: "PrivateName",
      id
    });
  }
  function staticBlock(body) {
    return (0, _validateNode.default)({
      type: "StaticBlock",
      body
    });
  }
  function anyTypeAnnotation() {
    return {
      type: "AnyTypeAnnotation"
    };
  }
  function arrayTypeAnnotation(elementType) {
    return (0, _validateNode.default)({
      type: "ArrayTypeAnnotation",
      elementType
    });
  }
  function booleanTypeAnnotation() {
    return {
      type: "BooleanTypeAnnotation"
    };
  }
  function booleanLiteralTypeAnnotation(value2) {
    return (0, _validateNode.default)({
      type: "BooleanLiteralTypeAnnotation",
      value: value2
    });
  }
  function nullLiteralTypeAnnotation() {
    return {
      type: "NullLiteralTypeAnnotation"
    };
  }
  function classImplements(id, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "ClassImplements",
      id,
      typeParameters
    });
  }
  function declareClass(id, typeParameters = null, _extends = null, body) {
    return (0, _validateNode.default)({
      type: "DeclareClass",
      id,
      typeParameters,
      extends: _extends,
      body
    });
  }
  function declareFunction(id) {
    return (0, _validateNode.default)({
      type: "DeclareFunction",
      id
    });
  }
  function declareInterface(id, typeParameters = null, _extends = null, body) {
    return (0, _validateNode.default)({
      type: "DeclareInterface",
      id,
      typeParameters,
      extends: _extends,
      body
    });
  }
  function declareModule(id, body, kind = null) {
    return (0, _validateNode.default)({
      type: "DeclareModule",
      id,
      body,
      kind
    });
  }
  function declareModuleExports(typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "DeclareModuleExports",
      typeAnnotation: typeAnnotation2
    });
  }
  function declareTypeAlias(id, typeParameters = null, right) {
    return (0, _validateNode.default)({
      type: "DeclareTypeAlias",
      id,
      typeParameters,
      right
    });
  }
  function declareOpaqueType(id, typeParameters = null, supertype = null) {
    return (0, _validateNode.default)({
      type: "DeclareOpaqueType",
      id,
      typeParameters,
      supertype
    });
  }
  function declareVariable(id) {
    return (0, _validateNode.default)({
      type: "DeclareVariable",
      id
    });
  }
  function declareExportDeclaration(declaration = null, specifiers = null, source2 = null) {
    return (0, _validateNode.default)({
      type: "DeclareExportDeclaration",
      declaration,
      specifiers,
      source: source2
    });
  }
  function declareExportAllDeclaration(source2) {
    return (0, _validateNode.default)({
      type: "DeclareExportAllDeclaration",
      source: source2
    });
  }
  function declaredPredicate(value2) {
    return (0, _validateNode.default)({
      type: "DeclaredPredicate",
      value: value2
    });
  }
  function existsTypeAnnotation() {
    return {
      type: "ExistsTypeAnnotation"
    };
  }
  function functionTypeAnnotation(typeParameters = null, params, rest = null, returnType) {
    return (0, _validateNode.default)({
      type: "FunctionTypeAnnotation",
      typeParameters,
      params,
      rest,
      returnType
    });
  }
  function functionTypeParam(name = null, typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "FunctionTypeParam",
      name,
      typeAnnotation: typeAnnotation2
    });
  }
  function genericTypeAnnotation(id, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "GenericTypeAnnotation",
      id,
      typeParameters
    });
  }
  function inferredPredicate() {
    return {
      type: "InferredPredicate"
    };
  }
  function interfaceExtends(id, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "InterfaceExtends",
      id,
      typeParameters
    });
  }
  function interfaceDeclaration(id, typeParameters = null, _extends = null, body) {
    return (0, _validateNode.default)({
      type: "InterfaceDeclaration",
      id,
      typeParameters,
      extends: _extends,
      body
    });
  }
  function interfaceTypeAnnotation(_extends = null, body) {
    return (0, _validateNode.default)({
      type: "InterfaceTypeAnnotation",
      extends: _extends,
      body
    });
  }
  function intersectionTypeAnnotation(types2) {
    return (0, _validateNode.default)({
      type: "IntersectionTypeAnnotation",
      types: types2
    });
  }
  function mixedTypeAnnotation() {
    return {
      type: "MixedTypeAnnotation"
    };
  }
  function emptyTypeAnnotation() {
    return {
      type: "EmptyTypeAnnotation"
    };
  }
  function nullableTypeAnnotation(typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "NullableTypeAnnotation",
      typeAnnotation: typeAnnotation2
    });
  }
  function numberLiteralTypeAnnotation(value2) {
    return (0, _validateNode.default)({
      type: "NumberLiteralTypeAnnotation",
      value: value2
    });
  }
  function numberTypeAnnotation() {
    return {
      type: "NumberTypeAnnotation"
    };
  }
  function objectTypeAnnotation(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
    return (0, _validateNode.default)({
      type: "ObjectTypeAnnotation",
      properties,
      indexers,
      callProperties,
      internalSlots,
      exact
    });
  }
  function objectTypeInternalSlot(id, value2, optional, _static, method) {
    return (0, _validateNode.default)({
      type: "ObjectTypeInternalSlot",
      id,
      value: value2,
      optional,
      static: _static,
      method
    });
  }
  function objectTypeCallProperty(value2) {
    return (0, _validateNode.default)({
      type: "ObjectTypeCallProperty",
      value: value2,
      static: null
    });
  }
  function objectTypeIndexer(id = null, key2, value2, variance2 = null) {
    return (0, _validateNode.default)({
      type: "ObjectTypeIndexer",
      id,
      key: key2,
      value: value2,
      variance: variance2,
      static: null
    });
  }
  function objectTypeProperty(key2, value2, variance2 = null) {
    return (0, _validateNode.default)({
      type: "ObjectTypeProperty",
      key: key2,
      value: value2,
      variance: variance2,
      kind: null,
      method: null,
      optional: null,
      proto: null,
      static: null
    });
  }
  function objectTypeSpreadProperty(argument) {
    return (0, _validateNode.default)({
      type: "ObjectTypeSpreadProperty",
      argument
    });
  }
  function opaqueType(id, typeParameters = null, supertype = null, impltype) {
    return (0, _validateNode.default)({
      type: "OpaqueType",
      id,
      typeParameters,
      supertype,
      impltype
    });
  }
  function qualifiedTypeIdentifier(id, qualification) {
    return (0, _validateNode.default)({
      type: "QualifiedTypeIdentifier",
      id,
      qualification
    });
  }
  function stringLiteralTypeAnnotation(value2) {
    return (0, _validateNode.default)({
      type: "StringLiteralTypeAnnotation",
      value: value2
    });
  }
  function stringTypeAnnotation() {
    return {
      type: "StringTypeAnnotation"
    };
  }
  function symbolTypeAnnotation() {
    return {
      type: "SymbolTypeAnnotation"
    };
  }
  function thisTypeAnnotation() {
    return {
      type: "ThisTypeAnnotation"
    };
  }
  function tupleTypeAnnotation(types2) {
    return (0, _validateNode.default)({
      type: "TupleTypeAnnotation",
      types: types2
    });
  }
  function typeofTypeAnnotation(argument) {
    return (0, _validateNode.default)({
      type: "TypeofTypeAnnotation",
      argument
    });
  }
  function typeAlias(id, typeParameters = null, right) {
    return (0, _validateNode.default)({
      type: "TypeAlias",
      id,
      typeParameters,
      right
    });
  }
  function typeAnnotation(typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TypeAnnotation",
      typeAnnotation: typeAnnotation2
    });
  }
  function typeCastExpression(expression, typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TypeCastExpression",
      expression,
      typeAnnotation: typeAnnotation2
    });
  }
  function typeParameter(bound = null, _default2 = null, variance2 = null) {
    return (0, _validateNode.default)({
      type: "TypeParameter",
      bound,
      default: _default2,
      variance: variance2,
      name: null
    });
  }
  function typeParameterDeclaration(params) {
    return (0, _validateNode.default)({
      type: "TypeParameterDeclaration",
      params
    });
  }
  function typeParameterInstantiation(params) {
    return (0, _validateNode.default)({
      type: "TypeParameterInstantiation",
      params
    });
  }
  function unionTypeAnnotation(types2) {
    return (0, _validateNode.default)({
      type: "UnionTypeAnnotation",
      types: types2
    });
  }
  function variance(kind) {
    return (0, _validateNode.default)({
      type: "Variance",
      kind
    });
  }
  function voidTypeAnnotation() {
    return {
      type: "VoidTypeAnnotation"
    };
  }
  function enumDeclaration(id, body) {
    return (0, _validateNode.default)({
      type: "EnumDeclaration",
      id,
      body
    });
  }
  function enumBooleanBody(members) {
    return (0, _validateNode.default)({
      type: "EnumBooleanBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  function enumNumberBody(members) {
    return (0, _validateNode.default)({
      type: "EnumNumberBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  function enumStringBody(members) {
    return (0, _validateNode.default)({
      type: "EnumStringBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  function enumSymbolBody(members) {
    return (0, _validateNode.default)({
      type: "EnumSymbolBody",
      members,
      hasUnknownMembers: null
    });
  }
  function enumBooleanMember(id) {
    return (0, _validateNode.default)({
      type: "EnumBooleanMember",
      id,
      init: null
    });
  }
  function enumNumberMember(id, init) {
    return (0, _validateNode.default)({
      type: "EnumNumberMember",
      id,
      init
    });
  }
  function enumStringMember(id, init) {
    return (0, _validateNode.default)({
      type: "EnumStringMember",
      id,
      init
    });
  }
  function enumDefaultedMember(id) {
    return (0, _validateNode.default)({
      type: "EnumDefaultedMember",
      id
    });
  }
  function indexedAccessType(objectType, indexType) {
    return (0, _validateNode.default)({
      type: "IndexedAccessType",
      objectType,
      indexType
    });
  }
  function optionalIndexedAccessType(objectType, indexType) {
    return (0, _validateNode.default)({
      type: "OptionalIndexedAccessType",
      objectType,
      indexType,
      optional: null
    });
  }
  function jsxAttribute(name, value2 = null) {
    return (0, _validateNode.default)({
      type: "JSXAttribute",
      name,
      value: value2
    });
  }
  function jsxClosingElement(name) {
    return (0, _validateNode.default)({
      type: "JSXClosingElement",
      name
    });
  }
  function jsxElement(openingElement, closingElement = null, children, selfClosing = null) {
    return (0, _validateNode.default)({
      type: "JSXElement",
      openingElement,
      closingElement,
      children,
      selfClosing
    });
  }
  function jsxEmptyExpression() {
    return {
      type: "JSXEmptyExpression"
    };
  }
  function jsxExpressionContainer(expression) {
    return (0, _validateNode.default)({
      type: "JSXExpressionContainer",
      expression
    });
  }
  function jsxSpreadChild(expression) {
    return (0, _validateNode.default)({
      type: "JSXSpreadChild",
      expression
    });
  }
  function jsxIdentifier(name) {
    return (0, _validateNode.default)({
      type: "JSXIdentifier",
      name
    });
  }
  function jsxMemberExpression(object, property) {
    return (0, _validateNode.default)({
      type: "JSXMemberExpression",
      object,
      property
    });
  }
  function jsxNamespacedName(namespace2, name) {
    return (0, _validateNode.default)({
      type: "JSXNamespacedName",
      namespace: namespace2,
      name
    });
  }
  function jsxOpeningElement(name, attributes, selfClosing = false) {
    return (0, _validateNode.default)({
      type: "JSXOpeningElement",
      name,
      attributes,
      selfClosing
    });
  }
  function jsxSpreadAttribute(argument) {
    return (0, _validateNode.default)({
      type: "JSXSpreadAttribute",
      argument
    });
  }
  function jsxText(value2) {
    return (0, _validateNode.default)({
      type: "JSXText",
      value: value2
    });
  }
  function jsxFragment(openingFragment, closingFragment, children) {
    return (0, _validateNode.default)({
      type: "JSXFragment",
      openingFragment,
      closingFragment,
      children
    });
  }
  function jsxOpeningFragment() {
    return {
      type: "JSXOpeningFragment"
    };
  }
  function jsxClosingFragment() {
    return {
      type: "JSXClosingFragment"
    };
  }
  function noop2() {
    return {
      type: "Noop"
    };
  }
  function placeholder2(expectedNode, name) {
    return (0, _validateNode.default)({
      type: "Placeholder",
      expectedNode,
      name
    });
  }
  function v8IntrinsicIdentifier(name) {
    return (0, _validateNode.default)({
      type: "V8IntrinsicIdentifier",
      name
    });
  }
  function argumentPlaceholder() {
    return {
      type: "ArgumentPlaceholder"
    };
  }
  function bindExpression(object, callee) {
    return (0, _validateNode.default)({
      type: "BindExpression",
      object,
      callee
    });
  }
  function importAttribute(key2, value2) {
    return (0, _validateNode.default)({
      type: "ImportAttribute",
      key: key2,
      value: value2
    });
  }
  function decorator(expression) {
    return (0, _validateNode.default)({
      type: "Decorator",
      expression
    });
  }
  function doExpression(body, async2 = false) {
    return (0, _validateNode.default)({
      type: "DoExpression",
      body,
      async: async2
    });
  }
  function exportDefaultSpecifier(exported) {
    return (0, _validateNode.default)({
      type: "ExportDefaultSpecifier",
      exported
    });
  }
  function recordExpression(properties) {
    return (0, _validateNode.default)({
      type: "RecordExpression",
      properties
    });
  }
  function tupleExpression(elements = []) {
    return (0, _validateNode.default)({
      type: "TupleExpression",
      elements
    });
  }
  function decimalLiteral(value2) {
    return (0, _validateNode.default)({
      type: "DecimalLiteral",
      value: value2
    });
  }
  function moduleExpression(body) {
    return (0, _validateNode.default)({
      type: "ModuleExpression",
      body
    });
  }
  function topicReference() {
    return {
      type: "TopicReference"
    };
  }
  function pipelineTopicExpression(expression) {
    return (0, _validateNode.default)({
      type: "PipelineTopicExpression",
      expression
    });
  }
  function pipelineBareFunction(callee) {
    return (0, _validateNode.default)({
      type: "PipelineBareFunction",
      callee
    });
  }
  function pipelinePrimaryTopicReference() {
    return {
      type: "PipelinePrimaryTopicReference"
    };
  }
  function tsParameterProperty(parameter) {
    return (0, _validateNode.default)({
      type: "TSParameterProperty",
      parameter
    });
  }
  function tsDeclareFunction(id = null, typeParameters = null, params, returnType = null) {
    return (0, _validateNode.default)({
      type: "TSDeclareFunction",
      id,
      typeParameters,
      params,
      returnType
    });
  }
  function tsDeclareMethod(decorators2 = null, key2, typeParameters = null, params, returnType = null) {
    return (0, _validateNode.default)({
      type: "TSDeclareMethod",
      decorators: decorators2,
      key: key2,
      typeParameters,
      params,
      returnType
    });
  }
  function tsQualifiedName(left, right) {
    return (0, _validateNode.default)({
      type: "TSQualifiedName",
      left,
      right
    });
  }
  function tsCallSignatureDeclaration(typeParameters = null, parameters, typeAnnotation2 = null) {
    return (0, _validateNode.default)({
      type: "TSCallSignatureDeclaration",
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2
    });
  }
  function tsConstructSignatureDeclaration(typeParameters = null, parameters, typeAnnotation2 = null) {
    return (0, _validateNode.default)({
      type: "TSConstructSignatureDeclaration",
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2
    });
  }
  function tsPropertySignature(key2, typeAnnotation2 = null) {
    return (0, _validateNode.default)({
      type: "TSPropertySignature",
      key: key2,
      typeAnnotation: typeAnnotation2,
      kind: null
    });
  }
  function tsMethodSignature(key2, typeParameters = null, parameters, typeAnnotation2 = null) {
    return (0, _validateNode.default)({
      type: "TSMethodSignature",
      key: key2,
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2,
      kind: null
    });
  }
  function tsIndexSignature(parameters, typeAnnotation2 = null) {
    return (0, _validateNode.default)({
      type: "TSIndexSignature",
      parameters,
      typeAnnotation: typeAnnotation2
    });
  }
  function tsAnyKeyword() {
    return {
      type: "TSAnyKeyword"
    };
  }
  function tsBooleanKeyword() {
    return {
      type: "TSBooleanKeyword"
    };
  }
  function tsBigIntKeyword() {
    return {
      type: "TSBigIntKeyword"
    };
  }
  function tsIntrinsicKeyword() {
    return {
      type: "TSIntrinsicKeyword"
    };
  }
  function tsNeverKeyword() {
    return {
      type: "TSNeverKeyword"
    };
  }
  function tsNullKeyword() {
    return {
      type: "TSNullKeyword"
    };
  }
  function tsNumberKeyword() {
    return {
      type: "TSNumberKeyword"
    };
  }
  function tsObjectKeyword() {
    return {
      type: "TSObjectKeyword"
    };
  }
  function tsStringKeyword() {
    return {
      type: "TSStringKeyword"
    };
  }
  function tsSymbolKeyword() {
    return {
      type: "TSSymbolKeyword"
    };
  }
  function tsUndefinedKeyword() {
    return {
      type: "TSUndefinedKeyword"
    };
  }
  function tsUnknownKeyword() {
    return {
      type: "TSUnknownKeyword"
    };
  }
  function tsVoidKeyword() {
    return {
      type: "TSVoidKeyword"
    };
  }
  function tsThisType() {
    return {
      type: "TSThisType"
    };
  }
  function tsFunctionType(typeParameters = null, parameters, typeAnnotation2 = null) {
    return (0, _validateNode.default)({
      type: "TSFunctionType",
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2
    });
  }
  function tsConstructorType(typeParameters = null, parameters, typeAnnotation2 = null) {
    return (0, _validateNode.default)({
      type: "TSConstructorType",
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2
    });
  }
  function tsTypeReference(typeName, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSTypeReference",
      typeName,
      typeParameters
    });
  }
  function tsTypePredicate(parameterName, typeAnnotation2 = null, asserts = null) {
    return (0, _validateNode.default)({
      type: "TSTypePredicate",
      parameterName,
      typeAnnotation: typeAnnotation2,
      asserts
    });
  }
  function tsTypeQuery(exprName, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSTypeQuery",
      exprName,
      typeParameters
    });
  }
  function tsTypeLiteral(members) {
    return (0, _validateNode.default)({
      type: "TSTypeLiteral",
      members
    });
  }
  function tsArrayType(elementType) {
    return (0, _validateNode.default)({
      type: "TSArrayType",
      elementType
    });
  }
  function tsTupleType(elementTypes) {
    return (0, _validateNode.default)({
      type: "TSTupleType",
      elementTypes
    });
  }
  function tsOptionalType(typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TSOptionalType",
      typeAnnotation: typeAnnotation2
    });
  }
  function tsRestType(typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TSRestType",
      typeAnnotation: typeAnnotation2
    });
  }
  function tsNamedTupleMember(label, elementType, optional = false) {
    return (0, _validateNode.default)({
      type: "TSNamedTupleMember",
      label,
      elementType,
      optional
    });
  }
  function tsUnionType(types2) {
    return (0, _validateNode.default)({
      type: "TSUnionType",
      types: types2
    });
  }
  function tsIntersectionType(types2) {
    return (0, _validateNode.default)({
      type: "TSIntersectionType",
      types: types2
    });
  }
  function tsConditionalType(checkType, extendsType, trueType, falseType) {
    return (0, _validateNode.default)({
      type: "TSConditionalType",
      checkType,
      extendsType,
      trueType,
      falseType
    });
  }
  function tsInferType(typeParameter2) {
    return (0, _validateNode.default)({
      type: "TSInferType",
      typeParameter: typeParameter2
    });
  }
  function tsParenthesizedType(typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TSParenthesizedType",
      typeAnnotation: typeAnnotation2
    });
  }
  function tsTypeOperator(typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TSTypeOperator",
      typeAnnotation: typeAnnotation2,
      operator: null
    });
  }
  function tsIndexedAccessType(objectType, indexType) {
    return (0, _validateNode.default)({
      type: "TSIndexedAccessType",
      objectType,
      indexType
    });
  }
  function tsMappedType(typeParameter2, typeAnnotation2 = null, nameType = null) {
    return (0, _validateNode.default)({
      type: "TSMappedType",
      typeParameter: typeParameter2,
      typeAnnotation: typeAnnotation2,
      nameType
    });
  }
  function tsLiteralType(literal2) {
    return (0, _validateNode.default)({
      type: "TSLiteralType",
      literal: literal2
    });
  }
  function tsExpressionWithTypeArguments(expression, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSExpressionWithTypeArguments",
      expression,
      typeParameters
    });
  }
  function tsInterfaceDeclaration(id, typeParameters = null, _extends = null, body) {
    return (0, _validateNode.default)({
      type: "TSInterfaceDeclaration",
      id,
      typeParameters,
      extends: _extends,
      body
    });
  }
  function tsInterfaceBody(body) {
    return (0, _validateNode.default)({
      type: "TSInterfaceBody",
      body
    });
  }
  function tsTypeAliasDeclaration(id, typeParameters = null, typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TSTypeAliasDeclaration",
      id,
      typeParameters,
      typeAnnotation: typeAnnotation2
    });
  }
  function tsInstantiationExpression(expression, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSInstantiationExpression",
      expression,
      typeParameters
    });
  }
  function tsAsExpression(expression, typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TSAsExpression",
      expression,
      typeAnnotation: typeAnnotation2
    });
  }
  function tsSatisfiesExpression(expression, typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TSSatisfiesExpression",
      expression,
      typeAnnotation: typeAnnotation2
    });
  }
  function tsTypeAssertion(typeAnnotation2, expression) {
    return (0, _validateNode.default)({
      type: "TSTypeAssertion",
      typeAnnotation: typeAnnotation2,
      expression
    });
  }
  function tsEnumDeclaration(id, members) {
    return (0, _validateNode.default)({
      type: "TSEnumDeclaration",
      id,
      members
    });
  }
  function tsEnumMember(id, initializer = null) {
    return (0, _validateNode.default)({
      type: "TSEnumMember",
      id,
      initializer
    });
  }
  function tsModuleDeclaration(id, body) {
    return (0, _validateNode.default)({
      type: "TSModuleDeclaration",
      id,
      body
    });
  }
  function tsModuleBlock(body) {
    return (0, _validateNode.default)({
      type: "TSModuleBlock",
      body
    });
  }
  function tsImportType(argument, qualifier = null, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSImportType",
      argument,
      qualifier,
      typeParameters
    });
  }
  function tsImportEqualsDeclaration(id, moduleReference) {
    return (0, _validateNode.default)({
      type: "TSImportEqualsDeclaration",
      id,
      moduleReference,
      isExport: null
    });
  }
  function tsExternalModuleReference(expression) {
    return (0, _validateNode.default)({
      type: "TSExternalModuleReference",
      expression
    });
  }
  function tsNonNullExpression(expression) {
    return (0, _validateNode.default)({
      type: "TSNonNullExpression",
      expression
    });
  }
  function tsExportAssignment(expression) {
    return (0, _validateNode.default)({
      type: "TSExportAssignment",
      expression
    });
  }
  function tsNamespaceExportDeclaration(id) {
    return (0, _validateNode.default)({
      type: "TSNamespaceExportDeclaration",
      id
    });
  }
  function tsTypeAnnotation(typeAnnotation2) {
    return (0, _validateNode.default)({
      type: "TSTypeAnnotation",
      typeAnnotation: typeAnnotation2
    });
  }
  function tsTypeParameterInstantiation(params) {
    return (0, _validateNode.default)({
      type: "TSTypeParameterInstantiation",
      params
    });
  }
  function tsTypeParameterDeclaration(params) {
    return (0, _validateNode.default)({
      type: "TSTypeParameterDeclaration",
      params
    });
  }
  function tsTypeParameter(constraint = null, _default2 = null, name) {
    return (0, _validateNode.default)({
      type: "TSTypeParameter",
      constraint,
      default: _default2,
      name
    });
  }
  function NumberLiteral(value2) {
    (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type ");
    return numericLiteral(value2);
  }
  function RegexLiteral(pattern, flags = "") {
    (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type ");
    return regExpLiteral(pattern, flags);
  }
  function RestProperty(argument) {
    (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type ");
    return restElement(argument);
  }
  function SpreadProperty(argument) {
    (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type ");
    return spreadElement(argument);
  }
  return generated$2;
}
var hasRequiredCleanJSXElementLiteralChild;
function requireCleanJSXElementLiteralChild() {
  if (hasRequiredCleanJSXElementLiteralChild) return cleanJSXElementLiteralChild;
  hasRequiredCleanJSXElementLiteralChild = 1;
  Object.defineProperty(cleanJSXElementLiteralChild, "__esModule", {
    value: true
  });
  cleanJSXElementLiteralChild.default = cleanJSXElementLiteralChild$1;
  var _index = requireGenerated$2();
  var _index2 = requireLib$O();
  function cleanJSXElementLiteralChild$1(child, args) {
    const lines = child.value.split(/\r\n|\n|\r/);
    let lastNonEmptyLine = 0;
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].match(/[^ \t]/)) {
        lastNonEmptyLine = i;
      }
    }
    let str = "";
    for (let i = 0; i < lines.length; i++) {
      const line2 = lines[i];
      const isFirstLine = i === 0;
      const isLastLine = i === lines.length - 1;
      const isLastNonEmptyLine = i === lastNonEmptyLine;
      let trimmedLine = line2.replace(/\t/g, " ");
      if (!isFirstLine) {
        trimmedLine = trimmedLine.replace(/^[ ]+/, "");
      }
      if (!isLastLine) {
        trimmedLine = trimmedLine.replace(/[ ]+$/, "");
      }
      if (trimmedLine) {
        if (!isLastNonEmptyLine) {
          trimmedLine += " ";
        }
        str += trimmedLine;
      }
    }
    if (str) args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
  }
  return cleanJSXElementLiteralChild;
}
var hasRequiredBuildChildren;
function requireBuildChildren() {
  if (hasRequiredBuildChildren) return buildChildren;
  hasRequiredBuildChildren = 1;
  Object.defineProperty(buildChildren, "__esModule", {
    value: true
  });
  buildChildren.default = buildChildren$1;
  var _index = requireGenerated$3();
  var _cleanJSXElementLiteralChild = requireCleanJSXElementLiteralChild();
  function buildChildren$1(node2) {
    const elements = [];
    for (let i = 0; i < node2.children.length; i++) {
      let child = node2.children[i];
      if ((0, _index.isJSXText)(child)) {
        (0, _cleanJSXElementLiteralChild.default)(child, elements);
        continue;
      }
      if ((0, _index.isJSXExpressionContainer)(child)) child = child.expression;
      if ((0, _index.isJSXEmptyExpression)(child)) continue;
      elements.push(child);
    }
    return elements;
  }
  return buildChildren;
}
var assertNode = {};
var isNode = {};
var hasRequiredIsNode;
function requireIsNode() {
  if (hasRequiredIsNode) return isNode;
  hasRequiredIsNode = 1;
  Object.defineProperty(isNode, "__esModule", {
    value: true
  });
  isNode.default = isNode$1;
  var _index = requireDefinitions();
  function isNode$1(node2) {
    return !!(node2 && _index.VISITOR_KEYS[node2.type]);
  }
  return isNode;
}
var hasRequiredAssertNode;
function requireAssertNode() {
  if (hasRequiredAssertNode) return assertNode;
  hasRequiredAssertNode = 1;
  Object.defineProperty(assertNode, "__esModule", {
    value: true
  });
  assertNode.default = assertNode$1;
  var _isNode = requireIsNode();
  function assertNode$1(node2) {
    if (!(0, _isNode.default)(node2)) {
      var _node$type;
      const type = (_node$type = node2 == null ? void 0 : node2.type) != null ? _node$type : JSON.stringify(node2);
      throw new TypeError(`Not a valid node of type "${type}"`);
    }
  }
  return assertNode;
}
var generated$1 = {};
var hasRequiredGenerated$1;
function requireGenerated$1() {
  if (hasRequiredGenerated$1) return generated$1;
  hasRequiredGenerated$1 = 1;
  Object.defineProperty(generated$1, "__esModule", {
    value: true
  });
  generated$1.assertAccessor = assertAccessor;
  generated$1.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
  generated$1.assertArgumentPlaceholder = assertArgumentPlaceholder;
  generated$1.assertArrayExpression = assertArrayExpression;
  generated$1.assertArrayPattern = assertArrayPattern;
  generated$1.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
  generated$1.assertArrowFunctionExpression = assertArrowFunctionExpression;
  generated$1.assertAssignmentExpression = assertAssignmentExpression;
  generated$1.assertAssignmentPattern = assertAssignmentPattern;
  generated$1.assertAwaitExpression = assertAwaitExpression;
  generated$1.assertBigIntLiteral = assertBigIntLiteral;
  generated$1.assertBinary = assertBinary;
  generated$1.assertBinaryExpression = assertBinaryExpression;
  generated$1.assertBindExpression = assertBindExpression;
  generated$1.assertBlock = assertBlock;
  generated$1.assertBlockParent = assertBlockParent;
  generated$1.assertBlockStatement = assertBlockStatement;
  generated$1.assertBooleanLiteral = assertBooleanLiteral;
  generated$1.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
  generated$1.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
  generated$1.assertBreakStatement = assertBreakStatement;
  generated$1.assertCallExpression = assertCallExpression;
  generated$1.assertCatchClause = assertCatchClause;
  generated$1.assertClass = assertClass;
  generated$1.assertClassAccessorProperty = assertClassAccessorProperty;
  generated$1.assertClassBody = assertClassBody;
  generated$1.assertClassDeclaration = assertClassDeclaration;
  generated$1.assertClassExpression = assertClassExpression;
  generated$1.assertClassImplements = assertClassImplements;
  generated$1.assertClassMethod = assertClassMethod;
  generated$1.assertClassPrivateMethod = assertClassPrivateMethod;
  generated$1.assertClassPrivateProperty = assertClassPrivateProperty;
  generated$1.assertClassProperty = assertClassProperty;
  generated$1.assertCompletionStatement = assertCompletionStatement;
  generated$1.assertConditional = assertConditional;
  generated$1.assertConditionalExpression = assertConditionalExpression;
  generated$1.assertContinueStatement = assertContinueStatement;
  generated$1.assertDebuggerStatement = assertDebuggerStatement;
  generated$1.assertDecimalLiteral = assertDecimalLiteral;
  generated$1.assertDeclaration = assertDeclaration;
  generated$1.assertDeclareClass = assertDeclareClass;
  generated$1.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
  generated$1.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
  generated$1.assertDeclareFunction = assertDeclareFunction;
  generated$1.assertDeclareInterface = assertDeclareInterface;
  generated$1.assertDeclareModule = assertDeclareModule;
  generated$1.assertDeclareModuleExports = assertDeclareModuleExports;
  generated$1.assertDeclareOpaqueType = assertDeclareOpaqueType;
  generated$1.assertDeclareTypeAlias = assertDeclareTypeAlias;
  generated$1.assertDeclareVariable = assertDeclareVariable;
  generated$1.assertDeclaredPredicate = assertDeclaredPredicate;
  generated$1.assertDecorator = assertDecorator;
  generated$1.assertDirective = assertDirective;
  generated$1.assertDirectiveLiteral = assertDirectiveLiteral;
  generated$1.assertDoExpression = assertDoExpression;
  generated$1.assertDoWhileStatement = assertDoWhileStatement;
  generated$1.assertEmptyStatement = assertEmptyStatement;
  generated$1.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
  generated$1.assertEnumBody = assertEnumBody;
  generated$1.assertEnumBooleanBody = assertEnumBooleanBody;
  generated$1.assertEnumBooleanMember = assertEnumBooleanMember;
  generated$1.assertEnumDeclaration = assertEnumDeclaration;
  generated$1.assertEnumDefaultedMember = assertEnumDefaultedMember;
  generated$1.assertEnumMember = assertEnumMember;
  generated$1.assertEnumNumberBody = assertEnumNumberBody;
  generated$1.assertEnumNumberMember = assertEnumNumberMember;
  generated$1.assertEnumStringBody = assertEnumStringBody;
  generated$1.assertEnumStringMember = assertEnumStringMember;
  generated$1.assertEnumSymbolBody = assertEnumSymbolBody;
  generated$1.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
  generated$1.assertExportAllDeclaration = assertExportAllDeclaration;
  generated$1.assertExportDeclaration = assertExportDeclaration;
  generated$1.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
  generated$1.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
  generated$1.assertExportNamedDeclaration = assertExportNamedDeclaration;
  generated$1.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
  generated$1.assertExportSpecifier = assertExportSpecifier;
  generated$1.assertExpression = assertExpression;
  generated$1.assertExpressionStatement = assertExpressionStatement;
  generated$1.assertExpressionWrapper = assertExpressionWrapper;
  generated$1.assertFile = assertFile;
  generated$1.assertFlow = assertFlow;
  generated$1.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
  generated$1.assertFlowDeclaration = assertFlowDeclaration;
  generated$1.assertFlowPredicate = assertFlowPredicate;
  generated$1.assertFlowType = assertFlowType;
  generated$1.assertFor = assertFor;
  generated$1.assertForInStatement = assertForInStatement;
  generated$1.assertForOfStatement = assertForOfStatement;
  generated$1.assertForStatement = assertForStatement;
  generated$1.assertForXStatement = assertForXStatement;
  generated$1.assertFunction = assertFunction;
  generated$1.assertFunctionDeclaration = assertFunctionDeclaration;
  generated$1.assertFunctionExpression = assertFunctionExpression;
  generated$1.assertFunctionParent = assertFunctionParent;
  generated$1.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
  generated$1.assertFunctionTypeParam = assertFunctionTypeParam;
  generated$1.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
  generated$1.assertIdentifier = assertIdentifier;
  generated$1.assertIfStatement = assertIfStatement;
  generated$1.assertImmutable = assertImmutable;
  generated$1.assertImport = assertImport;
  generated$1.assertImportAttribute = assertImportAttribute;
  generated$1.assertImportDeclaration = assertImportDeclaration;
  generated$1.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
  generated$1.assertImportExpression = assertImportExpression;
  generated$1.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
  generated$1.assertImportOrExportDeclaration = assertImportOrExportDeclaration;
  generated$1.assertImportSpecifier = assertImportSpecifier;
  generated$1.assertIndexedAccessType = assertIndexedAccessType;
  generated$1.assertInferredPredicate = assertInferredPredicate;
  generated$1.assertInterfaceDeclaration = assertInterfaceDeclaration;
  generated$1.assertInterfaceExtends = assertInterfaceExtends;
  generated$1.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
  generated$1.assertInterpreterDirective = assertInterpreterDirective;
  generated$1.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
  generated$1.assertJSX = assertJSX;
  generated$1.assertJSXAttribute = assertJSXAttribute;
  generated$1.assertJSXClosingElement = assertJSXClosingElement;
  generated$1.assertJSXClosingFragment = assertJSXClosingFragment;
  generated$1.assertJSXElement = assertJSXElement;
  generated$1.assertJSXEmptyExpression = assertJSXEmptyExpression;
  generated$1.assertJSXExpressionContainer = assertJSXExpressionContainer;
  generated$1.assertJSXFragment = assertJSXFragment;
  generated$1.assertJSXIdentifier = assertJSXIdentifier;
  generated$1.assertJSXMemberExpression = assertJSXMemberExpression;
  generated$1.assertJSXNamespacedName = assertJSXNamespacedName;
  generated$1.assertJSXOpeningElement = assertJSXOpeningElement;
  generated$1.assertJSXOpeningFragment = assertJSXOpeningFragment;
  generated$1.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
  generated$1.assertJSXSpreadChild = assertJSXSpreadChild;
  generated$1.assertJSXText = assertJSXText;
  generated$1.assertLVal = assertLVal;
  generated$1.assertLabeledStatement = assertLabeledStatement;
  generated$1.assertLiteral = assertLiteral;
  generated$1.assertLogicalExpression = assertLogicalExpression;
  generated$1.assertLoop = assertLoop;
  generated$1.assertMemberExpression = assertMemberExpression;
  generated$1.assertMetaProperty = assertMetaProperty;
  generated$1.assertMethod = assertMethod;
  generated$1.assertMiscellaneous = assertMiscellaneous;
  generated$1.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
  generated$1.assertModuleDeclaration = assertModuleDeclaration;
  generated$1.assertModuleExpression = assertModuleExpression;
  generated$1.assertModuleSpecifier = assertModuleSpecifier;
  generated$1.assertNewExpression = assertNewExpression;
  generated$1.assertNoop = assertNoop;
  generated$1.assertNullLiteral = assertNullLiteral;
  generated$1.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
  generated$1.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
  generated$1.assertNumberLiteral = assertNumberLiteral;
  generated$1.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
  generated$1.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
  generated$1.assertNumericLiteral = assertNumericLiteral;
  generated$1.assertObjectExpression = assertObjectExpression;
  generated$1.assertObjectMember = assertObjectMember;
  generated$1.assertObjectMethod = assertObjectMethod;
  generated$1.assertObjectPattern = assertObjectPattern;
  generated$1.assertObjectProperty = assertObjectProperty;
  generated$1.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
  generated$1.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
  generated$1.assertObjectTypeIndexer = assertObjectTypeIndexer;
  generated$1.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
  generated$1.assertObjectTypeProperty = assertObjectTypeProperty;
  generated$1.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
  generated$1.assertOpaqueType = assertOpaqueType;
  generated$1.assertOptionalCallExpression = assertOptionalCallExpression;
  generated$1.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
  generated$1.assertOptionalMemberExpression = assertOptionalMemberExpression;
  generated$1.assertParenthesizedExpression = assertParenthesizedExpression;
  generated$1.assertPattern = assertPattern;
  generated$1.assertPatternLike = assertPatternLike;
  generated$1.assertPipelineBareFunction = assertPipelineBareFunction;
  generated$1.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
  generated$1.assertPipelineTopicExpression = assertPipelineTopicExpression;
  generated$1.assertPlaceholder = assertPlaceholder;
  generated$1.assertPrivate = assertPrivate;
  generated$1.assertPrivateName = assertPrivateName;
  generated$1.assertProgram = assertProgram;
  generated$1.assertProperty = assertProperty;
  generated$1.assertPureish = assertPureish;
  generated$1.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
  generated$1.assertRecordExpression = assertRecordExpression;
  generated$1.assertRegExpLiteral = assertRegExpLiteral;
  generated$1.assertRegexLiteral = assertRegexLiteral;
  generated$1.assertRestElement = assertRestElement;
  generated$1.assertRestProperty = assertRestProperty;
  generated$1.assertReturnStatement = assertReturnStatement;
  generated$1.assertScopable = assertScopable;
  generated$1.assertSequenceExpression = assertSequenceExpression;
  generated$1.assertSpreadElement = assertSpreadElement;
  generated$1.assertSpreadProperty = assertSpreadProperty;
  generated$1.assertStandardized = assertStandardized;
  generated$1.assertStatement = assertStatement;
  generated$1.assertStaticBlock = assertStaticBlock;
  generated$1.assertStringLiteral = assertStringLiteral;
  generated$1.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
  generated$1.assertStringTypeAnnotation = assertStringTypeAnnotation;
  generated$1.assertSuper = assertSuper;
  generated$1.assertSwitchCase = assertSwitchCase;
  generated$1.assertSwitchStatement = assertSwitchStatement;
  generated$1.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
  generated$1.assertTSAnyKeyword = assertTSAnyKeyword;
  generated$1.assertTSArrayType = assertTSArrayType;
  generated$1.assertTSAsExpression = assertTSAsExpression;
  generated$1.assertTSBaseType = assertTSBaseType;
  generated$1.assertTSBigIntKeyword = assertTSBigIntKeyword;
  generated$1.assertTSBooleanKeyword = assertTSBooleanKeyword;
  generated$1.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
  generated$1.assertTSConditionalType = assertTSConditionalType;
  generated$1.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
  generated$1.assertTSConstructorType = assertTSConstructorType;
  generated$1.assertTSDeclareFunction = assertTSDeclareFunction;
  generated$1.assertTSDeclareMethod = assertTSDeclareMethod;
  generated$1.assertTSEntityName = assertTSEntityName;
  generated$1.assertTSEnumDeclaration = assertTSEnumDeclaration;
  generated$1.assertTSEnumMember = assertTSEnumMember;
  generated$1.assertTSExportAssignment = assertTSExportAssignment;
  generated$1.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
  generated$1.assertTSExternalModuleReference = assertTSExternalModuleReference;
  generated$1.assertTSFunctionType = assertTSFunctionType;
  generated$1.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
  generated$1.assertTSImportType = assertTSImportType;
  generated$1.assertTSIndexSignature = assertTSIndexSignature;
  generated$1.assertTSIndexedAccessType = assertTSIndexedAccessType;
  generated$1.assertTSInferType = assertTSInferType;
  generated$1.assertTSInstantiationExpression = assertTSInstantiationExpression;
  generated$1.assertTSInterfaceBody = assertTSInterfaceBody;
  generated$1.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
  generated$1.assertTSIntersectionType = assertTSIntersectionType;
  generated$1.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
  generated$1.assertTSLiteralType = assertTSLiteralType;
  generated$1.assertTSMappedType = assertTSMappedType;
  generated$1.assertTSMethodSignature = assertTSMethodSignature;
  generated$1.assertTSModuleBlock = assertTSModuleBlock;
  generated$1.assertTSModuleDeclaration = assertTSModuleDeclaration;
  generated$1.assertTSNamedTupleMember = assertTSNamedTupleMember;
  generated$1.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
  generated$1.assertTSNeverKeyword = assertTSNeverKeyword;
  generated$1.assertTSNonNullExpression = assertTSNonNullExpression;
  generated$1.assertTSNullKeyword = assertTSNullKeyword;
  generated$1.assertTSNumberKeyword = assertTSNumberKeyword;
  generated$1.assertTSObjectKeyword = assertTSObjectKeyword;
  generated$1.assertTSOptionalType = assertTSOptionalType;
  generated$1.assertTSParameterProperty = assertTSParameterProperty;
  generated$1.assertTSParenthesizedType = assertTSParenthesizedType;
  generated$1.assertTSPropertySignature = assertTSPropertySignature;
  generated$1.assertTSQualifiedName = assertTSQualifiedName;
  generated$1.assertTSRestType = assertTSRestType;
  generated$1.assertTSSatisfiesExpression = assertTSSatisfiesExpression;
  generated$1.assertTSStringKeyword = assertTSStringKeyword;
  generated$1.assertTSSymbolKeyword = assertTSSymbolKeyword;
  generated$1.assertTSThisType = assertTSThisType;
  generated$1.assertTSTupleType = assertTSTupleType;
  generated$1.assertTSType = assertTSType;
  generated$1.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
  generated$1.assertTSTypeAnnotation = assertTSTypeAnnotation;
  generated$1.assertTSTypeAssertion = assertTSTypeAssertion;
  generated$1.assertTSTypeElement = assertTSTypeElement;
  generated$1.assertTSTypeLiteral = assertTSTypeLiteral;
  generated$1.assertTSTypeOperator = assertTSTypeOperator;
  generated$1.assertTSTypeParameter = assertTSTypeParameter;
  generated$1.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
  generated$1.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
  generated$1.assertTSTypePredicate = assertTSTypePredicate;
  generated$1.assertTSTypeQuery = assertTSTypeQuery;
  generated$1.assertTSTypeReference = assertTSTypeReference;
  generated$1.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
  generated$1.assertTSUnionType = assertTSUnionType;
  generated$1.assertTSUnknownKeyword = assertTSUnknownKeyword;
  generated$1.assertTSVoidKeyword = assertTSVoidKeyword;
  generated$1.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
  generated$1.assertTemplateElement = assertTemplateElement;
  generated$1.assertTemplateLiteral = assertTemplateLiteral;
  generated$1.assertTerminatorless = assertTerminatorless;
  generated$1.assertThisExpression = assertThisExpression;
  generated$1.assertThisTypeAnnotation = assertThisTypeAnnotation;
  generated$1.assertThrowStatement = assertThrowStatement;
  generated$1.assertTopicReference = assertTopicReference;
  generated$1.assertTryStatement = assertTryStatement;
  generated$1.assertTupleExpression = assertTupleExpression;
  generated$1.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
  generated$1.assertTypeAlias = assertTypeAlias;
  generated$1.assertTypeAnnotation = assertTypeAnnotation;
  generated$1.assertTypeCastExpression = assertTypeCastExpression;
  generated$1.assertTypeParameter = assertTypeParameter;
  generated$1.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
  generated$1.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
  generated$1.assertTypeScript = assertTypeScript;
  generated$1.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
  generated$1.assertUnaryExpression = assertUnaryExpression;
  generated$1.assertUnaryLike = assertUnaryLike;
  generated$1.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
  generated$1.assertUpdateExpression = assertUpdateExpression;
  generated$1.assertUserWhitespacable = assertUserWhitespacable;
  generated$1.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
  generated$1.assertVariableDeclaration = assertVariableDeclaration;
  generated$1.assertVariableDeclarator = assertVariableDeclarator;
  generated$1.assertVariance = assertVariance;
  generated$1.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
  generated$1.assertWhile = assertWhile;
  generated$1.assertWhileStatement = assertWhileStatement;
  generated$1.assertWithStatement = assertWithStatement;
  generated$1.assertYieldExpression = assertYieldExpression;
  var _is = requireIs();
  var _deprecationWarning = requireDeprecationWarning();
  function assert2(type, node2, opts) {
    if (!(0, _is.default)(type, node2, opts)) {
      throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node2.type}".`);
    }
  }
  function assertArrayExpression(node2, opts) {
    assert2("ArrayExpression", node2, opts);
  }
  function assertAssignmentExpression(node2, opts) {
    assert2("AssignmentExpression", node2, opts);
  }
  function assertBinaryExpression(node2, opts) {
    assert2("BinaryExpression", node2, opts);
  }
  function assertInterpreterDirective(node2, opts) {
    assert2("InterpreterDirective", node2, opts);
  }
  function assertDirective(node2, opts) {
    assert2("Directive", node2, opts);
  }
  function assertDirectiveLiteral(node2, opts) {
    assert2("DirectiveLiteral", node2, opts);
  }
  function assertBlockStatement(node2, opts) {
    assert2("BlockStatement", node2, opts);
  }
  function assertBreakStatement(node2, opts) {
    assert2("BreakStatement", node2, opts);
  }
  function assertCallExpression(node2, opts) {
    assert2("CallExpression", node2, opts);
  }
  function assertCatchClause(node2, opts) {
    assert2("CatchClause", node2, opts);
  }
  function assertConditionalExpression(node2, opts) {
    assert2("ConditionalExpression", node2, opts);
  }
  function assertContinueStatement(node2, opts) {
    assert2("ContinueStatement", node2, opts);
  }
  function assertDebuggerStatement(node2, opts) {
    assert2("DebuggerStatement", node2, opts);
  }
  function assertDoWhileStatement(node2, opts) {
    assert2("DoWhileStatement", node2, opts);
  }
  function assertEmptyStatement(node2, opts) {
    assert2("EmptyStatement", node2, opts);
  }
  function assertExpressionStatement(node2, opts) {
    assert2("ExpressionStatement", node2, opts);
  }
  function assertFile(node2, opts) {
    assert2("File", node2, opts);
  }
  function assertForInStatement(node2, opts) {
    assert2("ForInStatement", node2, opts);
  }
  function assertForStatement(node2, opts) {
    assert2("ForStatement", node2, opts);
  }
  function assertFunctionDeclaration(node2, opts) {
    assert2("FunctionDeclaration", node2, opts);
  }
  function assertFunctionExpression(node2, opts) {
    assert2("FunctionExpression", node2, opts);
  }
  function assertIdentifier(node2, opts) {
    assert2("Identifier", node2, opts);
  }
  function assertIfStatement(node2, opts) {
    assert2("IfStatement", node2, opts);
  }
  function assertLabeledStatement(node2, opts) {
    assert2("LabeledStatement", node2, opts);
  }
  function assertStringLiteral(node2, opts) {
    assert2("StringLiteral", node2, opts);
  }
  function assertNumericLiteral(node2, opts) {
    assert2("NumericLiteral", node2, opts);
  }
  function assertNullLiteral(node2, opts) {
    assert2("NullLiteral", node2, opts);
  }
  function assertBooleanLiteral(node2, opts) {
    assert2("BooleanLiteral", node2, opts);
  }
  function assertRegExpLiteral(node2, opts) {
    assert2("RegExpLiteral", node2, opts);
  }
  function assertLogicalExpression(node2, opts) {
    assert2("LogicalExpression", node2, opts);
  }
  function assertMemberExpression(node2, opts) {
    assert2("MemberExpression", node2, opts);
  }
  function assertNewExpression(node2, opts) {
    assert2("NewExpression", node2, opts);
  }
  function assertProgram(node2, opts) {
    assert2("Program", node2, opts);
  }
  function assertObjectExpression(node2, opts) {
    assert2("ObjectExpression", node2, opts);
  }
  function assertObjectMethod(node2, opts) {
    assert2("ObjectMethod", node2, opts);
  }
  function assertObjectProperty(node2, opts) {
    assert2("ObjectProperty", node2, opts);
  }
  function assertRestElement(node2, opts) {
    assert2("RestElement", node2, opts);
  }
  function assertReturnStatement(node2, opts) {
    assert2("ReturnStatement", node2, opts);
  }
  function assertSequenceExpression(node2, opts) {
    assert2("SequenceExpression", node2, opts);
  }
  function assertParenthesizedExpression(node2, opts) {
    assert2("ParenthesizedExpression", node2, opts);
  }
  function assertSwitchCase(node2, opts) {
    assert2("SwitchCase", node2, opts);
  }
  function assertSwitchStatement(node2, opts) {
    assert2("SwitchStatement", node2, opts);
  }
  function assertThisExpression(node2, opts) {
    assert2("ThisExpression", node2, opts);
  }
  function assertThrowStatement(node2, opts) {
    assert2("ThrowStatement", node2, opts);
  }
  function assertTryStatement(node2, opts) {
    assert2("TryStatement", node2, opts);
  }
  function assertUnaryExpression(node2, opts) {
    assert2("UnaryExpression", node2, opts);
  }
  function assertUpdateExpression(node2, opts) {
    assert2("UpdateExpression", node2, opts);
  }
  function assertVariableDeclaration(node2, opts) {
    assert2("VariableDeclaration", node2, opts);
  }
  function assertVariableDeclarator(node2, opts) {
    assert2("VariableDeclarator", node2, opts);
  }
  function assertWhileStatement(node2, opts) {
    assert2("WhileStatement", node2, opts);
  }
  function assertWithStatement(node2, opts) {
    assert2("WithStatement", node2, opts);
  }
  function assertAssignmentPattern(node2, opts) {
    assert2("AssignmentPattern", node2, opts);
  }
  function assertArrayPattern(node2, opts) {
    assert2("ArrayPattern", node2, opts);
  }
  function assertArrowFunctionExpression(node2, opts) {
    assert2("ArrowFunctionExpression", node2, opts);
  }
  function assertClassBody(node2, opts) {
    assert2("ClassBody", node2, opts);
  }
  function assertClassExpression(node2, opts) {
    assert2("ClassExpression", node2, opts);
  }
  function assertClassDeclaration(node2, opts) {
    assert2("ClassDeclaration", node2, opts);
  }
  function assertExportAllDeclaration(node2, opts) {
    assert2("ExportAllDeclaration", node2, opts);
  }
  function assertExportDefaultDeclaration(node2, opts) {
    assert2("ExportDefaultDeclaration", node2, opts);
  }
  function assertExportNamedDeclaration(node2, opts) {
    assert2("ExportNamedDeclaration", node2, opts);
  }
  function assertExportSpecifier(node2, opts) {
    assert2("ExportSpecifier", node2, opts);
  }
  function assertForOfStatement(node2, opts) {
    assert2("ForOfStatement", node2, opts);
  }
  function assertImportDeclaration(node2, opts) {
    assert2("ImportDeclaration", node2, opts);
  }
  function assertImportDefaultSpecifier(node2, opts) {
    assert2("ImportDefaultSpecifier", node2, opts);
  }
  function assertImportNamespaceSpecifier(node2, opts) {
    assert2("ImportNamespaceSpecifier", node2, opts);
  }
  function assertImportSpecifier(node2, opts) {
    assert2("ImportSpecifier", node2, opts);
  }
  function assertImportExpression(node2, opts) {
    assert2("ImportExpression", node2, opts);
  }
  function assertMetaProperty(node2, opts) {
    assert2("MetaProperty", node2, opts);
  }
  function assertClassMethod(node2, opts) {
    assert2("ClassMethod", node2, opts);
  }
  function assertObjectPattern(node2, opts) {
    assert2("ObjectPattern", node2, opts);
  }
  function assertSpreadElement(node2, opts) {
    assert2("SpreadElement", node2, opts);
  }
  function assertSuper(node2, opts) {
    assert2("Super", node2, opts);
  }
  function assertTaggedTemplateExpression(node2, opts) {
    assert2("TaggedTemplateExpression", node2, opts);
  }
  function assertTemplateElement(node2, opts) {
    assert2("TemplateElement", node2, opts);
  }
  function assertTemplateLiteral(node2, opts) {
    assert2("TemplateLiteral", node2, opts);
  }
  function assertYieldExpression(node2, opts) {
    assert2("YieldExpression", node2, opts);
  }
  function assertAwaitExpression(node2, opts) {
    assert2("AwaitExpression", node2, opts);
  }
  function assertImport(node2, opts) {
    assert2("Import", node2, opts);
  }
  function assertBigIntLiteral(node2, opts) {
    assert2("BigIntLiteral", node2, opts);
  }
  function assertExportNamespaceSpecifier(node2, opts) {
    assert2("ExportNamespaceSpecifier", node2, opts);
  }
  function assertOptionalMemberExpression(node2, opts) {
    assert2("OptionalMemberExpression", node2, opts);
  }
  function assertOptionalCallExpression(node2, opts) {
    assert2("OptionalCallExpression", node2, opts);
  }
  function assertClassProperty(node2, opts) {
    assert2("ClassProperty", node2, opts);
  }
  function assertClassAccessorProperty(node2, opts) {
    assert2("ClassAccessorProperty", node2, opts);
  }
  function assertClassPrivateProperty(node2, opts) {
    assert2("ClassPrivateProperty", node2, opts);
  }
  function assertClassPrivateMethod(node2, opts) {
    assert2("ClassPrivateMethod", node2, opts);
  }
  function assertPrivateName(node2, opts) {
    assert2("PrivateName", node2, opts);
  }
  function assertStaticBlock(node2, opts) {
    assert2("StaticBlock", node2, opts);
  }
  function assertAnyTypeAnnotation(node2, opts) {
    assert2("AnyTypeAnnotation", node2, opts);
  }
  function assertArrayTypeAnnotation(node2, opts) {
    assert2("ArrayTypeAnnotation", node2, opts);
  }
  function assertBooleanTypeAnnotation(node2, opts) {
    assert2("BooleanTypeAnnotation", node2, opts);
  }
  function assertBooleanLiteralTypeAnnotation(node2, opts) {
    assert2("BooleanLiteralTypeAnnotation", node2, opts);
  }
  function assertNullLiteralTypeAnnotation(node2, opts) {
    assert2("NullLiteralTypeAnnotation", node2, opts);
  }
  function assertClassImplements(node2, opts) {
    assert2("ClassImplements", node2, opts);
  }
  function assertDeclareClass(node2, opts) {
    assert2("DeclareClass", node2, opts);
  }
  function assertDeclareFunction(node2, opts) {
    assert2("DeclareFunction", node2, opts);
  }
  function assertDeclareInterface(node2, opts) {
    assert2("DeclareInterface", node2, opts);
  }
  function assertDeclareModule(node2, opts) {
    assert2("DeclareModule", node2, opts);
  }
  function assertDeclareModuleExports(node2, opts) {
    assert2("DeclareModuleExports", node2, opts);
  }
  function assertDeclareTypeAlias(node2, opts) {
    assert2("DeclareTypeAlias", node2, opts);
  }
  function assertDeclareOpaqueType(node2, opts) {
    assert2("DeclareOpaqueType", node2, opts);
  }
  function assertDeclareVariable(node2, opts) {
    assert2("DeclareVariable", node2, opts);
  }
  function assertDeclareExportDeclaration(node2, opts) {
    assert2("DeclareExportDeclaration", node2, opts);
  }
  function assertDeclareExportAllDeclaration(node2, opts) {
    assert2("DeclareExportAllDeclaration", node2, opts);
  }
  function assertDeclaredPredicate(node2, opts) {
    assert2("DeclaredPredicate", node2, opts);
  }
  function assertExistsTypeAnnotation(node2, opts) {
    assert2("ExistsTypeAnnotation", node2, opts);
  }
  function assertFunctionTypeAnnotation(node2, opts) {
    assert2("FunctionTypeAnnotation", node2, opts);
  }
  function assertFunctionTypeParam(node2, opts) {
    assert2("FunctionTypeParam", node2, opts);
  }
  function assertGenericTypeAnnotation(node2, opts) {
    assert2("GenericTypeAnnotation", node2, opts);
  }
  function assertInferredPredicate(node2, opts) {
    assert2("InferredPredicate", node2, opts);
  }
  function assertInterfaceExtends(node2, opts) {
    assert2("InterfaceExtends", node2, opts);
  }
  function assertInterfaceDeclaration(node2, opts) {
    assert2("InterfaceDeclaration", node2, opts);
  }
  function assertInterfaceTypeAnnotation(node2, opts) {
    assert2("InterfaceTypeAnnotation", node2, opts);
  }
  function assertIntersectionTypeAnnotation(node2, opts) {
    assert2("IntersectionTypeAnnotation", node2, opts);
  }
  function assertMixedTypeAnnotation(node2, opts) {
    assert2("MixedTypeAnnotation", node2, opts);
  }
  function assertEmptyTypeAnnotation(node2, opts) {
    assert2("EmptyTypeAnnotation", node2, opts);
  }
  function assertNullableTypeAnnotation(node2, opts) {
    assert2("NullableTypeAnnotation", node2, opts);
  }
  function assertNumberLiteralTypeAnnotation(node2, opts) {
    assert2("NumberLiteralTypeAnnotation", node2, opts);
  }
  function assertNumberTypeAnnotation(node2, opts) {
    assert2("NumberTypeAnnotation", node2, opts);
  }
  function assertObjectTypeAnnotation(node2, opts) {
    assert2("ObjectTypeAnnotation", node2, opts);
  }
  function assertObjectTypeInternalSlot(node2, opts) {
    assert2("ObjectTypeInternalSlot", node2, opts);
  }
  function assertObjectTypeCallProperty(node2, opts) {
    assert2("ObjectTypeCallProperty", node2, opts);
  }
  function assertObjectTypeIndexer(node2, opts) {
    assert2("ObjectTypeIndexer", node2, opts);
  }
  function assertObjectTypeProperty(node2, opts) {
    assert2("ObjectTypeProperty", node2, opts);
  }
  function assertObjectTypeSpreadProperty(node2, opts) {
    assert2("ObjectTypeSpreadProperty", node2, opts);
  }
  function assertOpaqueType(node2, opts) {
    assert2("OpaqueType", node2, opts);
  }
  function assertQualifiedTypeIdentifier(node2, opts) {
    assert2("QualifiedTypeIdentifier", node2, opts);
  }
  function assertStringLiteralTypeAnnotation(node2, opts) {
    assert2("StringLiteralTypeAnnotation", node2, opts);
  }
  function assertStringTypeAnnotation(node2, opts) {
    assert2("StringTypeAnnotation", node2, opts);
  }
  function assertSymbolTypeAnnotation(node2, opts) {
    assert2("SymbolTypeAnnotation", node2, opts);
  }
  function assertThisTypeAnnotation(node2, opts) {
    assert2("ThisTypeAnnotation", node2, opts);
  }
  function assertTupleTypeAnnotation(node2, opts) {
    assert2("TupleTypeAnnotation", node2, opts);
  }
  function assertTypeofTypeAnnotation(node2, opts) {
    assert2("TypeofTypeAnnotation", node2, opts);
  }
  function assertTypeAlias(node2, opts) {
    assert2("TypeAlias", node2, opts);
  }
  function assertTypeAnnotation(node2, opts) {
    assert2("TypeAnnotation", node2, opts);
  }
  function assertTypeCastExpression(node2, opts) {
    assert2("TypeCastExpression", node2, opts);
  }
  function assertTypeParameter(node2, opts) {
    assert2("TypeParameter", node2, opts);
  }
  function assertTypeParameterDeclaration(node2, opts) {
    assert2("TypeParameterDeclaration", node2, opts);
  }
  function assertTypeParameterInstantiation(node2, opts) {
    assert2("TypeParameterInstantiation", node2, opts);
  }
  function assertUnionTypeAnnotation(node2, opts) {
    assert2("UnionTypeAnnotation", node2, opts);
  }
  function assertVariance(node2, opts) {
    assert2("Variance", node2, opts);
  }
  function assertVoidTypeAnnotation(node2, opts) {
    assert2("VoidTypeAnnotation", node2, opts);
  }
  function assertEnumDeclaration(node2, opts) {
    assert2("EnumDeclaration", node2, opts);
  }
  function assertEnumBooleanBody(node2, opts) {
    assert2("EnumBooleanBody", node2, opts);
  }
  function assertEnumNumberBody(node2, opts) {
    assert2("EnumNumberBody", node2, opts);
  }
  function assertEnumStringBody(node2, opts) {
    assert2("EnumStringBody", node2, opts);
  }
  function assertEnumSymbolBody(node2, opts) {
    assert2("EnumSymbolBody", node2, opts);
  }
  function assertEnumBooleanMember(node2, opts) {
    assert2("EnumBooleanMember", node2, opts);
  }
  function assertEnumNumberMember(node2, opts) {
    assert2("EnumNumberMember", node2, opts);
  }
  function assertEnumStringMember(node2, opts) {
    assert2("EnumStringMember", node2, opts);
  }
  function assertEnumDefaultedMember(node2, opts) {
    assert2("EnumDefaultedMember", node2, opts);
  }
  function assertIndexedAccessType(node2, opts) {
    assert2("IndexedAccessType", node2, opts);
  }
  function assertOptionalIndexedAccessType(node2, opts) {
    assert2("OptionalIndexedAccessType", node2, opts);
  }
  function assertJSXAttribute(node2, opts) {
    assert2("JSXAttribute", node2, opts);
  }
  function assertJSXClosingElement(node2, opts) {
    assert2("JSXClosingElement", node2, opts);
  }
  function assertJSXElement(node2, opts) {
    assert2("JSXElement", node2, opts);
  }
  function assertJSXEmptyExpression(node2, opts) {
    assert2("JSXEmptyExpression", node2, opts);
  }
  function assertJSXExpressionContainer(node2, opts) {
    assert2("JSXExpressionContainer", node2, opts);
  }
  function assertJSXSpreadChild(node2, opts) {
    assert2("JSXSpreadChild", node2, opts);
  }
  function assertJSXIdentifier(node2, opts) {
    assert2("JSXIdentifier", node2, opts);
  }
  function assertJSXMemberExpression(node2, opts) {
    assert2("JSXMemberExpression", node2, opts);
  }
  function assertJSXNamespacedName(node2, opts) {
    assert2("JSXNamespacedName", node2, opts);
  }
  function assertJSXOpeningElement(node2, opts) {
    assert2("JSXOpeningElement", node2, opts);
  }
  function assertJSXSpreadAttribute(node2, opts) {
    assert2("JSXSpreadAttribute", node2, opts);
  }
  function assertJSXText(node2, opts) {
    assert2("JSXText", node2, opts);
  }
  function assertJSXFragment(node2, opts) {
    assert2("JSXFragment", node2, opts);
  }
  function assertJSXOpeningFragment(node2, opts) {
    assert2("JSXOpeningFragment", node2, opts);
  }
  function assertJSXClosingFragment(node2, opts) {
    assert2("JSXClosingFragment", node2, opts);
  }
  function assertNoop(node2, opts) {
    assert2("Noop", node2, opts);
  }
  function assertPlaceholder(node2, opts) {
    assert2("Placeholder", node2, opts);
  }
  function assertV8IntrinsicIdentifier(node2, opts) {
    assert2("V8IntrinsicIdentifier", node2, opts);
  }
  function assertArgumentPlaceholder(node2, opts) {
    assert2("ArgumentPlaceholder", node2, opts);
  }
  function assertBindExpression(node2, opts) {
    assert2("BindExpression", node2, opts);
  }
  function assertImportAttribute(node2, opts) {
    assert2("ImportAttribute", node2, opts);
  }
  function assertDecorator(node2, opts) {
    assert2("Decorator", node2, opts);
  }
  function assertDoExpression(node2, opts) {
    assert2("DoExpression", node2, opts);
  }
  function assertExportDefaultSpecifier(node2, opts) {
    assert2("ExportDefaultSpecifier", node2, opts);
  }
  function assertRecordExpression(node2, opts) {
    assert2("RecordExpression", node2, opts);
  }
  function assertTupleExpression(node2, opts) {
    assert2("TupleExpression", node2, opts);
  }
  function assertDecimalLiteral(node2, opts) {
    assert2("DecimalLiteral", node2, opts);
  }
  function assertModuleExpression(node2, opts) {
    assert2("ModuleExpression", node2, opts);
  }
  function assertTopicReference(node2, opts) {
    assert2("TopicReference", node2, opts);
  }
  function assertPipelineTopicExpression(node2, opts) {
    assert2("PipelineTopicExpression", node2, opts);
  }
  function assertPipelineBareFunction(node2, opts) {
    assert2("PipelineBareFunction", node2, opts);
  }
  function assertPipelinePrimaryTopicReference(node2, opts) {
    assert2("PipelinePrimaryTopicReference", node2, opts);
  }
  function assertTSParameterProperty(node2, opts) {
    assert2("TSParameterProperty", node2, opts);
  }
  function assertTSDeclareFunction(node2, opts) {
    assert2("TSDeclareFunction", node2, opts);
  }
  function assertTSDeclareMethod(node2, opts) {
    assert2("TSDeclareMethod", node2, opts);
  }
  function assertTSQualifiedName(node2, opts) {
    assert2("TSQualifiedName", node2, opts);
  }
  function assertTSCallSignatureDeclaration(node2, opts) {
    assert2("TSCallSignatureDeclaration", node2, opts);
  }
  function assertTSConstructSignatureDeclaration(node2, opts) {
    assert2("TSConstructSignatureDeclaration", node2, opts);
  }
  function assertTSPropertySignature(node2, opts) {
    assert2("TSPropertySignature", node2, opts);
  }
  function assertTSMethodSignature(node2, opts) {
    assert2("TSMethodSignature", node2, opts);
  }
  function assertTSIndexSignature(node2, opts) {
    assert2("TSIndexSignature", node2, opts);
  }
  function assertTSAnyKeyword(node2, opts) {
    assert2("TSAnyKeyword", node2, opts);
  }
  function assertTSBooleanKeyword(node2, opts) {
    assert2("TSBooleanKeyword", node2, opts);
  }
  function assertTSBigIntKeyword(node2, opts) {
    assert2("TSBigIntKeyword", node2, opts);
  }
  function assertTSIntrinsicKeyword(node2, opts) {
    assert2("TSIntrinsicKeyword", node2, opts);
  }
  function assertTSNeverKeyword(node2, opts) {
    assert2("TSNeverKeyword", node2, opts);
  }
  function assertTSNullKeyword(node2, opts) {
    assert2("TSNullKeyword", node2, opts);
  }
  function assertTSNumberKeyword(node2, opts) {
    assert2("TSNumberKeyword", node2, opts);
  }
  function assertTSObjectKeyword(node2, opts) {
    assert2("TSObjectKeyword", node2, opts);
  }
  function assertTSStringKeyword(node2, opts) {
    assert2("TSStringKeyword", node2, opts);
  }
  function assertTSSymbolKeyword(node2, opts) {
    assert2("TSSymbolKeyword", node2, opts);
  }
  function assertTSUndefinedKeyword(node2, opts) {
    assert2("TSUndefinedKeyword", node2, opts);
  }
  function assertTSUnknownKeyword(node2, opts) {
    assert2("TSUnknownKeyword", node2, opts);
  }
  function assertTSVoidKeyword(node2, opts) {
    assert2("TSVoidKeyword", node2, opts);
  }
  function assertTSThisType(node2, opts) {
    assert2("TSThisType", node2, opts);
  }
  function assertTSFunctionType(node2, opts) {
    assert2("TSFunctionType", node2, opts);
  }
  function assertTSConstructorType(node2, opts) {
    assert2("TSConstructorType", node2, opts);
  }
  function assertTSTypeReference(node2, opts) {
    assert2("TSTypeReference", node2, opts);
  }
  function assertTSTypePredicate(node2, opts) {
    assert2("TSTypePredicate", node2, opts);
  }
  function assertTSTypeQuery(node2, opts) {
    assert2("TSTypeQuery", node2, opts);
  }
  function assertTSTypeLiteral(node2, opts) {
    assert2("TSTypeLiteral", node2, opts);
  }
  function assertTSArrayType(node2, opts) {
    assert2("TSArrayType", node2, opts);
  }
  function assertTSTupleType(node2, opts) {
    assert2("TSTupleType", node2, opts);
  }
  function assertTSOptionalType(node2, opts) {
    assert2("TSOptionalType", node2, opts);
  }
  function assertTSRestType(node2, opts) {
    assert2("TSRestType", node2, opts);
  }
  function assertTSNamedTupleMember(node2, opts) {
    assert2("TSNamedTupleMember", node2, opts);
  }
  function assertTSUnionType(node2, opts) {
    assert2("TSUnionType", node2, opts);
  }
  function assertTSIntersectionType(node2, opts) {
    assert2("TSIntersectionType", node2, opts);
  }
  function assertTSConditionalType(node2, opts) {
    assert2("TSConditionalType", node2, opts);
  }
  function assertTSInferType(node2, opts) {
    assert2("TSInferType", node2, opts);
  }
  function assertTSParenthesizedType(node2, opts) {
    assert2("TSParenthesizedType", node2, opts);
  }
  function assertTSTypeOperator(node2, opts) {
    assert2("TSTypeOperator", node2, opts);
  }
  function assertTSIndexedAccessType(node2, opts) {
    assert2("TSIndexedAccessType", node2, opts);
  }
  function assertTSMappedType(node2, opts) {
    assert2("TSMappedType", node2, opts);
  }
  function assertTSLiteralType(node2, opts) {
    assert2("TSLiteralType", node2, opts);
  }
  function assertTSExpressionWithTypeArguments(node2, opts) {
    assert2("TSExpressionWithTypeArguments", node2, opts);
  }
  function assertTSInterfaceDeclaration(node2, opts) {
    assert2("TSInterfaceDeclaration", node2, opts);
  }
  function assertTSInterfaceBody(node2, opts) {
    assert2("TSInterfaceBody", node2, opts);
  }
  function assertTSTypeAliasDeclaration(node2, opts) {
    assert2("TSTypeAliasDeclaration", node2, opts);
  }
  function assertTSInstantiationExpression(node2, opts) {
    assert2("TSInstantiationExpression", node2, opts);
  }
  function assertTSAsExpression(node2, opts) {
    assert2("TSAsExpression", node2, opts);
  }
  function assertTSSatisfiesExpression(node2, opts) {
    assert2("TSSatisfiesExpression", node2, opts);
  }
  function assertTSTypeAssertion(node2, opts) {
    assert2("TSTypeAssertion", node2, opts);
  }
  function assertTSEnumDeclaration(node2, opts) {
    assert2("TSEnumDeclaration", node2, opts);
  }
  function assertTSEnumMember(node2, opts) {
    assert2("TSEnumMember", node2, opts);
  }
  function assertTSModuleDeclaration(node2, opts) {
    assert2("TSModuleDeclaration", node2, opts);
  }
  function assertTSModuleBlock(node2, opts) {
    assert2("TSModuleBlock", node2, opts);
  }
  function assertTSImportType(node2, opts) {
    assert2("TSImportType", node2, opts);
  }
  function assertTSImportEqualsDeclaration(node2, opts) {
    assert2("TSImportEqualsDeclaration", node2, opts);
  }
  function assertTSExternalModuleReference(node2, opts) {
    assert2("TSExternalModuleReference", node2, opts);
  }
  function assertTSNonNullExpression(node2, opts) {
    assert2("TSNonNullExpression", node2, opts);
  }
  function assertTSExportAssignment(node2, opts) {
    assert2("TSExportAssignment", node2, opts);
  }
  function assertTSNamespaceExportDeclaration(node2, opts) {
    assert2("TSNamespaceExportDeclaration", node2, opts);
  }
  function assertTSTypeAnnotation(node2, opts) {
    assert2("TSTypeAnnotation", node2, opts);
  }
  function assertTSTypeParameterInstantiation(node2, opts) {
    assert2("TSTypeParameterInstantiation", node2, opts);
  }
  function assertTSTypeParameterDeclaration(node2, opts) {
    assert2("TSTypeParameterDeclaration", node2, opts);
  }
  function assertTSTypeParameter(node2, opts) {
    assert2("TSTypeParameter", node2, opts);
  }
  function assertStandardized(node2, opts) {
    assert2("Standardized", node2, opts);
  }
  function assertExpression(node2, opts) {
    assert2("Expression", node2, opts);
  }
  function assertBinary(node2, opts) {
    assert2("Binary", node2, opts);
  }
  function assertScopable(node2, opts) {
    assert2("Scopable", node2, opts);
  }
  function assertBlockParent(node2, opts) {
    assert2("BlockParent", node2, opts);
  }
  function assertBlock(node2, opts) {
    assert2("Block", node2, opts);
  }
  function assertStatement(node2, opts) {
    assert2("Statement", node2, opts);
  }
  function assertTerminatorless(node2, opts) {
    assert2("Terminatorless", node2, opts);
  }
  function assertCompletionStatement(node2, opts) {
    assert2("CompletionStatement", node2, opts);
  }
  function assertConditional(node2, opts) {
    assert2("Conditional", node2, opts);
  }
  function assertLoop(node2, opts) {
    assert2("Loop", node2, opts);
  }
  function assertWhile(node2, opts) {
    assert2("While", node2, opts);
  }
  function assertExpressionWrapper(node2, opts) {
    assert2("ExpressionWrapper", node2, opts);
  }
  function assertFor(node2, opts) {
    assert2("For", node2, opts);
  }
  function assertForXStatement(node2, opts) {
    assert2("ForXStatement", node2, opts);
  }
  function assertFunction(node2, opts) {
    assert2("Function", node2, opts);
  }
  function assertFunctionParent(node2, opts) {
    assert2("FunctionParent", node2, opts);
  }
  function assertPureish(node2, opts) {
    assert2("Pureish", node2, opts);
  }
  function assertDeclaration(node2, opts) {
    assert2("Declaration", node2, opts);
  }
  function assertPatternLike(node2, opts) {
    assert2("PatternLike", node2, opts);
  }
  function assertLVal(node2, opts) {
    assert2("LVal", node2, opts);
  }
  function assertTSEntityName(node2, opts) {
    assert2("TSEntityName", node2, opts);
  }
  function assertLiteral(node2, opts) {
    assert2("Literal", node2, opts);
  }
  function assertImmutable(node2, opts) {
    assert2("Immutable", node2, opts);
  }
  function assertUserWhitespacable(node2, opts) {
    assert2("UserWhitespacable", node2, opts);
  }
  function assertMethod(node2, opts) {
    assert2("Method", node2, opts);
  }
  function assertObjectMember(node2, opts) {
    assert2("ObjectMember", node2, opts);
  }
  function assertProperty(node2, opts) {
    assert2("Property", node2, opts);
  }
  function assertUnaryLike(node2, opts) {
    assert2("UnaryLike", node2, opts);
  }
  function assertPattern(node2, opts) {
    assert2("Pattern", node2, opts);
  }
  function assertClass(node2, opts) {
    assert2("Class", node2, opts);
  }
  function assertImportOrExportDeclaration(node2, opts) {
    assert2("ImportOrExportDeclaration", node2, opts);
  }
  function assertExportDeclaration(node2, opts) {
    assert2("ExportDeclaration", node2, opts);
  }
  function assertModuleSpecifier(node2, opts) {
    assert2("ModuleSpecifier", node2, opts);
  }
  function assertAccessor(node2, opts) {
    assert2("Accessor", node2, opts);
  }
  function assertPrivate(node2, opts) {
    assert2("Private", node2, opts);
  }
  function assertFlow(node2, opts) {
    assert2("Flow", node2, opts);
  }
  function assertFlowType(node2, opts) {
    assert2("FlowType", node2, opts);
  }
  function assertFlowBaseAnnotation(node2, opts) {
    assert2("FlowBaseAnnotation", node2, opts);
  }
  function assertFlowDeclaration(node2, opts) {
    assert2("FlowDeclaration", node2, opts);
  }
  function assertFlowPredicate(node2, opts) {
    assert2("FlowPredicate", node2, opts);
  }
  function assertEnumBody(node2, opts) {
    assert2("EnumBody", node2, opts);
  }
  function assertEnumMember(node2, opts) {
    assert2("EnumMember", node2, opts);
  }
  function assertJSX(node2, opts) {
    assert2("JSX", node2, opts);
  }
  function assertMiscellaneous(node2, opts) {
    assert2("Miscellaneous", node2, opts);
  }
  function assertTypeScript(node2, opts) {
    assert2("TypeScript", node2, opts);
  }
  function assertTSTypeElement(node2, opts) {
    assert2("TSTypeElement", node2, opts);
  }
  function assertTSType(node2, opts) {
    assert2("TSType", node2, opts);
  }
  function assertTSBaseType(node2, opts) {
    assert2("TSBaseType", node2, opts);
  }
  function assertNumberLiteral(node2, opts) {
    (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral");
    assert2("NumberLiteral", node2, opts);
  }
  function assertRegexLiteral(node2, opts) {
    (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral");
    assert2("RegexLiteral", node2, opts);
  }
  function assertRestProperty(node2, opts) {
    (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement");
    assert2("RestProperty", node2, opts);
  }
  function assertSpreadProperty(node2, opts) {
    (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement");
    assert2("SpreadProperty", node2, opts);
  }
  function assertModuleDeclaration(node2, opts) {
    (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration");
    assert2("ModuleDeclaration", node2, opts);
  }
  return generated$1;
}
var createTypeAnnotationBasedOnTypeof = {};
var hasRequiredCreateTypeAnnotationBasedOnTypeof;
function requireCreateTypeAnnotationBasedOnTypeof() {
  if (hasRequiredCreateTypeAnnotationBasedOnTypeof) return createTypeAnnotationBasedOnTypeof;
  hasRequiredCreateTypeAnnotationBasedOnTypeof = 1;
  Object.defineProperty(createTypeAnnotationBasedOnTypeof, "__esModule", {
    value: true
  });
  createTypeAnnotationBasedOnTypeof.default = void 0;
  var _index = requireGenerated$2();
  createTypeAnnotationBasedOnTypeof.default = createTypeAnnotationBasedOnTypeof$1;
  function createTypeAnnotationBasedOnTypeof$1(type) {
    switch (type) {
      case "string":
        return (0, _index.stringTypeAnnotation)();
      case "number":
        return (0, _index.numberTypeAnnotation)();
      case "undefined":
        return (0, _index.voidTypeAnnotation)();
      case "boolean":
        return (0, _index.booleanTypeAnnotation)();
      case "function":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
      case "object":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
      case "symbol":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
      case "bigint":
        return (0, _index.anyTypeAnnotation)();
    }
    throw new Error("Invalid typeof value: " + type);
  }
  return createTypeAnnotationBasedOnTypeof;
}
var createFlowUnionType = {};
var removeTypeDuplicates$1 = {};
var hasRequiredRemoveTypeDuplicates$1;
function requireRemoveTypeDuplicates$1() {
  if (hasRequiredRemoveTypeDuplicates$1) return removeTypeDuplicates$1;
  hasRequiredRemoveTypeDuplicates$1 = 1;
  Object.defineProperty(removeTypeDuplicates$1, "__esModule", {
    value: true
  });
  removeTypeDuplicates$1.default = removeTypeDuplicates2;
  var _index = requireGenerated$3();
  function getQualifiedName(node2) {
    return (0, _index.isIdentifier)(node2) ? node2.name : `${node2.id.name}.${getQualifiedName(node2.qualification)}`;
  }
  function removeTypeDuplicates2(nodesIn) {
    const nodes = Array.from(nodesIn);
    const generics = /* @__PURE__ */ new Map();
    const bases = /* @__PURE__ */ new Map();
    const typeGroups = /* @__PURE__ */ new Set();
    const types2 = [];
    for (let i = 0; i < nodes.length; i++) {
      const node2 = nodes[i];
      if (!node2) continue;
      if (types2.indexOf(node2) >= 0) {
        continue;
      }
      if ((0, _index.isAnyTypeAnnotation)(node2)) {
        return [node2];
      }
      if ((0, _index.isFlowBaseAnnotation)(node2)) {
        bases.set(node2.type, node2);
        continue;
      }
      if ((0, _index.isUnionTypeAnnotation)(node2)) {
        if (!typeGroups.has(node2.types)) {
          nodes.push(...node2.types);
          typeGroups.add(node2.types);
        }
        continue;
      }
      if ((0, _index.isGenericTypeAnnotation)(node2)) {
        const name = getQualifiedName(node2.id);
        if (generics.has(name)) {
          let existing = generics.get(name);
          if (existing.typeParameters) {
            if (node2.typeParameters) {
              existing.typeParameters.params.push(...node2.typeParameters.params);
              existing.typeParameters.params = removeTypeDuplicates2(existing.typeParameters.params);
            }
          } else {
            existing = node2.typeParameters;
          }
        } else {
          generics.set(name, node2);
        }
        continue;
      }
      types2.push(node2);
    }
    for (const [, baseType] of bases) {
      types2.push(baseType);
    }
    for (const [, genericName] of generics) {
      types2.push(genericName);
    }
    return types2;
  }
  return removeTypeDuplicates$1;
}
var hasRequiredCreateFlowUnionType;
function requireCreateFlowUnionType() {
  if (hasRequiredCreateFlowUnionType) return createFlowUnionType;
  hasRequiredCreateFlowUnionType = 1;
  Object.defineProperty(createFlowUnionType, "__esModule", {
    value: true
  });
  createFlowUnionType.default = createFlowUnionType$1;
  var _index = requireGenerated$2();
  var _removeTypeDuplicates = requireRemoveTypeDuplicates$1();
  function createFlowUnionType$1(types2) {
    const flattened = (0, _removeTypeDuplicates.default)(types2);
    if (flattened.length === 1) {
      return flattened[0];
    } else {
      return (0, _index.unionTypeAnnotation)(flattened);
    }
  }
  return createFlowUnionType;
}
var createTSUnionType = {};
var removeTypeDuplicates = {};
var hasRequiredRemoveTypeDuplicates;
function requireRemoveTypeDuplicates() {
  if (hasRequiredRemoveTypeDuplicates) return removeTypeDuplicates;
  hasRequiredRemoveTypeDuplicates = 1;
  Object.defineProperty(removeTypeDuplicates, "__esModule", {
    value: true
  });
  removeTypeDuplicates.default = removeTypeDuplicates$12;
  var _index = requireGenerated$3();
  function getQualifiedName(node2) {
    return (0, _index.isIdentifier)(node2) ? node2.name : `${node2.right.name}.${getQualifiedName(node2.left)}`;
  }
  function removeTypeDuplicates$12(nodesIn) {
    const nodes = Array.from(nodesIn);
    const generics = /* @__PURE__ */ new Map();
    const bases = /* @__PURE__ */ new Map();
    const typeGroups = /* @__PURE__ */ new Set();
    const types2 = [];
    for (let i = 0; i < nodes.length; i++) {
      const node2 = nodes[i];
      if (!node2) continue;
      if (types2.indexOf(node2) >= 0) {
        continue;
      }
      if ((0, _index.isTSAnyKeyword)(node2)) {
        return [node2];
      }
      if ((0, _index.isTSBaseType)(node2)) {
        bases.set(node2.type, node2);
        continue;
      }
      if ((0, _index.isTSUnionType)(node2)) {
        if (!typeGroups.has(node2.types)) {
          nodes.push(...node2.types);
          typeGroups.add(node2.types);
        }
        continue;
      }
      if ((0, _index.isTSTypeReference)(node2) && node2.typeParameters) {
        const name = getQualifiedName(node2.typeName);
        if (generics.has(name)) {
          let existing = generics.get(name);
          if (existing.typeParameters) {
            if (node2.typeParameters) {
              existing.typeParameters.params.push(...node2.typeParameters.params);
              existing.typeParameters.params = removeTypeDuplicates$12(existing.typeParameters.params);
            }
          } else {
            existing = node2.typeParameters;
          }
        } else {
          generics.set(name, node2);
        }
        continue;
      }
      types2.push(node2);
    }
    for (const [, baseType] of bases) {
      types2.push(baseType);
    }
    for (const [, genericName] of generics) {
      types2.push(genericName);
    }
    return types2;
  }
  return removeTypeDuplicates;
}
var hasRequiredCreateTSUnionType;
function requireCreateTSUnionType() {
  if (hasRequiredCreateTSUnionType) return createTSUnionType;
  hasRequiredCreateTSUnionType = 1;
  Object.defineProperty(createTSUnionType, "__esModule", {
    value: true
  });
  createTSUnionType.default = createTSUnionType$1;
  var _index = requireGenerated$2();
  var _removeTypeDuplicates = requireRemoveTypeDuplicates();
  var _index2 = requireGenerated$3();
  function createTSUnionType$1(typeAnnotations) {
    const types2 = typeAnnotations.map((type) => {
      return (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type;
    });
    const flattened = (0, _removeTypeDuplicates.default)(types2);
    if (flattened.length === 1) {
      return flattened[0];
    } else {
      return (0, _index.tsUnionType)(flattened);
    }
  }
  return createTSUnionType;
}
var uppercase = {};
var hasRequiredUppercase;
function requireUppercase() {
  if (hasRequiredUppercase) return uppercase;
  hasRequiredUppercase = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "AnyTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.anyTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ArgumentPlaceholder", {
      enumerable: true,
      get: function() {
        return _index.argumentPlaceholder;
      }
    });
    Object.defineProperty(exports, "ArrayExpression", {
      enumerable: true,
      get: function() {
        return _index.arrayExpression;
      }
    });
    Object.defineProperty(exports, "ArrayPattern", {
      enumerable: true,
      get: function() {
        return _index.arrayPattern;
      }
    });
    Object.defineProperty(exports, "ArrayTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.arrayTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ArrowFunctionExpression", {
      enumerable: true,
      get: function() {
        return _index.arrowFunctionExpression;
      }
    });
    Object.defineProperty(exports, "AssignmentExpression", {
      enumerable: true,
      get: function() {
        return _index.assignmentExpression;
      }
    });
    Object.defineProperty(exports, "AssignmentPattern", {
      enumerable: true,
      get: function() {
        return _index.assignmentPattern;
      }
    });
    Object.defineProperty(exports, "AwaitExpression", {
      enumerable: true,
      get: function() {
        return _index.awaitExpression;
      }
    });
    Object.defineProperty(exports, "BigIntLiteral", {
      enumerable: true,
      get: function() {
        return _index.bigIntLiteral;
      }
    });
    Object.defineProperty(exports, "BinaryExpression", {
      enumerable: true,
      get: function() {
        return _index.binaryExpression;
      }
    });
    Object.defineProperty(exports, "BindExpression", {
      enumerable: true,
      get: function() {
        return _index.bindExpression;
      }
    });
    Object.defineProperty(exports, "BlockStatement", {
      enumerable: true,
      get: function() {
        return _index.blockStatement;
      }
    });
    Object.defineProperty(exports, "BooleanLiteral", {
      enumerable: true,
      get: function() {
        return _index.booleanLiteral;
      }
    });
    Object.defineProperty(exports, "BooleanLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.booleanLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "BooleanTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.booleanTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "BreakStatement", {
      enumerable: true,
      get: function() {
        return _index.breakStatement;
      }
    });
    Object.defineProperty(exports, "CallExpression", {
      enumerable: true,
      get: function() {
        return _index.callExpression;
      }
    });
    Object.defineProperty(exports, "CatchClause", {
      enumerable: true,
      get: function() {
        return _index.catchClause;
      }
    });
    Object.defineProperty(exports, "ClassAccessorProperty", {
      enumerable: true,
      get: function() {
        return _index.classAccessorProperty;
      }
    });
    Object.defineProperty(exports, "ClassBody", {
      enumerable: true,
      get: function() {
        return _index.classBody;
      }
    });
    Object.defineProperty(exports, "ClassDeclaration", {
      enumerable: true,
      get: function() {
        return _index.classDeclaration;
      }
    });
    Object.defineProperty(exports, "ClassExpression", {
      enumerable: true,
      get: function() {
        return _index.classExpression;
      }
    });
    Object.defineProperty(exports, "ClassImplements", {
      enumerable: true,
      get: function() {
        return _index.classImplements;
      }
    });
    Object.defineProperty(exports, "ClassMethod", {
      enumerable: true,
      get: function() {
        return _index.classMethod;
      }
    });
    Object.defineProperty(exports, "ClassPrivateMethod", {
      enumerable: true,
      get: function() {
        return _index.classPrivateMethod;
      }
    });
    Object.defineProperty(exports, "ClassPrivateProperty", {
      enumerable: true,
      get: function() {
        return _index.classPrivateProperty;
      }
    });
    Object.defineProperty(exports, "ClassProperty", {
      enumerable: true,
      get: function() {
        return _index.classProperty;
      }
    });
    Object.defineProperty(exports, "ConditionalExpression", {
      enumerable: true,
      get: function() {
        return _index.conditionalExpression;
      }
    });
    Object.defineProperty(exports, "ContinueStatement", {
      enumerable: true,
      get: function() {
        return _index.continueStatement;
      }
    });
    Object.defineProperty(exports, "DebuggerStatement", {
      enumerable: true,
      get: function() {
        return _index.debuggerStatement;
      }
    });
    Object.defineProperty(exports, "DecimalLiteral", {
      enumerable: true,
      get: function() {
        return _index.decimalLiteral;
      }
    });
    Object.defineProperty(exports, "DeclareClass", {
      enumerable: true,
      get: function() {
        return _index.declareClass;
      }
    });
    Object.defineProperty(exports, "DeclareExportAllDeclaration", {
      enumerable: true,
      get: function() {
        return _index.declareExportAllDeclaration;
      }
    });
    Object.defineProperty(exports, "DeclareExportDeclaration", {
      enumerable: true,
      get: function() {
        return _index.declareExportDeclaration;
      }
    });
    Object.defineProperty(exports, "DeclareFunction", {
      enumerable: true,
      get: function() {
        return _index.declareFunction;
      }
    });
    Object.defineProperty(exports, "DeclareInterface", {
      enumerable: true,
      get: function() {
        return _index.declareInterface;
      }
    });
    Object.defineProperty(exports, "DeclareModule", {
      enumerable: true,
      get: function() {
        return _index.declareModule;
      }
    });
    Object.defineProperty(exports, "DeclareModuleExports", {
      enumerable: true,
      get: function() {
        return _index.declareModuleExports;
      }
    });
    Object.defineProperty(exports, "DeclareOpaqueType", {
      enumerable: true,
      get: function() {
        return _index.declareOpaqueType;
      }
    });
    Object.defineProperty(exports, "DeclareTypeAlias", {
      enumerable: true,
      get: function() {
        return _index.declareTypeAlias;
      }
    });
    Object.defineProperty(exports, "DeclareVariable", {
      enumerable: true,
      get: function() {
        return _index.declareVariable;
      }
    });
    Object.defineProperty(exports, "DeclaredPredicate", {
      enumerable: true,
      get: function() {
        return _index.declaredPredicate;
      }
    });
    Object.defineProperty(exports, "Decorator", {
      enumerable: true,
      get: function() {
        return _index.decorator;
      }
    });
    Object.defineProperty(exports, "Directive", {
      enumerable: true,
      get: function() {
        return _index.directive;
      }
    });
    Object.defineProperty(exports, "DirectiveLiteral", {
      enumerable: true,
      get: function() {
        return _index.directiveLiteral;
      }
    });
    Object.defineProperty(exports, "DoExpression", {
      enumerable: true,
      get: function() {
        return _index.doExpression;
      }
    });
    Object.defineProperty(exports, "DoWhileStatement", {
      enumerable: true,
      get: function() {
        return _index.doWhileStatement;
      }
    });
    Object.defineProperty(exports, "EmptyStatement", {
      enumerable: true,
      get: function() {
        return _index.emptyStatement;
      }
    });
    Object.defineProperty(exports, "EmptyTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.emptyTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "EnumBooleanBody", {
      enumerable: true,
      get: function() {
        return _index.enumBooleanBody;
      }
    });
    Object.defineProperty(exports, "EnumBooleanMember", {
      enumerable: true,
      get: function() {
        return _index.enumBooleanMember;
      }
    });
    Object.defineProperty(exports, "EnumDeclaration", {
      enumerable: true,
      get: function() {
        return _index.enumDeclaration;
      }
    });
    Object.defineProperty(exports, "EnumDefaultedMember", {
      enumerable: true,
      get: function() {
        return _index.enumDefaultedMember;
      }
    });
    Object.defineProperty(exports, "EnumNumberBody", {
      enumerable: true,
      get: function() {
        return _index.enumNumberBody;
      }
    });
    Object.defineProperty(exports, "EnumNumberMember", {
      enumerable: true,
      get: function() {
        return _index.enumNumberMember;
      }
    });
    Object.defineProperty(exports, "EnumStringBody", {
      enumerable: true,
      get: function() {
        return _index.enumStringBody;
      }
    });
    Object.defineProperty(exports, "EnumStringMember", {
      enumerable: true,
      get: function() {
        return _index.enumStringMember;
      }
    });
    Object.defineProperty(exports, "EnumSymbolBody", {
      enumerable: true,
      get: function() {
        return _index.enumSymbolBody;
      }
    });
    Object.defineProperty(exports, "ExistsTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.existsTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ExportAllDeclaration", {
      enumerable: true,
      get: function() {
        return _index.exportAllDeclaration;
      }
    });
    Object.defineProperty(exports, "ExportDefaultDeclaration", {
      enumerable: true,
      get: function() {
        return _index.exportDefaultDeclaration;
      }
    });
    Object.defineProperty(exports, "ExportDefaultSpecifier", {
      enumerable: true,
      get: function() {
        return _index.exportDefaultSpecifier;
      }
    });
    Object.defineProperty(exports, "ExportNamedDeclaration", {
      enumerable: true,
      get: function() {
        return _index.exportNamedDeclaration;
      }
    });
    Object.defineProperty(exports, "ExportNamespaceSpecifier", {
      enumerable: true,
      get: function() {
        return _index.exportNamespaceSpecifier;
      }
    });
    Object.defineProperty(exports, "ExportSpecifier", {
      enumerable: true,
      get: function() {
        return _index.exportSpecifier;
      }
    });
    Object.defineProperty(exports, "ExpressionStatement", {
      enumerable: true,
      get: function() {
        return _index.expressionStatement;
      }
    });
    Object.defineProperty(exports, "File", {
      enumerable: true,
      get: function() {
        return _index.file;
      }
    });
    Object.defineProperty(exports, "ForInStatement", {
      enumerable: true,
      get: function() {
        return _index.forInStatement;
      }
    });
    Object.defineProperty(exports, "ForOfStatement", {
      enumerable: true,
      get: function() {
        return _index.forOfStatement;
      }
    });
    Object.defineProperty(exports, "ForStatement", {
      enumerable: true,
      get: function() {
        return _index.forStatement;
      }
    });
    Object.defineProperty(exports, "FunctionDeclaration", {
      enumerable: true,
      get: function() {
        return _index.functionDeclaration;
      }
    });
    Object.defineProperty(exports, "FunctionExpression", {
      enumerable: true,
      get: function() {
        return _index.functionExpression;
      }
    });
    Object.defineProperty(exports, "FunctionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.functionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "FunctionTypeParam", {
      enumerable: true,
      get: function() {
        return _index.functionTypeParam;
      }
    });
    Object.defineProperty(exports, "GenericTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.genericTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "Identifier", {
      enumerable: true,
      get: function() {
        return _index.identifier;
      }
    });
    Object.defineProperty(exports, "IfStatement", {
      enumerable: true,
      get: function() {
        return _index.ifStatement;
      }
    });
    Object.defineProperty(exports, "Import", {
      enumerable: true,
      get: function() {
        return _index.import;
      }
    });
    Object.defineProperty(exports, "ImportAttribute", {
      enumerable: true,
      get: function() {
        return _index.importAttribute;
      }
    });
    Object.defineProperty(exports, "ImportDeclaration", {
      enumerable: true,
      get: function() {
        return _index.importDeclaration;
      }
    });
    Object.defineProperty(exports, "ImportDefaultSpecifier", {
      enumerable: true,
      get: function() {
        return _index.importDefaultSpecifier;
      }
    });
    Object.defineProperty(exports, "ImportExpression", {
      enumerable: true,
      get: function() {
        return _index.importExpression;
      }
    });
    Object.defineProperty(exports, "ImportNamespaceSpecifier", {
      enumerable: true,
      get: function() {
        return _index.importNamespaceSpecifier;
      }
    });
    Object.defineProperty(exports, "ImportSpecifier", {
      enumerable: true,
      get: function() {
        return _index.importSpecifier;
      }
    });
    Object.defineProperty(exports, "IndexedAccessType", {
      enumerable: true,
      get: function() {
        return _index.indexedAccessType;
      }
    });
    Object.defineProperty(exports, "InferredPredicate", {
      enumerable: true,
      get: function() {
        return _index.inferredPredicate;
      }
    });
    Object.defineProperty(exports, "InterfaceDeclaration", {
      enumerable: true,
      get: function() {
        return _index.interfaceDeclaration;
      }
    });
    Object.defineProperty(exports, "InterfaceExtends", {
      enumerable: true,
      get: function() {
        return _index.interfaceExtends;
      }
    });
    Object.defineProperty(exports, "InterfaceTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.interfaceTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "InterpreterDirective", {
      enumerable: true,
      get: function() {
        return _index.interpreterDirective;
      }
    });
    Object.defineProperty(exports, "IntersectionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.intersectionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "JSXAttribute", {
      enumerable: true,
      get: function() {
        return _index.jsxAttribute;
      }
    });
    Object.defineProperty(exports, "JSXClosingElement", {
      enumerable: true,
      get: function() {
        return _index.jsxClosingElement;
      }
    });
    Object.defineProperty(exports, "JSXClosingFragment", {
      enumerable: true,
      get: function() {
        return _index.jsxClosingFragment;
      }
    });
    Object.defineProperty(exports, "JSXElement", {
      enumerable: true,
      get: function() {
        return _index.jsxElement;
      }
    });
    Object.defineProperty(exports, "JSXEmptyExpression", {
      enumerable: true,
      get: function() {
        return _index.jsxEmptyExpression;
      }
    });
    Object.defineProperty(exports, "JSXExpressionContainer", {
      enumerable: true,
      get: function() {
        return _index.jsxExpressionContainer;
      }
    });
    Object.defineProperty(exports, "JSXFragment", {
      enumerable: true,
      get: function() {
        return _index.jsxFragment;
      }
    });
    Object.defineProperty(exports, "JSXIdentifier", {
      enumerable: true,
      get: function() {
        return _index.jsxIdentifier;
      }
    });
    Object.defineProperty(exports, "JSXMemberExpression", {
      enumerable: true,
      get: function() {
        return _index.jsxMemberExpression;
      }
    });
    Object.defineProperty(exports, "JSXNamespacedName", {
      enumerable: true,
      get: function() {
        return _index.jsxNamespacedName;
      }
    });
    Object.defineProperty(exports, "JSXOpeningElement", {
      enumerable: true,
      get: function() {
        return _index.jsxOpeningElement;
      }
    });
    Object.defineProperty(exports, "JSXOpeningFragment", {
      enumerable: true,
      get: function() {
        return _index.jsxOpeningFragment;
      }
    });
    Object.defineProperty(exports, "JSXSpreadAttribute", {
      enumerable: true,
      get: function() {
        return _index.jsxSpreadAttribute;
      }
    });
    Object.defineProperty(exports, "JSXSpreadChild", {
      enumerable: true,
      get: function() {
        return _index.jsxSpreadChild;
      }
    });
    Object.defineProperty(exports, "JSXText", {
      enumerable: true,
      get: function() {
        return _index.jsxText;
      }
    });
    Object.defineProperty(exports, "LabeledStatement", {
      enumerable: true,
      get: function() {
        return _index.labeledStatement;
      }
    });
    Object.defineProperty(exports, "LogicalExpression", {
      enumerable: true,
      get: function() {
        return _index.logicalExpression;
      }
    });
    Object.defineProperty(exports, "MemberExpression", {
      enumerable: true,
      get: function() {
        return _index.memberExpression;
      }
    });
    Object.defineProperty(exports, "MetaProperty", {
      enumerable: true,
      get: function() {
        return _index.metaProperty;
      }
    });
    Object.defineProperty(exports, "MixedTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.mixedTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ModuleExpression", {
      enumerable: true,
      get: function() {
        return _index.moduleExpression;
      }
    });
    Object.defineProperty(exports, "NewExpression", {
      enumerable: true,
      get: function() {
        return _index.newExpression;
      }
    });
    Object.defineProperty(exports, "Noop", {
      enumerable: true,
      get: function() {
        return _index.noop;
      }
    });
    Object.defineProperty(exports, "NullLiteral", {
      enumerable: true,
      get: function() {
        return _index.nullLiteral;
      }
    });
    Object.defineProperty(exports, "NullLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.nullLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "NullableTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.nullableTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "NumberLiteral", {
      enumerable: true,
      get: function() {
        return _index.numberLiteral;
      }
    });
    Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.numberLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "NumberTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.numberTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "NumericLiteral", {
      enumerable: true,
      get: function() {
        return _index.numericLiteral;
      }
    });
    Object.defineProperty(exports, "ObjectExpression", {
      enumerable: true,
      get: function() {
        return _index.objectExpression;
      }
    });
    Object.defineProperty(exports, "ObjectMethod", {
      enumerable: true,
      get: function() {
        return _index.objectMethod;
      }
    });
    Object.defineProperty(exports, "ObjectPattern", {
      enumerable: true,
      get: function() {
        return _index.objectPattern;
      }
    });
    Object.defineProperty(exports, "ObjectProperty", {
      enumerable: true,
      get: function() {
        return _index.objectProperty;
      }
    });
    Object.defineProperty(exports, "ObjectTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.objectTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ObjectTypeCallProperty", {
      enumerable: true,
      get: function() {
        return _index.objectTypeCallProperty;
      }
    });
    Object.defineProperty(exports, "ObjectTypeIndexer", {
      enumerable: true,
      get: function() {
        return _index.objectTypeIndexer;
      }
    });
    Object.defineProperty(exports, "ObjectTypeInternalSlot", {
      enumerable: true,
      get: function() {
        return _index.objectTypeInternalSlot;
      }
    });
    Object.defineProperty(exports, "ObjectTypeProperty", {
      enumerable: true,
      get: function() {
        return _index.objectTypeProperty;
      }
    });
    Object.defineProperty(exports, "ObjectTypeSpreadProperty", {
      enumerable: true,
      get: function() {
        return _index.objectTypeSpreadProperty;
      }
    });
    Object.defineProperty(exports, "OpaqueType", {
      enumerable: true,
      get: function() {
        return _index.opaqueType;
      }
    });
    Object.defineProperty(exports, "OptionalCallExpression", {
      enumerable: true,
      get: function() {
        return _index.optionalCallExpression;
      }
    });
    Object.defineProperty(exports, "OptionalIndexedAccessType", {
      enumerable: true,
      get: function() {
        return _index.optionalIndexedAccessType;
      }
    });
    Object.defineProperty(exports, "OptionalMemberExpression", {
      enumerable: true,
      get: function() {
        return _index.optionalMemberExpression;
      }
    });
    Object.defineProperty(exports, "ParenthesizedExpression", {
      enumerable: true,
      get: function() {
        return _index.parenthesizedExpression;
      }
    });
    Object.defineProperty(exports, "PipelineBareFunction", {
      enumerable: true,
      get: function() {
        return _index.pipelineBareFunction;
      }
    });
    Object.defineProperty(exports, "PipelinePrimaryTopicReference", {
      enumerable: true,
      get: function() {
        return _index.pipelinePrimaryTopicReference;
      }
    });
    Object.defineProperty(exports, "PipelineTopicExpression", {
      enumerable: true,
      get: function() {
        return _index.pipelineTopicExpression;
      }
    });
    Object.defineProperty(exports, "Placeholder", {
      enumerable: true,
      get: function() {
        return _index.placeholder;
      }
    });
    Object.defineProperty(exports, "PrivateName", {
      enumerable: true,
      get: function() {
        return _index.privateName;
      }
    });
    Object.defineProperty(exports, "Program", {
      enumerable: true,
      get: function() {
        return _index.program;
      }
    });
    Object.defineProperty(exports, "QualifiedTypeIdentifier", {
      enumerable: true,
      get: function() {
        return _index.qualifiedTypeIdentifier;
      }
    });
    Object.defineProperty(exports, "RecordExpression", {
      enumerable: true,
      get: function() {
        return _index.recordExpression;
      }
    });
    Object.defineProperty(exports, "RegExpLiteral", {
      enumerable: true,
      get: function() {
        return _index.regExpLiteral;
      }
    });
    Object.defineProperty(exports, "RegexLiteral", {
      enumerable: true,
      get: function() {
        return _index.regexLiteral;
      }
    });
    Object.defineProperty(exports, "RestElement", {
      enumerable: true,
      get: function() {
        return _index.restElement;
      }
    });
    Object.defineProperty(exports, "RestProperty", {
      enumerable: true,
      get: function() {
        return _index.restProperty;
      }
    });
    Object.defineProperty(exports, "ReturnStatement", {
      enumerable: true,
      get: function() {
        return _index.returnStatement;
      }
    });
    Object.defineProperty(exports, "SequenceExpression", {
      enumerable: true,
      get: function() {
        return _index.sequenceExpression;
      }
    });
    Object.defineProperty(exports, "SpreadElement", {
      enumerable: true,
      get: function() {
        return _index.spreadElement;
      }
    });
    Object.defineProperty(exports, "SpreadProperty", {
      enumerable: true,
      get: function() {
        return _index.spreadProperty;
      }
    });
    Object.defineProperty(exports, "StaticBlock", {
      enumerable: true,
      get: function() {
        return _index.staticBlock;
      }
    });
    Object.defineProperty(exports, "StringLiteral", {
      enumerable: true,
      get: function() {
        return _index.stringLiteral;
      }
    });
    Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.stringLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "StringTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.stringTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "Super", {
      enumerable: true,
      get: function() {
        return _index.super;
      }
    });
    Object.defineProperty(exports, "SwitchCase", {
      enumerable: true,
      get: function() {
        return _index.switchCase;
      }
    });
    Object.defineProperty(exports, "SwitchStatement", {
      enumerable: true,
      get: function() {
        return _index.switchStatement;
      }
    });
    Object.defineProperty(exports, "SymbolTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.symbolTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "TSAnyKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsAnyKeyword;
      }
    });
    Object.defineProperty(exports, "TSArrayType", {
      enumerable: true,
      get: function() {
        return _index.tsArrayType;
      }
    });
    Object.defineProperty(exports, "TSAsExpression", {
      enumerable: true,
      get: function() {
        return _index.tsAsExpression;
      }
    });
    Object.defineProperty(exports, "TSBigIntKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsBigIntKeyword;
      }
    });
    Object.defineProperty(exports, "TSBooleanKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsBooleanKeyword;
      }
    });
    Object.defineProperty(exports, "TSCallSignatureDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsCallSignatureDeclaration;
      }
    });
    Object.defineProperty(exports, "TSConditionalType", {
      enumerable: true,
      get: function() {
        return _index.tsConditionalType;
      }
    });
    Object.defineProperty(exports, "TSConstructSignatureDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsConstructSignatureDeclaration;
      }
    });
    Object.defineProperty(exports, "TSConstructorType", {
      enumerable: true,
      get: function() {
        return _index.tsConstructorType;
      }
    });
    Object.defineProperty(exports, "TSDeclareFunction", {
      enumerable: true,
      get: function() {
        return _index.tsDeclareFunction;
      }
    });
    Object.defineProperty(exports, "TSDeclareMethod", {
      enumerable: true,
      get: function() {
        return _index.tsDeclareMethod;
      }
    });
    Object.defineProperty(exports, "TSEnumDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsEnumDeclaration;
      }
    });
    Object.defineProperty(exports, "TSEnumMember", {
      enumerable: true,
      get: function() {
        return _index.tsEnumMember;
      }
    });
    Object.defineProperty(exports, "TSExportAssignment", {
      enumerable: true,
      get: function() {
        return _index.tsExportAssignment;
      }
    });
    Object.defineProperty(exports, "TSExpressionWithTypeArguments", {
      enumerable: true,
      get: function() {
        return _index.tsExpressionWithTypeArguments;
      }
    });
    Object.defineProperty(exports, "TSExternalModuleReference", {
      enumerable: true,
      get: function() {
        return _index.tsExternalModuleReference;
      }
    });
    Object.defineProperty(exports, "TSFunctionType", {
      enumerable: true,
      get: function() {
        return _index.tsFunctionType;
      }
    });
    Object.defineProperty(exports, "TSImportEqualsDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsImportEqualsDeclaration;
      }
    });
    Object.defineProperty(exports, "TSImportType", {
      enumerable: true,
      get: function() {
        return _index.tsImportType;
      }
    });
    Object.defineProperty(exports, "TSIndexSignature", {
      enumerable: true,
      get: function() {
        return _index.tsIndexSignature;
      }
    });
    Object.defineProperty(exports, "TSIndexedAccessType", {
      enumerable: true,
      get: function() {
        return _index.tsIndexedAccessType;
      }
    });
    Object.defineProperty(exports, "TSInferType", {
      enumerable: true,
      get: function() {
        return _index.tsInferType;
      }
    });
    Object.defineProperty(exports, "TSInstantiationExpression", {
      enumerable: true,
      get: function() {
        return _index.tsInstantiationExpression;
      }
    });
    Object.defineProperty(exports, "TSInterfaceBody", {
      enumerable: true,
      get: function() {
        return _index.tsInterfaceBody;
      }
    });
    Object.defineProperty(exports, "TSInterfaceDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsInterfaceDeclaration;
      }
    });
    Object.defineProperty(exports, "TSIntersectionType", {
      enumerable: true,
      get: function() {
        return _index.tsIntersectionType;
      }
    });
    Object.defineProperty(exports, "TSIntrinsicKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsIntrinsicKeyword;
      }
    });
    Object.defineProperty(exports, "TSLiteralType", {
      enumerable: true,
      get: function() {
        return _index.tsLiteralType;
      }
    });
    Object.defineProperty(exports, "TSMappedType", {
      enumerable: true,
      get: function() {
        return _index.tsMappedType;
      }
    });
    Object.defineProperty(exports, "TSMethodSignature", {
      enumerable: true,
      get: function() {
        return _index.tsMethodSignature;
      }
    });
    Object.defineProperty(exports, "TSModuleBlock", {
      enumerable: true,
      get: function() {
        return _index.tsModuleBlock;
      }
    });
    Object.defineProperty(exports, "TSModuleDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsModuleDeclaration;
      }
    });
    Object.defineProperty(exports, "TSNamedTupleMember", {
      enumerable: true,
      get: function() {
        return _index.tsNamedTupleMember;
      }
    });
    Object.defineProperty(exports, "TSNamespaceExportDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsNamespaceExportDeclaration;
      }
    });
    Object.defineProperty(exports, "TSNeverKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsNeverKeyword;
      }
    });
    Object.defineProperty(exports, "TSNonNullExpression", {
      enumerable: true,
      get: function() {
        return _index.tsNonNullExpression;
      }
    });
    Object.defineProperty(exports, "TSNullKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsNullKeyword;
      }
    });
    Object.defineProperty(exports, "TSNumberKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsNumberKeyword;
      }
    });
    Object.defineProperty(exports, "TSObjectKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsObjectKeyword;
      }
    });
    Object.defineProperty(exports, "TSOptionalType", {
      enumerable: true,
      get: function() {
        return _index.tsOptionalType;
      }
    });
    Object.defineProperty(exports, "TSParameterProperty", {
      enumerable: true,
      get: function() {
        return _index.tsParameterProperty;
      }
    });
    Object.defineProperty(exports, "TSParenthesizedType", {
      enumerable: true,
      get: function() {
        return _index.tsParenthesizedType;
      }
    });
    Object.defineProperty(exports, "TSPropertySignature", {
      enumerable: true,
      get: function() {
        return _index.tsPropertySignature;
      }
    });
    Object.defineProperty(exports, "TSQualifiedName", {
      enumerable: true,
      get: function() {
        return _index.tsQualifiedName;
      }
    });
    Object.defineProperty(exports, "TSRestType", {
      enumerable: true,
      get: function() {
        return _index.tsRestType;
      }
    });
    Object.defineProperty(exports, "TSSatisfiesExpression", {
      enumerable: true,
      get: function() {
        return _index.tsSatisfiesExpression;
      }
    });
    Object.defineProperty(exports, "TSStringKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsStringKeyword;
      }
    });
    Object.defineProperty(exports, "TSSymbolKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsSymbolKeyword;
      }
    });
    Object.defineProperty(exports, "TSThisType", {
      enumerable: true,
      get: function() {
        return _index.tsThisType;
      }
    });
    Object.defineProperty(exports, "TSTupleType", {
      enumerable: true,
      get: function() {
        return _index.tsTupleType;
      }
    });
    Object.defineProperty(exports, "TSTypeAliasDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsTypeAliasDeclaration;
      }
    });
    Object.defineProperty(exports, "TSTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.tsTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "TSTypeAssertion", {
      enumerable: true,
      get: function() {
        return _index.tsTypeAssertion;
      }
    });
    Object.defineProperty(exports, "TSTypeLiteral", {
      enumerable: true,
      get: function() {
        return _index.tsTypeLiteral;
      }
    });
    Object.defineProperty(exports, "TSTypeOperator", {
      enumerable: true,
      get: function() {
        return _index.tsTypeOperator;
      }
    });
    Object.defineProperty(exports, "TSTypeParameter", {
      enumerable: true,
      get: function() {
        return _index.tsTypeParameter;
      }
    });
    Object.defineProperty(exports, "TSTypeParameterDeclaration", {
      enumerable: true,
      get: function() {
        return _index.tsTypeParameterDeclaration;
      }
    });
    Object.defineProperty(exports, "TSTypeParameterInstantiation", {
      enumerable: true,
      get: function() {
        return _index.tsTypeParameterInstantiation;
      }
    });
    Object.defineProperty(exports, "TSTypePredicate", {
      enumerable: true,
      get: function() {
        return _index.tsTypePredicate;
      }
    });
    Object.defineProperty(exports, "TSTypeQuery", {
      enumerable: true,
      get: function() {
        return _index.tsTypeQuery;
      }
    });
    Object.defineProperty(exports, "TSTypeReference", {
      enumerable: true,
      get: function() {
        return _index.tsTypeReference;
      }
    });
    Object.defineProperty(exports, "TSUndefinedKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsUndefinedKeyword;
      }
    });
    Object.defineProperty(exports, "TSUnionType", {
      enumerable: true,
      get: function() {
        return _index.tsUnionType;
      }
    });
    Object.defineProperty(exports, "TSUnknownKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsUnknownKeyword;
      }
    });
    Object.defineProperty(exports, "TSVoidKeyword", {
      enumerable: true,
      get: function() {
        return _index.tsVoidKeyword;
      }
    });
    Object.defineProperty(exports, "TaggedTemplateExpression", {
      enumerable: true,
      get: function() {
        return _index.taggedTemplateExpression;
      }
    });
    Object.defineProperty(exports, "TemplateElement", {
      enumerable: true,
      get: function() {
        return _index.templateElement;
      }
    });
    Object.defineProperty(exports, "TemplateLiteral", {
      enumerable: true,
      get: function() {
        return _index.templateLiteral;
      }
    });
    Object.defineProperty(exports, "ThisExpression", {
      enumerable: true,
      get: function() {
        return _index.thisExpression;
      }
    });
    Object.defineProperty(exports, "ThisTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.thisTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ThrowStatement", {
      enumerable: true,
      get: function() {
        return _index.throwStatement;
      }
    });
    Object.defineProperty(exports, "TopicReference", {
      enumerable: true,
      get: function() {
        return _index.topicReference;
      }
    });
    Object.defineProperty(exports, "TryStatement", {
      enumerable: true,
      get: function() {
        return _index.tryStatement;
      }
    });
    Object.defineProperty(exports, "TupleExpression", {
      enumerable: true,
      get: function() {
        return _index.tupleExpression;
      }
    });
    Object.defineProperty(exports, "TupleTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.tupleTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "TypeAlias", {
      enumerable: true,
      get: function() {
        return _index.typeAlias;
      }
    });
    Object.defineProperty(exports, "TypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.typeAnnotation;
      }
    });
    Object.defineProperty(exports, "TypeCastExpression", {
      enumerable: true,
      get: function() {
        return _index.typeCastExpression;
      }
    });
    Object.defineProperty(exports, "TypeParameter", {
      enumerable: true,
      get: function() {
        return _index.typeParameter;
      }
    });
    Object.defineProperty(exports, "TypeParameterDeclaration", {
      enumerable: true,
      get: function() {
        return _index.typeParameterDeclaration;
      }
    });
    Object.defineProperty(exports, "TypeParameterInstantiation", {
      enumerable: true,
      get: function() {
        return _index.typeParameterInstantiation;
      }
    });
    Object.defineProperty(exports, "TypeofTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.typeofTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "UnaryExpression", {
      enumerable: true,
      get: function() {
        return _index.unaryExpression;
      }
    });
    Object.defineProperty(exports, "UnionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.unionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "UpdateExpression", {
      enumerable: true,
      get: function() {
        return _index.updateExpression;
      }
    });
    Object.defineProperty(exports, "V8IntrinsicIdentifier", {
      enumerable: true,
      get: function() {
        return _index.v8IntrinsicIdentifier;
      }
    });
    Object.defineProperty(exports, "VariableDeclaration", {
      enumerable: true,
      get: function() {
        return _index.variableDeclaration;
      }
    });
    Object.defineProperty(exports, "VariableDeclarator", {
      enumerable: true,
      get: function() {
        return _index.variableDeclarator;
      }
    });
    Object.defineProperty(exports, "Variance", {
      enumerable: true,
      get: function() {
        return _index.variance;
      }
    });
    Object.defineProperty(exports, "VoidTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _index.voidTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "WhileStatement", {
      enumerable: true,
      get: function() {
        return _index.whileStatement;
      }
    });
    Object.defineProperty(exports, "WithStatement", {
      enumerable: true,
      get: function() {
        return _index.withStatement;
      }
    });
    Object.defineProperty(exports, "YieldExpression", {
      enumerable: true,
      get: function() {
        return _index.yieldExpression;
      }
    });
    var _index = requireGenerated$2();
  })(uppercase);
  return uppercase;
}
var productions = {};
var hasRequiredProductions;
function requireProductions() {
  if (hasRequiredProductions) return productions;
  hasRequiredProductions = 1;
  Object.defineProperty(productions, "__esModule", {
    value: true
  });
  productions.buildUndefinedNode = buildUndefinedNode;
  var _index = requireGenerated$2();
  function buildUndefinedNode() {
    return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
  }
  return productions;
}
var cloneNode = {};
var hasRequiredCloneNode;
function requireCloneNode() {
  if (hasRequiredCloneNode) return cloneNode;
  hasRequiredCloneNode = 1;
  Object.defineProperty(cloneNode, "__esModule", {
    value: true
  });
  cloneNode.default = cloneNode$1;
  var _index = requireDefinitions();
  var _index2 = requireGenerated$3();
  const {
    hasOwn
  } = {
    hasOwn: Function.call.bind(Object.prototype.hasOwnProperty)
  };
  function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
    if (obj && typeof obj.type === "string") {
      return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);
    }
    return obj;
  }
  function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
    if (Array.isArray(obj)) {
      return obj.map((node2) => cloneIfNode(node2, deep, withoutLoc, commentsCache));
    }
    return cloneIfNode(obj, deep, withoutLoc, commentsCache);
  }
  function cloneNode$1(node2, deep = true, withoutLoc = false) {
    return cloneNodeInternal(node2, deep, withoutLoc, /* @__PURE__ */ new Map());
  }
  function cloneNodeInternal(node2, deep = true, withoutLoc = false, commentsCache) {
    if (!node2) return node2;
    const {
      type
    } = node2;
    const newNode = {
      type: node2.type
    };
    if ((0, _index2.isIdentifier)(node2)) {
      newNode.name = node2.name;
      if (hasOwn(node2, "optional") && typeof node2.optional === "boolean") {
        newNode.optional = node2.optional;
      }
      if (hasOwn(node2, "typeAnnotation")) {
        newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node2.typeAnnotation, true, withoutLoc, commentsCache) : node2.typeAnnotation;
      }
    } else if (!hasOwn(_index.NODE_FIELDS, type)) {
      throw new Error(`Unknown node type: "${type}"`);
    } else {
      for (const field of Object.keys(_index.NODE_FIELDS[type])) {
        if (hasOwn(node2, field)) {
          if (deep) {
            newNode[field] = (0, _index2.isFile)(node2) && field === "comments" ? maybeCloneComments(node2.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node2[field], true, withoutLoc, commentsCache);
          } else {
            newNode[field] = node2[field];
          }
        }
      }
    }
    if (hasOwn(node2, "loc")) {
      if (withoutLoc) {
        newNode.loc = null;
      } else {
        newNode.loc = node2.loc;
      }
    }
    if (hasOwn(node2, "leadingComments")) {
      newNode.leadingComments = maybeCloneComments(node2.leadingComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node2, "innerComments")) {
      newNode.innerComments = maybeCloneComments(node2.innerComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node2, "trailingComments")) {
      newNode.trailingComments = maybeCloneComments(node2.trailingComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node2, "extra")) {
      newNode.extra = Object.assign({}, node2.extra);
    }
    return newNode;
  }
  function maybeCloneComments(comments2, deep, withoutLoc, commentsCache) {
    if (!comments2 || !deep) {
      return comments2;
    }
    return comments2.map((comment) => {
      const cache2 = commentsCache.get(comment);
      if (cache2) return cache2;
      const {
        type,
        value: value2,
        loc
      } = comment;
      const ret = {
        type,
        value: value2,
        loc
      };
      if (withoutLoc) {
        ret.loc = null;
      }
      commentsCache.set(comment, ret);
      return ret;
    });
  }
  return cloneNode;
}
var clone = {};
var hasRequiredClone;
function requireClone() {
  if (hasRequiredClone) return clone;
  hasRequiredClone = 1;
  Object.defineProperty(clone, "__esModule", {
    value: true
  });
  clone.default = clone$1;
  var _cloneNode = requireCloneNode();
  function clone$1(node2) {
    return (0, _cloneNode.default)(node2, false);
  }
  return clone;
}
var cloneDeep$1 = {};
var hasRequiredCloneDeep$1;
function requireCloneDeep$1() {
  if (hasRequiredCloneDeep$1) return cloneDeep$1;
  hasRequiredCloneDeep$1 = 1;
  Object.defineProperty(cloneDeep$1, "__esModule", {
    value: true
  });
  cloneDeep$1.default = cloneDeep2;
  var _cloneNode = requireCloneNode();
  function cloneDeep2(node2) {
    return (0, _cloneNode.default)(node2);
  }
  return cloneDeep$1;
}
var cloneDeepWithoutLoc = {};
var hasRequiredCloneDeepWithoutLoc;
function requireCloneDeepWithoutLoc() {
  if (hasRequiredCloneDeepWithoutLoc) return cloneDeepWithoutLoc;
  hasRequiredCloneDeepWithoutLoc = 1;
  Object.defineProperty(cloneDeepWithoutLoc, "__esModule", {
    value: true
  });
  cloneDeepWithoutLoc.default = cloneDeepWithoutLoc$1;
  var _cloneNode = requireCloneNode();
  function cloneDeepWithoutLoc$1(node2) {
    return (0, _cloneNode.default)(node2, true, true);
  }
  return cloneDeepWithoutLoc;
}
var cloneWithoutLoc = {};
var hasRequiredCloneWithoutLoc;
function requireCloneWithoutLoc() {
  if (hasRequiredCloneWithoutLoc) return cloneWithoutLoc;
  hasRequiredCloneWithoutLoc = 1;
  Object.defineProperty(cloneWithoutLoc, "__esModule", {
    value: true
  });
  cloneWithoutLoc.default = cloneWithoutLoc$1;
  var _cloneNode = requireCloneNode();
  function cloneWithoutLoc$1(node2) {
    return (0, _cloneNode.default)(node2, false, true);
  }
  return cloneWithoutLoc;
}
var addComment = {};
var addComments = {};
var hasRequiredAddComments;
function requireAddComments() {
  if (hasRequiredAddComments) return addComments;
  hasRequiredAddComments = 1;
  Object.defineProperty(addComments, "__esModule", {
    value: true
  });
  addComments.default = addComments$1;
  function addComments$1(node2, type, comments2) {
    if (!comments2 || !node2) return node2;
    const key2 = `${type}Comments`;
    if (node2[key2]) {
      if (type === "leading") {
        node2[key2] = comments2.concat(node2[key2]);
      } else {
        node2[key2].push(...comments2);
      }
    } else {
      node2[key2] = comments2;
    }
    return node2;
  }
  return addComments;
}
var hasRequiredAddComment;
function requireAddComment() {
  if (hasRequiredAddComment) return addComment;
  hasRequiredAddComment = 1;
  Object.defineProperty(addComment, "__esModule", {
    value: true
  });
  addComment.default = addComment$1;
  var _addComments = requireAddComments();
  function addComment$1(node2, type, content, line2) {
    return (0, _addComments.default)(node2, type, [{
      type: line2 ? "CommentLine" : "CommentBlock",
      value: content
    }]);
  }
  return addComment;
}
var inheritInnerComments = {};
var inherit = {};
var hasRequiredInherit;
function requireInherit() {
  if (hasRequiredInherit) return inherit;
  hasRequiredInherit = 1;
  Object.defineProperty(inherit, "__esModule", {
    value: true
  });
  inherit.default = inherit$1;
  function inherit$1(key2, child, parent) {
    if (child && parent) {
      child[key2] = Array.from(new Set([].concat(child[key2], parent[key2]).filter(Boolean)));
    }
  }
  return inherit;
}
var hasRequiredInheritInnerComments;
function requireInheritInnerComments() {
  if (hasRequiredInheritInnerComments) return inheritInnerComments;
  hasRequiredInheritInnerComments = 1;
  Object.defineProperty(inheritInnerComments, "__esModule", {
    value: true
  });
  inheritInnerComments.default = inheritInnerComments$1;
  var _inherit = requireInherit();
  function inheritInnerComments$1(child, parent) {
    (0, _inherit.default)("innerComments", child, parent);
  }
  return inheritInnerComments;
}
var inheritLeadingComments = {};
var hasRequiredInheritLeadingComments;
function requireInheritLeadingComments() {
  if (hasRequiredInheritLeadingComments) return inheritLeadingComments;
  hasRequiredInheritLeadingComments = 1;
  Object.defineProperty(inheritLeadingComments, "__esModule", {
    value: true
  });
  inheritLeadingComments.default = inheritLeadingComments$1;
  var _inherit = requireInherit();
  function inheritLeadingComments$1(child, parent) {
    (0, _inherit.default)("leadingComments", child, parent);
  }
  return inheritLeadingComments;
}
var inheritsComments = {};
var inheritTrailingComments = {};
var hasRequiredInheritTrailingComments;
function requireInheritTrailingComments() {
  if (hasRequiredInheritTrailingComments) return inheritTrailingComments;
  hasRequiredInheritTrailingComments = 1;
  Object.defineProperty(inheritTrailingComments, "__esModule", {
    value: true
  });
  inheritTrailingComments.default = inheritTrailingComments$1;
  var _inherit = requireInherit();
  function inheritTrailingComments$1(child, parent) {
    (0, _inherit.default)("trailingComments", child, parent);
  }
  return inheritTrailingComments;
}
var hasRequiredInheritsComments;
function requireInheritsComments() {
  if (hasRequiredInheritsComments) return inheritsComments;
  hasRequiredInheritsComments = 1;
  Object.defineProperty(inheritsComments, "__esModule", {
    value: true
  });
  inheritsComments.default = inheritsComments$1;
  var _inheritTrailingComments = requireInheritTrailingComments();
  var _inheritLeadingComments = requireInheritLeadingComments();
  var _inheritInnerComments = requireInheritInnerComments();
  function inheritsComments$1(child, parent) {
    (0, _inheritTrailingComments.default)(child, parent);
    (0, _inheritLeadingComments.default)(child, parent);
    (0, _inheritInnerComments.default)(child, parent);
    return child;
  }
  return inheritsComments;
}
var removeComments = {};
var hasRequiredRemoveComments;
function requireRemoveComments() {
  if (hasRequiredRemoveComments) return removeComments;
  hasRequiredRemoveComments = 1;
  Object.defineProperty(removeComments, "__esModule", {
    value: true
  });
  removeComments.default = removeComments$1;
  var _index = requireConstants();
  function removeComments$1(node2) {
    _index.COMMENT_KEYS.forEach((key2) => {
      node2[key2] = null;
    });
    return node2;
  }
  return removeComments;
}
var generated = {};
var hasRequiredGenerated;
function requireGenerated() {
  if (hasRequiredGenerated) return generated;
  hasRequiredGenerated = 1;
  Object.defineProperty(generated, "__esModule", {
    value: true
  });
  generated.WHILE_TYPES = generated.USERWHITESPACABLE_TYPES = generated.UNARYLIKE_TYPES = generated.TYPESCRIPT_TYPES = generated.TSTYPE_TYPES = generated.TSTYPEELEMENT_TYPES = generated.TSENTITYNAME_TYPES = generated.TSBASETYPE_TYPES = generated.TERMINATORLESS_TYPES = generated.STATEMENT_TYPES = generated.STANDARDIZED_TYPES = generated.SCOPABLE_TYPES = generated.PUREISH_TYPES = generated.PROPERTY_TYPES = generated.PRIVATE_TYPES = generated.PATTERN_TYPES = generated.PATTERNLIKE_TYPES = generated.OBJECTMEMBER_TYPES = generated.MODULESPECIFIER_TYPES = generated.MODULEDECLARATION_TYPES = generated.MISCELLANEOUS_TYPES = generated.METHOD_TYPES = generated.LVAL_TYPES = generated.LOOP_TYPES = generated.LITERAL_TYPES = generated.JSX_TYPES = generated.IMPORTOREXPORTDECLARATION_TYPES = generated.IMMUTABLE_TYPES = generated.FUNCTION_TYPES = generated.FUNCTIONPARENT_TYPES = generated.FOR_TYPES = generated.FORXSTATEMENT_TYPES = generated.FLOW_TYPES = generated.FLOWTYPE_TYPES = generated.FLOWPREDICATE_TYPES = generated.FLOWDECLARATION_TYPES = generated.FLOWBASEANNOTATION_TYPES = generated.EXPRESSION_TYPES = generated.EXPRESSIONWRAPPER_TYPES = generated.EXPORTDECLARATION_TYPES = generated.ENUMMEMBER_TYPES = generated.ENUMBODY_TYPES = generated.DECLARATION_TYPES = generated.CONDITIONAL_TYPES = generated.COMPLETIONSTATEMENT_TYPES = generated.CLASS_TYPES = generated.BLOCK_TYPES = generated.BLOCKPARENT_TYPES = generated.BINARY_TYPES = generated.ACCESSOR_TYPES = void 0;
  var _index = requireDefinitions();
  generated.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS["Standardized"];
  generated.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS["Expression"];
  generated.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS["Binary"];
  generated.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Scopable"];
  generated.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["BlockParent"];
  generated.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS["Block"];
  generated.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["Statement"];
  generated.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS["Terminatorless"];
  generated.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["CompletionStatement"];
  generated.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Conditional"];
  generated.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS["Loop"];
  generated.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS["While"];
  generated.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
  generated.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS["For"];
  generated.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["ForXStatement"];
  generated.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS["Function"];
  generated.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["FunctionParent"];
  generated.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS["Pureish"];
  generated.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["Declaration"];
  generated.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["PatternLike"];
  generated.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS["LVal"];
  generated.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS["TSEntityName"];
  generated.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Literal"];
  generated.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Immutable"];
  generated.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
  generated.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS["Method"];
  generated.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["ObjectMember"];
  generated.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS["Property"];
  generated.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["UnaryLike"];
  generated.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS["Pattern"];
  generated.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS["Class"];
  const IMPORTOREXPORTDECLARATION_TYPES = generated.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ImportOrExportDeclaration"];
  generated.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
  generated.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
  generated.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS["Accessor"];
  generated.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS["Private"];
  generated.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS["Flow"];
  generated.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowType"];
  generated.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
  generated.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
  generated.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowPredicate"];
  generated.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumBody"];
  generated.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumMember"];
  generated.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS["JSX"];
  generated.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS["Miscellaneous"];
  generated.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS["TypeScript"];
  generated.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["TSTypeElement"];
  generated.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSType"];
  generated.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSBaseType"];
  generated.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
  return generated;
}
var ensureBlock = {};
var toBlock = {};
var hasRequiredToBlock;
function requireToBlock() {
  if (hasRequiredToBlock) return toBlock;
  hasRequiredToBlock = 1;
  Object.defineProperty(toBlock, "__esModule", {
    value: true
  });
  toBlock.default = toBlock$1;
  var _index = requireGenerated$3();
  var _index2 = requireGenerated$2();
  function toBlock$1(node2, parent) {
    if ((0, _index.isBlockStatement)(node2)) {
      return node2;
    }
    let blockNodes = [];
    if ((0, _index.isEmptyStatement)(node2)) {
      blockNodes = [];
    } else {
      if (!(0, _index.isStatement)(node2)) {
        if ((0, _index.isFunction)(parent)) {
          node2 = (0, _index2.returnStatement)(node2);
        } else {
          node2 = (0, _index2.expressionStatement)(node2);
        }
      }
      blockNodes = [node2];
    }
    return (0, _index2.blockStatement)(blockNodes);
  }
  return toBlock;
}
var hasRequiredEnsureBlock;
function requireEnsureBlock() {
  if (hasRequiredEnsureBlock) return ensureBlock;
  hasRequiredEnsureBlock = 1;
  Object.defineProperty(ensureBlock, "__esModule", {
    value: true
  });
  ensureBlock.default = ensureBlock$1;
  var _toBlock = requireToBlock();
  function ensureBlock$1(node2, key2 = "body") {
    const result = (0, _toBlock.default)(node2[key2], node2);
    node2[key2] = result;
    return result;
  }
  return ensureBlock;
}
var toBindingIdentifierName = {};
var toIdentifier = {};
var hasRequiredToIdentifier;
function requireToIdentifier() {
  if (hasRequiredToIdentifier) return toIdentifier;
  hasRequiredToIdentifier = 1;
  Object.defineProperty(toIdentifier, "__esModule", {
    value: true
  });
  toIdentifier.default = toIdentifier$1;
  var _isValidIdentifier = requireIsValidIdentifier();
  var _helperValidatorIdentifier2 = requireLib$Q();
  function toIdentifier$1(input2) {
    input2 = input2 + "";
    let name = "";
    for (const c2 of input2) {
      name += (0, _helperValidatorIdentifier2.isIdentifierChar)(c2.codePointAt(0)) ? c2 : "-";
    }
    name = name.replace(/^[-0-9]+/, "");
    name = name.replace(/[-\s]+(.)?/g, function(match, c2) {
      return c2 ? c2.toUpperCase() : "";
    });
    if (!(0, _isValidIdentifier.default)(name)) {
      name = `_${name}`;
    }
    return name || "_";
  }
  return toIdentifier;
}
var hasRequiredToBindingIdentifierName;
function requireToBindingIdentifierName() {
  if (hasRequiredToBindingIdentifierName) return toBindingIdentifierName;
  hasRequiredToBindingIdentifierName = 1;
  Object.defineProperty(toBindingIdentifierName, "__esModule", {
    value: true
  });
  toBindingIdentifierName.default = toBindingIdentifierName$1;
  var _toIdentifier = requireToIdentifier();
  function toBindingIdentifierName$1(name) {
    name = (0, _toIdentifier.default)(name);
    if (name === "eval" || name === "arguments") name = "_" + name;
    return name;
  }
  return toBindingIdentifierName;
}
var toComputedKey = {};
var hasRequiredToComputedKey;
function requireToComputedKey() {
  if (hasRequiredToComputedKey) return toComputedKey;
  hasRequiredToComputedKey = 1;
  Object.defineProperty(toComputedKey, "__esModule", {
    value: true
  });
  toComputedKey.default = toComputedKey$1;
  var _index = requireGenerated$3();
  var _index2 = requireGenerated$2();
  function toComputedKey$1(node2, key2 = node2.key || node2.property) {
    if (!node2.computed && (0, _index.isIdentifier)(key2)) key2 = (0, _index2.stringLiteral)(key2.name);
    return key2;
  }
  return toComputedKey;
}
var toExpression = {};
var hasRequiredToExpression;
function requireToExpression() {
  if (hasRequiredToExpression) return toExpression;
  hasRequiredToExpression = 1;
  Object.defineProperty(toExpression, "__esModule", {
    value: true
  });
  toExpression.default = void 0;
  var _index = requireGenerated$3();
  toExpression.default = toExpression$1;
  function toExpression$1(node2) {
    if ((0, _index.isExpressionStatement)(node2)) {
      node2 = node2.expression;
    }
    if ((0, _index.isExpression)(node2)) {
      return node2;
    }
    if ((0, _index.isClass)(node2)) {
      node2.type = "ClassExpression";
    } else if ((0, _index.isFunction)(node2)) {
      node2.type = "FunctionExpression";
    }
    if (!(0, _index.isExpression)(node2)) {
      throw new Error(`cannot turn ${node2.type} to an expression`);
    }
    return node2;
  }
  return toExpression;
}
var toKeyAlias = {};
var removePropertiesDeep = {};
var traverseFast = {};
var hasRequiredTraverseFast;
function requireTraverseFast() {
  if (hasRequiredTraverseFast) return traverseFast;
  hasRequiredTraverseFast = 1;
  Object.defineProperty(traverseFast, "__esModule", {
    value: true
  });
  traverseFast.default = traverseFast$1;
  var _index = requireDefinitions();
  function traverseFast$1(node2, enter, opts) {
    if (!node2) return;
    const keys2 = _index.VISITOR_KEYS[node2.type];
    if (!keys2) return;
    opts = opts || {};
    enter(node2, opts);
    for (const key2 of keys2) {
      const subNode = node2[key2];
      if (Array.isArray(subNode)) {
        for (const node3 of subNode) {
          traverseFast$1(node3, enter, opts);
        }
      } else {
        traverseFast$1(subNode, enter, opts);
      }
    }
  }
  return traverseFast;
}
var removeProperties = {};
var hasRequiredRemoveProperties;
function requireRemoveProperties() {
  if (hasRequiredRemoveProperties) return removeProperties;
  hasRequiredRemoveProperties = 1;
  Object.defineProperty(removeProperties, "__esModule", {
    value: true
  });
  removeProperties.default = removeProperties$1;
  var _index = requireConstants();
  const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];
  const CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
  function removeProperties$1(node2, opts = {}) {
    const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
    for (const key2 of map) {
      if (node2[key2] != null) node2[key2] = void 0;
    }
    for (const key2 of Object.keys(node2)) {
      if (key2[0] === "_" && node2[key2] != null) node2[key2] = void 0;
    }
    const symbols2 = Object.getOwnPropertySymbols(node2);
    for (const sym of symbols2) {
      node2[sym] = null;
    }
  }
  return removeProperties;
}
var hasRequiredRemovePropertiesDeep;
function requireRemovePropertiesDeep() {
  if (hasRequiredRemovePropertiesDeep) return removePropertiesDeep;
  hasRequiredRemovePropertiesDeep = 1;
  Object.defineProperty(removePropertiesDeep, "__esModule", {
    value: true
  });
  removePropertiesDeep.default = removePropertiesDeep$1;
  var _traverseFast = requireTraverseFast();
  var _removeProperties = requireRemoveProperties();
  function removePropertiesDeep$1(tree, opts) {
    (0, _traverseFast.default)(tree, _removeProperties.default, opts);
    return tree;
  }
  return removePropertiesDeep;
}
var hasRequiredToKeyAlias;
function requireToKeyAlias() {
  if (hasRequiredToKeyAlias) return toKeyAlias;
  hasRequiredToKeyAlias = 1;
  Object.defineProperty(toKeyAlias, "__esModule", {
    value: true
  });
  toKeyAlias.default = toKeyAlias$1;
  var _index = requireGenerated$3();
  var _cloneNode = requireCloneNode();
  var _removePropertiesDeep = requireRemovePropertiesDeep();
  function toKeyAlias$1(node2, key2 = node2.key) {
    let alias;
    if (node2.kind === "method") {
      return toKeyAlias$1.increment() + "";
    } else if ((0, _index.isIdentifier)(key2)) {
      alias = key2.name;
    } else if ((0, _index.isStringLiteral)(key2)) {
      alias = JSON.stringify(key2.value);
    } else {
      alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key2)));
    }
    if (node2.computed) {
      alias = `[${alias}]`;
    }
    if (node2.static) {
      alias = `static:${alias}`;
    }
    return alias;
  }
  toKeyAlias$1.uid = 0;
  toKeyAlias$1.increment = function() {
    if (toKeyAlias$1.uid >= Number.MAX_SAFE_INTEGER) {
      return toKeyAlias$1.uid = 0;
    } else {
      return toKeyAlias$1.uid++;
    }
  };
  return toKeyAlias;
}
var toStatement = {};
var hasRequiredToStatement;
function requireToStatement() {
  if (hasRequiredToStatement) return toStatement;
  hasRequiredToStatement = 1;
  Object.defineProperty(toStatement, "__esModule", {
    value: true
  });
  toStatement.default = void 0;
  var _index = requireGenerated$3();
  var _index2 = requireGenerated$2();
  toStatement.default = toStatement$1;
  function toStatement$1(node2, ignore) {
    if ((0, _index.isStatement)(node2)) {
      return node2;
    }
    let mustHaveId = false;
    let newType;
    if ((0, _index.isClass)(node2)) {
      mustHaveId = true;
      newType = "ClassDeclaration";
    } else if ((0, _index.isFunction)(node2)) {
      mustHaveId = true;
      newType = "FunctionDeclaration";
    } else if ((0, _index.isAssignmentExpression)(node2)) {
      return (0, _index2.expressionStatement)(node2);
    }
    if (mustHaveId && !node2.id) {
      newType = false;
    }
    if (!newType) {
      if (ignore) {
        return false;
      } else {
        throw new Error(`cannot turn ${node2.type} to a statement`);
      }
    }
    node2.type = newType;
    return node2;
  }
  return toStatement;
}
var valueToNode = {};
var hasRequiredValueToNode;
function requireValueToNode() {
  if (hasRequiredValueToNode) return valueToNode;
  hasRequiredValueToNode = 1;
  Object.defineProperty(valueToNode, "__esModule", {
    value: true
  });
  valueToNode.default = void 0;
  var _isValidIdentifier = requireIsValidIdentifier();
  var _index = requireGenerated$2();
  valueToNode.default = valueToNode$1;
  const objectToString = Function.call.bind(Object.prototype.toString);
  function isRegExp2(value2) {
    return objectToString(value2) === "[object RegExp]";
  }
  function isPlainObject(value2) {
    if (typeof value2 !== "object" || value2 === null || Object.prototype.toString.call(value2) !== "[object Object]") {
      return false;
    }
    const proto2 = Object.getPrototypeOf(value2);
    return proto2 === null || Object.getPrototypeOf(proto2) === null;
  }
  function valueToNode$1(value2) {
    if (value2 === void 0) {
      return (0, _index.identifier)("undefined");
    }
    if (value2 === true || value2 === false) {
      return (0, _index.booleanLiteral)(value2);
    }
    if (value2 === null) {
      return (0, _index.nullLiteral)();
    }
    if (typeof value2 === "string") {
      return (0, _index.stringLiteral)(value2);
    }
    if (typeof value2 === "number") {
      let result;
      if (Number.isFinite(value2)) {
        result = (0, _index.numericLiteral)(Math.abs(value2));
      } else {
        let numerator;
        if (Number.isNaN(value2)) {
          numerator = (0, _index.numericLiteral)(0);
        } else {
          numerator = (0, _index.numericLiteral)(1);
        }
        result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
      }
      if (value2 < 0 || Object.is(value2, -0)) {
        result = (0, _index.unaryExpression)("-", result);
      }
      return result;
    }
    if (isRegExp2(value2)) {
      const pattern = value2.source;
      const flags = value2.toString().match(/\/([a-z]+|)$/)[1];
      return (0, _index.regExpLiteral)(pattern, flags);
    }
    if (Array.isArray(value2)) {
      return (0, _index.arrayExpression)(value2.map(valueToNode$1));
    }
    if (isPlainObject(value2)) {
      const props = [];
      for (const key2 of Object.keys(value2)) {
        let nodeKey;
        if ((0, _isValidIdentifier.default)(key2)) {
          nodeKey = (0, _index.identifier)(key2);
        } else {
          nodeKey = (0, _index.stringLiteral)(key2);
        }
        props.push((0, _index.objectProperty)(nodeKey, valueToNode$1(value2[key2])));
      }
      return (0, _index.objectExpression)(props);
    }
    throw new Error("don't know how to turn this value into a node");
  }
  return valueToNode;
}
var appendToMemberExpression = {};
var hasRequiredAppendToMemberExpression;
function requireAppendToMemberExpression() {
  if (hasRequiredAppendToMemberExpression) return appendToMemberExpression;
  hasRequiredAppendToMemberExpression = 1;
  Object.defineProperty(appendToMemberExpression, "__esModule", {
    value: true
  });
  appendToMemberExpression.default = appendToMemberExpression$1;
  var _index = requireGenerated$2();
  function appendToMemberExpression$1(member, append2, computed = false) {
    member.object = (0, _index.memberExpression)(member.object, member.property, member.computed);
    member.property = append2;
    member.computed = !!computed;
    return member;
  }
  return appendToMemberExpression;
}
var inherits = {};
var hasRequiredInherits;
function requireInherits() {
  if (hasRequiredInherits) return inherits;
  hasRequiredInherits = 1;
  Object.defineProperty(inherits, "__esModule", {
    value: true
  });
  inherits.default = inherits$1;
  var _index = requireConstants();
  var _inheritsComments = requireInheritsComments();
  function inherits$1(child, parent) {
    if (!child || !parent) return child;
    for (const key2 of _index.INHERIT_KEYS.optional) {
      if (child[key2] == null) {
        child[key2] = parent[key2];
      }
    }
    for (const key2 of Object.keys(parent)) {
      if (key2[0] === "_" && key2 !== "__clone") {
        child[key2] = parent[key2];
      }
    }
    for (const key2 of _index.INHERIT_KEYS.force) {
      child[key2] = parent[key2];
    }
    (0, _inheritsComments.default)(child, parent);
    return child;
  }
  return inherits;
}
var prependToMemberExpression = {};
var hasRequiredPrependToMemberExpression;
function requirePrependToMemberExpression() {
  if (hasRequiredPrependToMemberExpression) return prependToMemberExpression;
  hasRequiredPrependToMemberExpression = 1;
  Object.defineProperty(prependToMemberExpression, "__esModule", {
    value: true
  });
  prependToMemberExpression.default = prependToMemberExpression$1;
  var _index = requireGenerated$2();
  var _index2 = requireLib$O();
  function prependToMemberExpression$1(member, prepend) {
    if ((0, _index2.isSuper)(member.object)) {
      throw new Error("Cannot prepend node to super property access (`super.foo`).");
    }
    member.object = (0, _index.memberExpression)(prepend, member.object);
    return member;
  }
  return prependToMemberExpression;
}
var getBindingIdentifiers = {};
var hasRequiredGetBindingIdentifiers;
function requireGetBindingIdentifiers() {
  if (hasRequiredGetBindingIdentifiers) return getBindingIdentifiers;
  hasRequiredGetBindingIdentifiers = 1;
  Object.defineProperty(getBindingIdentifiers, "__esModule", {
    value: true
  });
  getBindingIdentifiers.default = getBindingIdentifiers$1;
  var _index = requireGenerated$3();
  function getBindingIdentifiers$1(node2, duplicates, outerOnly, newBindingsOnly) {
    const search = [].concat(node2);
    const ids = /* @__PURE__ */ Object.create(null);
    while (search.length) {
      const id = search.shift();
      if (!id) continue;
      if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id))) {
        continue;
      }
      const keys2 = getBindingIdentifiers$1.keys[id.type];
      if ((0, _index.isIdentifier)(id)) {
        if (duplicates) {
          const _ids = ids[id.name] = ids[id.name] || [];
          _ids.push(id);
        } else {
          ids[id.name] = id;
        }
        continue;
      }
      if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
        if ((0, _index.isDeclaration)(id.declaration)) {
          search.push(id.declaration);
        }
        continue;
      }
      if (outerOnly) {
        if ((0, _index.isFunctionDeclaration)(id)) {
          search.push(id.id);
          continue;
        }
        if ((0, _index.isFunctionExpression)(id)) {
          continue;
        }
      }
      if (keys2) {
        for (let i = 0; i < keys2.length; i++) {
          const key2 = keys2[i];
          const nodes = id[key2];
          if (nodes) {
            Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes);
          }
        }
      }
    }
    return ids;
  }
  getBindingIdentifiers$1.keys = {
    DeclareClass: ["id"],
    DeclareFunction: ["id"],
    DeclareModule: ["id"],
    DeclareVariable: ["id"],
    DeclareInterface: ["id"],
    DeclareTypeAlias: ["id"],
    DeclareOpaqueType: ["id"],
    InterfaceDeclaration: ["id"],
    TypeAlias: ["id"],
    OpaqueType: ["id"],
    CatchClause: ["param"],
    LabeledStatement: ["label"],
    UnaryExpression: ["argument"],
    AssignmentExpression: ["left"],
    ImportSpecifier: ["local"],
    ImportNamespaceSpecifier: ["local"],
    ImportDefaultSpecifier: ["local"],
    ImportDeclaration: ["specifiers"],
    ExportSpecifier: ["exported"],
    ExportNamespaceSpecifier: ["exported"],
    ExportDefaultSpecifier: ["exported"],
    FunctionDeclaration: ["id", "params"],
    FunctionExpression: ["id", "params"],
    ArrowFunctionExpression: ["params"],
    ObjectMethod: ["params"],
    ClassMethod: ["params"],
    ClassPrivateMethod: ["params"],
    ForInStatement: ["left"],
    ForOfStatement: ["left"],
    ClassDeclaration: ["id"],
    ClassExpression: ["id"],
    RestElement: ["argument"],
    UpdateExpression: ["argument"],
    ObjectProperty: ["value"],
    AssignmentPattern: ["left"],
    ArrayPattern: ["elements"],
    ObjectPattern: ["properties"],
    VariableDeclaration: ["declarations"],
    VariableDeclarator: ["id"]
  };
  return getBindingIdentifiers;
}
var getOuterBindingIdentifiers = {};
var hasRequiredGetOuterBindingIdentifiers;
function requireGetOuterBindingIdentifiers() {
  if (hasRequiredGetOuterBindingIdentifiers) return getOuterBindingIdentifiers;
  hasRequiredGetOuterBindingIdentifiers = 1;
  Object.defineProperty(getOuterBindingIdentifiers, "__esModule", {
    value: true
  });
  getOuterBindingIdentifiers.default = void 0;
  var _getBindingIdentifiers = requireGetBindingIdentifiers();
  getOuterBindingIdentifiers.default = getOuterBindingIdentifiers$1;
  function getOuterBindingIdentifiers$1(node2, duplicates) {
    return (0, _getBindingIdentifiers.default)(node2, duplicates, true);
  }
  return getOuterBindingIdentifiers;
}
var traverse$1 = {};
var hasRequiredTraverse;
function requireTraverse() {
  if (hasRequiredTraverse) return traverse$1;
  hasRequiredTraverse = 1;
  Object.defineProperty(traverse$1, "__esModule", {
    value: true
  });
  traverse$1.default = traverse2;
  var _index = requireDefinitions();
  function traverse2(node2, handlers, state2) {
    if (typeof handlers === "function") {
      handlers = {
        enter: handlers
      };
    }
    const {
      enter,
      exit
    } = handlers;
    traverseSimpleImpl(node2, enter, exit, state2, []);
  }
  function traverseSimpleImpl(node2, enter, exit, state2, ancestors) {
    const keys2 = _index.VISITOR_KEYS[node2.type];
    if (!keys2) return;
    if (enter) enter(node2, ancestors, state2);
    for (const key2 of keys2) {
      const subNode = node2[key2];
      if (Array.isArray(subNode)) {
        for (let i = 0; i < subNode.length; i++) {
          const child = subNode[i];
          if (!child) continue;
          ancestors.push({
            node: node2,
            key: key2,
            index: i
          });
          traverseSimpleImpl(child, enter, exit, state2, ancestors);
          ancestors.pop();
        }
      } else if (subNode) {
        ancestors.push({
          node: node2,
          key: key2
        });
        traverseSimpleImpl(subNode, enter, exit, state2, ancestors);
        ancestors.pop();
      }
    }
    if (exit) exit(node2, ancestors, state2);
  }
  return traverse$1;
}
var isBinding = {};
var hasRequiredIsBinding;
function requireIsBinding() {
  if (hasRequiredIsBinding) return isBinding;
  hasRequiredIsBinding = 1;
  Object.defineProperty(isBinding, "__esModule", {
    value: true
  });
  isBinding.default = isBinding$1;
  var _getBindingIdentifiers = requireGetBindingIdentifiers();
  function isBinding$1(node2, parent, grandparent) {
    if (grandparent && node2.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") {
      return false;
    }
    const keys2 = _getBindingIdentifiers.default.keys[parent.type];
    if (keys2) {
      for (let i = 0; i < keys2.length; i++) {
        const key2 = keys2[i];
        const val = parent[key2];
        if (Array.isArray(val)) {
          if (val.indexOf(node2) >= 0) return true;
        } else {
          if (val === node2) return true;
        }
      }
    }
    return false;
  }
  return isBinding;
}
var isBlockScoped = {};
var isLet = {};
var hasRequiredIsLet;
function requireIsLet() {
  if (hasRequiredIsLet) return isLet;
  hasRequiredIsLet = 1;
  Object.defineProperty(isLet, "__esModule", {
    value: true
  });
  isLet.default = isLet$1;
  var _index = requireGenerated$3();
  var _index2 = requireConstants();
  function isLet$1(node2) {
    return (0, _index.isVariableDeclaration)(node2) && (node2.kind !== "var" || node2[_index2.BLOCK_SCOPED_SYMBOL]);
  }
  return isLet;
}
var hasRequiredIsBlockScoped;
function requireIsBlockScoped() {
  if (hasRequiredIsBlockScoped) return isBlockScoped;
  hasRequiredIsBlockScoped = 1;
  Object.defineProperty(isBlockScoped, "__esModule", {
    value: true
  });
  isBlockScoped.default = isBlockScoped$1;
  var _index = requireGenerated$3();
  var _isLet = requireIsLet();
  function isBlockScoped$1(node2) {
    return (0, _index.isFunctionDeclaration)(node2) || (0, _index.isClassDeclaration)(node2) || (0, _isLet.default)(node2);
  }
  return isBlockScoped;
}
var isImmutable = {};
var hasRequiredIsImmutable;
function requireIsImmutable() {
  if (hasRequiredIsImmutable) return isImmutable;
  hasRequiredIsImmutable = 1;
  Object.defineProperty(isImmutable, "__esModule", {
    value: true
  });
  isImmutable.default = isImmutable$1;
  var _isType = requireIsType();
  var _index = requireGenerated$3();
  function isImmutable$1(node2) {
    if ((0, _isType.default)(node2.type, "Immutable")) return true;
    if ((0, _index.isIdentifier)(node2)) {
      if (node2.name === "undefined") {
        return true;
      } else {
        return false;
      }
    }
    return false;
  }
  return isImmutable;
}
var isNodesEquivalent = {};
var hasRequiredIsNodesEquivalent;
function requireIsNodesEquivalent() {
  if (hasRequiredIsNodesEquivalent) return isNodesEquivalent;
  hasRequiredIsNodesEquivalent = 1;
  Object.defineProperty(isNodesEquivalent, "__esModule", {
    value: true
  });
  isNodesEquivalent.default = isNodesEquivalent$1;
  var _index = requireDefinitions();
  function isNodesEquivalent$1(a, b) {
    if (typeof a !== "object" || typeof b !== "object" || a == null || b == null) {
      return a === b;
    }
    if (a.type !== b.type) {
      return false;
    }
    const fields2 = Object.keys(_index.NODE_FIELDS[a.type] || a.type);
    const visitorKeys = _index.VISITOR_KEYS[a.type];
    for (const field of fields2) {
      const val_a = a[field];
      const val_b = b[field];
      if (typeof val_a !== typeof val_b) {
        return false;
      }
      if (val_a == null && val_b == null) {
        continue;
      } else if (val_a == null || val_b == null) {
        return false;
      }
      if (Array.isArray(val_a)) {
        if (!Array.isArray(val_b)) {
          return false;
        }
        if (val_a.length !== val_b.length) {
          return false;
        }
        for (let i = 0; i < val_a.length; i++) {
          if (!isNodesEquivalent$1(val_a[i], val_b[i])) {
            return false;
          }
        }
        continue;
      }
      if (typeof val_a === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {
        for (const key2 of Object.keys(val_a)) {
          if (val_a[key2] !== val_b[key2]) {
            return false;
          }
        }
        continue;
      }
      if (!isNodesEquivalent$1(val_a, val_b)) {
        return false;
      }
    }
    return true;
  }
  return isNodesEquivalent;
}
var isReferenced = {};
var hasRequiredIsReferenced;
function requireIsReferenced() {
  if (hasRequiredIsReferenced) return isReferenced;
  hasRequiredIsReferenced = 1;
  Object.defineProperty(isReferenced, "__esModule", {
    value: true
  });
  isReferenced.default = isReferenced$1;
  function isReferenced$1(node2, parent, grandparent) {
    switch (parent.type) {
      case "MemberExpression":
      case "OptionalMemberExpression":
        if (parent.property === node2) {
          return !!parent.computed;
        }
        return parent.object === node2;
      case "JSXMemberExpression":
        return parent.object === node2;
      case "VariableDeclarator":
        return parent.init === node2;
      case "ArrowFunctionExpression":
        return parent.body === node2;
      case "PrivateName":
        return false;
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "ObjectMethod":
        if (parent.key === node2) {
          return !!parent.computed;
        }
        return false;
      case "ObjectProperty":
        if (parent.key === node2) {
          return !!parent.computed;
        }
        return !grandparent || grandparent.type !== "ObjectPattern";
      case "ClassProperty":
      case "ClassAccessorProperty":
        if (parent.key === node2) {
          return !!parent.computed;
        }
        return true;
      case "ClassPrivateProperty":
        return parent.key !== node2;
      case "ClassDeclaration":
      case "ClassExpression":
        return parent.superClass === node2;
      case "AssignmentExpression":
        return parent.right === node2;
      case "AssignmentPattern":
        return parent.right === node2;
      case "LabeledStatement":
        return false;
      case "CatchClause":
        return false;
      case "RestElement":
        return false;
      case "BreakStatement":
      case "ContinueStatement":
        return false;
      case "FunctionDeclaration":
      case "FunctionExpression":
        return false;
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        return false;
      case "ExportSpecifier":
        if (grandparent != null && grandparent.source) {
          return false;
        }
        return parent.local === node2;
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
        return false;
      case "ImportAttribute":
        return false;
      case "JSXAttribute":
        return false;
      case "ObjectPattern":
      case "ArrayPattern":
        return false;
      case "MetaProperty":
        return false;
      case "ObjectTypeProperty":
        return parent.key !== node2;
      case "TSEnumMember":
        return parent.id !== node2;
      case "TSPropertySignature":
        if (parent.key === node2) {
          return !!parent.computed;
        }
        return true;
    }
    return true;
  }
  return isReferenced;
}
var isScope = {};
var hasRequiredIsScope;
function requireIsScope() {
  if (hasRequiredIsScope) return isScope;
  hasRequiredIsScope = 1;
  Object.defineProperty(isScope, "__esModule", {
    value: true
  });
  isScope.default = isScope$1;
  var _index = requireGenerated$3();
  function isScope$1(node2, parent) {
    if ((0, _index.isBlockStatement)(node2) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
      return false;
    }
    if ((0, _index.isPattern)(node2) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
      return true;
    }
    return (0, _index.isScopable)(node2);
  }
  return isScope;
}
var isSpecifierDefault = {};
var hasRequiredIsSpecifierDefault;
function requireIsSpecifierDefault() {
  if (hasRequiredIsSpecifierDefault) return isSpecifierDefault;
  hasRequiredIsSpecifierDefault = 1;
  Object.defineProperty(isSpecifierDefault, "__esModule", {
    value: true
  });
  isSpecifierDefault.default = isSpecifierDefault$1;
  var _index = requireGenerated$3();
  function isSpecifierDefault$1(specifier) {
    return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, {
      name: "default"
    });
  }
  return isSpecifierDefault;
}
var isValidES3Identifier = {};
var hasRequiredIsValidES3Identifier;
function requireIsValidES3Identifier() {
  if (hasRequiredIsValidES3Identifier) return isValidES3Identifier;
  hasRequiredIsValidES3Identifier = 1;
  Object.defineProperty(isValidES3Identifier, "__esModule", {
    value: true
  });
  isValidES3Identifier.default = isValidES3Identifier$1;
  var _isValidIdentifier = requireIsValidIdentifier();
  const RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
  function isValidES3Identifier$1(name) {
    return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
  }
  return isValidES3Identifier;
}
var isVar = {};
var hasRequiredIsVar;
function requireIsVar() {
  if (hasRequiredIsVar) return isVar;
  hasRequiredIsVar = 1;
  Object.defineProperty(isVar, "__esModule", {
    value: true
  });
  isVar.default = isVar$1;
  var _index = requireGenerated$3();
  var _index2 = requireConstants();
  function isVar$1(node2) {
    return (0, _index.isVariableDeclaration)(node2, {
      kind: "var"
    }) && !node2[_index2.BLOCK_SCOPED_SYMBOL];
  }
  return isVar;
}
var toSequenceExpression = {};
var gatherSequenceExpressions = {};
var hasRequiredGatherSequenceExpressions;
function requireGatherSequenceExpressions() {
  if (hasRequiredGatherSequenceExpressions) return gatherSequenceExpressions;
  hasRequiredGatherSequenceExpressions = 1;
  Object.defineProperty(gatherSequenceExpressions, "__esModule", {
    value: true
  });
  gatherSequenceExpressions.default = gatherSequenceExpressions$1;
  var _getBindingIdentifiers = requireGetBindingIdentifiers();
  var _index = requireGenerated$3();
  var _index2 = requireGenerated$2();
  var _cloneNode = requireCloneNode();
  function gatherSequenceExpressions$1(nodes, scope2, declars) {
    const exprs = [];
    let ensureLastUndefined = true;
    for (const node2 of nodes) {
      if (!(0, _index.isEmptyStatement)(node2)) {
        ensureLastUndefined = false;
      }
      if ((0, _index.isExpression)(node2)) {
        exprs.push(node2);
      } else if ((0, _index.isExpressionStatement)(node2)) {
        exprs.push(node2.expression);
      } else if ((0, _index.isVariableDeclaration)(node2)) {
        if (node2.kind !== "var") return;
        for (const declar of node2.declarations) {
          const bindings = (0, _getBindingIdentifiers.default)(declar);
          for (const key2 of Object.keys(bindings)) {
            declars.push({
              kind: node2.kind,
              id: (0, _cloneNode.default)(bindings[key2])
            });
          }
          if (declar.init) {
            exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
          }
        }
        ensureLastUndefined = true;
      } else if ((0, _index.isIfStatement)(node2)) {
        const consequent = node2.consequent ? gatherSequenceExpressions$1([node2.consequent], scope2, declars) : scope2.buildUndefinedNode();
        const alternate = node2.alternate ? gatherSequenceExpressions$1([node2.alternate], scope2, declars) : scope2.buildUndefinedNode();
        if (!consequent || !alternate) return;
        exprs.push((0, _index2.conditionalExpression)(node2.test, consequent, alternate));
      } else if ((0, _index.isBlockStatement)(node2)) {
        const body = gatherSequenceExpressions$1(node2.body, scope2, declars);
        if (!body) return;
        exprs.push(body);
      } else if ((0, _index.isEmptyStatement)(node2)) {
        if (nodes.indexOf(node2) === 0) {
          ensureLastUndefined = true;
        }
      } else {
        return;
      }
    }
    if (ensureLastUndefined) {
      exprs.push(scope2.buildUndefinedNode());
    }
    if (exprs.length === 1) {
      return exprs[0];
    } else {
      return (0, _index2.sequenceExpression)(exprs);
    }
  }
  return gatherSequenceExpressions;
}
var hasRequiredToSequenceExpression;
function requireToSequenceExpression() {
  if (hasRequiredToSequenceExpression) return toSequenceExpression;
  hasRequiredToSequenceExpression = 1;
  Object.defineProperty(toSequenceExpression, "__esModule", {
    value: true
  });
  toSequenceExpression.default = toSequenceExpression$1;
  var _gatherSequenceExpressions = requireGatherSequenceExpressions();
  function toSequenceExpression$1(nodes, scope2) {
    if (!(nodes != null && nodes.length)) return;
    const declars = [];
    const result = (0, _gatherSequenceExpressions.default)(nodes, scope2, declars);
    if (!result) return;
    for (const declar of declars) {
      scope2.push(declar);
    }
    return result;
  }
  return toSequenceExpression;
}
var hasRequiredLib$O;
function requireLib$O() {
  if (hasRequiredLib$O) return lib$N;
  hasRequiredLib$O = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      react: true,
      assertNode: true,
      createTypeAnnotationBasedOnTypeof: true,
      createUnionTypeAnnotation: true,
      createFlowUnionType: true,
      createTSUnionType: true,
      cloneNode: true,
      clone: true,
      cloneDeep: true,
      cloneDeepWithoutLoc: true,
      cloneWithoutLoc: true,
      addComment: true,
      addComments: true,
      inheritInnerComments: true,
      inheritLeadingComments: true,
      inheritsComments: true,
      inheritTrailingComments: true,
      removeComments: true,
      ensureBlock: true,
      toBindingIdentifierName: true,
      toBlock: true,
      toComputedKey: true,
      toExpression: true,
      toIdentifier: true,
      toKeyAlias: true,
      toStatement: true,
      valueToNode: true,
      appendToMemberExpression: true,
      inherits: true,
      prependToMemberExpression: true,
      removeProperties: true,
      removePropertiesDeep: true,
      removeTypeDuplicates: true,
      getBindingIdentifiers: true,
      getOuterBindingIdentifiers: true,
      traverse: true,
      traverseFast: true,
      shallowEqual: true,
      is: true,
      isBinding: true,
      isBlockScoped: true,
      isImmutable: true,
      isLet: true,
      isNode: true,
      isNodesEquivalent: true,
      isPlaceholderType: true,
      isReferenced: true,
      isScope: true,
      isSpecifierDefault: true,
      isType: true,
      isValidES3Identifier: true,
      isValidIdentifier: true,
      isVar: true,
      matchesPattern: true,
      validate: true,
      buildMatchMemberExpression: true,
      __internal__deprecationWarning: true
    };
    Object.defineProperty(exports, "__internal__deprecationWarning", {
      enumerable: true,
      get: function() {
        return _deprecationWarning.default;
      }
    });
    Object.defineProperty(exports, "addComment", {
      enumerable: true,
      get: function() {
        return _addComment.default;
      }
    });
    Object.defineProperty(exports, "addComments", {
      enumerable: true,
      get: function() {
        return _addComments.default;
      }
    });
    Object.defineProperty(exports, "appendToMemberExpression", {
      enumerable: true,
      get: function() {
        return _appendToMemberExpression.default;
      }
    });
    Object.defineProperty(exports, "assertNode", {
      enumerable: true,
      get: function() {
        return _assertNode.default;
      }
    });
    Object.defineProperty(exports, "buildMatchMemberExpression", {
      enumerable: true,
      get: function() {
        return _buildMatchMemberExpression.default;
      }
    });
    Object.defineProperty(exports, "clone", {
      enumerable: true,
      get: function() {
        return _clone.default;
      }
    });
    Object.defineProperty(exports, "cloneDeep", {
      enumerable: true,
      get: function() {
        return _cloneDeep.default;
      }
    });
    Object.defineProperty(exports, "cloneDeepWithoutLoc", {
      enumerable: true,
      get: function() {
        return _cloneDeepWithoutLoc.default;
      }
    });
    Object.defineProperty(exports, "cloneNode", {
      enumerable: true,
      get: function() {
        return _cloneNode.default;
      }
    });
    Object.defineProperty(exports, "cloneWithoutLoc", {
      enumerable: true,
      get: function() {
        return _cloneWithoutLoc.default;
      }
    });
    Object.defineProperty(exports, "createFlowUnionType", {
      enumerable: true,
      get: function() {
        return _createFlowUnionType.default;
      }
    });
    Object.defineProperty(exports, "createTSUnionType", {
      enumerable: true,
      get: function() {
        return _createTSUnionType.default;
      }
    });
    Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
      enumerable: true,
      get: function() {
        return _createTypeAnnotationBasedOnTypeof.default;
      }
    });
    Object.defineProperty(exports, "createUnionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _createFlowUnionType.default;
      }
    });
    Object.defineProperty(exports, "ensureBlock", {
      enumerable: true,
      get: function() {
        return _ensureBlock.default;
      }
    });
    Object.defineProperty(exports, "getBindingIdentifiers", {
      enumerable: true,
      get: function() {
        return _getBindingIdentifiers.default;
      }
    });
    Object.defineProperty(exports, "getOuterBindingIdentifiers", {
      enumerable: true,
      get: function() {
        return _getOuterBindingIdentifiers.default;
      }
    });
    Object.defineProperty(exports, "inheritInnerComments", {
      enumerable: true,
      get: function() {
        return _inheritInnerComments.default;
      }
    });
    Object.defineProperty(exports, "inheritLeadingComments", {
      enumerable: true,
      get: function() {
        return _inheritLeadingComments.default;
      }
    });
    Object.defineProperty(exports, "inheritTrailingComments", {
      enumerable: true,
      get: function() {
        return _inheritTrailingComments.default;
      }
    });
    Object.defineProperty(exports, "inherits", {
      enumerable: true,
      get: function() {
        return _inherits.default;
      }
    });
    Object.defineProperty(exports, "inheritsComments", {
      enumerable: true,
      get: function() {
        return _inheritsComments.default;
      }
    });
    Object.defineProperty(exports, "is", {
      enumerable: true,
      get: function() {
        return _is.default;
      }
    });
    Object.defineProperty(exports, "isBinding", {
      enumerable: true,
      get: function() {
        return _isBinding.default;
      }
    });
    Object.defineProperty(exports, "isBlockScoped", {
      enumerable: true,
      get: function() {
        return _isBlockScoped.default;
      }
    });
    Object.defineProperty(exports, "isImmutable", {
      enumerable: true,
      get: function() {
        return _isImmutable.default;
      }
    });
    Object.defineProperty(exports, "isLet", {
      enumerable: true,
      get: function() {
        return _isLet.default;
      }
    });
    Object.defineProperty(exports, "isNode", {
      enumerable: true,
      get: function() {
        return _isNode.default;
      }
    });
    Object.defineProperty(exports, "isNodesEquivalent", {
      enumerable: true,
      get: function() {
        return _isNodesEquivalent.default;
      }
    });
    Object.defineProperty(exports, "isPlaceholderType", {
      enumerable: true,
      get: function() {
        return _isPlaceholderType.default;
      }
    });
    Object.defineProperty(exports, "isReferenced", {
      enumerable: true,
      get: function() {
        return _isReferenced.default;
      }
    });
    Object.defineProperty(exports, "isScope", {
      enumerable: true,
      get: function() {
        return _isScope.default;
      }
    });
    Object.defineProperty(exports, "isSpecifierDefault", {
      enumerable: true,
      get: function() {
        return _isSpecifierDefault.default;
      }
    });
    Object.defineProperty(exports, "isType", {
      enumerable: true,
      get: function() {
        return _isType.default;
      }
    });
    Object.defineProperty(exports, "isValidES3Identifier", {
      enumerable: true,
      get: function() {
        return _isValidES3Identifier.default;
      }
    });
    Object.defineProperty(exports, "isValidIdentifier", {
      enumerable: true,
      get: function() {
        return _isValidIdentifier.default;
      }
    });
    Object.defineProperty(exports, "isVar", {
      enumerable: true,
      get: function() {
        return _isVar.default;
      }
    });
    Object.defineProperty(exports, "matchesPattern", {
      enumerable: true,
      get: function() {
        return _matchesPattern.default;
      }
    });
    Object.defineProperty(exports, "prependToMemberExpression", {
      enumerable: true,
      get: function() {
        return _prependToMemberExpression.default;
      }
    });
    exports.react = void 0;
    Object.defineProperty(exports, "removeComments", {
      enumerable: true,
      get: function() {
        return _removeComments.default;
      }
    });
    Object.defineProperty(exports, "removeProperties", {
      enumerable: true,
      get: function() {
        return _removeProperties.default;
      }
    });
    Object.defineProperty(exports, "removePropertiesDeep", {
      enumerable: true,
      get: function() {
        return _removePropertiesDeep.default;
      }
    });
    Object.defineProperty(exports, "removeTypeDuplicates", {
      enumerable: true,
      get: function() {
        return _removeTypeDuplicates.default;
      }
    });
    Object.defineProperty(exports, "shallowEqual", {
      enumerable: true,
      get: function() {
        return _shallowEqual.default;
      }
    });
    Object.defineProperty(exports, "toBindingIdentifierName", {
      enumerable: true,
      get: function() {
        return _toBindingIdentifierName.default;
      }
    });
    Object.defineProperty(exports, "toBlock", {
      enumerable: true,
      get: function() {
        return _toBlock.default;
      }
    });
    Object.defineProperty(exports, "toComputedKey", {
      enumerable: true,
      get: function() {
        return _toComputedKey.default;
      }
    });
    Object.defineProperty(exports, "toExpression", {
      enumerable: true,
      get: function() {
        return _toExpression.default;
      }
    });
    Object.defineProperty(exports, "toIdentifier", {
      enumerable: true,
      get: function() {
        return _toIdentifier.default;
      }
    });
    Object.defineProperty(exports, "toKeyAlias", {
      enumerable: true,
      get: function() {
        return _toKeyAlias.default;
      }
    });
    Object.defineProperty(exports, "toStatement", {
      enumerable: true,
      get: function() {
        return _toStatement.default;
      }
    });
    Object.defineProperty(exports, "traverse", {
      enumerable: true,
      get: function() {
        return _traverse.default;
      }
    });
    Object.defineProperty(exports, "traverseFast", {
      enumerable: true,
      get: function() {
        return _traverseFast.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "valueToNode", {
      enumerable: true,
      get: function() {
        return _valueToNode.default;
      }
    });
    var _isReactComponent = requireIsReactComponent();
    var _isCompatTag = requireIsCompatTag();
    var _buildChildren = requireBuildChildren();
    var _assertNode = requireAssertNode();
    var _index = requireGenerated$1();
    Object.keys(_index).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _index[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _index[key2];
        }
      });
    });
    var _createTypeAnnotationBasedOnTypeof = requireCreateTypeAnnotationBasedOnTypeof();
    var _createFlowUnionType = requireCreateFlowUnionType();
    var _createTSUnionType = requireCreateTSUnionType();
    var _index2 = requireGenerated$2();
    Object.keys(_index2).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _index2[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _index2[key2];
        }
      });
    });
    var _uppercase = requireUppercase();
    Object.keys(_uppercase).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _uppercase[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _uppercase[key2];
        }
      });
    });
    var _productions = requireProductions();
    Object.keys(_productions).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _productions[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _productions[key2];
        }
      });
    });
    var _cloneNode = requireCloneNode();
    var _clone = requireClone();
    var _cloneDeep = requireCloneDeep$1();
    var _cloneDeepWithoutLoc = requireCloneDeepWithoutLoc();
    var _cloneWithoutLoc = requireCloneWithoutLoc();
    var _addComment = requireAddComment();
    var _addComments = requireAddComments();
    var _inheritInnerComments = requireInheritInnerComments();
    var _inheritLeadingComments = requireInheritLeadingComments();
    var _inheritsComments = requireInheritsComments();
    var _inheritTrailingComments = requireInheritTrailingComments();
    var _removeComments = requireRemoveComments();
    var _index3 = requireGenerated();
    Object.keys(_index3).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _index3[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _index3[key2];
        }
      });
    });
    var _index4 = requireConstants();
    Object.keys(_index4).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _index4[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _index4[key2];
        }
      });
    });
    var _ensureBlock = requireEnsureBlock();
    var _toBindingIdentifierName = requireToBindingIdentifierName();
    var _toBlock = requireToBlock();
    var _toComputedKey = requireToComputedKey();
    var _toExpression = requireToExpression();
    var _toIdentifier = requireToIdentifier();
    var _toKeyAlias = requireToKeyAlias();
    var _toStatement = requireToStatement();
    var _valueToNode = requireValueToNode();
    var _index5 = requireDefinitions();
    Object.keys(_index5).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _index5[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _index5[key2];
        }
      });
    });
    var _appendToMemberExpression = requireAppendToMemberExpression();
    var _inherits = requireInherits();
    var _prependToMemberExpression = requirePrependToMemberExpression();
    var _removeProperties = requireRemoveProperties();
    var _removePropertiesDeep = requireRemovePropertiesDeep();
    var _removeTypeDuplicates = requireRemoveTypeDuplicates$1();
    var _getBindingIdentifiers = requireGetBindingIdentifiers();
    var _getOuterBindingIdentifiers = requireGetOuterBindingIdentifiers();
    var _traverse = requireTraverse();
    Object.keys(_traverse).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _traverse[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _traverse[key2];
        }
      });
    });
    var _traverseFast = requireTraverseFast();
    var _shallowEqual = requireShallowEqual();
    var _is = requireIs();
    var _isBinding = requireIsBinding();
    var _isBlockScoped = requireIsBlockScoped();
    var _isImmutable = requireIsImmutable();
    var _isLet = requireIsLet();
    var _isNode = requireIsNode();
    var _isNodesEquivalent = requireIsNodesEquivalent();
    var _isPlaceholderType = requireIsPlaceholderType();
    var _isReferenced = requireIsReferenced();
    var _isScope = requireIsScope();
    var _isSpecifierDefault = requireIsSpecifierDefault();
    var _isType = requireIsType();
    var _isValidES3Identifier = requireIsValidES3Identifier();
    var _isValidIdentifier = requireIsValidIdentifier();
    var _isVar = requireIsVar();
    var _matchesPattern = requireMatchesPattern();
    var _validate = requireValidate();
    var _buildMatchMemberExpression = requireBuildMatchMemberExpression();
    var _index6 = requireGenerated$3();
    Object.keys(_index6).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key2)) return;
      if (key2 in exports && exports[key2] === _index6[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _index6[key2];
        }
      });
    });
    var _deprecationWarning = requireDeprecationWarning();
    exports.react = {
      isReactComponent: _isReactComponent.default,
      isCompatTag: _isCompatTag.default,
      buildChildren: _buildChildren.default
    };
    {
      exports.toSequenceExpression = requireToSequenceExpression().default;
    }
  })(lib$N);
  return lib$N;
}
var hasRequiredVirtualTypesValidator;
function requireVirtualTypesValidator() {
  if (hasRequiredVirtualTypesValidator) return virtualTypesValidator;
  hasRequiredVirtualTypesValidator = 1;
  Object.defineProperty(virtualTypesValidator, "__esModule", {
    value: true
  });
  virtualTypesValidator.isBindingIdentifier = isBindingIdentifier;
  virtualTypesValidator.isBlockScoped = isBlockScoped2;
  virtualTypesValidator.isExpression = isExpression;
  virtualTypesValidator.isFlow = isFlow;
  virtualTypesValidator.isForAwaitStatement = isForAwaitStatement;
  virtualTypesValidator.isGenerated = isGenerated;
  virtualTypesValidator.isPure = isPure;
  virtualTypesValidator.isReferenced = isReferenced2;
  virtualTypesValidator.isReferencedIdentifier = isReferencedIdentifier;
  virtualTypesValidator.isReferencedMemberExpression = isReferencedMemberExpression;
  virtualTypesValidator.isRestProperty = isRestProperty;
  virtualTypesValidator.isScope = isScope2;
  virtualTypesValidator.isSpreadProperty = isSpreadProperty;
  virtualTypesValidator.isStatement = isStatement;
  virtualTypesValidator.isUser = isUser;
  virtualTypesValidator.isVar = isVar2;
  var _t = requireLib$O();
  const {
    isBinding: isBinding2,
    isBlockScoped: nodeIsBlockScoped,
    isExportDeclaration,
    isExpression: nodeIsExpression,
    isFlow: nodeIsFlow,
    isForStatement,
    isForXStatement,
    isIdentifier,
    isImportDeclaration,
    isImportSpecifier,
    isJSXIdentifier,
    isJSXMemberExpression,
    isMemberExpression,
    isRestElement: nodeIsRestElement,
    isReferenced: nodeIsReferenced,
    isScope: nodeIsScope,
    isStatement: nodeIsStatement,
    isVar: nodeIsVar,
    isVariableDeclaration,
    react,
    isForOfStatement
  } = _t;
  const {
    isCompatTag: isCompatTag2
  } = react;
  function isReferencedIdentifier(opts) {
    const {
      node: node2,
      parent
    } = this;
    if (!isIdentifier(node2, opts) && !isJSXMemberExpression(parent, opts)) {
      if (isJSXIdentifier(node2, opts)) {
        if (isCompatTag2(node2.name)) return false;
      } else {
        return false;
      }
    }
    return nodeIsReferenced(node2, parent, this.parentPath.parent);
  }
  function isReferencedMemberExpression() {
    const {
      node: node2,
      parent
    } = this;
    return isMemberExpression(node2) && nodeIsReferenced(node2, parent);
  }
  function isBindingIdentifier() {
    const {
      node: node2,
      parent
    } = this;
    const grandparent = this.parentPath.parent;
    return isIdentifier(node2) && isBinding2(node2, parent, grandparent);
  }
  function isStatement() {
    const {
      node: node2,
      parent
    } = this;
    if (nodeIsStatement(node2)) {
      if (isVariableDeclaration(node2)) {
        if (isForXStatement(parent, {
          left: node2
        })) return false;
        if (isForStatement(parent, {
          init: node2
        })) return false;
      }
      return true;
    } else {
      return false;
    }
  }
  function isExpression() {
    if (this.isIdentifier()) {
      return this.isReferencedIdentifier();
    } else {
      return nodeIsExpression(this.node);
    }
  }
  function isScope2() {
    return nodeIsScope(this.node, this.parent);
  }
  function isReferenced2() {
    return nodeIsReferenced(this.node, this.parent);
  }
  function isBlockScoped2() {
    return nodeIsBlockScoped(this.node);
  }
  function isVar2() {
    return nodeIsVar(this.node);
  }
  function isUser() {
    return this.node && !!this.node.loc;
  }
  function isGenerated() {
    return !this.isUser();
  }
  function isPure(constantsOnly) {
    return this.scope.isPure(this.node, constantsOnly);
  }
  function isFlow() {
    const {
      node: node2
    } = this;
    if (nodeIsFlow(node2)) {
      return true;
    } else if (isImportDeclaration(node2)) {
      return node2.importKind === "type" || node2.importKind === "typeof";
    } else if (isExportDeclaration(node2)) {
      return node2.exportKind === "type";
    } else if (isImportSpecifier(node2)) {
      return node2.importKind === "type" || node2.importKind === "typeof";
    } else {
      return false;
    }
  }
  function isRestProperty() {
    return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectPattern();
  }
  function isSpreadProperty() {
    return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectExpression();
  }
  function isForAwaitStatement() {
    return isForOfStatement(this.node, {
      await: true
    });
  }
  {
    virtualTypesValidator.isExistentialTypeParam = function isExistentialTypeParam() {
      throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
    };
    virtualTypesValidator.isNumericLiteralTypeAnnotation = function isNumericLiteralTypeAnnotation() {
      throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
    };
  }
  return virtualTypesValidator;
}
var hasRequiredVisitors;
function requireVisitors() {
  if (hasRequiredVisitors) return visitors;
  hasRequiredVisitors = 1;
  Object.defineProperty(visitors, "__esModule", {
    value: true
  });
  visitors.explode = explode;
  visitors.isExplodedVisitor = isExplodedVisitor;
  visitors.merge = merge;
  visitors.verify = verify;
  var virtualTypes2 = requireVirtualTypes();
  var virtualTypesValidators = requireVirtualTypesValidator();
  var _t = requireLib$O();
  const {
    DEPRECATED_KEYS,
    DEPRECATED_ALIASES,
    FLIPPED_ALIAS_KEYS,
    TYPES,
    __internal__deprecationWarning: deprecationWarning2
  } = _t;
  function isVirtualType(type) {
    return type in virtualTypes2;
  }
  function isExplodedVisitor(visitor) {
    return visitor == null ? void 0 : visitor._exploded;
  }
  function explode(visitor) {
    if (isExplodedVisitor(visitor)) return visitor;
    visitor._exploded = true;
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      const parts = nodeType.split("|");
      if (parts.length === 1) continue;
      const fns = visitor[nodeType];
      delete visitor[nodeType];
      for (const part of parts) {
        visitor[part] = fns;
      }
    }
    verify(visitor);
    delete visitor.__esModule;
    ensureEntranceObjects(visitor);
    ensureCallbackArrays(visitor);
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      if (!isVirtualType(nodeType)) continue;
      const fns = visitor[nodeType];
      for (const type of Object.keys(fns)) {
        fns[type] = wrapCheck(nodeType, fns[type]);
      }
      delete visitor[nodeType];
      const types2 = virtualTypes2[nodeType];
      if (types2 !== null) {
        for (const type of types2) {
          if (visitor[type]) {
            mergePair(visitor[type], fns);
          } else {
            visitor[type] = fns;
          }
        }
      } else {
        mergePair(visitor, fns);
      }
    }
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      let aliases = FLIPPED_ALIAS_KEYS[nodeType];
      if (nodeType in DEPRECATED_KEYS) {
        const deprecatedKey = DEPRECATED_KEYS[nodeType];
        deprecationWarning2(nodeType, deprecatedKey, "Visitor ");
        aliases = [deprecatedKey];
      } else if (nodeType in DEPRECATED_ALIASES) {
        const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
        deprecationWarning2(nodeType, deprecatedAlias, "Visitor ");
        aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
      }
      if (!aliases) continue;
      const fns = visitor[nodeType];
      delete visitor[nodeType];
      for (const alias of aliases) {
        const existing = visitor[alias];
        if (existing) {
          mergePair(existing, fns);
        } else {
          visitor[alias] = Object.assign({}, fns);
        }
      }
    }
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      ensureCallbackArrays(visitor[nodeType]);
    }
    return visitor;
  }
  function verify(visitor) {
    if (visitor._verified) return;
    if (typeof visitor === "function") {
      throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
    }
    for (const nodeType of Object.keys(visitor)) {
      if (nodeType === "enter" || nodeType === "exit") {
        validateVisitorMethods(nodeType, visitor[nodeType]);
      }
      if (shouldIgnoreKey(nodeType)) continue;
      if (TYPES.indexOf(nodeType) < 0) {
        throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);
      }
      const visitors2 = visitor[nodeType];
      if (typeof visitors2 === "object") {
        for (const visitorKey of Object.keys(visitors2)) {
          if (visitorKey === "enter" || visitorKey === "exit") {
            validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors2[visitorKey]);
          } else {
            throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
          }
        }
      }
    }
    visitor._verified = true;
  }
  function validateVisitorMethods(path2, val) {
    const fns = [].concat(val);
    for (const fn2 of fns) {
      if (typeof fn2 !== "function") {
        throw new TypeError(`Non-function found defined in ${path2} with type ${typeof fn2}`);
      }
    }
  }
  function merge(visitors2, states = [], wrapper) {
    const mergedVisitor = {};
    for (let i = 0; i < visitors2.length; i++) {
      const visitor = explode(visitors2[i]);
      const state2 = states[i];
      let topVisitor = visitor;
      if (state2 || wrapper) {
        topVisitor = wrapWithStateOrWrapper(topVisitor, state2, wrapper);
      }
      mergePair(mergedVisitor, topVisitor);
      for (const key2 of Object.keys(visitor)) {
        if (shouldIgnoreKey(key2)) continue;
        let typeVisitor = visitor[key2];
        if (state2 || wrapper) {
          typeVisitor = wrapWithStateOrWrapper(typeVisitor, state2, wrapper);
        }
        const nodeVisitor = mergedVisitor[key2] || (mergedVisitor[key2] = {});
        mergePair(nodeVisitor, typeVisitor);
      }
    }
    return mergedVisitor;
  }
  function wrapWithStateOrWrapper(oldVisitor, state2, wrapper) {
    const newVisitor = {};
    for (const phase of ["enter", "exit"]) {
      let fns = oldVisitor[phase];
      if (!Array.isArray(fns)) continue;
      fns = fns.map(function(fn2) {
        let newFn = fn2;
        if (state2) {
          newFn = function(path2) {
            fn2.call(state2, path2, state2);
          };
        }
        if (wrapper) {
          newFn = wrapper(state2 == null ? void 0 : state2.key, phase, newFn);
        }
        if (newFn !== fn2) {
          newFn.toString = () => fn2.toString();
        }
        return newFn;
      });
      newVisitor[phase] = fns;
    }
    return newVisitor;
  }
  function ensureEntranceObjects(obj) {
    for (const key2 of Object.keys(obj)) {
      if (shouldIgnoreKey(key2)) continue;
      const fns = obj[key2];
      if (typeof fns === "function") {
        obj[key2] = {
          enter: fns
        };
      }
    }
  }
  function ensureCallbackArrays(obj) {
    if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
    if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
  }
  function wrapCheck(nodeType, fn2) {
    const fnKey = `is${nodeType}`;
    const validator2 = virtualTypesValidators[fnKey];
    const newFn = function(path2) {
      if (validator2.call(path2)) {
        return fn2.apply(this, arguments);
      }
    };
    newFn.toString = () => fn2.toString();
    return newFn;
  }
  function shouldIgnoreKey(key2) {
    if (key2[0] === "_") return true;
    if (key2 === "enter" || key2 === "exit" || key2 === "shouldSkip") return true;
    if (key2 === "denylist" || key2 === "noScope" || key2 === "skipKeys") {
      return true;
    }
    {
      if (key2 === "blacklist") {
        return true;
      }
    }
    return false;
  }
  function mergePair(dest, src) {
    for (const phase of ["enter", "exit"]) {
      if (!src[phase]) continue;
      dest[phase] = [].concat(dest[phase] || [], src[phase]);
    }
  }
  return visitors;
}
var cache = {};
var hasRequiredCache;
function requireCache() {
  if (hasRequiredCache) return cache;
  hasRequiredCache = 1;
  Object.defineProperty(cache, "__esModule", {
    value: true
  });
  cache.clear = clear;
  cache.clearPath = clearPath;
  cache.clearScope = clearScope;
  cache.getCachedPaths = getCachedPaths;
  cache.getOrCreateCachedPaths = getOrCreateCachedPaths;
  cache.scope = cache.path = void 0;
  let pathsCache = cache.path = /* @__PURE__ */ new WeakMap();
  cache.scope = /* @__PURE__ */ new WeakMap();
  function clear() {
    clearPath();
    clearScope();
  }
  function clearPath() {
    cache.path = pathsCache = /* @__PURE__ */ new WeakMap();
  }
  function clearScope() {
    cache.scope = /* @__PURE__ */ new WeakMap();
  }
  const nullHub = Object.freeze({});
  function getCachedPaths(hub2, parent) {
    var _pathsCache$get, _hub;
    {
      hub2 = null;
    }
    return (_pathsCache$get = pathsCache.get((_hub = hub2) != null ? _hub : nullHub)) == null ? void 0 : _pathsCache$get.get(parent);
  }
  function getOrCreateCachedPaths(hub2, parent) {
    var _hub2, _hub3;
    {
      hub2 = null;
    }
    let parents = pathsCache.get((_hub2 = hub2) != null ? _hub2 : nullHub);
    if (!parents) pathsCache.set((_hub3 = hub2) != null ? _hub3 : nullHub, parents = /* @__PURE__ */ new WeakMap());
    let paths = parents.get(parent);
    if (!paths) parents.set(parent, paths = /* @__PURE__ */ new Map());
    return paths;
  }
  return cache;
}
var traverseNode = {};
var context$1 = {};
var path = {};
var scope = {};
var renamer = {};
var lib$K = {};
var hasRequiredLib$N;
function requireLib$N() {
  if (hasRequiredLib$N) return lib$K;
  hasRequiredLib$N = 1;
  Object.defineProperty(lib$K, "__esModule", {
    value: true
  });
  lib$K.default = splitExportDeclaration;
  var _t = requireLib$O();
  const {
    cloneNode: cloneNode2,
    exportNamedDeclaration,
    exportSpecifier,
    identifier: identifier2,
    variableDeclaration,
    variableDeclarator
  } = _t;
  function splitExportDeclaration(exportDeclaration) {
    if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration()) {
      throw new Error("Only default and named export declarations can be split.");
    }
    if (exportDeclaration.isExportDefaultDeclaration()) {
      const declaration2 = exportDeclaration.get("declaration");
      const standaloneDeclaration = declaration2.isFunctionDeclaration() || declaration2.isClassDeclaration();
      const exportExpr = declaration2.isFunctionExpression() || declaration2.isClassExpression();
      const scope2 = declaration2.isScope() ? declaration2.scope.parent : declaration2.scope;
      let id = declaration2.node.id;
      let needBindingRegistration = false;
      if (!id) {
        needBindingRegistration = true;
        id = scope2.generateUidIdentifier("default");
        if (standaloneDeclaration || exportExpr) {
          declaration2.node.id = cloneNode2(id);
        }
      } else if (exportExpr && scope2.hasBinding(id.name)) {
        needBindingRegistration = true;
        id = scope2.generateUidIdentifier(id.name);
      }
      const updatedDeclaration = standaloneDeclaration ? declaration2.node : variableDeclaration("var", [variableDeclarator(cloneNode2(id), declaration2.node)]);
      const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode2(id), identifier2("default"))]);
      exportDeclaration.insertAfter(updatedExportDeclaration);
      exportDeclaration.replaceWith(updatedDeclaration);
      if (needBindingRegistration) {
        scope2.registerDeclaration(exportDeclaration);
      }
      return exportDeclaration;
    } else if (exportDeclaration.get("specifiers").length > 0) {
      throw new Error("It doesn't make sense to split exported specifiers.");
    }
    const declaration = exportDeclaration.get("declaration");
    const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
    const specifiers = Object.keys(bindingIdentifiers).map((name) => {
      return exportSpecifier(identifier2(name), identifier2(name));
    });
    const aliasDeclar = exportNamedDeclaration(null, specifiers);
    exportDeclaration.insertAfter(aliasDeclar);
    exportDeclaration.replaceWith(declaration.node);
    return exportDeclaration;
  }
  return lib$K;
}
var lib$J = {};
var hasRequiredLib$M;
function requireLib$M() {
  if (hasRequiredLib$M) return lib$J;
  hasRequiredLib$M = 1;
  Object.defineProperty(lib$J, "__esModule", {
    value: true
  });
  lib$J.default = void 0;
  lib$J.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators;
  {
    lib$J.skipAllButComputedKey = function skipAllButComputedKey(path2) {
      path2.skip();
      if (path2.node.computed) {
        path2.context.maybeQueue(path2.get("key"));
      }
    };
  }
  function requeueComputedKeyAndDecorators(path2) {
    const {
      context: context2,
      node: node2
    } = path2;
    if (node2.computed) {
      context2.maybeQueue(path2.get("key"));
    }
    if (node2.decorators) {
      for (const decorator of path2.get("decorators")) {
        context2.maybeQueue(decorator);
      }
    }
  }
  const visitor = {
    FunctionParent(path2) {
      if (path2.isArrowFunctionExpression()) {
        return;
      } else {
        path2.skip();
        if (path2.isMethod()) {
          requeueComputedKeyAndDecorators(path2);
        }
      }
    },
    Property(path2) {
      if (path2.isObjectProperty()) {
        return;
      }
      path2.skip();
      requeueComputedKeyAndDecorators(path2);
    }
  };
  var _default2 = visitor;
  lib$J.default = _default2;
  return lib$J;
}
var hasRequiredRenamer;
function requireRenamer() {
  if (hasRequiredRenamer) return renamer;
  hasRequiredRenamer = 1;
  Object.defineProperty(renamer, "__esModule", {
    value: true
  });
  renamer.default = void 0;
  var _helperSplitExportDeclaration = requireLib$N();
  var t = requireLib$O();
  var _helperEnvironmentVisitor = requireLib$M();
  var _traverseNode = requireTraverseNode();
  var _visitors = requireVisitors();
  const renameVisitor = {
    ReferencedIdentifier({
      node: node2
    }, state2) {
      if (node2.name === state2.oldName) {
        node2.name = state2.newName;
      }
    },
    Scope(path2, state2) {
      if (!path2.scope.bindingIdentifierEquals(state2.oldName, state2.binding.identifier)) {
        path2.skip();
        if (path2.isMethod()) {
          (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path2);
        }
      }
    },
    ObjectProperty({
      node: node2,
      scope: scope2
    }, state2) {
      const {
        name
      } = node2.key;
      if (node2.shorthand && (name === state2.oldName || name === state2.newName) && scope2.getBindingIdentifier(name) === state2.binding.identifier) {
        var _node$extra;
        node2.shorthand = false;
        if ((_node$extra = node2.extra) != null && _node$extra.shorthand) node2.extra.shorthand = false;
      }
    },
    "AssignmentExpression|Declaration|VariableDeclarator"(path2, state2) {
      if (path2.isVariableDeclaration()) return;
      const ids = path2.getOuterBindingIdentifiers();
      for (const name in ids) {
        if (name === state2.oldName) ids[name].name = state2.newName;
      }
    }
  };
  class Renamer {
    constructor(binding2, oldName, newName) {
      this.newName = newName;
      this.oldName = oldName;
      this.binding = binding2;
    }
    maybeConvertFromExportDeclaration(parentDeclar) {
      const maybeExportDeclar = parentDeclar.parentPath;
      if (!maybeExportDeclar.isExportDeclaration()) {
        return;
      }
      if (maybeExportDeclar.isExportDefaultDeclaration()) {
        const {
          declaration
        } = maybeExportDeclar.node;
        if (t.isDeclaration(declaration) && !declaration.id) {
          return;
        }
      }
      if (maybeExportDeclar.isExportAllDeclaration()) {
        return;
      }
      (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
    }
    maybeConvertFromClassFunctionDeclaration(path2) {
      return path2;
    }
    maybeConvertFromClassFunctionExpression(path2) {
      return path2;
    }
    rename() {
      const {
        binding: binding2,
        oldName,
        newName
      } = this;
      const {
        scope: scope2,
        path: path2
      } = binding2;
      const parentDeclar = path2.find((path3) => path3.isDeclaration() || path3.isFunctionExpression() || path3.isClassExpression());
      if (parentDeclar) {
        const bindingIds = parentDeclar.getOuterBindingIdentifiers();
        if (bindingIds[oldName] === binding2.identifier) {
          this.maybeConvertFromExportDeclaration(parentDeclar);
        }
      }
      const blockToTraverse = arguments[0] || scope2.block;
      (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope2, this, scope2.path, {
        discriminant: true
      });
      if (!arguments[0]) {
        scope2.removeOwnBinding(oldName);
        scope2.bindings[newName] = binding2;
        this.binding.identifier.name = newName;
      }
      if (parentDeclar) {
        this.maybeConvertFromClassFunctionDeclaration(path2);
        this.maybeConvertFromClassFunctionExpression(path2);
      }
    }
  }
  renamer.default = Renamer;
  return renamer;
}
var binding = {};
var hasRequiredBinding;
function requireBinding() {
  if (hasRequiredBinding) return binding;
  hasRequiredBinding = 1;
  Object.defineProperty(binding, "__esModule", {
    value: true
  });
  binding.default = void 0;
  class Binding {
    constructor({
      identifier: identifier2,
      scope: scope2,
      path: path2,
      kind
    }) {
      this.identifier = void 0;
      this.scope = void 0;
      this.path = void 0;
      this.kind = void 0;
      this.constantViolations = [];
      this.constant = true;
      this.referencePaths = [];
      this.referenced = false;
      this.references = 0;
      this.identifier = identifier2;
      this.scope = scope2;
      this.path = path2;
      this.kind = kind;
      if ((kind === "var" || kind === "hoisted") && isDeclaredInLoop(path2)) {
        this.reassign(path2);
      }
      this.clearValue();
    }
    deoptValue() {
      this.clearValue();
      this.hasDeoptedValue = true;
    }
    setValue(value2) {
      if (this.hasDeoptedValue) return;
      this.hasValue = true;
      this.value = value2;
    }
    clearValue() {
      this.hasDeoptedValue = false;
      this.hasValue = false;
      this.value = null;
    }
    reassign(path2) {
      this.constant = false;
      if (this.constantViolations.indexOf(path2) !== -1) {
        return;
      }
      this.constantViolations.push(path2);
    }
    reference(path2) {
      if (this.referencePaths.indexOf(path2) !== -1) {
        return;
      }
      this.referenced = true;
      this.references++;
      this.referencePaths.push(path2);
    }
    dereference() {
      this.references--;
      this.referenced = !!this.references;
    }
  }
  binding.default = Binding;
  function isDeclaredInLoop(path2) {
    for (let {
      parentPath,
      key: key2
    } = path2; parentPath; {
      parentPath,
      key: key2
    } = parentPath) {
      if (parentPath.isFunctionParent()) return false;
      if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && key2 === "body") {
        return true;
      }
    }
    return false;
  }
  return binding;
}
const builtin = {
  "Array": false,
  "ArrayBuffer": false,
  Atomics: false,
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false,
  "Boolean": false,
  constructor: false,
  "DataView": false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  "Float32Array": false,
  "Float64Array": false,
  "Function": false,
  globalThis: false,
  hasOwnProperty: false,
  "Infinity": false,
  "Int16Array": false,
  "Int32Array": false,
  "Int8Array": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Map": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  "Promise": false,
  propertyIsEnumerable: false,
  "Proxy": false,
  "RangeError": false,
  "ReferenceError": false,
  "Reflect": false,
  "RegExp": false,
  "Set": false,
  SharedArrayBuffer: false,
  "String": false,
  "Symbol": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "Uint16Array": false,
  "Uint32Array": false,
  "Uint8Array": false,
  "Uint8ClampedArray": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false,
  "WeakMap": false,
  "WeakSet": false
};
const es5 = {
  "Array": false,
  "Boolean": false,
  constructor: false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  "Function": false,
  hasOwnProperty: false,
  "Infinity": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  propertyIsEnumerable: false,
  "RangeError": false,
  "ReferenceError": false,
  "RegExp": false,
  "String": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false
};
const es2015 = {
  "Array": false,
  "ArrayBuffer": false,
  "Boolean": false,
  constructor: false,
  "DataView": false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  "Float32Array": false,
  "Float64Array": false,
  "Function": false,
  hasOwnProperty: false,
  "Infinity": false,
  "Int16Array": false,
  "Int32Array": false,
  "Int8Array": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Map": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  "Promise": false,
  propertyIsEnumerable: false,
  "Proxy": false,
  "RangeError": false,
  "ReferenceError": false,
  "Reflect": false,
  "RegExp": false,
  "Set": false,
  "String": false,
  "Symbol": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "Uint16Array": false,
  "Uint32Array": false,
  "Uint8Array": false,
  "Uint8ClampedArray": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false,
  "WeakMap": false,
  "WeakSet": false
};
const es2017 = {
  "Array": false,
  "ArrayBuffer": false,
  Atomics: false,
  "Boolean": false,
  constructor: false,
  "DataView": false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  "Float32Array": false,
  "Float64Array": false,
  "Function": false,
  hasOwnProperty: false,
  "Infinity": false,
  "Int16Array": false,
  "Int32Array": false,
  "Int8Array": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Map": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  "Promise": false,
  propertyIsEnumerable: false,
  "Proxy": false,
  "RangeError": false,
  "ReferenceError": false,
  "Reflect": false,
  "RegExp": false,
  "Set": false,
  SharedArrayBuffer: false,
  "String": false,
  "Symbol": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "Uint16Array": false,
  "Uint32Array": false,
  "Uint8Array": false,
  "Uint8ClampedArray": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false,
  "WeakMap": false,
  "WeakSet": false
};
const browser$2 = {
  AbortController: false,
  AbortSignal: false,
  addEventListener: false,
  alert: false,
  AnalyserNode: false,
  Animation: false,
  AnimationEffectReadOnly: false,
  AnimationEffectTiming: false,
  AnimationEffectTimingReadOnly: false,
  AnimationEvent: false,
  AnimationPlaybackEvent: false,
  AnimationTimeline: false,
  applicationCache: false,
  ApplicationCache: false,
  ApplicationCacheErrorEvent: false,
  atob: false,
  Attr: false,
  Audio: false,
  AudioBuffer: false,
  AudioBufferSourceNode: false,
  AudioContext: false,
  AudioDestinationNode: false,
  AudioListener: false,
  AudioNode: false,
  AudioParam: false,
  AudioProcessingEvent: false,
  AudioScheduledSourceNode: false,
  "AudioWorkletGlobalScope ": false,
  AudioWorkletNode: false,
  AudioWorkletProcessor: false,
  BarProp: false,
  BaseAudioContext: false,
  BatteryManager: false,
  BeforeUnloadEvent: false,
  BiquadFilterNode: false,
  Blob: false,
  BlobEvent: false,
  blur: false,
  BroadcastChannel: false,
  btoa: false,
  BudgetService: false,
  ByteLengthQueuingStrategy: false,
  Cache: false,
  caches: false,
  CacheStorage: false,
  cancelAnimationFrame: false,
  cancelIdleCallback: false,
  CanvasCaptureMediaStreamTrack: false,
  CanvasGradient: false,
  CanvasPattern: false,
  CanvasRenderingContext2D: false,
  ChannelMergerNode: false,
  ChannelSplitterNode: false,
  CharacterData: false,
  clearInterval: false,
  clearTimeout: false,
  clientInformation: false,
  ClipboardEvent: false,
  close: false,
  closed: false,
  CloseEvent: false,
  Comment: false,
  CompositionEvent: false,
  confirm: false,
  console: false,
  ConstantSourceNode: false,
  ConvolverNode: false,
  CountQueuingStrategy: false,
  createImageBitmap: false,
  Credential: false,
  CredentialsContainer: false,
  crypto: false,
  Crypto: false,
  CryptoKey: false,
  CSS: false,
  CSSConditionRule: false,
  CSSFontFaceRule: false,
  CSSGroupingRule: false,
  CSSImportRule: false,
  CSSKeyframeRule: false,
  CSSKeyframesRule: false,
  CSSMediaRule: false,
  CSSNamespaceRule: false,
  CSSPageRule: false,
  CSSRule: false,
  CSSRuleList: false,
  CSSStyleDeclaration: false,
  CSSStyleRule: false,
  CSSStyleSheet: false,
  CSSSupportsRule: false,
  CustomElementRegistry: false,
  customElements: false,
  CustomEvent: false,
  DataTransfer: false,
  DataTransferItem: false,
  DataTransferItemList: false,
  defaultstatus: false,
  defaultStatus: false,
  DelayNode: false,
  DeviceMotionEvent: false,
  DeviceOrientationEvent: false,
  devicePixelRatio: false,
  dispatchEvent: false,
  document: false,
  Document: false,
  DocumentFragment: false,
  DocumentType: false,
  DOMError: false,
  DOMException: false,
  DOMImplementation: false,
  DOMMatrix: false,
  DOMMatrixReadOnly: false,
  DOMParser: false,
  DOMPoint: false,
  DOMPointReadOnly: false,
  DOMQuad: false,
  DOMRect: false,
  DOMRectReadOnly: false,
  DOMStringList: false,
  DOMStringMap: false,
  DOMTokenList: false,
  DragEvent: false,
  DynamicsCompressorNode: false,
  Element: false,
  ErrorEvent: false,
  event: false,
  Event: false,
  EventSource: false,
  EventTarget: false,
  external: false,
  fetch: false,
  File: false,
  FileList: false,
  FileReader: false,
  find: false,
  focus: false,
  FocusEvent: false,
  FontFace: false,
  FontFaceSetLoadEvent: false,
  FormData: false,
  frameElement: false,
  frames: false,
  GainNode: false,
  Gamepad: false,
  GamepadButton: false,
  GamepadEvent: false,
  getComputedStyle: false,
  getSelection: false,
  HashChangeEvent: false,
  Headers: false,
  history: false,
  History: false,
  HTMLAllCollection: false,
  HTMLAnchorElement: false,
  HTMLAreaElement: false,
  HTMLAudioElement: false,
  HTMLBaseElement: false,
  HTMLBodyElement: false,
  HTMLBRElement: false,
  HTMLButtonElement: false,
  HTMLCanvasElement: false,
  HTMLCollection: false,
  HTMLContentElement: false,
  HTMLDataElement: false,
  HTMLDataListElement: false,
  HTMLDetailsElement: false,
  HTMLDialogElement: false,
  HTMLDirectoryElement: false,
  HTMLDivElement: false,
  HTMLDListElement: false,
  HTMLDocument: false,
  HTMLElement: false,
  HTMLEmbedElement: false,
  HTMLFieldSetElement: false,
  HTMLFontElement: false,
  HTMLFormControlsCollection: false,
  HTMLFormElement: false,
  HTMLFrameElement: false,
  HTMLFrameSetElement: false,
  HTMLHeadElement: false,
  HTMLHeadingElement: false,
  HTMLHRElement: false,
  HTMLHtmlElement: false,
  HTMLIFrameElement: false,
  HTMLImageElement: false,
  HTMLInputElement: false,
  HTMLLabelElement: false,
  HTMLLegendElement: false,
  HTMLLIElement: false,
  HTMLLinkElement: false,
  HTMLMapElement: false,
  HTMLMarqueeElement: false,
  HTMLMediaElement: false,
  HTMLMenuElement: false,
  HTMLMetaElement: false,
  HTMLMeterElement: false,
  HTMLModElement: false,
  HTMLObjectElement: false,
  HTMLOListElement: false,
  HTMLOptGroupElement: false,
  HTMLOptionElement: false,
  HTMLOptionsCollection: false,
  HTMLOutputElement: false,
  HTMLParagraphElement: false,
  HTMLParamElement: false,
  HTMLPictureElement: false,
  HTMLPreElement: false,
  HTMLProgressElement: false,
  HTMLQuoteElement: false,
  HTMLScriptElement: false,
  HTMLSelectElement: false,
  HTMLShadowElement: false,
  HTMLSlotElement: false,
  HTMLSourceElement: false,
  HTMLSpanElement: false,
  HTMLStyleElement: false,
  HTMLTableCaptionElement: false,
  HTMLTableCellElement: false,
  HTMLTableColElement: false,
  HTMLTableElement: false,
  HTMLTableRowElement: false,
  HTMLTableSectionElement: false,
  HTMLTemplateElement: false,
  HTMLTextAreaElement: false,
  HTMLTimeElement: false,
  HTMLTitleElement: false,
  HTMLTrackElement: false,
  HTMLUListElement: false,
  HTMLUnknownElement: false,
  HTMLVideoElement: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  IdleDeadline: false,
  IIRFilterNode: false,
  Image: false,
  ImageBitmap: false,
  ImageBitmapRenderingContext: false,
  ImageCapture: false,
  ImageData: false,
  indexedDB: false,
  innerHeight: false,
  innerWidth: false,
  InputEvent: false,
  IntersectionObserver: false,
  IntersectionObserverEntry: false,
  "Intl": false,
  isSecureContext: false,
  KeyboardEvent: false,
  KeyframeEffect: false,
  KeyframeEffectReadOnly: false,
  length: false,
  localStorage: false,
  location: true,
  Location: false,
  locationbar: false,
  matchMedia: false,
  MediaDeviceInfo: false,
  MediaDevices: false,
  MediaElementAudioSourceNode: false,
  MediaEncryptedEvent: false,
  MediaError: false,
  MediaKeyMessageEvent: false,
  MediaKeySession: false,
  MediaKeyStatusMap: false,
  MediaKeySystemAccess: false,
  MediaList: false,
  MediaQueryList: false,
  MediaQueryListEvent: false,
  MediaRecorder: false,
  MediaSettingsRange: false,
  MediaSource: false,
  MediaStream: false,
  MediaStreamAudioDestinationNode: false,
  MediaStreamAudioSourceNode: false,
  MediaStreamEvent: false,
  MediaStreamTrack: false,
  MediaStreamTrackEvent: false,
  menubar: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  MIDIAccess: false,
  MIDIConnectionEvent: false,
  MIDIInput: false,
  MIDIInputMap: false,
  MIDIMessageEvent: false,
  MIDIOutput: false,
  MIDIOutputMap: false,
  MIDIPort: false,
  MimeType: false,
  MimeTypeArray: false,
  MouseEvent: false,
  moveBy: false,
  moveTo: false,
  MutationEvent: false,
  MutationObserver: false,
  MutationRecord: false,
  name: false,
  NamedNodeMap: false,
  NavigationPreloadManager: false,
  navigator: false,
  Navigator: false,
  NetworkInformation: false,
  Node: false,
  NodeFilter: false,
  NodeIterator: false,
  NodeList: false,
  Notification: false,
  OfflineAudioCompletionEvent: false,
  OfflineAudioContext: false,
  offscreenBuffering: false,
  OffscreenCanvas: true,
  onabort: true,
  onafterprint: true,
  onanimationend: true,
  onanimationiteration: true,
  onanimationstart: true,
  onappinstalled: true,
  onauxclick: true,
  onbeforeinstallprompt: true,
  onbeforeprint: true,
  onbeforeunload: true,
  onblur: true,
  oncancel: true,
  oncanplay: true,
  oncanplaythrough: true,
  onchange: true,
  onclick: true,
  onclose: true,
  oncontextmenu: true,
  oncuechange: true,
  ondblclick: true,
  ondevicemotion: true,
  ondeviceorientation: true,
  ondeviceorientationabsolute: true,
  ondrag: true,
  ondragend: true,
  ondragenter: true,
  ondragleave: true,
  ondragover: true,
  ondragstart: true,
  ondrop: true,
  ondurationchange: true,
  onemptied: true,
  onended: true,
  onerror: true,
  onfocus: true,
  ongotpointercapture: true,
  onhashchange: true,
  oninput: true,
  oninvalid: true,
  onkeydown: true,
  onkeypress: true,
  onkeyup: true,
  onlanguagechange: true,
  onload: true,
  onloadeddata: true,
  onloadedmetadata: true,
  onloadstart: true,
  onlostpointercapture: true,
  onmessage: true,
  onmessageerror: true,
  onmousedown: true,
  onmouseenter: true,
  onmouseleave: true,
  onmousemove: true,
  onmouseout: true,
  onmouseover: true,
  onmouseup: true,
  onmousewheel: true,
  onoffline: true,
  ononline: true,
  onpagehide: true,
  onpageshow: true,
  onpause: true,
  onplay: true,
  onplaying: true,
  onpointercancel: true,
  onpointerdown: true,
  onpointerenter: true,
  onpointerleave: true,
  onpointermove: true,
  onpointerout: true,
  onpointerover: true,
  onpointerup: true,
  onpopstate: true,
  onprogress: true,
  onratechange: true,
  onrejectionhandled: true,
  onreset: true,
  onresize: true,
  onscroll: true,
  onsearch: true,
  onseeked: true,
  onseeking: true,
  onselect: true,
  onstalled: true,
  onstorage: true,
  onsubmit: true,
  onsuspend: true,
  ontimeupdate: true,
  ontoggle: true,
  ontransitionend: true,
  onunhandledrejection: true,
  onunload: true,
  onvolumechange: true,
  onwaiting: true,
  onwheel: true,
  open: false,
  openDatabase: false,
  opener: false,
  Option: false,
  origin: false,
  OscillatorNode: false,
  outerHeight: false,
  outerWidth: false,
  PageTransitionEvent: false,
  pageXOffset: false,
  pageYOffset: false,
  PannerNode: false,
  parent: false,
  Path2D: false,
  PaymentAddress: false,
  PaymentRequest: false,
  PaymentRequestUpdateEvent: false,
  PaymentResponse: false,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceLongTaskTiming: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceNavigationTiming: false,
  PerformanceObserver: false,
  PerformanceObserverEntryList: false,
  PerformancePaintTiming: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  PeriodicWave: false,
  Permissions: false,
  PermissionStatus: false,
  personalbar: false,
  PhotoCapabilities: false,
  Plugin: false,
  PluginArray: false,
  PointerEvent: false,
  PopStateEvent: false,
  postMessage: false,
  Presentation: false,
  PresentationAvailability: false,
  PresentationConnection: false,
  PresentationConnectionAvailableEvent: false,
  PresentationConnectionCloseEvent: false,
  PresentationConnectionList: false,
  PresentationReceiver: false,
  PresentationRequest: false,
  print: false,
  ProcessingInstruction: false,
  ProgressEvent: false,
  PromiseRejectionEvent: false,
  prompt: false,
  PushManager: false,
  PushSubscription: false,
  PushSubscriptionOptions: false,
  queueMicrotask: false,
  RadioNodeList: false,
  Range: false,
  ReadableStream: false,
  registerProcessor: false,
  RemotePlayback: false,
  removeEventListener: false,
  Request: false,
  requestAnimationFrame: false,
  requestIdleCallback: false,
  resizeBy: false,
  ResizeObserver: false,
  ResizeObserverEntry: false,
  resizeTo: false,
  Response: false,
  RTCCertificate: false,
  RTCDataChannel: false,
  RTCDataChannelEvent: false,
  RTCDtlsTransport: false,
  RTCIceCandidate: false,
  RTCIceGatherer: false,
  RTCIceTransport: false,
  RTCPeerConnection: false,
  RTCPeerConnectionIceEvent: false,
  RTCRtpContributingSource: false,
  RTCRtpReceiver: false,
  RTCRtpSender: false,
  RTCSctpTransport: false,
  RTCSessionDescription: false,
  RTCStatsReport: false,
  RTCTrackEvent: false,
  screen: false,
  Screen: false,
  screenLeft: false,
  ScreenOrientation: false,
  screenTop: false,
  screenX: false,
  screenY: false,
  ScriptProcessorNode: false,
  scroll: false,
  scrollbars: false,
  scrollBy: false,
  scrollTo: false,
  scrollX: false,
  scrollY: false,
  SecurityPolicyViolationEvent: false,
  Selection: false,
  self: false,
  ServiceWorker: false,
  ServiceWorkerContainer: false,
  ServiceWorkerRegistration: false,
  sessionStorage: false,
  setInterval: false,
  setTimeout: false,
  ShadowRoot: false,
  SharedWorker: false,
  SourceBuffer: false,
  SourceBufferList: false,
  speechSynthesis: false,
  SpeechSynthesisEvent: false,
  SpeechSynthesisUtterance: false,
  StaticRange: false,
  status: false,
  statusbar: false,
  StereoPannerNode: false,
  stop: false,
  Storage: false,
  StorageEvent: false,
  StorageManager: false,
  styleMedia: false,
  StyleSheet: false,
  StyleSheetList: false,
  SubtleCrypto: false,
  SVGAElement: false,
  SVGAngle: false,
  SVGAnimatedAngle: false,
  SVGAnimatedBoolean: false,
  SVGAnimatedEnumeration: false,
  SVGAnimatedInteger: false,
  SVGAnimatedLength: false,
  SVGAnimatedLengthList: false,
  SVGAnimatedNumber: false,
  SVGAnimatedNumberList: false,
  SVGAnimatedPreserveAspectRatio: false,
  SVGAnimatedRect: false,
  SVGAnimatedString: false,
  SVGAnimatedTransformList: false,
  SVGAnimateElement: false,
  SVGAnimateMotionElement: false,
  SVGAnimateTransformElement: false,
  SVGAnimationElement: false,
  SVGCircleElement: false,
  SVGClipPathElement: false,
  SVGComponentTransferFunctionElement: false,
  SVGDefsElement: false,
  SVGDescElement: false,
  SVGDiscardElement: false,
  SVGElement: false,
  SVGEllipseElement: false,
  SVGFEBlendElement: false,
  SVGFEColorMatrixElement: false,
  SVGFEComponentTransferElement: false,
  SVGFECompositeElement: false,
  SVGFEConvolveMatrixElement: false,
  SVGFEDiffuseLightingElement: false,
  SVGFEDisplacementMapElement: false,
  SVGFEDistantLightElement: false,
  SVGFEDropShadowElement: false,
  SVGFEFloodElement: false,
  SVGFEFuncAElement: false,
  SVGFEFuncBElement: false,
  SVGFEFuncGElement: false,
  SVGFEFuncRElement: false,
  SVGFEGaussianBlurElement: false,
  SVGFEImageElement: false,
  SVGFEMergeElement: false,
  SVGFEMergeNodeElement: false,
  SVGFEMorphologyElement: false,
  SVGFEOffsetElement: false,
  SVGFEPointLightElement: false,
  SVGFESpecularLightingElement: false,
  SVGFESpotLightElement: false,
  SVGFETileElement: false,
  SVGFETurbulenceElement: false,
  SVGFilterElement: false,
  SVGForeignObjectElement: false,
  SVGGElement: false,
  SVGGeometryElement: false,
  SVGGradientElement: false,
  SVGGraphicsElement: false,
  SVGImageElement: false,
  SVGLength: false,
  SVGLengthList: false,
  SVGLinearGradientElement: false,
  SVGLineElement: false,
  SVGMarkerElement: false,
  SVGMaskElement: false,
  SVGMatrix: false,
  SVGMetadataElement: false,
  SVGMPathElement: false,
  SVGNumber: false,
  SVGNumberList: false,
  SVGPathElement: false,
  SVGPatternElement: false,
  SVGPoint: false,
  SVGPointList: false,
  SVGPolygonElement: false,
  SVGPolylineElement: false,
  SVGPreserveAspectRatio: false,
  SVGRadialGradientElement: false,
  SVGRect: false,
  SVGRectElement: false,
  SVGScriptElement: false,
  SVGSetElement: false,
  SVGStopElement: false,
  SVGStringList: false,
  SVGStyleElement: false,
  SVGSVGElement: false,
  SVGSwitchElement: false,
  SVGSymbolElement: false,
  SVGTextContentElement: false,
  SVGTextElement: false,
  SVGTextPathElement: false,
  SVGTextPositioningElement: false,
  SVGTitleElement: false,
  SVGTransform: false,
  SVGTransformList: false,
  SVGTSpanElement: false,
  SVGUnitTypes: false,
  SVGUseElement: false,
  SVGViewElement: false,
  TaskAttributionTiming: false,
  Text: false,
  TextDecoder: false,
  TextEncoder: false,
  TextEvent: false,
  TextMetrics: false,
  TextTrack: false,
  TextTrackCue: false,
  TextTrackCueList: false,
  TextTrackList: false,
  TimeRanges: false,
  toolbar: false,
  top: false,
  Touch: false,
  TouchEvent: false,
  TouchList: false,
  TrackEvent: false,
  TransitionEvent: false,
  TreeWalker: false,
  UIEvent: false,
  URL: false,
  URLSearchParams: false,
  ValidityState: false,
  visualViewport: false,
  VisualViewport: false,
  VTTCue: false,
  WaveShaperNode: false,
  WebAssembly: false,
  WebGL2RenderingContext: false,
  WebGLActiveInfo: false,
  WebGLBuffer: false,
  WebGLContextEvent: false,
  WebGLFramebuffer: false,
  WebGLProgram: false,
  WebGLQuery: false,
  WebGLRenderbuffer: false,
  WebGLRenderingContext: false,
  WebGLSampler: false,
  WebGLShader: false,
  WebGLShaderPrecisionFormat: false,
  WebGLSync: false,
  WebGLTexture: false,
  WebGLTransformFeedback: false,
  WebGLUniformLocation: false,
  WebGLVertexArrayObject: false,
  WebSocket: false,
  WheelEvent: false,
  window: false,
  Window: false,
  Worker: false,
  WritableStream: false,
  XMLDocument: false,
  XMLHttpRequest: false,
  XMLHttpRequestEventTarget: false,
  XMLHttpRequestUpload: false,
  XMLSerializer: false,
  XPathEvaluator: false,
  XPathExpression: false,
  XPathResult: false,
  XSLTProcessor: false
};
const worker = {
  addEventListener: false,
  applicationCache: false,
  atob: false,
  Blob: false,
  BroadcastChannel: false,
  btoa: false,
  Cache: false,
  caches: false,
  clearInterval: false,
  clearTimeout: false,
  close: true,
  console: false,
  fetch: false,
  FileReaderSync: false,
  FormData: false,
  Headers: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  ImageData: false,
  importScripts: true,
  indexedDB: false,
  location: false,
  MessageChannel: false,
  MessagePort: false,
  name: false,
  navigator: false,
  Notification: false,
  onclose: true,
  onconnect: true,
  onerror: true,
  onlanguagechange: true,
  onmessage: true,
  onoffline: true,
  ononline: true,
  onrejectionhandled: true,
  onunhandledrejection: true,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  postMessage: true,
  "Promise": false,
  queueMicrotask: false,
  removeEventListener: false,
  Request: false,
  Response: false,
  self: true,
  ServiceWorkerRegistration: false,
  setInterval: false,
  setTimeout: false,
  TextDecoder: false,
  TextEncoder: false,
  URL: false,
  URLSearchParams: false,
  WebSocket: false,
  Worker: false,
  WorkerGlobalScope: false,
  XMLHttpRequest: false
};
const node$1 = {
  __dirname: false,
  __filename: false,
  Buffer: false,
  clearImmediate: false,
  clearInterval: false,
  clearTimeout: false,
  console: false,
  exports: true,
  global: false,
  "Intl": false,
  module: false,
  process: false,
  queueMicrotask: false,
  require: false,
  setImmediate: false,
  setInterval: false,
  setTimeout: false,
  TextDecoder: false,
  TextEncoder: false,
  URL: false,
  URLSearchParams: false
};
const commonjs = {
  exports: true,
  global: false,
  module: false,
  require: false
};
const amd = {
  define: false,
  require: false
};
const mocha = {
  after: false,
  afterEach: false,
  before: false,
  beforeEach: false,
  context: false,
  describe: false,
  it: false,
  mocha: false,
  run: false,
  setup: false,
  specify: false,
  suite: false,
  suiteSetup: false,
  suiteTeardown: false,
  teardown: false,
  test: false,
  xcontext: false,
  xdescribe: false,
  xit: false,
  xspecify: false
};
const jasmine = {
  afterAll: false,
  afterEach: false,
  beforeAll: false,
  beforeEach: false,
  describe: false,
  expect: false,
  fail: false,
  fdescribe: false,
  fit: false,
  it: false,
  jasmine: false,
  pending: false,
  runs: false,
  spyOn: false,
  spyOnProperty: false,
  waits: false,
  waitsFor: false,
  xdescribe: false,
  xit: false
};
const jest = {
  afterAll: false,
  afterEach: false,
  beforeAll: false,
  beforeEach: false,
  describe: false,
  expect: false,
  fdescribe: false,
  fit: false,
  it: false,
  jest: false,
  pit: false,
  require: false,
  test: false,
  xdescribe: false,
  xit: false,
  xtest: false
};
const qunit = {
  asyncTest: false,
  deepEqual: false,
  equal: false,
  expect: false,
  module: false,
  notDeepEqual: false,
  notEqual: false,
  notOk: false,
  notPropEqual: false,
  notStrictEqual: false,
  ok: false,
  propEqual: false,
  QUnit: false,
  raises: false,
  start: false,
  stop: false,
  strictEqual: false,
  test: false,
  throws: false
};
const phantomjs = {
  console: true,
  exports: true,
  phantom: true,
  require: true,
  WebPage: true
};
const couch = {
  emit: false,
  exports: false,
  getRow: false,
  log: false,
  module: false,
  provides: false,
  require: false,
  respond: false,
  send: false,
  start: false,
  sum: false
};
const rhino = {
  defineClass: false,
  deserialize: false,
  gc: false,
  help: false,
  importClass: false,
  importPackage: false,
  java: false,
  load: false,
  loadClass: false,
  Packages: false,
  print: false,
  quit: false,
  readFile: false,
  readUrl: false,
  runCommand: false,
  seal: false,
  serialize: false,
  spawn: false,
  sync: false,
  toint32: false,
  version: false
};
const nashorn = {
  __DIR__: false,
  __FILE__: false,
  __LINE__: false,
  com: false,
  edu: false,
  exit: false,
  java: false,
  Java: false,
  javafx: false,
  JavaImporter: false,
  javax: false,
  JSAdapter: false,
  load: false,
  loadWithNewGlobal: false,
  org: false,
  Packages: false,
  print: false,
  quit: false
};
const wsh = {
  ActiveXObject: true,
  Enumerator: true,
  GetObject: true,
  ScriptEngine: true,
  ScriptEngineBuildVersion: true,
  ScriptEngineMajorVersion: true,
  ScriptEngineMinorVersion: true,
  VBArray: true,
  WScript: true,
  WSH: true,
  XDomainRequest: true
};
const jquery = {
  $: false,
  jQuery: false
};
const yui = {
  YAHOO: false,
  YAHOO_config: false,
  YUI: false,
  YUI_config: false
};
const shelljs = {
  cat: false,
  cd: false,
  chmod: false,
  config: false,
  cp: false,
  dirs: false,
  echo: false,
  env: false,
  error: false,
  exec: false,
  exit: false,
  find: false,
  grep: false,
  ln: false,
  ls: false,
  mkdir: false,
  mv: false,
  popd: false,
  pushd: false,
  pwd: false,
  rm: false,
  sed: false,
  set: false,
  target: false,
  tempdir: false,
  test: false,
  touch: false,
  which: false
};
const prototypejs = {
  $: false,
  $$: false,
  $A: false,
  $break: false,
  $continue: false,
  $F: false,
  $H: false,
  $R: false,
  $w: false,
  Abstract: false,
  Ajax: false,
  Autocompleter: false,
  Builder: false,
  Class: false,
  Control: false,
  Draggable: false,
  Draggables: false,
  Droppables: false,
  Effect: false,
  Element: false,
  Enumerable: false,
  Event: false,
  Field: false,
  Form: false,
  Hash: false,
  Insertion: false,
  ObjectRange: false,
  PeriodicalExecuter: false,
  Position: false,
  Prototype: false,
  Scriptaculous: false,
  Selector: false,
  Sortable: false,
  SortableObserver: false,
  Sound: false,
  Template: false,
  Toggle: false,
  Try: false
};
const meteor = {
  _: false,
  $: false,
  Accounts: false,
  AccountsClient: false,
  AccountsCommon: false,
  AccountsServer: false,
  App: false,
  Assets: false,
  Blaze: false,
  check: false,
  Cordova: false,
  DDP: false,
  DDPRateLimiter: false,
  DDPServer: false,
  Deps: false,
  EJSON: false,
  Email: false,
  HTTP: false,
  Log: false,
  Match: false,
  Meteor: false,
  Mongo: false,
  MongoInternals: false,
  Npm: false,
  Package: false,
  Plugin: false,
  process: false,
  Random: false,
  ReactiveDict: false,
  ReactiveVar: false,
  Router: false,
  ServiceConfiguration: false,
  Session: false,
  share: false,
  Spacebars: false,
  Template: false,
  Tinytest: false,
  Tracker: false,
  UI: false,
  Utils: false,
  WebApp: false,
  WebAppInternals: false
};
const mongo = {
  _isWindows: false,
  _rand: false,
  BulkWriteResult: false,
  cat: false,
  cd: false,
  connect: false,
  db: false,
  getHostName: false,
  getMemInfo: false,
  hostname: false,
  ISODate: false,
  listFiles: false,
  load: false,
  ls: false,
  md5sumFile: false,
  mkdir: false,
  Mongo: false,
  NumberInt: false,
  NumberLong: false,
  ObjectId: false,
  PlanCache: false,
  print: false,
  printjson: false,
  pwd: false,
  quit: false,
  removeFile: false,
  rs: false,
  sh: false,
  UUID: false,
  version: false,
  WriteResult: false
};
const applescript = {
  $: false,
  Application: false,
  Automation: false,
  console: false,
  delay: false,
  Library: false,
  ObjC: false,
  ObjectSpecifier: false,
  Path: false,
  Progress: false,
  Ref: false
};
const serviceworker = {
  addEventListener: false,
  applicationCache: false,
  atob: false,
  Blob: false,
  BroadcastChannel: false,
  btoa: false,
  Cache: false,
  caches: false,
  CacheStorage: false,
  clearInterval: false,
  clearTimeout: false,
  Client: false,
  clients: false,
  Clients: false,
  close: true,
  console: false,
  ExtendableEvent: false,
  ExtendableMessageEvent: false,
  fetch: false,
  FetchEvent: false,
  FileReaderSync: false,
  FormData: false,
  Headers: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  ImageData: false,
  importScripts: false,
  indexedDB: false,
  location: false,
  MessageChannel: false,
  MessagePort: false,
  name: false,
  navigator: false,
  Notification: false,
  onclose: true,
  onconnect: true,
  onerror: true,
  onfetch: true,
  oninstall: true,
  onlanguagechange: true,
  onmessage: true,
  onmessageerror: true,
  onnotificationclick: true,
  onnotificationclose: true,
  onoffline: true,
  ononline: true,
  onpush: true,
  onpushsubscriptionchange: true,
  onrejectionhandled: true,
  onsync: true,
  onunhandledrejection: true,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  postMessage: true,
  "Promise": false,
  queueMicrotask: false,
  registration: false,
  removeEventListener: false,
  Request: false,
  Response: false,
  self: false,
  ServiceWorker: false,
  ServiceWorkerContainer: false,
  ServiceWorkerGlobalScope: false,
  ServiceWorkerMessageEvent: false,
  ServiceWorkerRegistration: false,
  setInterval: false,
  setTimeout: false,
  skipWaiting: false,
  TextDecoder: false,
  TextEncoder: false,
  URL: false,
  URLSearchParams: false,
  WebSocket: false,
  WindowClient: false,
  Worker: false,
  WorkerGlobalScope: false,
  XMLHttpRequest: false
};
const atomtest = {
  advanceClock: false,
  fakeClearInterval: false,
  fakeClearTimeout: false,
  fakeSetInterval: false,
  fakeSetTimeout: false,
  resetTimeouts: false,
  waitsForPromise: false
};
const embertest = {
  andThen: false,
  click: false,
  currentPath: false,
  currentRouteName: false,
  currentURL: false,
  fillIn: false,
  find: false,
  findAll: false,
  findWithAssert: false,
  keyEvent: false,
  pauseTest: false,
  resumeTest: false,
  triggerEvent: false,
  visit: false,
  wait: false
};
const protractor = {
  $: false,
  $$: false,
  browser: false,
  by: false,
  By: false,
  DartObject: false,
  element: false,
  protractor: false
};
const webextensions = {
  browser: false,
  chrome: false,
  opr: false
};
const greasemonkey = {
  cloneInto: false,
  createObjectIn: false,
  exportFunction: false,
  GM: false,
  GM_addStyle: false,
  GM_deleteValue: false,
  GM_getResourceText: false,
  GM_getResourceURL: false,
  GM_getValue: false,
  GM_info: false,
  GM_listValues: false,
  GM_log: false,
  GM_openInTab: false,
  GM_registerMenuCommand: false,
  GM_setClipboard: false,
  GM_setValue: false,
  GM_xmlhttpRequest: false,
  unsafeWindow: false
};
const devtools = {
  $: false,
  $_: false,
  $$: false,
  $0: false,
  $1: false,
  $2: false,
  $3: false,
  $4: false,
  $x: false,
  chrome: false,
  clear: false,
  copy: false,
  debug: false,
  dir: false,
  dirxml: false,
  getEventListeners: false,
  inspect: false,
  keys: false,
  monitor: false,
  monitorEvents: false,
  profile: false,
  profileEnd: false,
  queryObjects: false,
  table: false,
  undebug: false,
  unmonitor: false,
  unmonitorEvents: false,
  values: false
};
const require$$0$6 = {
  builtin,
  es5,
  es2015,
  es2017,
  browser: browser$2,
  worker,
  node: node$1,
  commonjs,
  amd,
  mocha,
  jasmine,
  jest,
  qunit,
  phantomjs,
  couch,
  rhino,
  nashorn,
  wsh,
  jquery,
  yui,
  shelljs,
  prototypejs,
  meteor,
  mongo,
  applescript,
  serviceworker,
  atomtest,
  embertest,
  protractor,
  "shared-node-browser": {
    clearInterval: false,
    clearTimeout: false,
    console: false,
    setInterval: false,
    setTimeout: false,
    URL: false,
    URLSearchParams: false
  },
  webextensions,
  greasemonkey,
  devtools
};
var globals;
var hasRequiredGlobals;
function requireGlobals() {
  if (hasRequiredGlobals) return globals;
  hasRequiredGlobals = 1;
  globals = require$$0$6;
  return globals;
}
var hasRequiredScope;
function requireScope() {
  if (hasRequiredScope) return scope;
  hasRequiredScope = 1;
  Object.defineProperty(scope, "__esModule", {
    value: true
  });
  scope.default = void 0;
  var _renamer = requireRenamer();
  var _index = requireLib$E();
  var _binding = requireBinding();
  var _globals = requireGlobals();
  var _t = requireLib$O();
  var t = _t;
  var _cache = requireCache();
  var _visitors = requireVisitors();
  const {
    NOT_LOCAL_BINDING,
    callExpression,
    cloneNode: cloneNode2,
    getBindingIdentifiers: getBindingIdentifiers2,
    identifier: identifier2,
    isArrayExpression,
    isBinary,
    isCallExpression,
    isClass,
    isClassBody,
    isClassDeclaration,
    isExportAllDeclaration,
    isExportDefaultDeclaration,
    isExportNamedDeclaration,
    isFunctionDeclaration,
    isIdentifier,
    isImportDeclaration,
    isLiteral,
    isMemberExpression,
    isMethod,
    isModuleSpecifier,
    isNullLiteral,
    isObjectExpression,
    isProperty,
    isPureish,
    isRegExpLiteral,
    isSuper,
    isTaggedTemplateExpression,
    isTemplateLiteral,
    isThisExpression,
    isUnaryExpression,
    isVariableDeclaration,
    matchesPattern: matchesPattern2,
    memberExpression,
    numericLiteral,
    toIdentifier: toIdentifier2,
    variableDeclaration,
    variableDeclarator,
    isRecordExpression,
    isTupleExpression,
    isObjectProperty,
    isTopicReference,
    isMetaProperty,
    isPrivateName,
    isExportDeclaration,
    buildUndefinedNode
  } = _t;
  function gatherNodeParts(node2, parts) {
    switch (node2 == null ? void 0 : node2.type) {
      default:
        if (isImportDeclaration(node2) || isExportDeclaration(node2)) {
          var _node$specifiers;
          if ((isExportAllDeclaration(node2) || isExportNamedDeclaration(node2) || isImportDeclaration(node2)) && node2.source) {
            gatherNodeParts(node2.source, parts);
          } else if ((isExportNamedDeclaration(node2) || isImportDeclaration(node2)) && (_node$specifiers = node2.specifiers) != null && _node$specifiers.length) {
            for (const e of node2.specifiers) gatherNodeParts(e, parts);
          } else if ((isExportDefaultDeclaration(node2) || isExportNamedDeclaration(node2)) && node2.declaration) {
            gatherNodeParts(node2.declaration, parts);
          }
        } else if (isModuleSpecifier(node2)) {
          gatherNodeParts(node2.local, parts);
        } else if (isLiteral(node2) && !isNullLiteral(node2) && !isRegExpLiteral(node2) && !isTemplateLiteral(node2)) {
          parts.push(node2.value);
        }
        break;
      case "MemberExpression":
      case "OptionalMemberExpression":
      case "JSXMemberExpression":
        gatherNodeParts(node2.object, parts);
        gatherNodeParts(node2.property, parts);
        break;
      case "Identifier":
      case "JSXIdentifier":
        parts.push(node2.name);
        break;
      case "CallExpression":
      case "OptionalCallExpression":
      case "NewExpression":
        gatherNodeParts(node2.callee, parts);
        break;
      case "ObjectExpression":
      case "ObjectPattern":
        for (const e of node2.properties) {
          gatherNodeParts(e, parts);
        }
        break;
      case "SpreadElement":
      case "RestElement":
        gatherNodeParts(node2.argument, parts);
        break;
      case "ObjectProperty":
      case "ObjectMethod":
      case "ClassProperty":
      case "ClassMethod":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
        gatherNodeParts(node2.key, parts);
        break;
      case "ThisExpression":
        parts.push("this");
        break;
      case "Super":
        parts.push("super");
        break;
      case "Import":
        parts.push("import");
        break;
      case "DoExpression":
        parts.push("do");
        break;
      case "YieldExpression":
        parts.push("yield");
        gatherNodeParts(node2.argument, parts);
        break;
      case "AwaitExpression":
        parts.push("await");
        gatherNodeParts(node2.argument, parts);
        break;
      case "AssignmentExpression":
        gatherNodeParts(node2.left, parts);
        break;
      case "VariableDeclarator":
        gatherNodeParts(node2.id, parts);
        break;
      case "FunctionExpression":
      case "FunctionDeclaration":
      case "ClassExpression":
      case "ClassDeclaration":
        gatherNodeParts(node2.id, parts);
        break;
      case "PrivateName":
        gatherNodeParts(node2.id, parts);
        break;
      case "ParenthesizedExpression":
        gatherNodeParts(node2.expression, parts);
        break;
      case "UnaryExpression":
      case "UpdateExpression":
        gatherNodeParts(node2.argument, parts);
        break;
      case "MetaProperty":
        gatherNodeParts(node2.meta, parts);
        gatherNodeParts(node2.property, parts);
        break;
      case "JSXElement":
        gatherNodeParts(node2.openingElement, parts);
        break;
      case "JSXOpeningElement":
        gatherNodeParts(node2.name, parts);
        break;
      case "JSXFragment":
        gatherNodeParts(node2.openingFragment, parts);
        break;
      case "JSXOpeningFragment":
        parts.push("Fragment");
        break;
      case "JSXNamespacedName":
        gatherNodeParts(node2.namespace, parts);
        gatherNodeParts(node2.name, parts);
        break;
    }
  }
  const collectorVisitor = {
    ForStatement(path2) {
      const declar = path2.get("init");
      if (declar.isVar()) {
        const {
          scope: scope2
        } = path2;
        const parentScope = scope2.getFunctionParent() || scope2.getProgramParent();
        parentScope.registerBinding("var", declar);
      }
    },
    Declaration(path2) {
      if (path2.isBlockScoped()) return;
      if (path2.isImportDeclaration()) return;
      if (path2.isExportDeclaration()) return;
      const parent = path2.scope.getFunctionParent() || path2.scope.getProgramParent();
      parent.registerDeclaration(path2);
    },
    ImportDeclaration(path2) {
      const parent = path2.scope.getBlockParent();
      parent.registerDeclaration(path2);
    },
    ReferencedIdentifier(path2, state2) {
      state2.references.push(path2);
    },
    ForXStatement(path2, state2) {
      const left = path2.get("left");
      if (left.isPattern() || left.isIdentifier()) {
        state2.constantViolations.push(path2);
      } else if (left.isVar()) {
        const {
          scope: scope2
        } = path2;
        const parentScope = scope2.getFunctionParent() || scope2.getProgramParent();
        parentScope.registerBinding("var", left);
      }
    },
    ExportDeclaration: {
      exit(path2) {
        const {
          node: node2,
          scope: scope2
        } = path2;
        if (isExportAllDeclaration(node2)) return;
        const declar = node2.declaration;
        if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
          const id = declar.id;
          if (!id) return;
          const binding2 = scope2.getBinding(id.name);
          binding2 == null || binding2.reference(path2);
        } else if (isVariableDeclaration(declar)) {
          for (const decl of declar.declarations) {
            for (const name of Object.keys(getBindingIdentifiers2(decl))) {
              const binding2 = scope2.getBinding(name);
              binding2 == null || binding2.reference(path2);
            }
          }
        }
      }
    },
    LabeledStatement(path2) {
      path2.scope.getBlockParent().registerDeclaration(path2);
    },
    AssignmentExpression(path2, state2) {
      state2.assignments.push(path2);
    },
    UpdateExpression(path2, state2) {
      state2.constantViolations.push(path2);
    },
    UnaryExpression(path2, state2) {
      if (path2.node.operator === "delete") {
        state2.constantViolations.push(path2);
      }
    },
    BlockScoped(path2) {
      let scope2 = path2.scope;
      if (scope2.path === path2) scope2 = scope2.parent;
      const parent = scope2.getBlockParent();
      parent.registerDeclaration(path2);
      if (path2.isClassDeclaration() && path2.node.id) {
        const id = path2.node.id;
        const name = id.name;
        path2.scope.bindings[name] = path2.scope.parent.getBinding(name);
      }
    },
    CatchClause(path2) {
      path2.scope.registerBinding("let", path2);
    },
    Function(path2) {
      const params = path2.get("params");
      for (const param of params) {
        path2.scope.registerBinding("param", param);
      }
      if (path2.isFunctionExpression() && path2.has("id") && !path2.get("id").node[NOT_LOCAL_BINDING]) {
        path2.scope.registerBinding("local", path2.get("id"), path2);
      }
    },
    ClassExpression(path2) {
      if (path2.has("id") && !path2.get("id").node[NOT_LOCAL_BINDING]) {
        path2.scope.registerBinding("local", path2);
      }
    }
  };
  let uid = 0;
  class Scope {
    constructor(path2) {
      this.uid = void 0;
      this.path = void 0;
      this.block = void 0;
      this.labels = void 0;
      this.inited = void 0;
      this.bindings = void 0;
      this.references = void 0;
      this.globals = void 0;
      this.uids = void 0;
      this.data = void 0;
      this.crawling = void 0;
      const {
        node: node2
      } = path2;
      const cached = _cache.scope.get(node2);
      if ((cached == null ? void 0 : cached.path) === path2) {
        return cached;
      }
      _cache.scope.set(node2, this);
      this.uid = uid++;
      this.block = node2;
      this.path = path2;
      this.labels = /* @__PURE__ */ new Map();
      this.inited = false;
    }
    get parent() {
      var _parent;
      let parent, path2 = this.path;
      do {
        const shouldSkip = path2.key === "key" || path2.listKey === "decorators";
        path2 = path2.parentPath;
        if (shouldSkip && path2.isMethod()) path2 = path2.parentPath;
        if (path2 && path2.isScope()) parent = path2;
      } while (path2 && !parent);
      return (_parent = parent) == null ? void 0 : _parent.scope;
    }
    get parentBlock() {
      return this.path.parent;
    }
    get hub() {
      return this.path.hub;
    }
    traverse(node2, opts, state2) {
      (0, _index.default)(node2, opts, this, state2, this.path);
    }
    generateDeclaredUidIdentifier(name) {
      const id = this.generateUidIdentifier(name);
      this.push({
        id
      });
      return cloneNode2(id);
    }
    generateUidIdentifier(name) {
      return identifier2(this.generateUid(name));
    }
    generateUid(name = "temp") {
      name = toIdentifier2(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
      let uid2;
      let i = 1;
      do {
        uid2 = this._generateUid(name, i);
        i++;
      } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
      const program = this.getProgramParent();
      program.references[uid2] = true;
      program.uids[uid2] = true;
      return uid2;
    }
    _generateUid(name, i) {
      let id = name;
      if (i > 1) id += i;
      return `_${id}`;
    }
    generateUidBasedOnNode(node2, defaultName) {
      const parts = [];
      gatherNodeParts(node2, parts);
      let id = parts.join("$");
      id = id.replace(/^_/, "") || defaultName || "ref";
      return this.generateUid(id.slice(0, 20));
    }
    generateUidIdentifierBasedOnNode(node2, defaultName) {
      return identifier2(this.generateUidBasedOnNode(node2, defaultName));
    }
    isStatic(node2) {
      if (isThisExpression(node2) || isSuper(node2) || isTopicReference(node2)) {
        return true;
      }
      if (isIdentifier(node2)) {
        const binding2 = this.getBinding(node2.name);
        if (binding2) {
          return binding2.constant;
        } else {
          return this.hasBinding(node2.name);
        }
      }
      return false;
    }
    maybeGenerateMemoised(node2, dontPush) {
      if (this.isStatic(node2)) {
        return null;
      } else {
        const id = this.generateUidIdentifierBasedOnNode(node2);
        if (!dontPush) {
          this.push({
            id
          });
          return cloneNode2(id);
        }
        return id;
      }
    }
    checkBlockScopedCollisions(local, kind, name, id) {
      if (kind === "param") return;
      if (local.kind === "local") return;
      const duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && kind === "const";
      if (duplicate) {
        throw this.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
      }
    }
    rename(oldName, newName) {
      const binding2 = this.getBinding(oldName);
      if (binding2) {
        newName || (newName = this.generateUidIdentifier(oldName).name);
        const renamer2 = new _renamer.default(binding2, oldName, newName);
        {
          renamer2.rename(arguments[2]);
        }
      }
    }
    _renameFromMap(map, oldName, newName, value2) {
      if (map[oldName]) {
        map[newName] = value2;
        map[oldName] = null;
      }
    }
    dump() {
      const sep = "-".repeat(60);
      console.log(sep);
      let scope2 = this;
      do {
        console.log("#", scope2.block.type);
        for (const name of Object.keys(scope2.bindings)) {
          const binding2 = scope2.bindings[name];
          console.log(" -", name, {
            constant: binding2.constant,
            references: binding2.references,
            violations: binding2.constantViolations.length,
            kind: binding2.kind
          });
        }
      } while (scope2 = scope2.parent);
      console.log(sep);
    }
    toArray(node2, i, arrayLikeIsIterable) {
      if (isIdentifier(node2)) {
        const binding2 = this.getBinding(node2.name);
        if (binding2 != null && binding2.constant && binding2.path.isGenericType("Array")) {
          return node2;
        }
      }
      if (isArrayExpression(node2)) {
        return node2;
      }
      if (isIdentifier(node2, {
        name: "arguments"
      })) {
        return callExpression(memberExpression(memberExpression(memberExpression(identifier2("Array"), identifier2("prototype")), identifier2("slice")), identifier2("call")), [node2]);
      }
      let helperName;
      const args = [node2];
      if (i === true) {
        helperName = "toConsumableArray";
      } else if (typeof i === "number") {
        args.push(numericLiteral(i));
        helperName = "slicedToArray";
      } else {
        helperName = "toArray";
      }
      if (arrayLikeIsIterable) {
        args.unshift(this.hub.addHelper(helperName));
        helperName = "maybeArrayLike";
      }
      return callExpression(this.hub.addHelper(helperName), args);
    }
    hasLabel(name) {
      return !!this.getLabel(name);
    }
    getLabel(name) {
      return this.labels.get(name);
    }
    registerLabel(path2) {
      this.labels.set(path2.node.label.name, path2);
    }
    registerDeclaration(path2) {
      if (path2.isLabeledStatement()) {
        this.registerLabel(path2);
      } else if (path2.isFunctionDeclaration()) {
        this.registerBinding("hoisted", path2.get("id"), path2);
      } else if (path2.isVariableDeclaration()) {
        const declarations = path2.get("declarations");
        const {
          kind
        } = path2.node;
        for (const declar of declarations) {
          this.registerBinding(kind === "using" || kind === "await using" ? "const" : kind, declar);
        }
      } else if (path2.isClassDeclaration()) {
        if (path2.node.declare) return;
        this.registerBinding("let", path2);
      } else if (path2.isImportDeclaration()) {
        const isTypeDeclaration = path2.node.importKind === "type" || path2.node.importKind === "typeof";
        const specifiers = path2.get("specifiers");
        for (const specifier of specifiers) {
          const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && (specifier.node.importKind === "type" || specifier.node.importKind === "typeof");
          this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
        }
      } else if (path2.isExportDeclaration()) {
        const declar = path2.get("declaration");
        if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
          this.registerDeclaration(declar);
        }
      } else {
        this.registerBinding("unknown", path2);
      }
    }
    buildUndefinedNode() {
      return buildUndefinedNode();
    }
    registerConstantViolation(path2) {
      const ids = path2.getBindingIdentifiers();
      for (const name of Object.keys(ids)) {
        var _this$getBinding;
        (_this$getBinding = this.getBinding(name)) == null || _this$getBinding.reassign(path2);
      }
    }
    registerBinding(kind, path2, bindingPath = path2) {
      if (!kind) throw new ReferenceError("no `kind`");
      if (path2.isVariableDeclaration()) {
        const declarators = path2.get("declarations");
        for (const declar of declarators) {
          this.registerBinding(kind, declar);
        }
        return;
      }
      const parent = this.getProgramParent();
      const ids = path2.getOuterBindingIdentifiers(true);
      for (const name of Object.keys(ids)) {
        parent.references[name] = true;
        for (const id of ids[name]) {
          const local = this.getOwnBinding(name);
          if (local) {
            if (local.identifier === id) continue;
            this.checkBlockScopedCollisions(local, kind, name, id);
          }
          if (local) {
            this.registerConstantViolation(bindingPath);
          } else {
            this.bindings[name] = new _binding.default({
              identifier: id,
              scope: this,
              path: bindingPath,
              kind
            });
          }
        }
      }
    }
    addGlobal(node2) {
      this.globals[node2.name] = node2;
    }
    hasUid(name) {
      let scope2 = this;
      do {
        if (scope2.uids[name]) return true;
      } while (scope2 = scope2.parent);
      return false;
    }
    hasGlobal(name) {
      let scope2 = this;
      do {
        if (scope2.globals[name]) return true;
      } while (scope2 = scope2.parent);
      return false;
    }
    hasReference(name) {
      return !!this.getProgramParent().references[name];
    }
    isPure(node2, constantsOnly) {
      if (isIdentifier(node2)) {
        const binding2 = this.getBinding(node2.name);
        if (!binding2) return false;
        if (constantsOnly) return binding2.constant;
        return true;
      } else if (isThisExpression(node2) || isMetaProperty(node2) || isTopicReference(node2) || isPrivateName(node2)) {
        return true;
      } else if (isClass(node2)) {
        var _node$decorators;
        if (node2.superClass && !this.isPure(node2.superClass, constantsOnly)) {
          return false;
        }
        if (((_node$decorators = node2.decorators) == null ? void 0 : _node$decorators.length) > 0) {
          return false;
        }
        return this.isPure(node2.body, constantsOnly);
      } else if (isClassBody(node2)) {
        for (const method of node2.body) {
          if (!this.isPure(method, constantsOnly)) return false;
        }
        return true;
      } else if (isBinary(node2)) {
        return this.isPure(node2.left, constantsOnly) && this.isPure(node2.right, constantsOnly);
      } else if (isArrayExpression(node2) || isTupleExpression(node2)) {
        for (const elem of node2.elements) {
          if (elem !== null && !this.isPure(elem, constantsOnly)) return false;
        }
        return true;
      } else if (isObjectExpression(node2) || isRecordExpression(node2)) {
        for (const prop of node2.properties) {
          if (!this.isPure(prop, constantsOnly)) return false;
        }
        return true;
      } else if (isMethod(node2)) {
        var _node$decorators2;
        if (node2.computed && !this.isPure(node2.key, constantsOnly)) return false;
        if (((_node$decorators2 = node2.decorators) == null ? void 0 : _node$decorators2.length) > 0) {
          return false;
        }
        return true;
      } else if (isProperty(node2)) {
        var _node$decorators3;
        if (node2.computed && !this.isPure(node2.key, constantsOnly)) return false;
        if (((_node$decorators3 = node2.decorators) == null ? void 0 : _node$decorators3.length) > 0) {
          return false;
        }
        if (isObjectProperty(node2) || node2.static) {
          if (node2.value !== null && !this.isPure(node2.value, constantsOnly)) {
            return false;
          }
        }
        return true;
      } else if (isUnaryExpression(node2)) {
        return this.isPure(node2.argument, constantsOnly);
      } else if (isTemplateLiteral(node2)) {
        for (const expression of node2.expressions) {
          if (!this.isPure(expression, constantsOnly)) return false;
        }
        return true;
      } else if (isTaggedTemplateExpression(node2)) {
        return matchesPattern2(node2.tag, "String.raw") && !this.hasBinding("String", {
          noGlobals: true
        }) && this.isPure(node2.quasi, constantsOnly);
      } else if (isMemberExpression(node2)) {
        return !node2.computed && isIdentifier(node2.object) && node2.object.name === "Symbol" && isIdentifier(node2.property) && node2.property.name !== "for" && !this.hasBinding("Symbol", {
          noGlobals: true
        });
      } else if (isCallExpression(node2)) {
        return matchesPattern2(node2.callee, "Symbol.for") && !this.hasBinding("Symbol", {
          noGlobals: true
        }) && node2.arguments.length === 1 && t.isStringLiteral(node2.arguments[0]);
      } else {
        return isPureish(node2);
      }
    }
    setData(key2, val) {
      return this.data[key2] = val;
    }
    getData(key2) {
      let scope2 = this;
      do {
        const data = scope2.data[key2];
        if (data != null) return data;
      } while (scope2 = scope2.parent);
    }
    removeData(key2) {
      let scope2 = this;
      do {
        const data = scope2.data[key2];
        if (data != null) scope2.data[key2] = null;
      } while (scope2 = scope2.parent);
    }
    init() {
      if (!this.inited) {
        this.inited = true;
        this.crawl();
      }
    }
    crawl() {
      const path2 = this.path;
      this.references = /* @__PURE__ */ Object.create(null);
      this.bindings = /* @__PURE__ */ Object.create(null);
      this.globals = /* @__PURE__ */ Object.create(null);
      this.uids = /* @__PURE__ */ Object.create(null);
      this.data = /* @__PURE__ */ Object.create(null);
      const programParent = this.getProgramParent();
      if (programParent.crawling) return;
      const state2 = {
        references: [],
        constantViolations: [],
        assignments: []
      };
      this.crawling = true;
      if (path2.type !== "Program" && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {
        for (const visit of collectorVisitor.enter) {
          visit.call(state2, path2, state2);
        }
        const typeVisitors = collectorVisitor[path2.type];
        if (typeVisitors) {
          for (const visit of typeVisitors.enter) {
            visit.call(state2, path2, state2);
          }
        }
      }
      path2.traverse(collectorVisitor, state2);
      this.crawling = false;
      for (const path3 of state2.assignments) {
        const ids = path3.getBindingIdentifiers();
        for (const name of Object.keys(ids)) {
          if (path3.scope.getBinding(name)) continue;
          programParent.addGlobal(ids[name]);
        }
        path3.scope.registerConstantViolation(path3);
      }
      for (const ref of state2.references) {
        const binding2 = ref.scope.getBinding(ref.node.name);
        if (binding2) {
          binding2.reference(ref);
        } else {
          programParent.addGlobal(ref.node);
        }
      }
      for (const path3 of state2.constantViolations) {
        path3.scope.registerConstantViolation(path3);
      }
    }
    push(opts) {
      let path2 = this.path;
      if (path2.isPattern()) {
        path2 = this.getPatternParent().path;
      } else if (!path2.isBlockStatement() && !path2.isProgram()) {
        path2 = this.getBlockParent().path;
      }
      if (path2.isSwitchStatement()) {
        path2 = (this.getFunctionParent() || this.getProgramParent()).path;
      }
      const {
        init,
        unique,
        kind = "var",
        id
      } = opts;
      if (!init && !unique && (kind === "var" || kind === "let") && path2.isFunction() && !path2.node.name && isCallExpression(path2.parent, {
        callee: path2.node
      }) && path2.parent.arguments.length <= path2.node.params.length && isIdentifier(id)) {
        path2.pushContainer("params", id);
        path2.scope.registerBinding("param", path2.get("params")[path2.node.params.length - 1]);
        return;
      }
      if (path2.isLoop() || path2.isCatchClause() || path2.isFunction()) {
        path2.ensureBlock();
        path2 = path2.get("body");
      }
      const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
      const dataKey = `declaration:${kind}:${blockHoist}`;
      let declarPath = !unique && path2.getData(dataKey);
      if (!declarPath) {
        const declar = variableDeclaration(kind, []);
        declar._blockHoist = blockHoist;
        [declarPath] = path2.unshiftContainer("body", [declar]);
        if (!unique) path2.setData(dataKey, declarPath);
      }
      const declarator = variableDeclarator(id, init);
      const len = declarPath.node.declarations.push(declarator);
      path2.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
    }
    getProgramParent() {
      let scope2 = this;
      do {
        if (scope2.path.isProgram()) {
          return scope2;
        }
      } while (scope2 = scope2.parent);
      throw new Error("Couldn't find a Program");
    }
    getFunctionParent() {
      let scope2 = this;
      do {
        if (scope2.path.isFunctionParent()) {
          return scope2;
        }
      } while (scope2 = scope2.parent);
      return null;
    }
    getBlockParent() {
      let scope2 = this;
      do {
        if (scope2.path.isBlockParent()) {
          return scope2;
        }
      } while (scope2 = scope2.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getPatternParent() {
      let scope2 = this;
      do {
        if (!scope2.path.isPattern()) {
          return scope2.getBlockParent();
        }
      } while (scope2 = scope2.parent.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getAllBindings() {
      const ids = /* @__PURE__ */ Object.create(null);
      let scope2 = this;
      do {
        for (const key2 of Object.keys(scope2.bindings)) {
          if (key2 in ids === false) {
            ids[key2] = scope2.bindings[key2];
          }
        }
        scope2 = scope2.parent;
      } while (scope2);
      return ids;
    }
    getAllBindingsOfKind(...kinds) {
      const ids = /* @__PURE__ */ Object.create(null);
      for (const kind of kinds) {
        let scope2 = this;
        do {
          for (const name of Object.keys(scope2.bindings)) {
            const binding2 = scope2.bindings[name];
            if (binding2.kind === kind) ids[name] = binding2;
          }
          scope2 = scope2.parent;
        } while (scope2);
      }
      return ids;
    }
    bindingIdentifierEquals(name, node2) {
      return this.getBindingIdentifier(name) === node2;
    }
    getBinding(name) {
      let scope2 = this;
      let previousPath;
      do {
        const binding2 = scope2.getOwnBinding(name);
        if (binding2) {
          var _previousPath;
          if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding2.kind !== "param" && binding2.kind !== "local") ;
          else {
            return binding2;
          }
        } else if (!binding2 && name === "arguments" && scope2.path.isFunction() && !scope2.path.isArrowFunctionExpression()) {
          break;
        }
        previousPath = scope2.path;
      } while (scope2 = scope2.parent);
    }
    getOwnBinding(name) {
      return this.bindings[name];
    }
    getBindingIdentifier(name) {
      var _this$getBinding2;
      return (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.identifier;
    }
    getOwnBindingIdentifier(name) {
      const binding2 = this.bindings[name];
      return binding2 == null ? void 0 : binding2.identifier;
    }
    hasOwnBinding(name) {
      return !!this.getOwnBinding(name);
    }
    hasBinding(name, opts) {
      var _opts, _opts2, _opts3;
      if (!name) return false;
      if (this.hasOwnBinding(name)) return true;
      {
        if (typeof opts === "boolean") opts = {
          noGlobals: opts
        };
      }
      if (this.parentHasBinding(name, opts)) return true;
      if (!((_opts = opts) != null && _opts.noUids) && this.hasUid(name)) return true;
      if (!((_opts2 = opts) != null && _opts2.noGlobals) && Scope.globals.includes(name)) return true;
      if (!((_opts3 = opts) != null && _opts3.noGlobals) && Scope.contextVariables.includes(name)) return true;
      return false;
    }
    parentHasBinding(name, opts) {
      var _this$parent;
      return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, opts);
    }
    moveBindingTo(name, scope2) {
      const info = this.getBinding(name);
      if (info) {
        info.scope.removeOwnBinding(name);
        info.scope = scope2;
        scope2.bindings[name] = info;
      }
    }
    removeOwnBinding(name) {
      delete this.bindings[name];
    }
    removeBinding(name) {
      var _this$getBinding3;
      (_this$getBinding3 = this.getBinding(name)) == null || _this$getBinding3.scope.removeOwnBinding(name);
      let scope2 = this;
      do {
        if (scope2.uids[name]) {
          scope2.uids[name] = false;
        }
      } while (scope2 = scope2.parent);
    }
  }
  scope.default = Scope;
  Scope.globals = Object.keys(_globals.builtin);
  Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
  return scope;
}
var lib$I = {};
var sourceMap$1 = {};
var genMapping_umd = { exports: {} };
var setArray_umd = { exports: {} };
var hasRequiredSetArray_umd;
function requireSetArray_umd() {
  if (hasRequiredSetArray_umd) return setArray_umd.exports;
  hasRequiredSetArray_umd = 1;
  (function(module, exports) {
    (function(global, factory) {
      factory(exports);
    })(commonjsGlobal, function(exports2) {
      class SetArray {
        constructor() {
          this._indexes = { __proto__: null };
          this.array = [];
        }
      }
      function cast(set) {
        return set;
      }
      function get(setarr, key2) {
        return cast(setarr)._indexes[key2];
      }
      function put(setarr, key2) {
        const index2 = get(setarr, key2);
        if (index2 !== void 0)
          return index2;
        const { array: array2, _indexes: indexes } = cast(setarr);
        const length = array2.push(key2);
        return indexes[key2] = length - 1;
      }
      function pop2(setarr) {
        const { array: array2, _indexes: indexes } = cast(setarr);
        if (array2.length === 0)
          return;
        const last = array2.pop();
        indexes[last] = void 0;
      }
      function remove(setarr, key2) {
        const index2 = get(setarr, key2);
        if (index2 === void 0)
          return;
        const { array: array2, _indexes: indexes } = cast(setarr);
        for (let i = index2 + 1; i < array2.length; i++) {
          const k = array2[i];
          array2[i - 1] = k;
          indexes[k]--;
        }
        indexes[key2] = void 0;
        array2.pop();
      }
      exports2.SetArray = SetArray;
      exports2.get = get;
      exports2.pop = pop2;
      exports2.put = put;
      exports2.remove = remove;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  })(setArray_umd, setArray_umd.exports);
  return setArray_umd.exports;
}
var sourcemapCodec_umd = { exports: {} };
var hasRequiredSourcemapCodec_umd;
function requireSourcemapCodec_umd() {
  if (hasRequiredSourcemapCodec_umd) return sourcemapCodec_umd.exports;
  hasRequiredSourcemapCodec_umd = 1;
  (function(module, exports) {
    (function(global, factory) {
      factory(exports);
    })(commonjsGlobal, function(exports2) {
      const comma = ",".charCodeAt(0);
      const semicolon = ";".charCodeAt(0);
      const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      const intToChar = new Uint8Array(64);
      const charToInt = new Uint8Array(128);
      for (let i = 0; i < chars.length; i++) {
        const c2 = chars.charCodeAt(i);
        intToChar[i] = c2;
        charToInt[c2] = i;
      }
      const td = typeof TextDecoder !== "undefined" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer !== "undefined" ? {
        decode(buf) {
          const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
          return out.toString();
        }
      } : {
        decode(buf) {
          let out = "";
          for (let i = 0; i < buf.length; i++) {
            out += String.fromCharCode(buf[i]);
          }
          return out;
        }
      };
      function decode(mappings) {
        const state2 = new Int32Array(5);
        const decoded = [];
        let index2 = 0;
        do {
          const semi = indexOf(mappings, index2);
          const line2 = [];
          let sorted = true;
          let lastCol = 0;
          state2[0] = 0;
          for (let i = index2; i < semi; i++) {
            let seg;
            i = decodeInteger(mappings, i, state2, 0);
            const col = state2[0];
            if (col < lastCol)
              sorted = false;
            lastCol = col;
            if (hasMoreVlq(mappings, i, semi)) {
              i = decodeInteger(mappings, i, state2, 1);
              i = decodeInteger(mappings, i, state2, 2);
              i = decodeInteger(mappings, i, state2, 3);
              if (hasMoreVlq(mappings, i, semi)) {
                i = decodeInteger(mappings, i, state2, 4);
                seg = [col, state2[1], state2[2], state2[3], state2[4]];
              } else {
                seg = [col, state2[1], state2[2], state2[3]];
              }
            } else {
              seg = [col];
            }
            line2.push(seg);
          }
          if (!sorted)
            sort2(line2);
          decoded.push(line2);
          index2 = semi + 1;
        } while (index2 <= mappings.length);
        return decoded;
      }
      function indexOf(mappings, index2) {
        const idx = mappings.indexOf(";", index2);
        return idx === -1 ? mappings.length : idx;
      }
      function decodeInteger(mappings, pos2, state2, j) {
        let value2 = 0;
        let shift = 0;
        let integer = 0;
        do {
          const c2 = mappings.charCodeAt(pos2++);
          integer = charToInt[c2];
          value2 |= (integer & 31) << shift;
          shift += 5;
        } while (integer & 32);
        const shouldNegate = value2 & 1;
        value2 >>>= 1;
        if (shouldNegate) {
          value2 = -2147483648 | -value2;
        }
        state2[j] += value2;
        return pos2;
      }
      function hasMoreVlq(mappings, i, length) {
        if (i >= length)
          return false;
        return mappings.charCodeAt(i) !== comma;
      }
      function sort2(line2) {
        line2.sort(sortComparator);
      }
      function sortComparator(a, b) {
        return a[0] - b[0];
      }
      function encode(decoded) {
        const state2 = new Int32Array(5);
        const bufLength = 1024 * 16;
        const subLength = bufLength - 36;
        const buf = new Uint8Array(bufLength);
        const sub = buf.subarray(0, subLength);
        let pos2 = 0;
        let out = "";
        for (let i = 0; i < decoded.length; i++) {
          const line2 = decoded[i];
          if (i > 0) {
            if (pos2 === bufLength) {
              out += td.decode(buf);
              pos2 = 0;
            }
            buf[pos2++] = semicolon;
          }
          if (line2.length === 0)
            continue;
          state2[0] = 0;
          for (let j = 0; j < line2.length; j++) {
            const segment = line2[j];
            if (pos2 > subLength) {
              out += td.decode(sub);
              buf.copyWithin(0, subLength, pos2);
              pos2 -= subLength;
            }
            if (j > 0)
              buf[pos2++] = comma;
            pos2 = encodeInteger(buf, pos2, state2, segment, 0);
            if (segment.length === 1)
              continue;
            pos2 = encodeInteger(buf, pos2, state2, segment, 1);
            pos2 = encodeInteger(buf, pos2, state2, segment, 2);
            pos2 = encodeInteger(buf, pos2, state2, segment, 3);
            if (segment.length === 4)
              continue;
            pos2 = encodeInteger(buf, pos2, state2, segment, 4);
          }
        }
        return out + td.decode(buf.subarray(0, pos2));
      }
      function encodeInteger(buf, pos2, state2, segment, j) {
        const next = segment[j];
        let num = next - state2[j];
        state2[j] = next;
        num = num < 0 ? -num << 1 | 1 : num << 1;
        do {
          let clamped = num & 31;
          num >>>= 5;
          if (num > 0)
            clamped |= 32;
          buf[pos2++] = intToChar[clamped];
        } while (num > 0);
        return pos2;
      }
      exports2.decode = decode;
      exports2.encode = encode;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  })(sourcemapCodec_umd, sourcemapCodec_umd.exports);
  return sourcemapCodec_umd.exports;
}
var traceMapping_umd = { exports: {} };
var resolveUri_umd = { exports: {} };
var hasRequiredResolveUri_umd;
function requireResolveUri_umd() {
  if (hasRequiredResolveUri_umd) return resolveUri_umd.exports;
  hasRequiredResolveUri_umd = 1;
  (function(module, exports) {
    (function(global, factory) {
      module.exports = factory();
    })(commonjsGlobal, function() {
      const schemeRegex = /^[\w+.-]+:\/\//;
      const urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
      const fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
      var UrlType;
      (function(UrlType2) {
        UrlType2[UrlType2["Empty"] = 1] = "Empty";
        UrlType2[UrlType2["Hash"] = 2] = "Hash";
        UrlType2[UrlType2["Query"] = 3] = "Query";
        UrlType2[UrlType2["RelativePath"] = 4] = "RelativePath";
        UrlType2[UrlType2["AbsolutePath"] = 5] = "AbsolutePath";
        UrlType2[UrlType2["SchemeRelative"] = 6] = "SchemeRelative";
        UrlType2[UrlType2["Absolute"] = 7] = "Absolute";
      })(UrlType || (UrlType = {}));
      function isAbsoluteUrl(input2) {
        return schemeRegex.test(input2);
      }
      function isSchemeRelativeUrl(input2) {
        return input2.startsWith("//");
      }
      function isAbsolutePath(input2) {
        return input2.startsWith("/");
      }
      function isFileUrl(input2) {
        return input2.startsWith("file:");
      }
      function isRelative(input2) {
        return /^[.?#]/.test(input2);
      }
      function parseAbsoluteUrl(input2) {
        const match = urlRegex.exec(input2);
        return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
      }
      function parseFileUrl(input2) {
        const match = fileRegex.exec(input2);
        const path2 = match[2];
        return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path2) ? path2 : "/" + path2, match[3] || "", match[4] || "");
      }
      function makeUrl(scheme, user, host, port, path2, query, hash) {
        return {
          scheme,
          user,
          host,
          port,
          path: path2,
          query,
          hash,
          type: UrlType.Absolute
        };
      }
      function parseUrl(input2) {
        if (isSchemeRelativeUrl(input2)) {
          const url3 = parseAbsoluteUrl("http:" + input2);
          url3.scheme = "";
          url3.type = UrlType.SchemeRelative;
          return url3;
        }
        if (isAbsolutePath(input2)) {
          const url3 = parseAbsoluteUrl("http://foo.com" + input2);
          url3.scheme = "";
          url3.host = "";
          url3.type = UrlType.AbsolutePath;
          return url3;
        }
        if (isFileUrl(input2))
          return parseFileUrl(input2);
        if (isAbsoluteUrl(input2))
          return parseAbsoluteUrl(input2);
        const url2 = parseAbsoluteUrl("http://foo.com/" + input2);
        url2.scheme = "";
        url2.host = "";
        url2.type = input2 ? input2.startsWith("?") ? UrlType.Query : input2.startsWith("#") ? UrlType.Hash : UrlType.RelativePath : UrlType.Empty;
        return url2;
      }
      function stripPathFilename(path2) {
        if (path2.endsWith("/.."))
          return path2;
        const index2 = path2.lastIndexOf("/");
        return path2.slice(0, index2 + 1);
      }
      function mergePaths(url2, base2) {
        normalizePath(base2, base2.type);
        if (url2.path === "/") {
          url2.path = base2.path;
        } else {
          url2.path = stripPathFilename(base2.path) + url2.path;
        }
      }
      function normalizePath(url2, type) {
        const rel = type <= UrlType.RelativePath;
        const pieces = url2.path.split("/");
        let pointer = 1;
        let positive = 0;
        let addTrailingSlash = false;
        for (let i = 1; i < pieces.length; i++) {
          const piece = pieces[i];
          if (!piece) {
            addTrailingSlash = true;
            continue;
          }
          addTrailingSlash = false;
          if (piece === ".")
            continue;
          if (piece === "..") {
            if (positive) {
              addTrailingSlash = true;
              positive--;
              pointer--;
            } else if (rel) {
              pieces[pointer++] = piece;
            }
            continue;
          }
          pieces[pointer++] = piece;
          positive++;
        }
        let path2 = "";
        for (let i = 1; i < pointer; i++) {
          path2 += "/" + pieces[i];
        }
        if (!path2 || addTrailingSlash && !path2.endsWith("/..")) {
          path2 += "/";
        }
        url2.path = path2;
      }
      function resolve(input2, base2) {
        if (!input2 && !base2)
          return "";
        const url2 = parseUrl(input2);
        let inputType = url2.type;
        if (base2 && inputType !== UrlType.Absolute) {
          const baseUrl = parseUrl(base2);
          const baseType = baseUrl.type;
          switch (inputType) {
            case UrlType.Empty:
              url2.hash = baseUrl.hash;
            case UrlType.Hash:
              url2.query = baseUrl.query;
            case UrlType.Query:
            case UrlType.RelativePath:
              mergePaths(url2, baseUrl);
            case UrlType.AbsolutePath:
              url2.user = baseUrl.user;
              url2.host = baseUrl.host;
              url2.port = baseUrl.port;
            case UrlType.SchemeRelative:
              url2.scheme = baseUrl.scheme;
          }
          if (baseType > inputType)
            inputType = baseType;
        }
        normalizePath(url2, inputType);
        const queryHash = url2.query + url2.hash;
        switch (inputType) {
          case UrlType.Hash:
          case UrlType.Query:
            return queryHash;
          case UrlType.RelativePath: {
            const path2 = url2.path.slice(1);
            if (!path2)
              return queryHash || ".";
            if (isRelative(base2 || input2) && !isRelative(path2)) {
              return "./" + path2 + queryHash;
            }
            return path2 + queryHash;
          }
          case UrlType.AbsolutePath:
            return url2.path + queryHash;
          default:
            return url2.scheme + "//" + url2.user + url2.host + url2.port + url2.path + queryHash;
        }
      }
      return resolve;
    });
  })(resolveUri_umd);
  return resolveUri_umd.exports;
}
var hasRequiredTraceMapping_umd;
function requireTraceMapping_umd() {
  if (hasRequiredTraceMapping_umd) return traceMapping_umd.exports;
  hasRequiredTraceMapping_umd = 1;
  (function(module, exports) {
    (function(global, factory) {
      factory(exports, requireSourcemapCodec_umd(), requireResolveUri_umd());
    })(commonjsGlobal, function(exports2, sourcemapCodec, resolveUri) {
      function resolve(input2, base2) {
        if (base2 && !base2.endsWith("/"))
          base2 += "/";
        return resolveUri(input2, base2);
      }
      function stripFilename(path2) {
        if (!path2)
          return "";
        const index2 = path2.lastIndexOf("/");
        return path2.slice(0, index2 + 1);
      }
      const COLUMN = 0;
      const SOURCES_INDEX = 1;
      const SOURCE_LINE = 2;
      const SOURCE_COLUMN = 3;
      const NAMES_INDEX = 4;
      const REV_GENERATED_LINE = 1;
      const REV_GENERATED_COLUMN = 2;
      function maybeSort(mappings, owned) {
        const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
        if (unsortedIndex === mappings.length)
          return mappings;
        if (!owned)
          mappings = mappings.slice();
        for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {
          mappings[i] = sortSegments(mappings[i], owned);
        }
        return mappings;
      }
      function nextUnsortedSegmentLine(mappings, start) {
        for (let i = start; i < mappings.length; i++) {
          if (!isSorted(mappings[i]))
            return i;
        }
        return mappings.length;
      }
      function isSorted(line2) {
        for (let j = 1; j < line2.length; j++) {
          if (line2[j][COLUMN] < line2[j - 1][COLUMN]) {
            return false;
          }
        }
        return true;
      }
      function sortSegments(line2, owned) {
        if (!owned)
          line2 = line2.slice();
        return line2.sort(sortComparator);
      }
      function sortComparator(a, b) {
        return a[COLUMN] - b[COLUMN];
      }
      let found = false;
      function binarySearch2(haystack, needle, low, high) {
        while (low <= high) {
          const mid = low + (high - low >> 1);
          const cmp = haystack[mid][COLUMN] - needle;
          if (cmp === 0) {
            found = true;
            return mid;
          }
          if (cmp < 0) {
            low = mid + 1;
          } else {
            high = mid - 1;
          }
        }
        found = false;
        return low - 1;
      }
      function upperBound(haystack, needle, index2) {
        for (let i = index2 + 1; i < haystack.length; index2 = i++) {
          if (haystack[i][COLUMN] !== needle)
            break;
        }
        return index2;
      }
      function lowerBound(haystack, needle, index2) {
        for (let i = index2 - 1; i >= 0; index2 = i--) {
          if (haystack[i][COLUMN] !== needle)
            break;
        }
        return index2;
      }
      function memoizedState() {
        return {
          lastKey: -1,
          lastNeedle: -1,
          lastIndex: -1
        };
      }
      function memoizedBinarySearch(haystack, needle, state2, key2) {
        const { lastKey, lastNeedle, lastIndex } = state2;
        let low = 0;
        let high = haystack.length - 1;
        if (key2 === lastKey) {
          if (needle === lastNeedle) {
            found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;
            return lastIndex;
          }
          if (needle >= lastNeedle) {
            low = lastIndex === -1 ? 0 : lastIndex;
          } else {
            high = lastIndex;
          }
        }
        state2.lastKey = key2;
        state2.lastNeedle = needle;
        return state2.lastIndex = binarySearch2(haystack, needle, low, high);
      }
      function buildBySources(decoded, memos) {
        const sources = memos.map(buildNullArray);
        for (let i = 0; i < decoded.length; i++) {
          const line2 = decoded[i];
          for (let j = 0; j < line2.length; j++) {
            const seg = line2[j];
            if (seg.length === 1)
              continue;
            const sourceIndex2 = seg[SOURCES_INDEX];
            const sourceLine = seg[SOURCE_LINE];
            const sourceColumn = seg[SOURCE_COLUMN];
            const originalSource = sources[sourceIndex2];
            const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);
            const memo = memos[sourceIndex2];
            let index2 = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
            memo.lastIndex = ++index2;
            insert(originalLine, index2, [sourceColumn, i, seg[COLUMN]]);
          }
        }
        return sources;
      }
      function insert(array2, index2, value2) {
        for (let i = array2.length; i > index2; i--) {
          array2[i] = array2[i - 1];
        }
        array2[index2] = value2;
      }
      function buildNullArray() {
        return { __proto__: null };
      }
      const AnyMap = function(map, mapUrl) {
        const parsed = parse3(map);
        if (!("sections" in parsed)) {
          return new TraceMap(parsed, mapUrl);
        }
        const mappings = [];
        const sources = [];
        const sourcesContent = [];
        const names = [];
        const ignoreList = [];
        recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, Infinity, Infinity);
        const joined = {
          version: 3,
          file: parsed.file,
          names,
          sources,
          sourcesContent,
          mappings,
          ignoreList
        };
        return presortedDecodedMap(joined);
      };
      function parse3(map) {
        return typeof map === "string" ? JSON.parse(map) : map;
      }
      function recurse(input2, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
        const { sections } = input2;
        for (let i = 0; i < sections.length; i++) {
          const { map, offset } = sections[i];
          let sl = stopLine;
          let sc = stopColumn;
          if (i + 1 < sections.length) {
            const nextOffset = sections[i + 1].offset;
            sl = Math.min(stopLine, lineOffset + nextOffset.line);
            if (sl === stopLine) {
              sc = Math.min(stopColumn, columnOffset + nextOffset.column);
            } else if (sl < stopLine) {
              sc = columnOffset + nextOffset.column;
            }
          }
          addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
        }
      }
      function addSection(input2, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
        const parsed = parse3(input2);
        if ("sections" in parsed)
          return recurse(...arguments);
        const map = new TraceMap(parsed, mapUrl);
        const sourcesOffset = sources.length;
        const namesOffset = names.length;
        const decoded = decodedMappings(map);
        const { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
        append2(sources, resolvedSources);
        append2(names, map.names);
        if (contents)
          append2(sourcesContent, contents);
        else
          for (let i = 0; i < resolvedSources.length; i++)
            sourcesContent.push(null);
        if (ignores)
          for (let i = 0; i < ignores.length; i++)
            ignoreList.push(ignores[i] + sourcesOffset);
        for (let i = 0; i < decoded.length; i++) {
          const lineI = lineOffset + i;
          if (lineI > stopLine)
            return;
          const out = getLine(mappings, lineI);
          const cOffset = i === 0 ? columnOffset : 0;
          const line2 = decoded[i];
          for (let j = 0; j < line2.length; j++) {
            const seg = line2[j];
            const column2 = cOffset + seg[COLUMN];
            if (lineI === stopLine && column2 >= stopColumn)
              return;
            if (seg.length === 1) {
              out.push([column2]);
              continue;
            }
            const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];
            const sourceLine = seg[SOURCE_LINE];
            const sourceColumn = seg[SOURCE_COLUMN];
            out.push(seg.length === 4 ? [column2, sourcesIndex, sourceLine, sourceColumn] : [column2, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
          }
        }
      }
      function append2(arr, other) {
        for (let i = 0; i < other.length; i++)
          arr.push(other[i]);
      }
      function getLine(arr, index2) {
        for (let i = arr.length; i <= index2; i++)
          arr[i] = [];
        return arr[index2];
      }
      const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
      const COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
      const LEAST_UPPER_BOUND = -1;
      const GREATEST_LOWER_BOUND = 1;
      class TraceMap {
        constructor(map, mapUrl) {
          const isString2 = typeof map === "string";
          if (!isString2 && map._decodedMemo)
            return map;
          const parsed = isString2 ? JSON.parse(map) : map;
          const { version: version2, file: file2, names, sourceRoot, sources, sourcesContent } = parsed;
          this.version = version2;
          this.file = file2;
          this.names = names || [];
          this.sourceRoot = sourceRoot;
          this.sources = sources;
          this.sourcesContent = sourcesContent;
          this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
          const from = resolve(sourceRoot || "", stripFilename(mapUrl));
          this.resolvedSources = sources.map((s) => resolve(s || "", from));
          const { mappings } = parsed;
          if (typeof mappings === "string") {
            this._encoded = mappings;
            this._decoded = void 0;
          } else {
            this._encoded = void 0;
            this._decoded = maybeSort(mappings, isString2);
          }
          this._decodedMemo = memoizedState();
          this._bySources = void 0;
          this._bySourceMemos = void 0;
        }
      }
      function cast(map) {
        return map;
      }
      function encodedMappings(map) {
        var _a;
        var _b;
        return (_a = (_b = cast(map))._encoded) !== null && _a !== void 0 ? _a : _b._encoded = sourcemapCodec.encode(cast(map)._decoded);
      }
      function decodedMappings(map) {
        var _a;
        return (_a = cast(map))._decoded || (_a._decoded = sourcemapCodec.decode(cast(map)._encoded));
      }
      function traceSegment(map, line2, column2) {
        const decoded = decodedMappings(map);
        if (line2 >= decoded.length)
          return null;
        const segments = decoded[line2];
        const index2 = traceSegmentInternal(segments, cast(map)._decodedMemo, line2, column2, GREATEST_LOWER_BOUND);
        return index2 === -1 ? null : segments[index2];
      }
      function originalPositionFor(map, needle) {
        let { line: line2, column: column2, bias } = needle;
        line2--;
        if (line2 < 0)
          throw new Error(LINE_GTR_ZERO);
        if (column2 < 0)
          throw new Error(COL_GTR_EQ_ZERO);
        const decoded = decodedMappings(map);
        if (line2 >= decoded.length)
          return OMapping(null, null, null, null);
        const segments = decoded[line2];
        const index2 = traceSegmentInternal(segments, cast(map)._decodedMemo, line2, column2, bias || GREATEST_LOWER_BOUND);
        if (index2 === -1)
          return OMapping(null, null, null, null);
        const segment = segments[index2];
        if (segment.length === 1)
          return OMapping(null, null, null, null);
        const { names, resolvedSources } = map;
        return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
      }
      function generatedPositionFor(map, needle) {
        const { source: source2, line: line2, column: column2, bias } = needle;
        return generatedPosition(map, source2, line2, column2, bias || GREATEST_LOWER_BOUND, false);
      }
      function allGeneratedPositionsFor(map, needle) {
        const { source: source2, line: line2, column: column2, bias } = needle;
        return generatedPosition(map, source2, line2, column2, bias || LEAST_UPPER_BOUND, true);
      }
      function eachMapping(map, cb) {
        const decoded = decodedMappings(map);
        const { names, resolvedSources } = map;
        for (let i = 0; i < decoded.length; i++) {
          const line2 = decoded[i];
          for (let j = 0; j < line2.length; j++) {
            const seg = line2[j];
            const generatedLine = i + 1;
            const generatedColumn = seg[0];
            let source2 = null;
            let originalLine = null;
            let originalColumn = null;
            let name = null;
            if (seg.length !== 1) {
              source2 = resolvedSources[seg[1]];
              originalLine = seg[2] + 1;
              originalColumn = seg[3];
            }
            if (seg.length === 5)
              name = names[seg[4]];
            cb({
              generatedLine,
              generatedColumn,
              source: source2,
              originalLine,
              originalColumn,
              name
            });
          }
        }
      }
      function sourceIndex(map, source2) {
        const { sources, resolvedSources } = map;
        let index2 = sources.indexOf(source2);
        if (index2 === -1)
          index2 = resolvedSources.indexOf(source2);
        return index2;
      }
      function sourceContentFor(map, source2) {
        const { sourcesContent } = map;
        if (sourcesContent == null)
          return null;
        const index2 = sourceIndex(map, source2);
        return index2 === -1 ? null : sourcesContent[index2];
      }
      function isIgnored(map, source2) {
        const { ignoreList } = map;
        if (ignoreList == null)
          return false;
        const index2 = sourceIndex(map, source2);
        return index2 === -1 ? false : ignoreList.includes(index2);
      }
      function presortedDecodedMap(map, mapUrl) {
        const tracer = new TraceMap(clone2(map, []), mapUrl);
        cast(tracer)._decoded = map.mappings;
        return tracer;
      }
      function decodedMap(map) {
        return clone2(map, decodedMappings(map));
      }
      function encodedMap(map) {
        return clone2(map, encodedMappings(map));
      }
      function clone2(map, mappings) {
        return {
          version: map.version,
          file: map.file,
          names: map.names,
          sourceRoot: map.sourceRoot,
          sources: map.sources,
          sourcesContent: map.sourcesContent,
          mappings,
          ignoreList: map.ignoreList || map.x_google_ignoreList
        };
      }
      function OMapping(source2, line2, column2, name) {
        return { source: source2, line: line2, column: column2, name };
      }
      function GMapping(line2, column2) {
        return { line: line2, column: column2 };
      }
      function traceSegmentInternal(segments, memo, line2, column2, bias) {
        let index2 = memoizedBinarySearch(segments, column2, memo, line2);
        if (found) {
          index2 = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column2, index2);
        } else if (bias === LEAST_UPPER_BOUND)
          index2++;
        if (index2 === -1 || index2 === segments.length)
          return -1;
        return index2;
      }
      function sliceGeneratedPositions(segments, memo, line2, column2, bias) {
        let min = traceSegmentInternal(segments, memo, line2, column2, GREATEST_LOWER_BOUND);
        if (!found && bias === LEAST_UPPER_BOUND)
          min++;
        if (min === -1 || min === segments.length)
          return [];
        const matchedColumn = found ? column2 : segments[min][COLUMN];
        if (!found)
          min = lowerBound(segments, matchedColumn, min);
        const max = upperBound(segments, matchedColumn, min);
        const result = [];
        for (; min <= max; min++) {
          const segment = segments[min];
          result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
        }
        return result;
      }
      function generatedPosition(map, source2, line2, column2, bias, all) {
        var _a;
        line2--;
        if (line2 < 0)
          throw new Error(LINE_GTR_ZERO);
        if (column2 < 0)
          throw new Error(COL_GTR_EQ_ZERO);
        const { sources, resolvedSources } = map;
        let sourceIndex2 = sources.indexOf(source2);
        if (sourceIndex2 === -1)
          sourceIndex2 = resolvedSources.indexOf(source2);
        if (sourceIndex2 === -1)
          return all ? [] : GMapping(null, null);
        const generated2 = (_a = cast(map))._bySources || (_a._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState)));
        const segments = generated2[sourceIndex2][line2];
        if (segments == null)
          return all ? [] : GMapping(null, null);
        const memo = cast(map)._bySourceMemos[sourceIndex2];
        if (all)
          return sliceGeneratedPositions(segments, memo, line2, column2, bias);
        const index2 = traceSegmentInternal(segments, memo, line2, column2, bias);
        if (index2 === -1)
          return GMapping(null, null);
        const segment = segments[index2];
        return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
      }
      exports2.AnyMap = AnyMap;
      exports2.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;
      exports2.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;
      exports2.TraceMap = TraceMap;
      exports2.allGeneratedPositionsFor = allGeneratedPositionsFor;
      exports2.decodedMap = decodedMap;
      exports2.decodedMappings = decodedMappings;
      exports2.eachMapping = eachMapping;
      exports2.encodedMap = encodedMap;
      exports2.encodedMappings = encodedMappings;
      exports2.generatedPositionFor = generatedPositionFor;
      exports2.isIgnored = isIgnored;
      exports2.originalPositionFor = originalPositionFor;
      exports2.presortedDecodedMap = presortedDecodedMap;
      exports2.sourceContentFor = sourceContentFor;
      exports2.traceSegment = traceSegment;
    });
  })(traceMapping_umd, traceMapping_umd.exports);
  return traceMapping_umd.exports;
}
var hasRequiredGenMapping_umd;
function requireGenMapping_umd() {
  if (hasRequiredGenMapping_umd) return genMapping_umd.exports;
  hasRequiredGenMapping_umd = 1;
  (function(module, exports) {
    (function(global, factory) {
      factory(exports, requireSetArray_umd(), requireSourcemapCodec_umd(), requireTraceMapping_umd());
    })(commonjsGlobal, function(exports2, setArray, sourcemapCodec, traceMapping) {
      const COLUMN = 0;
      const SOURCES_INDEX = 1;
      const SOURCE_LINE = 2;
      const SOURCE_COLUMN = 3;
      const NAMES_INDEX = 4;
      const NO_NAME = -1;
      class GenMapping {
        constructor({ file: file2, sourceRoot } = {}) {
          this._names = new setArray.SetArray();
          this._sources = new setArray.SetArray();
          this._sourcesContent = [];
          this._mappings = [];
          this.file = file2;
          this.sourceRoot = sourceRoot;
          this._ignoreList = new setArray.SetArray();
        }
      }
      function cast(map) {
        return map;
      }
      function addSegment(map, genLine, genColumn, source2, sourceLine, sourceColumn, name, content) {
        return addSegmentInternal(false, map, genLine, genColumn, source2, sourceLine, sourceColumn, name, content);
      }
      function addMapping(map, mapping) {
        return addMappingInternal(false, map, mapping);
      }
      const maybeAddSegment = (map, genLine, genColumn, source2, sourceLine, sourceColumn, name, content) => {
        return addSegmentInternal(true, map, genLine, genColumn, source2, sourceLine, sourceColumn, name, content);
      };
      const maybeAddMapping = (map, mapping) => {
        return addMappingInternal(true, map, mapping);
      };
      function setSourceContent(map, source2, content) {
        const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
        const index2 = setArray.put(sources, source2);
        sourcesContent[index2] = content;
      }
      function setIgnore(map, source2, ignore = true) {
        const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map);
        const index2 = setArray.put(sources, source2);
        if (index2 === sourcesContent.length)
          sourcesContent[index2] = null;
        if (ignore)
          setArray.put(ignoreList, index2);
        else
          setArray.remove(ignoreList, index2);
      }
      function toDecodedMap(map) {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
        removeEmptyFinalLines(mappings);
        return {
          version: 3,
          file: map.file || void 0,
          names: names.array,
          sourceRoot: map.sourceRoot || void 0,
          sources: sources.array,
          sourcesContent,
          mappings,
          ignoreList: ignoreList.array
        };
      }
      function toEncodedMap(map) {
        const decoded = toDecodedMap(map);
        return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
      }
      function fromMap(input2) {
        const map = new traceMapping.TraceMap(input2);
        const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
        putAll(cast(gen)._names, map.names);
        putAll(cast(gen)._sources, map.sources);
        cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);
        cast(gen)._mappings = traceMapping.decodedMappings(map);
        if (map.ignoreList)
          putAll(cast(gen)._ignoreList, map.ignoreList);
        return gen;
      }
      function allMappings(map) {
        const out = [];
        const { _mappings: mappings, _sources: sources, _names: names } = cast(map);
        for (let i = 0; i < mappings.length; i++) {
          const line2 = mappings[i];
          for (let j = 0; j < line2.length; j++) {
            const seg = line2[j];
            const generated2 = { line: i + 1, column: seg[COLUMN] };
            let source2 = void 0;
            let original = void 0;
            let name = void 0;
            if (seg.length !== 1) {
              source2 = sources.array[seg[SOURCES_INDEX]];
              original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };
              if (seg.length === 5)
                name = names.array[seg[NAMES_INDEX]];
            }
            out.push({ generated: generated2, source: source2, original, name });
          }
        }
        return out;
      }
      function addSegmentInternal(skipable, map, genLine, genColumn, source2, sourceLine, sourceColumn, name, content) {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map);
        const line2 = getLine(mappings, genLine);
        const index2 = getColumnIndex(line2, genColumn);
        if (!source2) {
          if (skipable && skipSourceless(line2, index2))
            return;
          return insert(line2, index2, [genColumn]);
        }
        const sourcesIndex = setArray.put(sources, source2);
        const namesIndex = name ? setArray.put(names, name) : NO_NAME;
        if (sourcesIndex === sourcesContent.length)
          sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;
        if (skipable && skipSource(line2, index2, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
          return;
        }
        return insert(line2, index2, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
      }
      function getLine(mappings, index2) {
        for (let i = mappings.length; i <= index2; i++) {
          mappings[i] = [];
        }
        return mappings[index2];
      }
      function getColumnIndex(line2, genColumn) {
        let index2 = line2.length;
        for (let i = index2 - 1; i >= 0; index2 = i--) {
          const current = line2[i];
          if (genColumn >= current[COLUMN])
            break;
        }
        return index2;
      }
      function insert(array2, index2, value2) {
        for (let i = array2.length; i > index2; i--) {
          array2[i] = array2[i - 1];
        }
        array2[index2] = value2;
      }
      function removeEmptyFinalLines(mappings) {
        const { length } = mappings;
        let len = length;
        for (let i = len - 1; i >= 0; len = i, i--) {
          if (mappings[i].length > 0)
            break;
        }
        if (len < length)
          mappings.length = len;
      }
      function putAll(setarr, array2) {
        for (let i = 0; i < array2.length; i++)
          setArray.put(setarr, array2[i]);
      }
      function skipSourceless(line2, index2) {
        if (index2 === 0)
          return true;
        const prev = line2[index2 - 1];
        return prev.length === 1;
      }
      function skipSource(line2, index2, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
        if (index2 === 0)
          return false;
        const prev = line2[index2 - 1];
        if (prev.length === 1)
          return false;
        return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
      }
      function addMappingInternal(skipable, map, mapping) {
        const { generated: generated2, source: source2, original, name, content } = mapping;
        if (!source2) {
          return addSegmentInternal(skipable, map, generated2.line - 1, generated2.column, null, null, null, null, null);
        }
        return addSegmentInternal(skipable, map, generated2.line - 1, generated2.column, source2, original.line - 1, original.column, name, content);
      }
      exports2.GenMapping = GenMapping;
      exports2.addMapping = addMapping;
      exports2.addSegment = addSegment;
      exports2.allMappings = allMappings;
      exports2.fromMap = fromMap;
      exports2.maybeAddMapping = maybeAddMapping;
      exports2.maybeAddSegment = maybeAddSegment;
      exports2.setIgnore = setIgnore;
      exports2.setSourceContent = setSourceContent;
      exports2.toDecodedMap = toDecodedMap;
      exports2.toEncodedMap = toEncodedMap;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  })(genMapping_umd, genMapping_umd.exports);
  return genMapping_umd.exports;
}
var hasRequiredSourceMap;
function requireSourceMap() {
  if (hasRequiredSourceMap) return sourceMap$1;
  hasRequiredSourceMap = 1;
  Object.defineProperty(sourceMap$1, "__esModule", {
    value: true
  });
  sourceMap$1.default = void 0;
  var _genMapping = requireGenMapping_umd();
  var _traceMapping = requireTraceMapping_umd();
  class SourceMap {
    constructor(opts, code) {
      var _opts$sourceFileName;
      this._map = void 0;
      this._rawMappings = void 0;
      this._sourceFileName = void 0;
      this._lastGenLine = 0;
      this._lastSourceLine = 0;
      this._lastSourceColumn = 0;
      this._inputMap = void 0;
      const map = this._map = new _genMapping.GenMapping({
        sourceRoot: opts.sourceRoot
      });
      this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? void 0 : _opts$sourceFileName.replace(/\\/g, "/");
      this._rawMappings = void 0;
      if (opts.inputSourceMap) {
        this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
        const resolvedSources = this._inputMap.resolvedSources;
        if (resolvedSources.length) {
          for (let i = 0; i < resolvedSources.length; i++) {
            var _this$_inputMap$sourc;
            (0, _genMapping.setSourceContent)(map, resolvedSources[i], (_this$_inputMap$sourc = this._inputMap.sourcesContent) == null ? void 0 : _this$_inputMap$sourc[i]);
          }
        }
      }
      if (typeof code === "string" && !opts.inputSourceMap) {
        (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
      } else if (typeof code === "object") {
        for (const sourceFileName of Object.keys(code)) {
          (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
        }
      }
    }
    get() {
      return (0, _genMapping.toEncodedMap)(this._map);
    }
    getDecoded() {
      return (0, _genMapping.toDecodedMap)(this._map);
    }
    getRawMappings() {
      return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
    }
    mark(generated2, line2, column2, identifierName, identifierNamePos, filename) {
      var _originalMapping;
      this._rawMappings = void 0;
      let originalMapping;
      if (line2 != null) {
        if (this._inputMap) {
          originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, {
            line: line2,
            column: column2
          });
          if (!originalMapping.name && identifierNamePos) {
            const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
            if (originalIdentifierMapping.name) {
              identifierName = originalIdentifierMapping.name;
            }
          }
        } else {
          originalMapping = {
            source: (filename == null ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName,
            line: line2,
            column: column2
          };
        }
      }
      (0, _genMapping.maybeAddMapping)(this._map, {
        name: identifierName,
        generated: generated2,
        source: (_originalMapping = originalMapping) == null ? void 0 : _originalMapping.source,
        original: originalMapping
      });
    }
  }
  sourceMap$1.default = SourceMap;
  return sourceMap$1;
}
var printer$1 = {};
var buffer$1 = {};
var hasRequiredBuffer;
function requireBuffer() {
  if (hasRequiredBuffer) return buffer$1;
  hasRequiredBuffer = 1;
  Object.defineProperty(buffer$1, "__esModule", {
    value: true
  });
  buffer$1.default = void 0;
  class Buffer2 {
    constructor(map, indentChar) {
      this._map = null;
      this._buf = "";
      this._str = "";
      this._appendCount = 0;
      this._last = 0;
      this._queue = [];
      this._queueCursor = 0;
      this._canMarkIdName = true;
      this._indentChar = "";
      this._fastIndentations = [];
      this._position = {
        line: 1,
        column: 0
      };
      this._sourcePosition = {
        identifierName: void 0,
        identifierNamePos: void 0,
        line: void 0,
        column: void 0,
        filename: void 0
      };
      this._map = map;
      this._indentChar = indentChar;
      for (let i = 0; i < 64; i++) {
        this._fastIndentations.push(indentChar.repeat(i));
      }
      this._allocQueue();
    }
    _allocQueue() {
      const queue = this._queue;
      for (let i = 0; i < 16; i++) {
        queue.push({
          char: 0,
          repeat: 1,
          line: void 0,
          column: void 0,
          identifierName: void 0,
          identifierNamePos: void 0,
          filename: ""
        });
      }
    }
    _pushQueue(char, repeat, line2, column2, filename) {
      const cursor = this._queueCursor;
      if (cursor === this._queue.length) {
        this._allocQueue();
      }
      const item2 = this._queue[cursor];
      item2.char = char;
      item2.repeat = repeat;
      item2.line = line2;
      item2.column = column2;
      item2.filename = filename;
      this._queueCursor++;
    }
    _popQueue() {
      if (this._queueCursor === 0) {
        throw new Error("Cannot pop from empty queue");
      }
      return this._queue[--this._queueCursor];
    }
    get() {
      this._flush();
      const map = this._map;
      const result = {
        code: (this._buf + this._str).trimRight(),
        decodedMap: map == null ? void 0 : map.getDecoded(),
        get __mergedMap() {
          return this.map;
        },
        get map() {
          const resultMap = map ? map.get() : null;
          result.map = resultMap;
          return resultMap;
        },
        set map(value2) {
          Object.defineProperty(result, "map", {
            value: value2,
            writable: true
          });
        },
        get rawMappings() {
          const mappings = map == null ? void 0 : map.getRawMappings();
          result.rawMappings = mappings;
          return mappings;
        },
        set rawMappings(value2) {
          Object.defineProperty(result, "rawMappings", {
            value: value2,
            writable: true
          });
        }
      };
      return result;
    }
    append(str, maybeNewline) {
      this._flush();
      this._append(str, this._sourcePosition, maybeNewline);
    }
    appendChar(char) {
      this._flush();
      this._appendChar(char, 1, this._sourcePosition);
    }
    queue(char) {
      if (char === 10) {
        while (this._queueCursor !== 0) {
          const char2 = this._queue[this._queueCursor - 1].char;
          if (char2 !== 32 && char2 !== 9) {
            break;
          }
          this._queueCursor--;
        }
      }
      const sourcePosition = this._sourcePosition;
      this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
    }
    queueIndentation(repeat) {
      if (repeat === 0) return;
      this._pushQueue(-1, repeat, void 0, void 0, void 0);
    }
    _flush() {
      const queueCursor = this._queueCursor;
      const queue = this._queue;
      for (let i = 0; i < queueCursor; i++) {
        const item2 = queue[i];
        this._appendChar(item2.char, item2.repeat, item2);
      }
      this._queueCursor = 0;
    }
    _appendChar(char, repeat, sourcePos) {
      this._last = char;
      if (char === -1) {
        const fastIndentation = this._fastIndentations[repeat];
        if (fastIndentation !== void 0) {
          this._str += fastIndentation;
        } else {
          this._str += repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
        }
      } else {
        this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
      }
      if (char !== 10) {
        this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename);
        this._position.column += repeat;
      } else {
        this._position.line++;
        this._position.column = 0;
      }
      if (this._canMarkIdName) {
        sourcePos.identifierName = void 0;
        sourcePos.identifierNamePos = void 0;
      }
    }
    _append(str, sourcePos, maybeNewline) {
      const len = str.length;
      const position = this._position;
      this._last = str.charCodeAt(len - 1);
      if (++this._appendCount > 4096) {
        +this._str;
        this._buf += this._str;
        this._str = str;
        this._appendCount = 0;
      } else {
        this._str += str;
      }
      if (!maybeNewline && !this._map) {
        position.column += len;
        return;
      }
      const {
        column: column2,
        identifierName,
        identifierNamePos,
        filename
      } = sourcePos;
      let line2 = sourcePos.line;
      if ((identifierName != null || identifierNamePos != null) && this._canMarkIdName) {
        sourcePos.identifierName = void 0;
        sourcePos.identifierNamePos = void 0;
      }
      let i = str.indexOf("\n");
      let last = 0;
      if (i !== 0) {
        this._mark(line2, column2, identifierName, identifierNamePos, filename);
      }
      while (i !== -1) {
        position.line++;
        position.column = 0;
        last = i + 1;
        if (last < len && line2 !== void 0) {
          this._mark(++line2, 0, null, null, filename);
        }
        i = str.indexOf("\n", last);
      }
      position.column += len - last;
    }
    _mark(line2, column2, identifierName, identifierNamePos, filename) {
      var _this$_map;
      (_this$_map = this._map) == null || _this$_map.mark(this._position, line2, column2, identifierName, identifierNamePos, filename);
    }
    removeTrailingNewline() {
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 10) {
        this._queueCursor--;
      }
    }
    removeLastSemicolon() {
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 59) {
        this._queueCursor--;
      }
    }
    getLastChar() {
      const queueCursor = this._queueCursor;
      return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;
    }
    getNewlineCount() {
      const queueCursor = this._queueCursor;
      let count = 0;
      if (queueCursor === 0) return this._last === 10 ? 1 : 0;
      for (let i = queueCursor - 1; i >= 0; i--) {
        if (this._queue[i].char !== 10) {
          break;
        }
        count++;
      }
      return count === queueCursor && this._last === 10 ? count + 1 : count;
    }
    endsWithCharAndNewline() {
      const queue = this._queue;
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0) {
        const lastCp = queue[queueCursor - 1].char;
        if (lastCp !== 10) return;
        if (queueCursor > 1) {
          return queue[queueCursor - 2].char;
        } else {
          return this._last;
        }
      }
    }
    hasContent() {
      return this._queueCursor !== 0 || !!this._last;
    }
    exactSource(loc, cb) {
      if (!this._map) {
        cb();
        return;
      }
      this.source("start", loc);
      const identifierName = loc.identifierName;
      const sourcePos = this._sourcePosition;
      if (identifierName) {
        this._canMarkIdName = false;
        sourcePos.identifierName = identifierName;
      }
      cb();
      if (identifierName) {
        this._canMarkIdName = true;
        sourcePos.identifierName = void 0;
        sourcePos.identifierNamePos = void 0;
      }
      this.source("end", loc);
    }
    source(prop, loc) {
      if (!this._map) return;
      this._normalizePosition(prop, loc, 0);
    }
    sourceWithOffset(prop, loc, columnOffset) {
      if (!this._map) return;
      this._normalizePosition(prop, loc, columnOffset);
    }
    withSource(prop, loc, cb) {
      if (this._map) {
        this.source(prop, loc);
      }
      cb();
    }
    _normalizePosition(prop, loc, columnOffset) {
      const pos2 = loc[prop];
      const target = this._sourcePosition;
      if (pos2) {
        target.line = pos2.line;
        target.column = Math.max(pos2.column + columnOffset, 0);
        target.filename = loc.filename;
      }
    }
    getCurrentColumn() {
      const queue = this._queue;
      const queueCursor = this._queueCursor;
      let lastIndex = -1;
      let len = 0;
      for (let i = 0; i < queueCursor; i++) {
        const item2 = queue[i];
        if (item2.char === 10) {
          lastIndex = len;
        }
        len += item2.repeat;
      }
      return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;
    }
    getCurrentLine() {
      let count = 0;
      const queue = this._queue;
      for (let i = 0; i < this._queueCursor; i++) {
        if (queue[i].char === 10) {
          count++;
        }
      }
      return this._position.line + count;
    }
  }
  buffer$1.default = Buffer2;
  return buffer$1;
}
var node = {};
var whitespace = {};
var hasRequiredWhitespace;
function requireWhitespace() {
  if (hasRequiredWhitespace) return whitespace;
  hasRequiredWhitespace = 1;
  Object.defineProperty(whitespace, "__esModule", {
    value: true
  });
  whitespace.nodes = void 0;
  var _t = requireLib$O();
  const {
    FLIPPED_ALIAS_KEYS,
    isArrayExpression,
    isAssignmentExpression,
    isBinary,
    isBlockStatement,
    isCallExpression,
    isFunction,
    isIdentifier,
    isLiteral,
    isMemberExpression,
    isObjectExpression,
    isOptionalCallExpression,
    isOptionalMemberExpression,
    isStringLiteral
  } = _t;
  function crawlInternal(node2, state2) {
    if (!node2) return state2;
    if (isMemberExpression(node2) || isOptionalMemberExpression(node2)) {
      crawlInternal(node2.object, state2);
      if (node2.computed) crawlInternal(node2.property, state2);
    } else if (isBinary(node2) || isAssignmentExpression(node2)) {
      crawlInternal(node2.left, state2);
      crawlInternal(node2.right, state2);
    } else if (isCallExpression(node2) || isOptionalCallExpression(node2)) {
      state2.hasCall = true;
      crawlInternal(node2.callee, state2);
    } else if (isFunction(node2)) {
      state2.hasFunction = true;
    } else if (isIdentifier(node2)) {
      state2.hasHelper = state2.hasHelper || node2.callee && isHelper(node2.callee);
    }
    return state2;
  }
  function crawl(node2) {
    return crawlInternal(node2, {
      hasCall: false,
      hasFunction: false,
      hasHelper: false
    });
  }
  function isHelper(node2) {
    if (!node2) return false;
    if (isMemberExpression(node2)) {
      return isHelper(node2.object) || isHelper(node2.property);
    } else if (isIdentifier(node2)) {
      return node2.name === "require" || node2.name.charCodeAt(0) === 95;
    } else if (isCallExpression(node2)) {
      return isHelper(node2.callee);
    } else if (isBinary(node2) || isAssignmentExpression(node2)) {
      return isIdentifier(node2.left) && isHelper(node2.left) || isHelper(node2.right);
    } else {
      return false;
    }
  }
  function isType2(node2) {
    return isLiteral(node2) || isObjectExpression(node2) || isArrayExpression(node2) || isIdentifier(node2) || isMemberExpression(node2);
  }
  const nodes = whitespace.nodes = {
    AssignmentExpression(node2) {
      const state2 = crawl(node2.right);
      if (state2.hasCall && state2.hasHelper || state2.hasFunction) {
        return state2.hasFunction ? 1 | 2 : 2;
      }
    },
    SwitchCase(node2, parent) {
      return (!!node2.consequent.length || parent.cases[0] === node2 ? 1 : 0) | (!node2.consequent.length && parent.cases[parent.cases.length - 1] === node2 ? 2 : 0);
    },
    LogicalExpression(node2) {
      if (isFunction(node2.left) || isFunction(node2.right)) {
        return 2;
      }
    },
    Literal(node2) {
      if (isStringLiteral(node2) && node2.value === "use strict") {
        return 2;
      }
    },
    CallExpression(node2) {
      if (isFunction(node2.callee) || isHelper(node2)) {
        return 1 | 2;
      }
    },
    OptionalCallExpression(node2) {
      if (isFunction(node2.callee)) {
        return 1 | 2;
      }
    },
    VariableDeclaration(node2) {
      for (let i = 0; i < node2.declarations.length; i++) {
        const declar = node2.declarations[i];
        let enabled = isHelper(declar.id) && !isType2(declar.init);
        if (!enabled && declar.init) {
          const state2 = crawl(declar.init);
          enabled = isHelper(declar.init) && state2.hasCall || state2.hasFunction;
        }
        if (enabled) {
          return 1 | 2;
        }
      }
    },
    IfStatement(node2) {
      if (isBlockStatement(node2.consequent)) {
        return 1 | 2;
      }
    }
  };
  nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node2, parent) {
    if (parent.properties[0] === node2) {
      return 1;
    }
  };
  nodes.ObjectTypeCallProperty = function(node2, parent) {
    var _parent$properties;
    if (parent.callProperties[0] === node2 && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {
      return 1;
    }
  };
  nodes.ObjectTypeIndexer = function(node2, parent) {
    var _parent$properties2, _parent$callPropertie;
    if (parent.indexers[0] === node2 && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {
      return 1;
    }
  };
  nodes.ObjectTypeInternalSlot = function(node2, parent) {
    var _parent$properties3, _parent$callPropertie2, _parent$indexers;
    if (parent.internalSlots[0] === node2 && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {
      return 1;
    }
  };
  [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
    [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
      const ret = amounts ? 1 | 2 : 0;
      nodes[type2] = () => ret;
    });
  });
  return whitespace;
}
var parentheses = {};
var hasRequiredParentheses;
function requireParentheses() {
  if (hasRequiredParentheses) return parentheses;
  hasRequiredParentheses = 1;
  Object.defineProperty(parentheses, "__esModule", {
    value: true
  });
  parentheses.ArrowFunctionExpression = ArrowFunctionExpression;
  parentheses.AssignmentExpression = AssignmentExpression;
  parentheses.Binary = Binary;
  parentheses.BinaryExpression = BinaryExpression;
  parentheses.ClassExpression = ClassExpression;
  parentheses.ConditionalExpression = ConditionalExpression;
  parentheses.DoExpression = DoExpression;
  parentheses.FunctionExpression = FunctionExpression;
  parentheses.FunctionTypeAnnotation = FunctionTypeAnnotation;
  parentheses.Identifier = Identifier;
  parentheses.LogicalExpression = LogicalExpression;
  parentheses.NullableTypeAnnotation = NullableTypeAnnotation;
  parentheses.ObjectExpression = ObjectExpression;
  parentheses.OptionalIndexedAccessType = OptionalIndexedAccessType;
  parentheses.OptionalCallExpression = parentheses.OptionalMemberExpression = OptionalMemberExpression;
  parentheses.SequenceExpression = SequenceExpression;
  parentheses.TSTypeAssertion = parentheses.TSSatisfiesExpression = parentheses.TSAsExpression = TSAsExpression;
  parentheses.TSInferType = TSInferType;
  parentheses.TSInstantiationExpression = TSInstantiationExpression;
  parentheses.TSIntersectionType = parentheses.TSUnionType = TSUnionType;
  parentheses.UnaryLike = UnaryLike;
  parentheses.IntersectionTypeAnnotation = parentheses.UnionTypeAnnotation = UnionTypeAnnotation;
  parentheses.UpdateExpression = UpdateExpression;
  parentheses.AwaitExpression = parentheses.YieldExpression = YieldExpression;
  var _t = requireLib$O();
  const {
    isArrayTypeAnnotation,
    isArrowFunctionExpression,
    isBinaryExpression,
    isCallExpression,
    isExportDeclaration,
    isForOfStatement,
    isIndexedAccessType,
    isMemberExpression,
    isObjectPattern,
    isOptionalMemberExpression,
    isYieldExpression
  } = _t;
  const PRECEDENCE = /* @__PURE__ */ new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-", 8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
  function isTSTypeExpression(nodeType) {
    return nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression" || nodeType === "TSTypeAssertion";
  }
  const isClassExtendsClause = (node2, parent) => {
    const parentType = parent.type;
    return (parentType === "ClassDeclaration" || parentType === "ClassExpression") && parent.superClass === node2;
  };
  const hasPostfixPart = (node2, parent) => {
    const parentType = parent.type;
    return (parentType === "MemberExpression" || parentType === "OptionalMemberExpression") && parent.object === node2 || (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression") && parent.callee === node2 || parentType === "TaggedTemplateExpression" && parent.tag === node2 || parentType === "TSNonNullExpression";
  };
  function NullableTypeAnnotation(node2, parent) {
    return isArrayTypeAnnotation(parent);
  }
  function FunctionTypeAnnotation(node2, parent, printStack) {
    if (printStack.length < 3) return;
    const parentType = parent.type;
    return parentType === "UnionTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "ArrayTypeAnnotation" || parentType === "TypeAnnotation" && isArrowFunctionExpression(printStack[printStack.length - 3]);
  }
  function UpdateExpression(node2, parent) {
    return hasPostfixPart(node2, parent) || isClassExtendsClause(node2, parent);
  }
  function ObjectExpression(node2, parent, printStack) {
    return isFirstInContext(printStack, 1 | 2);
  }
  function DoExpression(node2, parent, printStack) {
    return !node2.async && isFirstInContext(printStack, 1);
  }
  function Binary(node2, parent) {
    const parentType = parent.type;
    if (node2.operator === "**" && parentType === "BinaryExpression" && parent.operator === "**") {
      return parent.left === node2;
    }
    if (isClassExtendsClause(node2, parent)) {
      return true;
    }
    if (hasPostfixPart(node2, parent) || parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "AwaitExpression") {
      return true;
    }
    if (parentType === "BinaryExpression" || parentType === "LogicalExpression") {
      const parentPos = PRECEDENCE.get(parent.operator);
      const nodePos = PRECEDENCE.get(node2.operator);
      if (parentPos === nodePos && parent.right === node2 && parentType !== "LogicalExpression" || parentPos > nodePos) {
        return true;
      }
    }
    return void 0;
  }
  function UnionTypeAnnotation(node2, parent) {
    const parentType = parent.type;
    return parentType === "ArrayTypeAnnotation" || parentType === "NullableTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "UnionTypeAnnotation";
  }
  function OptionalIndexedAccessType(node2, parent) {
    return isIndexedAccessType(parent) && parent.objectType === node2;
  }
  function TSAsExpression() {
    return true;
  }
  function TSUnionType(node2, parent) {
    const parentType = parent.type;
    return parentType === "TSArrayType" || parentType === "TSOptionalType" || parentType === "TSIntersectionType" || parentType === "TSUnionType" || parentType === "TSRestType";
  }
  function TSInferType(node2, parent) {
    const parentType = parent.type;
    return parentType === "TSArrayType" || parentType === "TSOptionalType";
  }
  function TSInstantiationExpression(node2, parent) {
    const parentType = parent.type;
    return (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression" || parentType === "TSInstantiationExpression") && !!parent.typeParameters;
  }
  function BinaryExpression(node2, parent) {
    if (node2.operator === "in") {
      const parentType = parent.type;
      return parentType === "VariableDeclarator" || parentType === "ForStatement" || parentType === "ForInStatement" || parentType === "ForOfStatement";
    }
    return false;
  }
  function SequenceExpression(node2, parent) {
    const parentType = parent.type;
    if (parentType === "ForStatement" || parentType === "ThrowStatement" || parentType === "ReturnStatement" || parentType === "IfStatement" && parent.test === node2 || parentType === "WhileStatement" && parent.test === node2 || parentType === "ForInStatement" && parent.right === node2 || parentType === "SwitchStatement" && parent.discriminant === node2 || parentType === "ExpressionStatement" && parent.expression === node2) {
      return false;
    }
    return true;
  }
  function YieldExpression(node2, parent) {
    const parentType = parent.type;
    return parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "UnaryExpression" || parentType === "SpreadElement" || hasPostfixPart(node2, parent) || parentType === "AwaitExpression" && isYieldExpression(node2) || parentType === "ConditionalExpression" && node2 === parent.test || isClassExtendsClause(node2, parent);
  }
  function ClassExpression(node2, parent, printStack) {
    return isFirstInContext(printStack, 1 | 4);
  }
  function UnaryLike(node2, parent) {
    return hasPostfixPart(node2, parent) || isBinaryExpression(parent) && parent.operator === "**" && parent.left === node2 || isClassExtendsClause(node2, parent);
  }
  function FunctionExpression(node2, parent, printStack) {
    return isFirstInContext(printStack, 1 | 4);
  }
  function ArrowFunctionExpression(node2, parent) {
    return isExportDeclaration(parent) || ConditionalExpression(node2, parent);
  }
  function ConditionalExpression(node2, parent) {
    const parentType = parent.type;
    if (parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "ConditionalExpression" && parent.test === node2 || parentType === "AwaitExpression" || isTSTypeExpression(parentType)) {
      return true;
    }
    return UnaryLike(node2, parent);
  }
  function OptionalMemberExpression(node2, parent) {
    return isCallExpression(parent) && parent.callee === node2 || isMemberExpression(parent) && parent.object === node2;
  }
  function AssignmentExpression(node2, parent) {
    if (isObjectPattern(node2.left)) {
      return true;
    } else {
      return ConditionalExpression(node2, parent);
    }
  }
  function LogicalExpression(node2, parent) {
    const parentType = parent.type;
    if (isTSTypeExpression(parentType)) return true;
    if (parentType !== "LogicalExpression") return false;
    switch (node2.operator) {
      case "||":
        return parent.operator === "??" || parent.operator === "&&";
      case "&&":
        return parent.operator === "??";
      case "??":
        return parent.operator !== "??";
    }
  }
  function Identifier(node2, parent, printStack) {
    var _node$extra;
    const parentType = parent.type;
    if ((_node$extra = node2.extra) != null && _node$extra.parenthesized && parentType === "AssignmentExpression" && parent.left === node2) {
      const rightType = parent.right.type;
      if ((rightType === "FunctionExpression" || rightType === "ClassExpression") && parent.right.id == null) {
        return true;
      }
    }
    if (node2.name === "let") {
      const isFollowedByBracket = isMemberExpression(parent, {
        object: node2,
        computed: true
      }) || isOptionalMemberExpression(parent, {
        object: node2,
        computed: true,
        optional: false
      });
      return isFirstInContext(printStack, isFollowedByBracket ? 1 | 8 | 16 | 32 : 32);
    }
    return node2.name === "async" && isForOfStatement(parent) && node2 === parent.left;
  }
  function isFirstInContext(printStack, checkParam) {
    const expressionStatement = checkParam & 1;
    const arrowBody = checkParam & 2;
    const exportDefault = checkParam & 4;
    const forHead = checkParam & 8;
    const forInHead = checkParam & 16;
    const forOfHead = checkParam & 32;
    let i = printStack.length - 1;
    if (i <= 0) return;
    let node2 = printStack[i];
    i--;
    let parent = printStack[i];
    while (i >= 0) {
      const parentType = parent.type;
      if (expressionStatement && parentType === "ExpressionStatement" && parent.expression === node2 || exportDefault && parentType === "ExportDefaultDeclaration" && node2 === parent.declaration || arrowBody && parentType === "ArrowFunctionExpression" && parent.body === node2 || forHead && parentType === "ForStatement" && parent.init === node2 || forInHead && parentType === "ForInStatement" && parent.left === node2 || forOfHead && parentType === "ForOfStatement" && parent.left === node2) {
        return true;
      }
      if (i > 0 && (hasPostfixPart(node2, parent) && parentType !== "NewExpression" || parentType === "SequenceExpression" && parent.expressions[0] === node2 || parentType === "UpdateExpression" && !parent.prefix || parentType === "ConditionalExpression" && parent.test === node2 || (parentType === "BinaryExpression" || parentType === "LogicalExpression") && parent.left === node2 || parentType === "AssignmentExpression" && parent.left === node2)) {
        node2 = parent;
        i--;
        parent = printStack[i];
      } else {
        return false;
      }
    }
    return false;
  }
  return parentheses;
}
var hasRequiredNode;
function requireNode() {
  if (hasRequiredNode) return node;
  hasRequiredNode = 1;
  Object.defineProperty(node, "__esModule", {
    value: true
  });
  node.needsParens = needsParens;
  node.needsWhitespace = needsWhitespace;
  node.needsWhitespaceAfter = needsWhitespaceAfter;
  node.needsWhitespaceBefore = needsWhitespaceBefore;
  var whitespace2 = requireWhitespace();
  var parens = requireParentheses();
  var _t = requireLib$O();
  const {
    FLIPPED_ALIAS_KEYS,
    isCallExpression,
    isExpressionStatement,
    isMemberExpression,
    isNewExpression
  } = _t;
  function expandAliases(obj) {
    const map = /* @__PURE__ */ new Map();
    function add(type, func) {
      const fn2 = map.get(type);
      map.set(type, fn2 ? function(node2, parent, stack2) {
        var _fn;
        return (_fn = fn2(node2, parent, stack2)) != null ? _fn : func(node2, parent, stack2);
      } : func);
    }
    for (const type of Object.keys(obj)) {
      const aliases = FLIPPED_ALIAS_KEYS[type];
      if (aliases) {
        for (const alias of aliases) {
          add(alias, obj[type]);
        }
      } else {
        add(type, obj[type]);
      }
    }
    return map;
  }
  const expandedParens = expandAliases(parens);
  const expandedWhitespaceNodes = expandAliases(whitespace2.nodes);
  function isOrHasCallExpression(node2) {
    if (isCallExpression(node2)) {
      return true;
    }
    return isMemberExpression(node2) && isOrHasCallExpression(node2.object);
  }
  function needsWhitespace(node2, parent, type) {
    var _expandedWhitespaceNo;
    if (!node2) return false;
    if (isExpressionStatement(node2)) {
      node2 = node2.expression;
    }
    const flag = (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node2.type)) == null ? void 0 : _expandedWhitespaceNo(node2, parent);
    if (typeof flag === "number") {
      return (flag & type) !== 0;
    }
    return false;
  }
  function needsWhitespaceBefore(node2, parent) {
    return needsWhitespace(node2, parent, 1);
  }
  function needsWhitespaceAfter(node2, parent) {
    return needsWhitespace(node2, parent, 2);
  }
  function needsParens(node2, parent, printStack) {
    var _expandedParens$get;
    if (!parent) return false;
    if (isNewExpression(parent) && parent.callee === node2) {
      if (isOrHasCallExpression(node2)) return true;
    }
    return (_expandedParens$get = expandedParens.get(node2.type)) == null ? void 0 : _expandedParens$get(node2, parent, printStack);
  }
  return node;
}
var generators = {};
var templateLiterals = {};
var hasRequiredTemplateLiterals;
function requireTemplateLiterals() {
  if (hasRequiredTemplateLiterals) return templateLiterals;
  hasRequiredTemplateLiterals = 1;
  Object.defineProperty(templateLiterals, "__esModule", {
    value: true
  });
  templateLiterals.TaggedTemplateExpression = TaggedTemplateExpression;
  templateLiterals.TemplateElement = TemplateElement;
  templateLiterals.TemplateLiteral = TemplateLiteral;
  function TaggedTemplateExpression(node2) {
    this.print(node2.tag, node2);
    this.print(node2.typeParameters, node2);
    this.print(node2.quasi, node2);
  }
  function TemplateElement(node2, parent) {
    const isFirst = parent.quasis[0] === node2;
    const isLast = parent.quasis[parent.quasis.length - 1] === node2;
    const value2 = (isFirst ? "`" : "}") + node2.value.raw + (isLast ? "`" : "${");
    this.token(value2, true);
  }
  function TemplateLiteral(node2) {
    const quasis = node2.quasis;
    for (let i = 0; i < quasis.length; i++) {
      this.print(quasis[i], node2);
      if (i + 1 < quasis.length) {
        this.print(node2.expressions[i], node2);
      }
    }
  }
  return templateLiterals;
}
var expressions = {};
var hasRequiredExpressions;
function requireExpressions() {
  if (hasRequiredExpressions) return expressions;
  hasRequiredExpressions = 1;
  Object.defineProperty(expressions, "__esModule", {
    value: true
  });
  expressions.LogicalExpression = expressions.BinaryExpression = expressions.AssignmentExpression = AssignmentExpression;
  expressions.AssignmentPattern = AssignmentPattern;
  expressions.AwaitExpression = AwaitExpression;
  expressions.BindExpression = BindExpression;
  expressions.CallExpression = CallExpression;
  expressions.ConditionalExpression = ConditionalExpression;
  expressions.Decorator = Decorator;
  expressions.DoExpression = DoExpression;
  expressions.EmptyStatement = EmptyStatement;
  expressions.ExpressionStatement = ExpressionStatement;
  expressions.Import = Import;
  expressions.MemberExpression = MemberExpression;
  expressions.MetaProperty = MetaProperty;
  expressions.ModuleExpression = ModuleExpression;
  expressions.NewExpression = NewExpression;
  expressions.OptionalCallExpression = OptionalCallExpression;
  expressions.OptionalMemberExpression = OptionalMemberExpression;
  expressions.ParenthesizedExpression = ParenthesizedExpression;
  expressions.PrivateName = PrivateName;
  expressions.SequenceExpression = SequenceExpression;
  expressions.Super = Super;
  expressions.ThisExpression = ThisExpression;
  expressions.UnaryExpression = UnaryExpression;
  expressions.UpdateExpression = UpdateExpression;
  expressions.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
  expressions.YieldExpression = YieldExpression;
  expressions._shouldPrintDecoratorsBeforeExport = _shouldPrintDecoratorsBeforeExport;
  var _t = requireLib$O();
  var n = requireNode();
  const {
    isCallExpression,
    isLiteral,
    isMemberExpression,
    isNewExpression
  } = _t;
  function UnaryExpression(node2) {
    const {
      operator
    } = node2;
    if (operator === "void" || operator === "delete" || operator === "typeof" || operator === "throw") {
      this.word(operator);
      this.space();
    } else {
      this.token(operator);
    }
    this.print(node2.argument, node2);
  }
  function DoExpression(node2) {
    if (node2.async) {
      this.word("async", true);
      this.space();
    }
    this.word("do");
    this.space();
    this.print(node2.body, node2);
  }
  function ParenthesizedExpression(node2) {
    this.tokenChar(40);
    this.print(node2.expression, node2);
    this.rightParens(node2);
  }
  function UpdateExpression(node2) {
    if (node2.prefix) {
      this.token(node2.operator);
      this.print(node2.argument, node2);
    } else {
      this.printTerminatorless(node2.argument, node2, true);
      this.token(node2.operator);
    }
  }
  function ConditionalExpression(node2) {
    this.print(node2.test, node2);
    this.space();
    this.tokenChar(63);
    this.space();
    this.print(node2.consequent, node2);
    this.space();
    this.tokenChar(58);
    this.space();
    this.print(node2.alternate, node2);
  }
  function NewExpression(node2, parent) {
    this.word("new");
    this.space();
    this.print(node2.callee, node2);
    if (this.format.minified && node2.arguments.length === 0 && !node2.optional && !isCallExpression(parent, {
      callee: node2
    }) && !isMemberExpression(parent) && !isNewExpression(parent)) {
      return;
    }
    this.print(node2.typeArguments, node2);
    this.print(node2.typeParameters, node2);
    if (node2.optional) {
      this.token("?.");
    }
    this.tokenChar(40);
    this.printList(node2.arguments, node2);
    this.rightParens(node2);
  }
  function SequenceExpression(node2) {
    this.printList(node2.expressions, node2);
  }
  function ThisExpression() {
    this.word("this");
  }
  function Super() {
    this.word("super");
  }
  function isDecoratorMemberExpression(node2) {
    switch (node2.type) {
      case "Identifier":
        return true;
      case "MemberExpression":
        return !node2.computed && node2.property.type === "Identifier" && isDecoratorMemberExpression(node2.object);
      default:
        return false;
    }
  }
  function shouldParenthesizeDecoratorExpression(node2) {
    if (node2.type === "ParenthesizedExpression") {
      return false;
    }
    return !isDecoratorMemberExpression(node2.type === "CallExpression" ? node2.callee : node2);
  }
  function _shouldPrintDecoratorsBeforeExport(node2) {
    if (typeof this.format.decoratorsBeforeExport === "boolean") {
      return this.format.decoratorsBeforeExport;
    }
    return typeof node2.start === "number" && node2.start === node2.declaration.start;
  }
  function Decorator(node2) {
    this.tokenChar(64);
    const {
      expression
    } = node2;
    if (shouldParenthesizeDecoratorExpression(expression)) {
      this.tokenChar(40);
      this.print(expression, node2);
      this.tokenChar(41);
    } else {
      this.print(expression, node2);
    }
    this.newline();
  }
  function OptionalMemberExpression(node2) {
    let {
      computed
    } = node2;
    const {
      optional,
      property
    } = node2;
    this.print(node2.object, node2);
    if (!computed && isMemberExpression(property)) {
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    }
    if (isLiteral(property) && typeof property.value === "number") {
      computed = true;
    }
    if (optional) {
      this.token("?.");
    }
    if (computed) {
      this.tokenChar(91);
      this.print(property, node2);
      this.tokenChar(93);
    } else {
      if (!optional) {
        this.tokenChar(46);
      }
      this.print(property, node2);
    }
  }
  function OptionalCallExpression(node2) {
    this.print(node2.callee, node2);
    this.print(node2.typeParameters, node2);
    if (node2.optional) {
      this.token("?.");
    }
    this.print(node2.typeArguments, node2);
    this.tokenChar(40);
    this.printList(node2.arguments, node2);
    this.rightParens(node2);
  }
  function CallExpression(node2) {
    this.print(node2.callee, node2);
    this.print(node2.typeArguments, node2);
    this.print(node2.typeParameters, node2);
    this.tokenChar(40);
    this.printList(node2.arguments, node2);
    this.rightParens(node2);
  }
  function Import() {
    this.word("import");
  }
  function AwaitExpression(node2) {
    this.word("await");
    if (node2.argument) {
      this.space();
      this.printTerminatorless(node2.argument, node2, false);
    }
  }
  function YieldExpression(node2) {
    this.word("yield", true);
    if (node2.delegate) {
      this.tokenChar(42);
      if (node2.argument) {
        this.space();
        this.print(node2.argument, node2);
      }
    } else {
      if (node2.argument) {
        this.space();
        this.printTerminatorless(node2.argument, node2, false);
      }
    }
  }
  function EmptyStatement() {
    this.semicolon(true);
  }
  function ExpressionStatement(node2) {
    this.print(node2.expression, node2);
    this.semicolon();
  }
  function AssignmentPattern(node2) {
    this.print(node2.left, node2);
    if (node2.left.optional) this.tokenChar(63);
    this.print(node2.left.typeAnnotation, node2);
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node2.right, node2);
  }
  function AssignmentExpression(node2, parent) {
    const parens = this.inForStatementInitCounter && node2.operator === "in" && !n.needsParens(node2, parent);
    if (parens) {
      this.tokenChar(40);
    }
    this.print(node2.left, node2);
    this.space();
    if (node2.operator === "in" || node2.operator === "instanceof") {
      this.word(node2.operator);
    } else {
      this.token(node2.operator);
    }
    this.space();
    this.print(node2.right, node2);
    if (parens) {
      this.tokenChar(41);
    }
  }
  function BindExpression(node2) {
    this.print(node2.object, node2);
    this.token("::");
    this.print(node2.callee, node2);
  }
  function MemberExpression(node2) {
    this.print(node2.object, node2);
    if (!node2.computed && isMemberExpression(node2.property)) {
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    }
    let computed = node2.computed;
    if (isLiteral(node2.property) && typeof node2.property.value === "number") {
      computed = true;
    }
    if (computed) {
      this.tokenChar(91);
      this.print(node2.property, node2);
      this.tokenChar(93);
    } else {
      this.tokenChar(46);
      this.print(node2.property, node2);
    }
  }
  function MetaProperty(node2) {
    this.print(node2.meta, node2);
    this.tokenChar(46);
    this.print(node2.property, node2);
  }
  function PrivateName(node2) {
    this.tokenChar(35);
    this.print(node2.id, node2);
  }
  function V8IntrinsicIdentifier(node2) {
    this.tokenChar(37);
    this.word(node2.name);
  }
  function ModuleExpression(node2) {
    this.word("module", true);
    this.space();
    this.tokenChar(123);
    this.indent();
    const {
      body
    } = node2;
    if (body.body.length || body.directives.length) {
      this.newline();
    }
    this.print(body, node2);
    this.dedent();
    this.rightBrace(node2);
  }
  return expressions;
}
var statements = {};
var hasRequiredStatements;
function requireStatements() {
  if (hasRequiredStatements) return statements;
  hasRequiredStatements = 1;
  Object.defineProperty(statements, "__esModule", {
    value: true
  });
  statements.BreakStatement = BreakStatement;
  statements.CatchClause = CatchClause;
  statements.ContinueStatement = ContinueStatement;
  statements.DebuggerStatement = DebuggerStatement;
  statements.DoWhileStatement = DoWhileStatement;
  statements.ForOfStatement = statements.ForInStatement = void 0;
  statements.ForStatement = ForStatement;
  statements.IfStatement = IfStatement;
  statements.LabeledStatement = LabeledStatement;
  statements.ReturnStatement = ReturnStatement;
  statements.SwitchCase = SwitchCase;
  statements.SwitchStatement = SwitchStatement;
  statements.ThrowStatement = ThrowStatement;
  statements.TryStatement = TryStatement;
  statements.VariableDeclaration = VariableDeclaration;
  statements.VariableDeclarator = VariableDeclarator;
  statements.WhileStatement = WhileStatement;
  statements.WithStatement = WithStatement;
  var _t = requireLib$O();
  const {
    isFor,
    isForStatement,
    isIfStatement,
    isStatement
  } = _t;
  function WithStatement(node2) {
    this.word("with");
    this.space();
    this.tokenChar(40);
    this.print(node2.object, node2);
    this.tokenChar(41);
    this.printBlock(node2);
  }
  function IfStatement(node2) {
    this.word("if");
    this.space();
    this.tokenChar(40);
    this.print(node2.test, node2);
    this.tokenChar(41);
    this.space();
    const needsBlock = node2.alternate && isIfStatement(getLastStatement(node2.consequent));
    if (needsBlock) {
      this.tokenChar(123);
      this.newline();
      this.indent();
    }
    this.printAndIndentOnComments(node2.consequent, node2);
    if (needsBlock) {
      this.dedent();
      this.newline();
      this.tokenChar(125);
    }
    if (node2.alternate) {
      if (this.endsWith(125)) this.space();
      this.word("else");
      this.space();
      this.printAndIndentOnComments(node2.alternate, node2);
    }
  }
  function getLastStatement(statement) {
    const {
      body
    } = statement;
    if (isStatement(body) === false) {
      return statement;
    }
    return getLastStatement(body);
  }
  function ForStatement(node2) {
    this.word("for");
    this.space();
    this.tokenChar(40);
    this.inForStatementInitCounter++;
    this.print(node2.init, node2);
    this.inForStatementInitCounter--;
    this.tokenChar(59);
    if (node2.test) {
      this.space();
      this.print(node2.test, node2);
    }
    this.tokenChar(59);
    if (node2.update) {
      this.space();
      this.print(node2.update, node2);
    }
    this.tokenChar(41);
    this.printBlock(node2);
  }
  function WhileStatement(node2) {
    this.word("while");
    this.space();
    this.tokenChar(40);
    this.print(node2.test, node2);
    this.tokenChar(41);
    this.printBlock(node2);
  }
  function ForXStatement(node2) {
    this.word("for");
    this.space();
    const isForOf = node2.type === "ForOfStatement";
    if (isForOf && node2.await) {
      this.word("await");
      this.space();
    }
    this.noIndentInnerCommentsHere();
    this.tokenChar(40);
    this.print(node2.left, node2);
    this.space();
    this.word(isForOf ? "of" : "in");
    this.space();
    this.print(node2.right, node2);
    this.tokenChar(41);
    this.printBlock(node2);
  }
  statements.ForInStatement = ForXStatement;
  statements.ForOfStatement = ForXStatement;
  function DoWhileStatement(node2) {
    this.word("do");
    this.space();
    this.print(node2.body, node2);
    this.space();
    this.word("while");
    this.space();
    this.tokenChar(40);
    this.print(node2.test, node2);
    this.tokenChar(41);
    this.semicolon();
  }
  function printStatementAfterKeyword(printer2, node2, parent, isLabel) {
    if (node2) {
      printer2.space();
      printer2.printTerminatorless(node2, parent, isLabel);
    }
    printer2.semicolon();
  }
  function BreakStatement(node2) {
    this.word("break");
    printStatementAfterKeyword(this, node2.label, node2, true);
  }
  function ContinueStatement(node2) {
    this.word("continue");
    printStatementAfterKeyword(this, node2.label, node2, true);
  }
  function ReturnStatement(node2) {
    this.word("return");
    printStatementAfterKeyword(this, node2.argument, node2, false);
  }
  function ThrowStatement(node2) {
    this.word("throw");
    printStatementAfterKeyword(this, node2.argument, node2, false);
  }
  function LabeledStatement(node2) {
    this.print(node2.label, node2);
    this.tokenChar(58);
    this.space();
    this.print(node2.body, node2);
  }
  function TryStatement(node2) {
    this.word("try");
    this.space();
    this.print(node2.block, node2);
    this.space();
    if (node2.handlers) {
      this.print(node2.handlers[0], node2);
    } else {
      this.print(node2.handler, node2);
    }
    if (node2.finalizer) {
      this.space();
      this.word("finally");
      this.space();
      this.print(node2.finalizer, node2);
    }
  }
  function CatchClause(node2) {
    this.word("catch");
    this.space();
    if (node2.param) {
      this.tokenChar(40);
      this.print(node2.param, node2);
      this.print(node2.param.typeAnnotation, node2);
      this.tokenChar(41);
      this.space();
    }
    this.print(node2.body, node2);
  }
  function SwitchStatement(node2) {
    this.word("switch");
    this.space();
    this.tokenChar(40);
    this.print(node2.discriminant, node2);
    this.tokenChar(41);
    this.space();
    this.tokenChar(123);
    this.printSequence(node2.cases, node2, {
      indent: true,
      addNewlines(leading, cas) {
        if (!leading && node2.cases[node2.cases.length - 1] === cas) return -1;
      }
    });
    this.rightBrace(node2);
  }
  function SwitchCase(node2) {
    if (node2.test) {
      this.word("case");
      this.space();
      this.print(node2.test, node2);
      this.tokenChar(58);
    } else {
      this.word("default");
      this.tokenChar(58);
    }
    if (node2.consequent.length) {
      this.newline();
      this.printSequence(node2.consequent, node2, {
        indent: true
      });
    }
  }
  function DebuggerStatement() {
    this.word("debugger");
    this.semicolon();
  }
  function VariableDeclaration(node2, parent) {
    if (node2.declare) {
      this.word("declare");
      this.space();
    }
    const {
      kind
    } = node2;
    this.word(kind, kind === "using" || kind === "await using");
    this.space();
    let hasInits = false;
    if (!isFor(parent)) {
      for (const declar of node2.declarations) {
        if (declar.init) {
          hasInits = true;
        }
      }
    }
    this.printList(node2.declarations, node2, {
      separator: hasInits ? function() {
        this.tokenChar(44);
        this.newline();
      } : void 0,
      indent: node2.declarations.length > 1 ? true : false
    });
    if (isFor(parent)) {
      if (isForStatement(parent)) {
        if (parent.init === node2) return;
      } else {
        if (parent.left === node2) return;
      }
    }
    this.semicolon();
  }
  function VariableDeclarator(node2) {
    this.print(node2.id, node2);
    if (node2.definite) this.tokenChar(33);
    this.print(node2.id.typeAnnotation, node2);
    if (node2.init) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.init, node2);
    }
  }
  return statements;
}
var classes = {};
var hasRequiredClasses;
function requireClasses() {
  if (hasRequiredClasses) return classes;
  hasRequiredClasses = 1;
  Object.defineProperty(classes, "__esModule", {
    value: true
  });
  classes.ClassAccessorProperty = ClassAccessorProperty;
  classes.ClassBody = ClassBody;
  classes.ClassExpression = classes.ClassDeclaration = ClassDeclaration;
  classes.ClassMethod = ClassMethod;
  classes.ClassPrivateMethod = ClassPrivateMethod;
  classes.ClassPrivateProperty = ClassPrivateProperty;
  classes.ClassProperty = ClassProperty;
  classes.StaticBlock = StaticBlock;
  classes._classMethodHead = _classMethodHead;
  var _t = requireLib$O();
  const {
    isExportDefaultDeclaration,
    isExportNamedDeclaration
  } = _t;
  function ClassDeclaration(node2, parent) {
    const inExport = isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent);
    if (!inExport || !this._shouldPrintDecoratorsBeforeExport(parent)) {
      this.printJoin(node2.decorators, node2);
    }
    if (node2.declare) {
      this.word("declare");
      this.space();
    }
    if (node2.abstract) {
      this.word("abstract");
      this.space();
    }
    this.word("class");
    if (node2.id) {
      this.space();
      this.print(node2.id, node2);
    }
    this.print(node2.typeParameters, node2);
    if (node2.superClass) {
      this.space();
      this.word("extends");
      this.space();
      this.print(node2.superClass, node2);
      this.print(node2.superTypeParameters, node2);
    }
    if (node2.implements) {
      this.space();
      this.word("implements");
      this.space();
      this.printList(node2.implements, node2);
    }
    this.space();
    this.print(node2.body, node2);
  }
  function ClassBody(node2) {
    this.tokenChar(123);
    if (node2.body.length === 0) {
      this.tokenChar(125);
    } else {
      this.newline();
      this.printSequence(node2.body, node2, {
        indent: true
      });
      if (!this.endsWith(10)) this.newline();
      this.rightBrace(node2);
    }
  }
  function ClassProperty(node2) {
    var _node$key$loc;
    this.printJoin(node2.decorators, node2);
    const endLine = (_node$key$loc = node2.key.loc) == null || (_node$key$loc = _node$key$loc.end) == null ? void 0 : _node$key$loc.line;
    if (endLine) this.catchUp(endLine);
    this.tsPrintClassMemberModifiers(node2);
    if (node2.computed) {
      this.tokenChar(91);
      this.print(node2.key, node2);
      this.tokenChar(93);
    } else {
      this._variance(node2);
      this.print(node2.key, node2);
    }
    if (node2.optional) {
      this.tokenChar(63);
    }
    if (node2.definite) {
      this.tokenChar(33);
    }
    this.print(node2.typeAnnotation, node2);
    if (node2.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.value, node2);
    }
    this.semicolon();
  }
  function ClassAccessorProperty(node2) {
    var _node$key$loc2;
    this.printJoin(node2.decorators, node2);
    const endLine = (_node$key$loc2 = node2.key.loc) == null || (_node$key$loc2 = _node$key$loc2.end) == null ? void 0 : _node$key$loc2.line;
    if (endLine) this.catchUp(endLine);
    this.tsPrintClassMemberModifiers(node2);
    this.word("accessor", true);
    this.space();
    if (node2.computed) {
      this.tokenChar(91);
      this.print(node2.key, node2);
      this.tokenChar(93);
    } else {
      this._variance(node2);
      this.print(node2.key, node2);
    }
    if (node2.optional) {
      this.tokenChar(63);
    }
    if (node2.definite) {
      this.tokenChar(33);
    }
    this.print(node2.typeAnnotation, node2);
    if (node2.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.value, node2);
    }
    this.semicolon();
  }
  function ClassPrivateProperty(node2) {
    this.printJoin(node2.decorators, node2);
    if (node2.static) {
      this.word("static");
      this.space();
    }
    this.print(node2.key, node2);
    this.print(node2.typeAnnotation, node2);
    if (node2.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.value, node2);
    }
    this.semicolon();
  }
  function ClassMethod(node2) {
    this._classMethodHead(node2);
    this.space();
    this.print(node2.body, node2);
  }
  function ClassPrivateMethod(node2) {
    this._classMethodHead(node2);
    this.space();
    this.print(node2.body, node2);
  }
  function _classMethodHead(node2) {
    var _node$key$loc3;
    this.printJoin(node2.decorators, node2);
    const endLine = (_node$key$loc3 = node2.key.loc) == null || (_node$key$loc3 = _node$key$loc3.end) == null ? void 0 : _node$key$loc3.line;
    if (endLine) this.catchUp(endLine);
    this.tsPrintClassMemberModifiers(node2);
    this._methodHead(node2);
  }
  function StaticBlock(node2) {
    this.word("static");
    this.space();
    this.tokenChar(123);
    if (node2.body.length === 0) {
      this.tokenChar(125);
    } else {
      this.newline();
      this.printSequence(node2.body, node2, {
        indent: true
      });
      this.rightBrace(node2);
    }
  }
  return classes;
}
var methods = {};
var hasRequiredMethods;
function requireMethods() {
  if (hasRequiredMethods) return methods;
  hasRequiredMethods = 1;
  Object.defineProperty(methods, "__esModule", {
    value: true
  });
  methods.ArrowFunctionExpression = ArrowFunctionExpression;
  methods.FunctionDeclaration = methods.FunctionExpression = FunctionExpression;
  methods._functionHead = _functionHead;
  methods._methodHead = _methodHead;
  methods._param = _param;
  methods._parameters = _parameters;
  methods._params = _params;
  methods._predicate = _predicate;
  var _t = requireLib$O();
  const {
    isIdentifier
  } = _t;
  function _params(node2, idNode, parentNode) {
    this.print(node2.typeParameters, node2);
    const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
    if (nameInfo) {
      this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
    }
    this.tokenChar(40);
    this._parameters(node2.params, node2);
    this.tokenChar(41);
    const noLineTerminator = node2.type === "ArrowFunctionExpression";
    this.print(node2.returnType, node2, noLineTerminator);
    this._noLineTerminator = noLineTerminator;
  }
  function _parameters(parameters, parent) {
    const paramLength = parameters.length;
    for (let i = 0; i < paramLength; i++) {
      this._param(parameters[i], parent);
      if (i < parameters.length - 1) {
        this.tokenChar(44);
        this.space();
      }
    }
  }
  function _param(parameter, parent) {
    this.printJoin(parameter.decorators, parameter);
    this.print(parameter, parent);
    if (parameter.optional) {
      this.tokenChar(63);
    }
    this.print(parameter.typeAnnotation, parameter);
  }
  function _methodHead(node2) {
    const kind = node2.kind;
    const key2 = node2.key;
    if (kind === "get" || kind === "set") {
      this.word(kind);
      this.space();
    }
    if (node2.async) {
      this.word("async", true);
      this.space();
    }
    if (kind === "method" || kind === "init") {
      if (node2.generator) {
        this.tokenChar(42);
      }
    }
    if (node2.computed) {
      this.tokenChar(91);
      this.print(key2, node2);
      this.tokenChar(93);
    } else {
      this.print(key2, node2);
    }
    if (node2.optional) {
      this.tokenChar(63);
    }
    this._params(node2, node2.computed && node2.key.type !== "StringLiteral" ? void 0 : node2.key, void 0);
  }
  function _predicate(node2, noLineTerminatorAfter) {
    if (node2.predicate) {
      if (!node2.returnType) {
        this.tokenChar(58);
      }
      this.space();
      this.print(node2.predicate, node2, noLineTerminatorAfter);
    }
  }
  function _functionHead(node2, parent) {
    if (node2.async) {
      this.word("async");
      this._endsWithInnerRaw = false;
      this.space();
    }
    this.word("function");
    if (node2.generator) {
      this._endsWithInnerRaw = false;
      this.tokenChar(42);
    }
    this.space();
    if (node2.id) {
      this.print(node2.id, node2);
    }
    this._params(node2, node2.id, parent);
    if (node2.type !== "TSDeclareFunction") {
      this._predicate(node2);
    }
  }
  function FunctionExpression(node2, parent) {
    this._functionHead(node2, parent);
    this.space();
    this.print(node2.body, node2);
  }
  function ArrowFunctionExpression(node2, parent) {
    if (node2.async) {
      this.word("async", true);
      this.space();
    }
    let firstParam;
    if (!this.format.retainLines && node2.params.length === 1 && isIdentifier(firstParam = node2.params[0]) && !hasTypesOrComments(node2, firstParam)) {
      this.print(firstParam, node2, true);
    } else {
      this._params(node2, void 0, parent);
    }
    this._predicate(node2, true);
    this.space();
    this.printInnerComments();
    this.token("=>");
    this.space();
    this.print(node2.body, node2);
  }
  function hasTypesOrComments(node2, param) {
    var _param$leadingComment, _param$trailingCommen;
    return !!(node2.typeParameters || node2.returnType || node2.predicate || param.typeAnnotation || param.optional || (_param$leadingComment = param.leadingComments) != null && _param$leadingComment.length || (_param$trailingCommen = param.trailingComments) != null && _param$trailingCommen.length);
  }
  function _getFuncIdName(idNode, parent) {
    let id = idNode;
    if (!id && parent) {
      const parentType = parent.type;
      if (parentType === "VariableDeclarator") {
        id = parent.id;
      } else if (parentType === "AssignmentExpression" || parentType === "AssignmentPattern") {
        id = parent.left;
      } else if (parentType === "ObjectProperty" || parentType === "ClassProperty") {
        if (!parent.computed || parent.key.type === "StringLiteral") {
          id = parent.key;
        }
      } else if (parentType === "ClassPrivateProperty" || parentType === "ClassAccessorProperty") {
        id = parent.key;
      }
    }
    if (!id) return;
    let nameInfo;
    if (id.type === "Identifier") {
      var _id$loc, _id$loc2;
      nameInfo = {
        pos: (_id$loc = id.loc) == null ? void 0 : _id$loc.start,
        name: ((_id$loc2 = id.loc) == null ? void 0 : _id$loc2.identifierName) || id.name
      };
    } else if (id.type === "PrivateName") {
      var _id$loc3;
      nameInfo = {
        pos: (_id$loc3 = id.loc) == null ? void 0 : _id$loc3.start,
        name: "#" + id.id.name
      };
    } else if (id.type === "StringLiteral") {
      var _id$loc4;
      nameInfo = {
        pos: (_id$loc4 = id.loc) == null ? void 0 : _id$loc4.start,
        name: id.value
      };
    }
    return nameInfo;
  }
  return methods;
}
var modules = {};
var hasRequiredModules;
function requireModules() {
  if (hasRequiredModules) return modules;
  hasRequiredModules = 1;
  Object.defineProperty(modules, "__esModule", {
    value: true
  });
  modules.ExportAllDeclaration = ExportAllDeclaration;
  modules.ExportDefaultDeclaration = ExportDefaultDeclaration;
  modules.ExportDefaultSpecifier = ExportDefaultSpecifier;
  modules.ExportNamedDeclaration = ExportNamedDeclaration;
  modules.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
  modules.ExportSpecifier = ExportSpecifier;
  modules.ImportAttribute = ImportAttribute;
  modules.ImportDeclaration = ImportDeclaration;
  modules.ImportDefaultSpecifier = ImportDefaultSpecifier;
  modules.ImportExpression = ImportExpression;
  modules.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
  modules.ImportSpecifier = ImportSpecifier;
  modules._printAttributes = _printAttributes;
  var _t = requireLib$O();
  const {
    isClassDeclaration,
    isExportDefaultSpecifier,
    isExportNamespaceSpecifier,
    isImportDefaultSpecifier,
    isImportNamespaceSpecifier,
    isStatement
  } = _t;
  function ImportSpecifier(node2) {
    if (node2.importKind === "type" || node2.importKind === "typeof") {
      this.word(node2.importKind);
      this.space();
    }
    this.print(node2.imported, node2);
    if (node2.local && node2.local.name !== node2.imported.name) {
      this.space();
      this.word("as");
      this.space();
      this.print(node2.local, node2);
    }
  }
  function ImportDefaultSpecifier(node2) {
    this.print(node2.local, node2);
  }
  function ExportDefaultSpecifier(node2) {
    this.print(node2.exported, node2);
  }
  function ExportSpecifier(node2) {
    if (node2.exportKind === "type") {
      this.word("type");
      this.space();
    }
    this.print(node2.local, node2);
    if (node2.exported && node2.local.name !== node2.exported.name) {
      this.space();
      this.word("as");
      this.space();
      this.print(node2.exported, node2);
    }
  }
  function ExportNamespaceSpecifier(node2) {
    this.tokenChar(42);
    this.space();
    this.word("as");
    this.space();
    this.print(node2.exported, node2);
  }
  let warningShown = false;
  function _printAttributes(node2) {
    const {
      importAttributesKeyword
    } = this.format;
    const {
      attributes,
      assertions: assertions2
    } = node2;
    if (attributes && !importAttributesKeyword && !warningShown) {
      warningShown = true;
      console.warn(`You are using import attributes, without specifying the desired output syntax.
Please specify the "importAttributesKeyword" generator option, whose value can be one of:
 - "with"        : \`import { a } from "b" with { type: "json" };\`
 - "assert"      : \`import { a } from "b" assert { type: "json" };\`
 - "with-legacy" : \`import { a } from "b" with type: "json";\`
`);
    }
    const useAssertKeyword = importAttributesKeyword === "assert" || !importAttributesKeyword && assertions2;
    this.word(useAssertKeyword ? "assert" : "with");
    this.space();
    if (!useAssertKeyword && importAttributesKeyword !== "with") {
      this.printList(attributes || assertions2, node2);
      return;
    }
    this.tokenChar(123);
    this.space();
    this.printList(attributes || assertions2, node2);
    this.space();
    this.tokenChar(125);
  }
  function ExportAllDeclaration(node2) {
    var _node$attributes, _node$assertions;
    this.word("export");
    this.space();
    if (node2.exportKind === "type") {
      this.word("type");
      this.space();
    }
    this.tokenChar(42);
    this.space();
    this.word("from");
    this.space();
    if ((_node$attributes = node2.attributes) != null && _node$attributes.length || (_node$assertions = node2.assertions) != null && _node$assertions.length) {
      this.print(node2.source, node2, true);
      this.space();
      this._printAttributes(node2);
    } else {
      this.print(node2.source, node2);
    }
    this.semicolon();
  }
  function maybePrintDecoratorsBeforeExport(printer2, node2) {
    if (isClassDeclaration(node2.declaration) && printer2._shouldPrintDecoratorsBeforeExport(node2)) {
      printer2.printJoin(node2.declaration.decorators, node2);
    }
  }
  function ExportNamedDeclaration(node2) {
    maybePrintDecoratorsBeforeExport(this, node2);
    this.word("export");
    this.space();
    if (node2.declaration) {
      const declar = node2.declaration;
      this.print(declar, node2);
      if (!isStatement(declar)) this.semicolon();
    } else {
      if (node2.exportKind === "type") {
        this.word("type");
        this.space();
      }
      const specifiers = node2.specifiers.slice(0);
      let hasSpecial = false;
      for (; ; ) {
        const first = specifiers[0];
        if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {
          hasSpecial = true;
          this.print(specifiers.shift(), node2);
          if (specifiers.length) {
            this.tokenChar(44);
            this.space();
          }
        } else {
          break;
        }
      }
      if (specifiers.length || !specifiers.length && !hasSpecial) {
        this.tokenChar(123);
        if (specifiers.length) {
          this.space();
          this.printList(specifiers, node2);
          this.space();
        }
        this.tokenChar(125);
      }
      if (node2.source) {
        var _node$attributes2, _node$assertions2;
        this.space();
        this.word("from");
        this.space();
        if ((_node$attributes2 = node2.attributes) != null && _node$attributes2.length || (_node$assertions2 = node2.assertions) != null && _node$assertions2.length) {
          this.print(node2.source, node2, true);
          this.space();
          this._printAttributes(node2);
        } else {
          this.print(node2.source, node2);
        }
      }
      this.semicolon();
    }
  }
  function ExportDefaultDeclaration(node2) {
    maybePrintDecoratorsBeforeExport(this, node2);
    this.word("export");
    this.noIndentInnerCommentsHere();
    this.space();
    this.word("default");
    this.space();
    const declar = node2.declaration;
    this.print(declar, node2);
    if (!isStatement(declar)) this.semicolon();
  }
  function ImportDeclaration(node2) {
    var _node$attributes3, _node$assertions3;
    this.word("import");
    this.space();
    const isTypeKind = node2.importKind === "type" || node2.importKind === "typeof";
    if (isTypeKind) {
      this.noIndentInnerCommentsHere();
      this.word(node2.importKind);
      this.space();
    } else if (node2.module) {
      this.noIndentInnerCommentsHere();
      this.word("module");
      this.space();
    } else if (node2.phase) {
      this.noIndentInnerCommentsHere();
      this.word(node2.phase);
      this.space();
    }
    const specifiers = node2.specifiers.slice(0);
    const hasSpecifiers = !!specifiers.length;
    while (hasSpecifiers) {
      const first = specifiers[0];
      if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {
        this.print(specifiers.shift(), node2);
        if (specifiers.length) {
          this.tokenChar(44);
          this.space();
        }
      } else {
        break;
      }
    }
    if (specifiers.length) {
      this.tokenChar(123);
      this.space();
      this.printList(specifiers, node2);
      this.space();
      this.tokenChar(125);
    } else if (isTypeKind && !hasSpecifiers) {
      this.tokenChar(123);
      this.tokenChar(125);
    }
    if (hasSpecifiers || isTypeKind) {
      this.space();
      this.word("from");
      this.space();
    }
    if ((_node$attributes3 = node2.attributes) != null && _node$attributes3.length || (_node$assertions3 = node2.assertions) != null && _node$assertions3.length) {
      this.print(node2.source, node2, true);
      this.space();
      this._printAttributes(node2);
    } else {
      this.print(node2.source, node2);
    }
    this.semicolon();
  }
  function ImportAttribute(node2) {
    this.print(node2.key);
    this.tokenChar(58);
    this.space();
    this.print(node2.value);
  }
  function ImportNamespaceSpecifier(node2) {
    this.tokenChar(42);
    this.space();
    this.word("as");
    this.space();
    this.print(node2.local, node2);
  }
  function ImportExpression(node2) {
    this.word("import");
    if (node2.phase) {
      this.tokenChar(46);
      this.word(node2.phase);
    }
    this.tokenChar(40);
    this.print(node2.source, node2);
    if (node2.options != null) {
      this.tokenChar(44);
      this.space();
      this.print(node2.options, node2);
    }
    this.tokenChar(41);
  }
  return modules;
}
var types$1 = {};
var jsesc_1;
var hasRequiredJsesc;
function requireJsesc() {
  if (hasRequiredJsesc) return jsesc_1;
  hasRequiredJsesc = 1;
  const object = {};
  const hasOwnProperty2 = object.hasOwnProperty;
  const forOwn = (object2, callback) => {
    for (const key2 in object2) {
      if (hasOwnProperty2.call(object2, key2)) {
        callback(key2, object2[key2]);
      }
    }
  };
  const extend = (destination, source2) => {
    if (!source2) {
      return destination;
    }
    forOwn(source2, (key2, value2) => {
      destination[key2] = value2;
    });
    return destination;
  };
  const forEach = (array2, callback) => {
    const length = array2.length;
    let index2 = -1;
    while (++index2 < length) {
      callback(array2[index2]);
    }
  };
  const toString2 = object.toString;
  const isArray2 = Array.isArray;
  const isBuffer = Buffer.isBuffer;
  const isObject2 = (value2) => {
    return toString2.call(value2) == "[object Object]";
  };
  const isString2 = (value2) => {
    return typeof value2 == "string" || toString2.call(value2) == "[object String]";
  };
  const isNumber2 = (value2) => {
    return typeof value2 == "number" || toString2.call(value2) == "[object Number]";
  };
  const isFunction = (value2) => {
    return typeof value2 == "function";
  };
  const isMap2 = (value2) => {
    return toString2.call(value2) == "[object Map]";
  };
  const isSet = (value2) => {
    return toString2.call(value2) == "[object Set]";
  };
  const singleEscapes = {
    '"': '\\"',
    "'": "\\'",
    "\\": "\\\\",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t"
    // `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
    // '\v': '\\x0B'
  };
  const regexSingleEscape = /["'\\\b\f\n\r\t]/;
  const regexDigit = /[0-9]/;
  const regexWhitelist = /[ !#-&\(-\[\]-_a-~]/;
  const jsesc = (argument, options2) => {
    const increaseIndentation = () => {
      oldIndent = indent;
      ++options2.indentLevel;
      indent = options2.indent.repeat(options2.indentLevel);
    };
    const defaults = {
      "escapeEverything": false,
      "minimal": false,
      "isScriptContext": false,
      "quotes": "single",
      "wrap": false,
      "es6": false,
      "json": false,
      "compact": true,
      "lowercaseHex": false,
      "numbers": "decimal",
      "indent": "	",
      "indentLevel": 0,
      "__inline1__": false,
      "__inline2__": false
    };
    const json = options2 && options2.json;
    if (json) {
      defaults.quotes = "double";
      defaults.wrap = true;
    }
    options2 = extend(defaults, options2);
    if (options2.quotes != "single" && options2.quotes != "double" && options2.quotes != "backtick") {
      options2.quotes = "single";
    }
    const quote = options2.quotes == "double" ? '"' : options2.quotes == "backtick" ? "`" : "'";
    const compact = options2.compact;
    const lowercaseHex = options2.lowercaseHex;
    let indent = options2.indent.repeat(options2.indentLevel);
    let oldIndent = "";
    const inline1 = options2.__inline1__;
    const inline2 = options2.__inline2__;
    const newLine = compact ? "" : "\n";
    let result;
    let isEmpty = true;
    const useBinNumbers = options2.numbers == "binary";
    const useOctNumbers = options2.numbers == "octal";
    const useDecNumbers = options2.numbers == "decimal";
    const useHexNumbers = options2.numbers == "hexadecimal";
    if (json && argument && isFunction(argument.toJSON)) {
      argument = argument.toJSON();
    }
    if (!isString2(argument)) {
      if (isMap2(argument)) {
        if (argument.size == 0) {
          return "new Map()";
        }
        if (!compact) {
          options2.__inline1__ = true;
          options2.__inline2__ = false;
        }
        return "new Map(" + jsesc(Array.from(argument), options2) + ")";
      }
      if (isSet(argument)) {
        if (argument.size == 0) {
          return "new Set()";
        }
        return "new Set(" + jsesc(Array.from(argument), options2) + ")";
      }
      if (isBuffer(argument)) {
        if (argument.length == 0) {
          return "Buffer.from([])";
        }
        return "Buffer.from(" + jsesc(Array.from(argument), options2) + ")";
      }
      if (isArray2(argument)) {
        result = [];
        options2.wrap = true;
        if (inline1) {
          options2.__inline1__ = false;
          options2.__inline2__ = true;
        }
        if (!inline2) {
          increaseIndentation();
        }
        forEach(argument, (value2) => {
          isEmpty = false;
          if (inline2) {
            options2.__inline2__ = false;
          }
          result.push(
            (compact || inline2 ? "" : indent) + jsesc(value2, options2)
          );
        });
        if (isEmpty) {
          return "[]";
        }
        if (inline2) {
          return "[" + result.join(", ") + "]";
        }
        return "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
      } else if (isNumber2(argument)) {
        if (json) {
          return JSON.stringify(argument);
        }
        if (useDecNumbers) {
          return String(argument);
        }
        if (useHexNumbers) {
          let hexadecimal = argument.toString(16);
          if (!lowercaseHex) {
            hexadecimal = hexadecimal.toUpperCase();
          }
          return "0x" + hexadecimal;
        }
        if (useBinNumbers) {
          return "0b" + argument.toString(2);
        }
        if (useOctNumbers) {
          return "0o" + argument.toString(8);
        }
      } else if (!isObject2(argument)) {
        if (json) {
          return JSON.stringify(argument) || "null";
        }
        return String(argument);
      } else {
        result = [];
        options2.wrap = true;
        increaseIndentation();
        forOwn(argument, (key2, value2) => {
          isEmpty = false;
          result.push(
            (compact ? "" : indent) + jsesc(key2, options2) + ":" + (compact ? "" : " ") + jsesc(value2, options2)
          );
        });
        if (isEmpty) {
          return "{}";
        }
        return "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}";
      }
    }
    const string2 = argument;
    let index2 = -1;
    const length = string2.length;
    result = "";
    while (++index2 < length) {
      const character = string2.charAt(index2);
      if (options2.es6) {
        const first = string2.charCodeAt(index2);
        if (
          // check if it’s the start of a surrogate pair
          first >= 55296 && first <= 56319 && // high surrogate
          length > index2 + 1
        ) {
          const second = string2.charCodeAt(index2 + 1);
          if (second >= 56320 && second <= 57343) {
            const codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
            let hexadecimal2 = codePoint.toString(16);
            if (!lowercaseHex) {
              hexadecimal2 = hexadecimal2.toUpperCase();
            }
            result += "\\u{" + hexadecimal2 + "}";
            ++index2;
            continue;
          }
        }
      }
      if (!options2.escapeEverything) {
        if (regexWhitelist.test(character)) {
          result += character;
          continue;
        }
        if (character == '"') {
          result += quote == character ? '\\"' : character;
          continue;
        }
        if (character == "`") {
          result += quote == character ? "\\`" : character;
          continue;
        }
        if (character == "'") {
          result += quote == character ? "\\'" : character;
          continue;
        }
      }
      if (character == "\0" && !json && !regexDigit.test(string2.charAt(index2 + 1))) {
        result += "\\0";
        continue;
      }
      if (regexSingleEscape.test(character)) {
        result += singleEscapes[character];
        continue;
      }
      const charCode = character.charCodeAt(0);
      if (options2.minimal && charCode != 8232 && charCode != 8233) {
        result += character;
        continue;
      }
      let hexadecimal = charCode.toString(16);
      if (!lowercaseHex) {
        hexadecimal = hexadecimal.toUpperCase();
      }
      const longhand = hexadecimal.length > 2 || json;
      const escaped = "\\" + (longhand ? "u" : "x") + ("0000" + hexadecimal).slice(longhand ? -4 : -2);
      result += escaped;
      continue;
    }
    if (options2.wrap) {
      result = quote + result + quote;
    }
    if (quote == "`") {
      result = result.replace(/\$\{/g, "\\${");
    }
    if (options2.isScriptContext) {
      return result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
    }
    return result;
  };
  jsesc.version = "2.5.2";
  jsesc_1 = jsesc;
  return jsesc_1;
}
var hasRequiredTypes$1;
function requireTypes$1() {
  if (hasRequiredTypes$1) return types$1;
  hasRequiredTypes$1 = 1;
  Object.defineProperty(types$1, "__esModule", {
    value: true
  });
  types$1.ArgumentPlaceholder = ArgumentPlaceholder;
  types$1.ArrayPattern = types$1.ArrayExpression = ArrayExpression;
  types$1.BigIntLiteral = BigIntLiteral;
  types$1.BooleanLiteral = BooleanLiteral;
  types$1.DecimalLiteral = DecimalLiteral;
  types$1.Identifier = Identifier;
  types$1.NullLiteral = NullLiteral;
  types$1.NumericLiteral = NumericLiteral;
  types$1.ObjectPattern = types$1.ObjectExpression = ObjectExpression;
  types$1.ObjectMethod = ObjectMethod;
  types$1.ObjectProperty = ObjectProperty;
  types$1.PipelineBareFunction = PipelineBareFunction;
  types$1.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;
  types$1.PipelineTopicExpression = PipelineTopicExpression;
  types$1.RecordExpression = RecordExpression;
  types$1.RegExpLiteral = RegExpLiteral;
  types$1.SpreadElement = types$1.RestElement = RestElement;
  types$1.StringLiteral = StringLiteral;
  types$1.TopicReference = TopicReference;
  types$1.TupleExpression = TupleExpression;
  var _t = requireLib$O();
  var _jsesc = requireJsesc();
  const {
    isAssignmentPattern,
    isIdentifier
  } = _t;
  function Identifier(node2) {
    var _node$loc;
    this.sourceIdentifierName(((_node$loc = node2.loc) == null ? void 0 : _node$loc.identifierName) || node2.name);
    this.word(node2.name);
  }
  function ArgumentPlaceholder() {
    this.tokenChar(63);
  }
  function RestElement(node2) {
    this.token("...");
    this.print(node2.argument, node2);
  }
  function ObjectExpression(node2) {
    const props = node2.properties;
    this.tokenChar(123);
    if (props.length) {
      this.space();
      this.printList(props, node2, {
        indent: true,
        statement: true
      });
      this.space();
    }
    this.sourceWithOffset("end", node2.loc, -1);
    this.tokenChar(125);
  }
  function ObjectMethod(node2) {
    this.printJoin(node2.decorators, node2);
    this._methodHead(node2);
    this.space();
    this.print(node2.body, node2);
  }
  function ObjectProperty(node2) {
    this.printJoin(node2.decorators, node2);
    if (node2.computed) {
      this.tokenChar(91);
      this.print(node2.key, node2);
      this.tokenChar(93);
    } else {
      if (isAssignmentPattern(node2.value) && isIdentifier(node2.key) && node2.key.name === node2.value.left.name) {
        this.print(node2.value, node2);
        return;
      }
      this.print(node2.key, node2);
      if (node2.shorthand && isIdentifier(node2.key) && isIdentifier(node2.value) && node2.key.name === node2.value.name) {
        return;
      }
    }
    this.tokenChar(58);
    this.space();
    this.print(node2.value, node2);
  }
  function ArrayExpression(node2) {
    const elems = node2.elements;
    const len = elems.length;
    this.tokenChar(91);
    for (let i = 0; i < elems.length; i++) {
      const elem = elems[i];
      if (elem) {
        if (i > 0) this.space();
        this.print(elem, node2);
        if (i < len - 1) this.tokenChar(44);
      } else {
        this.tokenChar(44);
      }
    }
    this.tokenChar(93);
  }
  function RecordExpression(node2) {
    const props = node2.properties;
    let startToken;
    let endToken;
    if (this.format.recordAndTupleSyntaxType === "bar") {
      startToken = "{|";
      endToken = "|}";
    } else if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null) {
      throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
    } else {
      startToken = "#{";
      endToken = "}";
    }
    this.token(startToken);
    if (props.length) {
      this.space();
      this.printList(props, node2, {
        indent: true,
        statement: true
      });
      this.space();
    }
    this.token(endToken);
  }
  function TupleExpression(node2) {
    const elems = node2.elements;
    const len = elems.length;
    let startToken;
    let endToken;
    if (this.format.recordAndTupleSyntaxType === "bar") {
      startToken = "[|";
      endToken = "|]";
    } else if (this.format.recordAndTupleSyntaxType === "hash") {
      startToken = "#[";
      endToken = "]";
    } else {
      throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
    }
    this.token(startToken);
    for (let i = 0; i < elems.length; i++) {
      const elem = elems[i];
      if (elem) {
        if (i > 0) this.space();
        this.print(elem, node2);
        if (i < len - 1) this.tokenChar(44);
      }
    }
    this.token(endToken);
  }
  function RegExpLiteral(node2) {
    this.word(`/${node2.pattern}/${node2.flags}`);
  }
  function BooleanLiteral(node2) {
    this.word(node2.value ? "true" : "false");
  }
  function NullLiteral() {
    this.word("null");
  }
  function NumericLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    const opts = this.format.jsescOption;
    const value2 = node2.value;
    const str = value2 + "";
    if (opts.numbers) {
      this.number(_jsesc(value2, opts), value2);
    } else if (raw == null) {
      this.number(str, value2);
    } else if (this.format.minified) {
      this.number(raw.length < str.length ? raw : str, value2);
    } else {
      this.number(raw, value2);
    }
  }
  function StringLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    if (!this.format.minified && raw !== void 0) {
      this.token(raw);
      return;
    }
    const val = _jsesc(node2.value, this.format.jsescOption);
    this.token(val);
  }
  function BigIntLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    if (!this.format.minified && raw !== void 0) {
      this.word(raw);
      return;
    }
    this.word(node2.value + "n");
  }
  function DecimalLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    if (!this.format.minified && raw !== void 0) {
      this.word(raw);
      return;
    }
    this.word(node2.value + "m");
  }
  const validTopicTokenSet = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
  function TopicReference() {
    const {
      topicToken
    } = this.format;
    if (validTopicTokenSet.has(topicToken)) {
      this.token(topicToken);
    } else {
      const givenTopicTokenJSON = JSON.stringify(topicToken);
      const validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
      throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
    }
  }
  function PipelineTopicExpression(node2) {
    this.print(node2.expression, node2);
  }
  function PipelineBareFunction(node2) {
    this.print(node2.callee, node2);
  }
  function PipelinePrimaryTopicReference() {
    this.tokenChar(35);
  }
  return types$1;
}
var flow = {};
var hasRequiredFlow;
function requireFlow() {
  if (hasRequiredFlow) return flow;
  hasRequiredFlow = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AnyTypeAnnotation = AnyTypeAnnotation;
    exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
    exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
    exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
    exports.DeclareClass = DeclareClass;
    exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
    exports.DeclareExportDeclaration = DeclareExportDeclaration;
    exports.DeclareFunction = DeclareFunction;
    exports.DeclareInterface = DeclareInterface;
    exports.DeclareModule = DeclareModule;
    exports.DeclareModuleExports = DeclareModuleExports;
    exports.DeclareOpaqueType = DeclareOpaqueType;
    exports.DeclareTypeAlias = DeclareTypeAlias;
    exports.DeclareVariable = DeclareVariable;
    exports.DeclaredPredicate = DeclaredPredicate;
    exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
    exports.EnumBooleanBody = EnumBooleanBody;
    exports.EnumBooleanMember = EnumBooleanMember;
    exports.EnumDeclaration = EnumDeclaration;
    exports.EnumDefaultedMember = EnumDefaultedMember;
    exports.EnumNumberBody = EnumNumberBody;
    exports.EnumNumberMember = EnumNumberMember;
    exports.EnumStringBody = EnumStringBody;
    exports.EnumStringMember = EnumStringMember;
    exports.EnumSymbolBody = EnumSymbolBody;
    exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
    exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
    exports.FunctionTypeParam = FunctionTypeParam;
    exports.IndexedAccessType = IndexedAccessType;
    exports.InferredPredicate = InferredPredicate;
    exports.InterfaceDeclaration = InterfaceDeclaration;
    exports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;
    exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
    exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
    exports.MixedTypeAnnotation = MixedTypeAnnotation;
    exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
    exports.NullableTypeAnnotation = NullableTypeAnnotation;
    Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _types2.NumericLiteral;
      }
    });
    exports.NumberTypeAnnotation = NumberTypeAnnotation;
    exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
    exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
    exports.ObjectTypeIndexer = ObjectTypeIndexer;
    exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
    exports.ObjectTypeProperty = ObjectTypeProperty;
    exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
    exports.OpaqueType = OpaqueType;
    exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
    exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
    Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _types2.StringLiteral;
      }
    });
    exports.StringTypeAnnotation = StringTypeAnnotation;
    exports.SymbolTypeAnnotation = SymbolTypeAnnotation;
    exports.ThisTypeAnnotation = ThisTypeAnnotation;
    exports.TupleTypeAnnotation = TupleTypeAnnotation;
    exports.TypeAlias = TypeAlias;
    exports.TypeAnnotation = TypeAnnotation;
    exports.TypeCastExpression = TypeCastExpression;
    exports.TypeParameter = TypeParameter;
    exports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;
    exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
    exports.UnionTypeAnnotation = UnionTypeAnnotation;
    exports.Variance = Variance;
    exports.VoidTypeAnnotation = VoidTypeAnnotation;
    exports._interfaceish = _interfaceish;
    exports._variance = _variance;
    var _t = requireLib$O();
    var _modules = requireModules();
    var _types2 = requireTypes$1();
    const {
      isDeclareExportDeclaration,
      isStatement
    } = _t;
    function AnyTypeAnnotation() {
      this.word("any");
    }
    function ArrayTypeAnnotation(node2) {
      this.print(node2.elementType, node2, true);
      this.tokenChar(91);
      this.tokenChar(93);
    }
    function BooleanTypeAnnotation() {
      this.word("boolean");
    }
    function BooleanLiteralTypeAnnotation(node2) {
      this.word(node2.value ? "true" : "false");
    }
    function NullLiteralTypeAnnotation() {
      this.word("null");
    }
    function DeclareClass(node2, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word("declare");
        this.space();
      }
      this.word("class");
      this.space();
      this._interfaceish(node2);
    }
    function DeclareFunction(node2, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word("declare");
        this.space();
      }
      this.word("function");
      this.space();
      this.print(node2.id, node2);
      this.print(node2.id.typeAnnotation.typeAnnotation, node2);
      if (node2.predicate) {
        this.space();
        this.print(node2.predicate, node2);
      }
      this.semicolon();
    }
    function InferredPredicate() {
      this.tokenChar(37);
      this.word("checks");
    }
    function DeclaredPredicate(node2) {
      this.tokenChar(37);
      this.word("checks");
      this.tokenChar(40);
      this.print(node2.value, node2);
      this.tokenChar(41);
    }
    function DeclareInterface(node2) {
      this.word("declare");
      this.space();
      this.InterfaceDeclaration(node2);
    }
    function DeclareModule(node2) {
      this.word("declare");
      this.space();
      this.word("module");
      this.space();
      this.print(node2.id, node2);
      this.space();
      this.print(node2.body, node2);
    }
    function DeclareModuleExports(node2) {
      this.word("declare");
      this.space();
      this.word("module");
      this.tokenChar(46);
      this.word("exports");
      this.print(node2.typeAnnotation, node2);
    }
    function DeclareTypeAlias(node2) {
      this.word("declare");
      this.space();
      this.TypeAlias(node2);
    }
    function DeclareOpaqueType(node2, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word("declare");
        this.space();
      }
      this.OpaqueType(node2);
    }
    function DeclareVariable(node2, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word("declare");
        this.space();
      }
      this.word("var");
      this.space();
      this.print(node2.id, node2);
      this.print(node2.id.typeAnnotation, node2);
      this.semicolon();
    }
    function DeclareExportDeclaration(node2) {
      this.word("declare");
      this.space();
      this.word("export");
      this.space();
      if (node2.default) {
        this.word("default");
        this.space();
      }
      FlowExportDeclaration.call(this, node2);
    }
    function DeclareExportAllDeclaration(node2) {
      this.word("declare");
      this.space();
      _modules.ExportAllDeclaration.call(this, node2);
    }
    function EnumDeclaration(node2) {
      const {
        id,
        body
      } = node2;
      this.word("enum");
      this.space();
      this.print(id, node2);
      this.print(body, node2);
    }
    function enumExplicitType(context2, name, hasExplicitType) {
      if (hasExplicitType) {
        context2.space();
        context2.word("of");
        context2.space();
        context2.word(name);
      }
      context2.space();
    }
    function enumBody(context2, node2) {
      const {
        members
      } = node2;
      context2.token("{");
      context2.indent();
      context2.newline();
      for (const member of members) {
        context2.print(member, node2);
        context2.newline();
      }
      if (node2.hasUnknownMembers) {
        context2.token("...");
        context2.newline();
      }
      context2.dedent();
      context2.token("}");
    }
    function EnumBooleanBody(node2) {
      const {
        explicitType
      } = node2;
      enumExplicitType(this, "boolean", explicitType);
      enumBody(this, node2);
    }
    function EnumNumberBody(node2) {
      const {
        explicitType
      } = node2;
      enumExplicitType(this, "number", explicitType);
      enumBody(this, node2);
    }
    function EnumStringBody(node2) {
      const {
        explicitType
      } = node2;
      enumExplicitType(this, "string", explicitType);
      enumBody(this, node2);
    }
    function EnumSymbolBody(node2) {
      enumExplicitType(this, "symbol", true);
      enumBody(this, node2);
    }
    function EnumDefaultedMember(node2) {
      const {
        id
      } = node2;
      this.print(id, node2);
      this.tokenChar(44);
    }
    function enumInitializedMember(context2, node2) {
      const {
        id,
        init
      } = node2;
      context2.print(id, node2);
      context2.space();
      context2.token("=");
      context2.space();
      context2.print(init, node2);
      context2.token(",");
    }
    function EnumBooleanMember(node2) {
      enumInitializedMember(this, node2);
    }
    function EnumNumberMember(node2) {
      enumInitializedMember(this, node2);
    }
    function EnumStringMember(node2) {
      enumInitializedMember(this, node2);
    }
    function FlowExportDeclaration(node2) {
      if (node2.declaration) {
        const declar = node2.declaration;
        this.print(declar, node2);
        if (!isStatement(declar)) this.semicolon();
      } else {
        this.tokenChar(123);
        if (node2.specifiers.length) {
          this.space();
          this.printList(node2.specifiers, node2);
          this.space();
        }
        this.tokenChar(125);
        if (node2.source) {
          this.space();
          this.word("from");
          this.space();
          this.print(node2.source, node2);
        }
        this.semicolon();
      }
    }
    function ExistsTypeAnnotation() {
      this.tokenChar(42);
    }
    function FunctionTypeAnnotation(node2, parent) {
      this.print(node2.typeParameters, node2);
      this.tokenChar(40);
      if (node2.this) {
        this.word("this");
        this.tokenChar(58);
        this.space();
        this.print(node2.this.typeAnnotation, node2);
        if (node2.params.length || node2.rest) {
          this.tokenChar(44);
          this.space();
        }
      }
      this.printList(node2.params, node2);
      if (node2.rest) {
        if (node2.params.length) {
          this.tokenChar(44);
          this.space();
        }
        this.token("...");
        this.print(node2.rest, node2);
      }
      this.tokenChar(41);
      const type = parent == null ? void 0 : parent.type;
      if (type != null && (type === "ObjectTypeCallProperty" || type === "ObjectTypeInternalSlot" || type === "DeclareFunction" || type === "ObjectTypeProperty" && parent.method)) {
        this.tokenChar(58);
      } else {
        this.space();
        this.token("=>");
      }
      this.space();
      this.print(node2.returnType, node2);
    }
    function FunctionTypeParam(node2) {
      this.print(node2.name, node2);
      if (node2.optional) this.tokenChar(63);
      if (node2.name) {
        this.tokenChar(58);
        this.space();
      }
      this.print(node2.typeAnnotation, node2);
    }
    function InterfaceExtends(node2) {
      this.print(node2.id, node2);
      this.print(node2.typeParameters, node2, true);
    }
    function _interfaceish(node2) {
      var _node$extends;
      this.print(node2.id, node2);
      this.print(node2.typeParameters, node2);
      if ((_node$extends = node2.extends) != null && _node$extends.length) {
        this.space();
        this.word("extends");
        this.space();
        this.printList(node2.extends, node2);
      }
      if (node2.type === "DeclareClass") {
        var _node$mixins, _node$implements;
        if ((_node$mixins = node2.mixins) != null && _node$mixins.length) {
          this.space();
          this.word("mixins");
          this.space();
          this.printList(node2.mixins, node2);
        }
        if ((_node$implements = node2.implements) != null && _node$implements.length) {
          this.space();
          this.word("implements");
          this.space();
          this.printList(node2.implements, node2);
        }
      }
      this.space();
      this.print(node2.body, node2);
    }
    function _variance(node2) {
      var _node$variance;
      const kind = (_node$variance = node2.variance) == null ? void 0 : _node$variance.kind;
      if (kind != null) {
        if (kind === "plus") {
          this.tokenChar(43);
        } else if (kind === "minus") {
          this.tokenChar(45);
        }
      }
    }
    function InterfaceDeclaration(node2) {
      this.word("interface");
      this.space();
      this._interfaceish(node2);
    }
    function andSeparator() {
      this.space();
      this.tokenChar(38);
      this.space();
    }
    function InterfaceTypeAnnotation(node2) {
      var _node$extends2;
      this.word("interface");
      if ((_node$extends2 = node2.extends) != null && _node$extends2.length) {
        this.space();
        this.word("extends");
        this.space();
        this.printList(node2.extends, node2);
      }
      this.space();
      this.print(node2.body, node2);
    }
    function IntersectionTypeAnnotation(node2) {
      this.printJoin(node2.types, node2, {
        separator: andSeparator
      });
    }
    function MixedTypeAnnotation() {
      this.word("mixed");
    }
    function EmptyTypeAnnotation() {
      this.word("empty");
    }
    function NullableTypeAnnotation(node2) {
      this.tokenChar(63);
      this.print(node2.typeAnnotation, node2);
    }
    function NumberTypeAnnotation() {
      this.word("number");
    }
    function StringTypeAnnotation() {
      this.word("string");
    }
    function ThisTypeAnnotation() {
      this.word("this");
    }
    function TupleTypeAnnotation(node2) {
      this.tokenChar(91);
      this.printList(node2.types, node2);
      this.tokenChar(93);
    }
    function TypeofTypeAnnotation(node2) {
      this.word("typeof");
      this.space();
      this.print(node2.argument, node2);
    }
    function TypeAlias(node2) {
      this.word("type");
      this.space();
      this.print(node2.id, node2);
      this.print(node2.typeParameters, node2);
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.right, node2);
      this.semicolon();
    }
    function TypeAnnotation(node2) {
      this.tokenChar(58);
      this.space();
      if (node2.optional) this.tokenChar(63);
      this.print(node2.typeAnnotation, node2);
    }
    function TypeParameterInstantiation(node2) {
      this.tokenChar(60);
      this.printList(node2.params, node2, {});
      this.tokenChar(62);
    }
    function TypeParameter(node2) {
      this._variance(node2);
      this.word(node2.name);
      if (node2.bound) {
        this.print(node2.bound, node2);
      }
      if (node2.default) {
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(node2.default, node2);
      }
    }
    function OpaqueType(node2) {
      this.word("opaque");
      this.space();
      this.word("type");
      this.space();
      this.print(node2.id, node2);
      this.print(node2.typeParameters, node2);
      if (node2.supertype) {
        this.tokenChar(58);
        this.space();
        this.print(node2.supertype, node2);
      }
      if (node2.impltype) {
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(node2.impltype, node2);
      }
      this.semicolon();
    }
    function ObjectTypeAnnotation(node2) {
      if (node2.exact) {
        this.token("{|");
      } else {
        this.tokenChar(123);
      }
      const props = [...node2.properties, ...node2.callProperties || [], ...node2.indexers || [], ...node2.internalSlots || []];
      if (props.length) {
        this.newline();
        this.space();
        this.printJoin(props, node2, {
          addNewlines(leading) {
            if (leading && !props[0]) return 1;
          },
          indent: true,
          statement: true,
          iterator: () => {
            if (props.length !== 1 || node2.inexact) {
              this.tokenChar(44);
              this.space();
            }
          }
        });
        this.space();
      }
      if (node2.inexact) {
        this.indent();
        this.token("...");
        if (props.length) {
          this.newline();
        }
        this.dedent();
      }
      if (node2.exact) {
        this.token("|}");
      } else {
        this.tokenChar(125);
      }
    }
    function ObjectTypeInternalSlot(node2) {
      if (node2.static) {
        this.word("static");
        this.space();
      }
      this.tokenChar(91);
      this.tokenChar(91);
      this.print(node2.id, node2);
      this.tokenChar(93);
      this.tokenChar(93);
      if (node2.optional) this.tokenChar(63);
      if (!node2.method) {
        this.tokenChar(58);
        this.space();
      }
      this.print(node2.value, node2);
    }
    function ObjectTypeCallProperty(node2) {
      if (node2.static) {
        this.word("static");
        this.space();
      }
      this.print(node2.value, node2);
    }
    function ObjectTypeIndexer(node2) {
      if (node2.static) {
        this.word("static");
        this.space();
      }
      this._variance(node2);
      this.tokenChar(91);
      if (node2.id) {
        this.print(node2.id, node2);
        this.tokenChar(58);
        this.space();
      }
      this.print(node2.key, node2);
      this.tokenChar(93);
      this.tokenChar(58);
      this.space();
      this.print(node2.value, node2);
    }
    function ObjectTypeProperty(node2) {
      if (node2.proto) {
        this.word("proto");
        this.space();
      }
      if (node2.static) {
        this.word("static");
        this.space();
      }
      if (node2.kind === "get" || node2.kind === "set") {
        this.word(node2.kind);
        this.space();
      }
      this._variance(node2);
      this.print(node2.key, node2);
      if (node2.optional) this.tokenChar(63);
      if (!node2.method) {
        this.tokenChar(58);
        this.space();
      }
      this.print(node2.value, node2);
    }
    function ObjectTypeSpreadProperty(node2) {
      this.token("...");
      this.print(node2.argument, node2);
    }
    function QualifiedTypeIdentifier(node2) {
      this.print(node2.qualification, node2);
      this.tokenChar(46);
      this.print(node2.id, node2);
    }
    function SymbolTypeAnnotation() {
      this.word("symbol");
    }
    function orSeparator() {
      this.space();
      this.tokenChar(124);
      this.space();
    }
    function UnionTypeAnnotation(node2) {
      this.printJoin(node2.types, node2, {
        separator: orSeparator
      });
    }
    function TypeCastExpression(node2) {
      this.tokenChar(40);
      this.print(node2.expression, node2);
      this.print(node2.typeAnnotation, node2);
      this.tokenChar(41);
    }
    function Variance(node2) {
      if (node2.kind === "plus") {
        this.tokenChar(43);
      } else {
        this.tokenChar(45);
      }
    }
    function VoidTypeAnnotation() {
      this.word("void");
    }
    function IndexedAccessType(node2) {
      this.print(node2.objectType, node2, true);
      this.tokenChar(91);
      this.print(node2.indexType, node2);
      this.tokenChar(93);
    }
    function OptionalIndexedAccessType(node2) {
      this.print(node2.objectType, node2);
      if (node2.optional) {
        this.token("?.");
      }
      this.tokenChar(91);
      this.print(node2.indexType, node2);
      this.tokenChar(93);
    }
  })(flow);
  return flow;
}
var base = {};
var hasRequiredBase;
function requireBase() {
  if (hasRequiredBase) return base;
  hasRequiredBase = 1;
  Object.defineProperty(base, "__esModule", {
    value: true
  });
  base.BlockStatement = BlockStatement;
  base.Directive = Directive;
  base.DirectiveLiteral = DirectiveLiteral;
  base.File = File;
  base.InterpreterDirective = InterpreterDirective;
  base.Placeholder = Placeholder;
  base.Program = Program;
  function File(node2) {
    if (node2.program) {
      this.print(node2.program.interpreter, node2);
    }
    this.print(node2.program, node2);
  }
  function Program(node2) {
    var _node$directives;
    this.noIndentInnerCommentsHere();
    this.printInnerComments();
    const directivesLen = (_node$directives = node2.directives) == null ? void 0 : _node$directives.length;
    if (directivesLen) {
      var _node$directives$trai;
      const newline = node2.body.length ? 2 : 1;
      this.printSequence(node2.directives, node2, {
        trailingCommentsLineOffset: newline
      });
      if (!((_node$directives$trai = node2.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai.length)) {
        this.newline(newline);
      }
    }
    this.printSequence(node2.body, node2);
  }
  function BlockStatement(node2) {
    var _node$directives2;
    this.tokenChar(123);
    const directivesLen = (_node$directives2 = node2.directives) == null ? void 0 : _node$directives2.length;
    if (directivesLen) {
      var _node$directives$trai2;
      const newline = node2.body.length ? 2 : 1;
      this.printSequence(node2.directives, node2, {
        indent: true,
        trailingCommentsLineOffset: newline
      });
      if (!((_node$directives$trai2 = node2.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai2.length)) {
        this.newline(newline);
      }
    }
    this.printSequence(node2.body, node2, {
      indent: true
    });
    this.rightBrace(node2);
  }
  function Directive(node2) {
    this.print(node2.value, node2);
    this.semicolon();
  }
  const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/;
  const unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
  function DirectiveLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    if (!this.format.minified && raw !== void 0) {
      this.token(raw);
      return;
    }
    const {
      value: value2
    } = node2;
    if (!unescapedDoubleQuoteRE.test(value2)) {
      this.token(`"${value2}"`);
    } else if (!unescapedSingleQuoteRE.test(value2)) {
      this.token(`'${value2}'`);
    } else {
      throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
    }
  }
  function InterpreterDirective(node2) {
    this.token(`#!${node2.value}`);
    this.newline(1, true);
  }
  function Placeholder(node2) {
    this.token("%%");
    this.print(node2.name);
    this.token("%%");
    if (node2.expectedNode === "Statement") {
      this.semicolon();
    }
  }
  return base;
}
var jsx = {};
var hasRequiredJsx;
function requireJsx() {
  if (hasRequiredJsx) return jsx;
  hasRequiredJsx = 1;
  Object.defineProperty(jsx, "__esModule", {
    value: true
  });
  jsx.JSXAttribute = JSXAttribute;
  jsx.JSXClosingElement = JSXClosingElement;
  jsx.JSXClosingFragment = JSXClosingFragment;
  jsx.JSXElement = JSXElement;
  jsx.JSXEmptyExpression = JSXEmptyExpression;
  jsx.JSXExpressionContainer = JSXExpressionContainer;
  jsx.JSXFragment = JSXFragment;
  jsx.JSXIdentifier = JSXIdentifier;
  jsx.JSXMemberExpression = JSXMemberExpression;
  jsx.JSXNamespacedName = JSXNamespacedName;
  jsx.JSXOpeningElement = JSXOpeningElement;
  jsx.JSXOpeningFragment = JSXOpeningFragment;
  jsx.JSXSpreadAttribute = JSXSpreadAttribute;
  jsx.JSXSpreadChild = JSXSpreadChild;
  jsx.JSXText = JSXText;
  function JSXAttribute(node2) {
    this.print(node2.name, node2);
    if (node2.value) {
      this.tokenChar(61);
      this.print(node2.value, node2);
    }
  }
  function JSXIdentifier(node2) {
    this.word(node2.name);
  }
  function JSXNamespacedName(node2) {
    this.print(node2.namespace, node2);
    this.tokenChar(58);
    this.print(node2.name, node2);
  }
  function JSXMemberExpression(node2) {
    this.print(node2.object, node2);
    this.tokenChar(46);
    this.print(node2.property, node2);
  }
  function JSXSpreadAttribute(node2) {
    this.tokenChar(123);
    this.token("...");
    this.print(node2.argument, node2);
    this.tokenChar(125);
  }
  function JSXExpressionContainer(node2) {
    this.tokenChar(123);
    this.print(node2.expression, node2);
    this.tokenChar(125);
  }
  function JSXSpreadChild(node2) {
    this.tokenChar(123);
    this.token("...");
    this.print(node2.expression, node2);
    this.tokenChar(125);
  }
  function JSXText(node2) {
    const raw = this.getPossibleRaw(node2);
    if (raw !== void 0) {
      this.token(raw, true);
    } else {
      this.token(node2.value, true);
    }
  }
  function JSXElement(node2) {
    const open = node2.openingElement;
    this.print(open, node2);
    if (open.selfClosing) return;
    this.indent();
    for (const child of node2.children) {
      this.print(child, node2);
    }
    this.dedent();
    this.print(node2.closingElement, node2);
  }
  function spaceSeparator() {
    this.space();
  }
  function JSXOpeningElement(node2) {
    this.tokenChar(60);
    this.print(node2.name, node2);
    this.print(node2.typeParameters, node2);
    if (node2.attributes.length > 0) {
      this.space();
      this.printJoin(node2.attributes, node2, {
        separator: spaceSeparator
      });
    }
    if (node2.selfClosing) {
      this.space();
      this.token("/>");
    } else {
      this.tokenChar(62);
    }
  }
  function JSXClosingElement(node2) {
    this.token("</");
    this.print(node2.name, node2);
    this.tokenChar(62);
  }
  function JSXEmptyExpression() {
    this.printInnerComments();
  }
  function JSXFragment(node2) {
    this.print(node2.openingFragment, node2);
    this.indent();
    for (const child of node2.children) {
      this.print(child, node2);
    }
    this.dedent();
    this.print(node2.closingFragment, node2);
  }
  function JSXOpeningFragment() {
    this.tokenChar(60);
    this.tokenChar(62);
  }
  function JSXClosingFragment() {
    this.token("</");
    this.tokenChar(62);
  }
  return jsx;
}
var typescript$1 = {};
var hasRequiredTypescript$1;
function requireTypescript$1() {
  if (hasRequiredTypescript$1) return typescript$1;
  hasRequiredTypescript$1 = 1;
  Object.defineProperty(typescript$1, "__esModule", {
    value: true
  });
  typescript$1.TSAnyKeyword = TSAnyKeyword;
  typescript$1.TSArrayType = TSArrayType;
  typescript$1.TSSatisfiesExpression = typescript$1.TSAsExpression = TSTypeExpression;
  typescript$1.TSBigIntKeyword = TSBigIntKeyword;
  typescript$1.TSBooleanKeyword = TSBooleanKeyword;
  typescript$1.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
  typescript$1.TSConditionalType = TSConditionalType;
  typescript$1.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
  typescript$1.TSConstructorType = TSConstructorType;
  typescript$1.TSDeclareFunction = TSDeclareFunction;
  typescript$1.TSDeclareMethod = TSDeclareMethod;
  typescript$1.TSEnumDeclaration = TSEnumDeclaration;
  typescript$1.TSEnumMember = TSEnumMember;
  typescript$1.TSExportAssignment = TSExportAssignment;
  typescript$1.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
  typescript$1.TSExternalModuleReference = TSExternalModuleReference;
  typescript$1.TSFunctionType = TSFunctionType;
  typescript$1.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
  typescript$1.TSImportType = TSImportType;
  typescript$1.TSIndexSignature = TSIndexSignature;
  typescript$1.TSIndexedAccessType = TSIndexedAccessType;
  typescript$1.TSInferType = TSInferType;
  typescript$1.TSInstantiationExpression = TSInstantiationExpression;
  typescript$1.TSInterfaceBody = TSInterfaceBody;
  typescript$1.TSInterfaceDeclaration = TSInterfaceDeclaration;
  typescript$1.TSIntersectionType = TSIntersectionType;
  typescript$1.TSIntrinsicKeyword = TSIntrinsicKeyword;
  typescript$1.TSLiteralType = TSLiteralType;
  typescript$1.TSMappedType = TSMappedType;
  typescript$1.TSMethodSignature = TSMethodSignature;
  typescript$1.TSModuleBlock = TSModuleBlock;
  typescript$1.TSModuleDeclaration = TSModuleDeclaration;
  typescript$1.TSNamedTupleMember = TSNamedTupleMember;
  typescript$1.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
  typescript$1.TSNeverKeyword = TSNeverKeyword;
  typescript$1.TSNonNullExpression = TSNonNullExpression;
  typescript$1.TSNullKeyword = TSNullKeyword;
  typescript$1.TSNumberKeyword = TSNumberKeyword;
  typescript$1.TSObjectKeyword = TSObjectKeyword;
  typescript$1.TSOptionalType = TSOptionalType;
  typescript$1.TSParameterProperty = TSParameterProperty;
  typescript$1.TSParenthesizedType = TSParenthesizedType;
  typescript$1.TSPropertySignature = TSPropertySignature;
  typescript$1.TSQualifiedName = TSQualifiedName;
  typescript$1.TSRestType = TSRestType;
  typescript$1.TSStringKeyword = TSStringKeyword;
  typescript$1.TSSymbolKeyword = TSSymbolKeyword;
  typescript$1.TSThisType = TSThisType;
  typescript$1.TSTupleType = TSTupleType;
  typescript$1.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
  typescript$1.TSTypeAnnotation = TSTypeAnnotation;
  typescript$1.TSTypeAssertion = TSTypeAssertion;
  typescript$1.TSTypeLiteral = TSTypeLiteral;
  typescript$1.TSTypeOperator = TSTypeOperator;
  typescript$1.TSTypeParameter = TSTypeParameter;
  typescript$1.TSTypeParameterDeclaration = typescript$1.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
  typescript$1.TSTypePredicate = TSTypePredicate;
  typescript$1.TSTypeQuery = TSTypeQuery;
  typescript$1.TSTypeReference = TSTypeReference;
  typescript$1.TSUndefinedKeyword = TSUndefinedKeyword;
  typescript$1.TSUnionType = TSUnionType;
  typescript$1.TSUnknownKeyword = TSUnknownKeyword;
  typescript$1.TSVoidKeyword = TSVoidKeyword;
  typescript$1.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;
  typescript$1.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
  typescript$1.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
  typescript$1.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;
  typescript$1.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;
  function TSTypeAnnotation(node2) {
    this.tokenChar(58);
    this.space();
    if (node2.optional) this.tokenChar(63);
    this.print(node2.typeAnnotation, node2);
  }
  function TSTypeParameterInstantiation(node2, parent) {
    this.tokenChar(60);
    this.printList(node2.params, node2, {});
    if (parent.type === "ArrowFunctionExpression" && node2.params.length === 1) {
      this.tokenChar(44);
    }
    this.tokenChar(62);
  }
  function TSTypeParameter(node2) {
    if (node2.in) {
      this.word("in");
      this.space();
    }
    if (node2.out) {
      this.word("out");
      this.space();
    }
    this.word(node2.name);
    if (node2.constraint) {
      this.space();
      this.word("extends");
      this.space();
      this.print(node2.constraint, node2);
    }
    if (node2.default) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.default, node2);
    }
  }
  function TSParameterProperty(node2) {
    if (node2.accessibility) {
      this.word(node2.accessibility);
      this.space();
    }
    if (node2.readonly) {
      this.word("readonly");
      this.space();
    }
    this._param(node2.parameter);
  }
  function TSDeclareFunction(node2, parent) {
    if (node2.declare) {
      this.word("declare");
      this.space();
    }
    this._functionHead(node2, parent);
    this.tokenChar(59);
  }
  function TSDeclareMethod(node2) {
    this._classMethodHead(node2);
    this.tokenChar(59);
  }
  function TSQualifiedName(node2) {
    this.print(node2.left, node2);
    this.tokenChar(46);
    this.print(node2.right, node2);
  }
  function TSCallSignatureDeclaration(node2) {
    this.tsPrintSignatureDeclarationBase(node2);
    this.tokenChar(59);
  }
  function TSConstructSignatureDeclaration(node2) {
    this.word("new");
    this.space();
    this.tsPrintSignatureDeclarationBase(node2);
    this.tokenChar(59);
  }
  function TSPropertySignature(node2) {
    const {
      readonly
    } = node2;
    if (readonly) {
      this.word("readonly");
      this.space();
    }
    this.tsPrintPropertyOrMethodName(node2);
    this.print(node2.typeAnnotation, node2);
    this.tokenChar(59);
  }
  function tsPrintPropertyOrMethodName(node2) {
    if (node2.computed) {
      this.tokenChar(91);
    }
    this.print(node2.key, node2);
    if (node2.computed) {
      this.tokenChar(93);
    }
    if (node2.optional) {
      this.tokenChar(63);
    }
  }
  function TSMethodSignature(node2) {
    const {
      kind
    } = node2;
    if (kind === "set" || kind === "get") {
      this.word(kind);
      this.space();
    }
    this.tsPrintPropertyOrMethodName(node2);
    this.tsPrintSignatureDeclarationBase(node2);
    this.tokenChar(59);
  }
  function TSIndexSignature(node2) {
    const {
      readonly,
      static: isStatic
    } = node2;
    if (isStatic) {
      this.word("static");
      this.space();
    }
    if (readonly) {
      this.word("readonly");
      this.space();
    }
    this.tokenChar(91);
    this._parameters(node2.parameters, node2);
    this.tokenChar(93);
    this.print(node2.typeAnnotation, node2);
    this.tokenChar(59);
  }
  function TSAnyKeyword() {
    this.word("any");
  }
  function TSBigIntKeyword() {
    this.word("bigint");
  }
  function TSUnknownKeyword() {
    this.word("unknown");
  }
  function TSNumberKeyword() {
    this.word("number");
  }
  function TSObjectKeyword() {
    this.word("object");
  }
  function TSBooleanKeyword() {
    this.word("boolean");
  }
  function TSStringKeyword() {
    this.word("string");
  }
  function TSSymbolKeyword() {
    this.word("symbol");
  }
  function TSVoidKeyword() {
    this.word("void");
  }
  function TSUndefinedKeyword() {
    this.word("undefined");
  }
  function TSNullKeyword() {
    this.word("null");
  }
  function TSNeverKeyword() {
    this.word("never");
  }
  function TSIntrinsicKeyword() {
    this.word("intrinsic");
  }
  function TSThisType() {
    this.word("this");
  }
  function TSFunctionType(node2) {
    this.tsPrintFunctionOrConstructorType(node2);
  }
  function TSConstructorType(node2) {
    if (node2.abstract) {
      this.word("abstract");
      this.space();
    }
    this.word("new");
    this.space();
    this.tsPrintFunctionOrConstructorType(node2);
  }
  function tsPrintFunctionOrConstructorType(node2) {
    const {
      typeParameters
    } = node2;
    const parameters = node2.parameters;
    this.print(typeParameters, node2);
    this.tokenChar(40);
    this._parameters(parameters, node2);
    this.tokenChar(41);
    this.space();
    this.token("=>");
    this.space();
    const returnType = node2.typeAnnotation;
    this.print(returnType.typeAnnotation, node2);
  }
  function TSTypeReference(node2) {
    this.print(node2.typeName, node2, true);
    this.print(node2.typeParameters, node2, true);
  }
  function TSTypePredicate(node2) {
    if (node2.asserts) {
      this.word("asserts");
      this.space();
    }
    this.print(node2.parameterName);
    if (node2.typeAnnotation) {
      this.space();
      this.word("is");
      this.space();
      this.print(node2.typeAnnotation.typeAnnotation);
    }
  }
  function TSTypeQuery(node2) {
    this.word("typeof");
    this.space();
    this.print(node2.exprName);
    if (node2.typeParameters) {
      this.print(node2.typeParameters, node2);
    }
  }
  function TSTypeLiteral(node2) {
    this.tsPrintTypeLiteralOrInterfaceBody(node2.members, node2);
  }
  function tsPrintTypeLiteralOrInterfaceBody(members, node2) {
    tsPrintBraced(this, members, node2);
  }
  function tsPrintBraced(printer2, members, node2) {
    printer2.token("{");
    if (members.length) {
      printer2.indent();
      printer2.newline();
      for (const member of members) {
        printer2.print(member, node2);
        printer2.newline();
      }
      printer2.dedent();
    }
    printer2.rightBrace(node2);
  }
  function TSArrayType(node2) {
    this.print(node2.elementType, node2, true);
    this.token("[]");
  }
  function TSTupleType(node2) {
    this.tokenChar(91);
    this.printList(node2.elementTypes, node2);
    this.tokenChar(93);
  }
  function TSOptionalType(node2) {
    this.print(node2.typeAnnotation, node2);
    this.tokenChar(63);
  }
  function TSRestType(node2) {
    this.token("...");
    this.print(node2.typeAnnotation, node2);
  }
  function TSNamedTupleMember(node2) {
    this.print(node2.label, node2);
    if (node2.optional) this.tokenChar(63);
    this.tokenChar(58);
    this.space();
    this.print(node2.elementType, node2);
  }
  function TSUnionType(node2) {
    tsPrintUnionOrIntersectionType(this, node2, "|");
  }
  function TSIntersectionType(node2) {
    tsPrintUnionOrIntersectionType(this, node2, "&");
  }
  function tsPrintUnionOrIntersectionType(printer2, node2, sep) {
    printer2.printJoin(node2.types, node2, {
      separator() {
        this.space();
        this.token(sep);
        this.space();
      }
    });
  }
  function TSConditionalType(node2) {
    this.print(node2.checkType);
    this.space();
    this.word("extends");
    this.space();
    this.print(node2.extendsType);
    this.space();
    this.tokenChar(63);
    this.space();
    this.print(node2.trueType);
    this.space();
    this.tokenChar(58);
    this.space();
    this.print(node2.falseType);
  }
  function TSInferType(node2) {
    this.token("infer");
    this.space();
    this.print(node2.typeParameter);
  }
  function TSParenthesizedType(node2) {
    this.tokenChar(40);
    this.print(node2.typeAnnotation, node2);
    this.tokenChar(41);
  }
  function TSTypeOperator(node2) {
    this.word(node2.operator);
    this.space();
    this.print(node2.typeAnnotation, node2);
  }
  function TSIndexedAccessType(node2) {
    this.print(node2.objectType, node2, true);
    this.tokenChar(91);
    this.print(node2.indexType, node2);
    this.tokenChar(93);
  }
  function TSMappedType(node2) {
    const {
      nameType,
      optional,
      readonly,
      typeParameter,
      typeAnnotation
    } = node2;
    this.tokenChar(123);
    this.space();
    if (readonly) {
      tokenIfPlusMinus(this, readonly);
      this.word("readonly");
      this.space();
    }
    this.tokenChar(91);
    this.word(typeParameter.name);
    this.space();
    this.word("in");
    this.space();
    this.print(typeParameter.constraint, typeParameter);
    if (nameType) {
      this.space();
      this.word("as");
      this.space();
      this.print(nameType, node2);
    }
    this.tokenChar(93);
    if (optional) {
      tokenIfPlusMinus(this, optional);
      this.tokenChar(63);
    }
    if (typeAnnotation) {
      this.tokenChar(58);
      this.space();
      this.print(typeAnnotation, node2);
    }
    this.space();
    this.tokenChar(125);
  }
  function tokenIfPlusMinus(self, tok) {
    if (tok !== true) {
      self.token(tok);
    }
  }
  function TSLiteralType(node2) {
    this.print(node2.literal, node2);
  }
  function TSExpressionWithTypeArguments(node2) {
    this.print(node2.expression, node2);
    this.print(node2.typeParameters, node2);
  }
  function TSInterfaceDeclaration(node2) {
    const {
      declare,
      id,
      typeParameters,
      extends: extendz,
      body
    } = node2;
    if (declare) {
      this.word("declare");
      this.space();
    }
    this.word("interface");
    this.space();
    this.print(id, node2);
    this.print(typeParameters, node2);
    if (extendz != null && extendz.length) {
      this.space();
      this.word("extends");
      this.space();
      this.printList(extendz, node2);
    }
    this.space();
    this.print(body, node2);
  }
  function TSInterfaceBody(node2) {
    this.tsPrintTypeLiteralOrInterfaceBody(node2.body, node2);
  }
  function TSTypeAliasDeclaration(node2) {
    const {
      declare,
      id,
      typeParameters,
      typeAnnotation
    } = node2;
    if (declare) {
      this.word("declare");
      this.space();
    }
    this.word("type");
    this.space();
    this.print(id, node2);
    this.print(typeParameters, node2);
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(typeAnnotation, node2);
    this.tokenChar(59);
  }
  function TSTypeExpression(node2) {
    var _expression$trailingC;
    const {
      type,
      expression,
      typeAnnotation
    } = node2;
    const forceParens = !!((_expression$trailingC = expression.trailingComments) != null && _expression$trailingC.length);
    this.print(expression, node2, true, void 0, forceParens);
    this.space();
    this.word(type === "TSAsExpression" ? "as" : "satisfies");
    this.space();
    this.print(typeAnnotation, node2);
  }
  function TSTypeAssertion(node2) {
    const {
      typeAnnotation,
      expression
    } = node2;
    this.tokenChar(60);
    this.print(typeAnnotation, node2);
    this.tokenChar(62);
    this.space();
    this.print(expression, node2);
  }
  function TSInstantiationExpression(node2) {
    this.print(node2.expression, node2);
    this.print(node2.typeParameters, node2);
  }
  function TSEnumDeclaration(node2) {
    const {
      declare,
      const: isConst,
      id,
      members
    } = node2;
    if (declare) {
      this.word("declare");
      this.space();
    }
    if (isConst) {
      this.word("const");
      this.space();
    }
    this.word("enum");
    this.space();
    this.print(id, node2);
    this.space();
    tsPrintBraced(this, members, node2);
  }
  function TSEnumMember(node2) {
    const {
      id,
      initializer
    } = node2;
    this.print(id, node2);
    if (initializer) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(initializer, node2);
    }
    this.tokenChar(44);
  }
  function TSModuleDeclaration(node2) {
    const {
      declare,
      id
    } = node2;
    if (declare) {
      this.word("declare");
      this.space();
    }
    if (!node2.global) {
      this.word(id.type === "Identifier" ? "namespace" : "module");
      this.space();
    }
    this.print(id, node2);
    if (!node2.body) {
      this.tokenChar(59);
      return;
    }
    let body = node2.body;
    while (body.type === "TSModuleDeclaration") {
      this.tokenChar(46);
      this.print(body.id, body);
      body = body.body;
    }
    this.space();
    this.print(body, node2);
  }
  function TSModuleBlock(node2) {
    tsPrintBraced(this, node2.body, node2);
  }
  function TSImportType(node2) {
    const {
      argument,
      qualifier,
      typeParameters
    } = node2;
    this.word("import");
    this.tokenChar(40);
    this.print(argument, node2);
    this.tokenChar(41);
    if (qualifier) {
      this.tokenChar(46);
      this.print(qualifier, node2);
    }
    if (typeParameters) {
      this.print(typeParameters, node2);
    }
  }
  function TSImportEqualsDeclaration(node2) {
    const {
      isExport,
      id,
      moduleReference
    } = node2;
    if (isExport) {
      this.word("export");
      this.space();
    }
    this.word("import");
    this.space();
    this.print(id, node2);
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(moduleReference, node2);
    this.tokenChar(59);
  }
  function TSExternalModuleReference(node2) {
    this.token("require(");
    this.print(node2.expression, node2);
    this.tokenChar(41);
  }
  function TSNonNullExpression(node2) {
    this.print(node2.expression, node2);
    this.tokenChar(33);
  }
  function TSExportAssignment(node2) {
    this.word("export");
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node2.expression, node2);
    this.tokenChar(59);
  }
  function TSNamespaceExportDeclaration(node2) {
    this.word("export");
    this.space();
    this.word("as");
    this.space();
    this.word("namespace");
    this.space();
    this.print(node2.id, node2);
  }
  function tsPrintSignatureDeclarationBase(node2) {
    const {
      typeParameters
    } = node2;
    const parameters = node2.parameters;
    this.print(typeParameters, node2);
    this.tokenChar(40);
    this._parameters(parameters, node2);
    this.tokenChar(41);
    const returnType = node2.typeAnnotation;
    this.print(returnType, node2);
  }
  function tsPrintClassMemberModifiers(node2) {
    const isField = node2.type === "ClassAccessorProperty" || node2.type === "ClassProperty";
    if (isField && node2.declare) {
      this.word("declare");
      this.space();
    }
    if (node2.accessibility) {
      this.word(node2.accessibility);
      this.space();
    }
    if (node2.static) {
      this.word("static");
      this.space();
    }
    if (node2.override) {
      this.word("override");
      this.space();
    }
    if (node2.abstract) {
      this.word("abstract");
      this.space();
    }
    if (isField && node2.readonly) {
      this.word("readonly");
      this.space();
    }
  }
  return typescript$1;
}
var hasRequiredGenerators;
function requireGenerators() {
  if (hasRequiredGenerators) return generators;
  hasRequiredGenerators = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _templateLiterals = requireTemplateLiterals();
    Object.keys(_templateLiterals).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _templateLiterals[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _templateLiterals[key2];
        }
      });
    });
    var _expressions = requireExpressions();
    Object.keys(_expressions).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _expressions[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _expressions[key2];
        }
      });
    });
    var _statements = requireStatements();
    Object.keys(_statements).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _statements[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _statements[key2];
        }
      });
    });
    var _classes = requireClasses();
    Object.keys(_classes).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _classes[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _classes[key2];
        }
      });
    });
    var _methods = requireMethods();
    Object.keys(_methods).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _methods[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _methods[key2];
        }
      });
    });
    var _modules = requireModules();
    Object.keys(_modules).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _modules[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _modules[key2];
        }
      });
    });
    var _types = requireTypes$1();
    Object.keys(_types).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _types[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _types[key2];
        }
      });
    });
    var _flow = requireFlow();
    Object.keys(_flow).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _flow[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _flow[key2];
        }
      });
    });
    var _base = requireBase();
    Object.keys(_base).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _base[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _base[key2];
        }
      });
    });
    var _jsx = requireJsx();
    Object.keys(_jsx).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _jsx[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _jsx[key2];
        }
      });
    });
    var _typescript = requireTypescript$1();
    Object.keys(_typescript).forEach(function(key2) {
      if (key2 === "default" || key2 === "__esModule") return;
      if (key2 in exports && exports[key2] === _typescript[key2]) return;
      Object.defineProperty(exports, key2, {
        enumerable: true,
        get: function() {
          return _typescript[key2];
        }
      });
    });
  })(generators);
  return generators;
}
var hasRequiredPrinter$1;
function requirePrinter$1() {
  if (hasRequiredPrinter$1) return printer$1;
  hasRequiredPrinter$1 = 1;
  Object.defineProperty(printer$1, "__esModule", {
    value: true
  });
  printer$1.default = void 0;
  var _buffer = requireBuffer();
  var n = requireNode();
  var _t = requireLib$O();
  var generatorFunctions = requireGenerators();
  const {
    isFunction,
    isStatement,
    isClassBody,
    isTSInterfaceBody,
    isTSEnumDeclaration
  } = _t;
  const SCIENTIFIC_NOTATION = /e/i;
  const ZERO_DECIMAL_INTEGER = /\.0+$/;
  const HAS_NEWLINE = /[\n\r\u2028\u2029]/;
  const HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
  const {
    needsParens
  } = n;
  class Printer {
    constructor(format2, map) {
      this.inForStatementInitCounter = 0;
      this._printStack = [];
      this._indent = 0;
      this._indentRepeat = 0;
      this._insideAux = false;
      this._parenPushNewlineState = null;
      this._noLineTerminator = false;
      this._printAuxAfterOnNextUserNode = false;
      this._printedComments = /* @__PURE__ */ new Set();
      this._endsWithInteger = false;
      this._endsWithWord = false;
      this._lastCommentLine = 0;
      this._endsWithInnerRaw = false;
      this._indentInnerComments = true;
      this.format = format2;
      this._indentRepeat = format2.indent.style.length;
      this._inputMap = map == null ? void 0 : map._inputMap;
      this._buf = new _buffer.default(map, format2.indent.style[0]);
    }
    generate(ast) {
      this.print(ast);
      this._maybeAddAuxComment();
      return this._buf.get();
    }
    indent() {
      if (this.format.compact || this.format.concise) return;
      this._indent++;
    }
    dedent() {
      if (this.format.compact || this.format.concise) return;
      this._indent--;
    }
    semicolon(force = false) {
      this._maybeAddAuxComment();
      if (force) {
        this._appendChar(59);
      } else {
        this._queue(59);
      }
      this._noLineTerminator = false;
    }
    rightBrace(node2) {
      if (this.format.minified) {
        this._buf.removeLastSemicolon();
      }
      this.sourceWithOffset("end", node2.loc, -1);
      this.tokenChar(125);
    }
    rightParens(node2) {
      this.sourceWithOffset("end", node2.loc, -1);
      this.tokenChar(41);
    }
    space(force = false) {
      if (this.format.compact) return;
      if (force) {
        this._space();
      } else if (this._buf.hasContent()) {
        const lastCp = this.getLastChar();
        if (lastCp !== 32 && lastCp !== 10) {
          this._space();
        }
      }
    }
    word(str, noLineTerminatorAfter = false) {
      this._maybePrintInnerComments();
      if (this._endsWithWord || str.charCodeAt(0) === 47 && this.endsWith(47)) {
        this._space();
      }
      this._maybeAddAuxComment();
      this._append(str, false);
      this._endsWithWord = true;
      this._noLineTerminator = noLineTerminatorAfter;
    }
    number(str, number2) {
      function isNonDecimalLiteral(str2) {
        if (str2.length > 2 && str2.charCodeAt(0) === 48) {
          const secondChar = str2.charCodeAt(1);
          return secondChar === 98 || secondChar === 111 || secondChar === 120;
        }
        return false;
      }
      this.word(str);
      this._endsWithInteger = Number.isInteger(number2) && !isNonDecimalLiteral(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;
    }
    token(str, maybeNewline = false) {
      this._maybePrintInnerComments();
      const lastChar = this.getLastChar();
      const strFirst = str.charCodeAt(0);
      if (lastChar === 33 && (str === "--" || strFirst === 61) || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {
        this._space();
      }
      this._maybeAddAuxComment();
      this._append(str, maybeNewline);
      this._noLineTerminator = false;
    }
    tokenChar(char) {
      this._maybePrintInnerComments();
      const lastChar = this.getLastChar();
      if (char === 43 && lastChar === 43 || char === 45 && lastChar === 45 || char === 46 && this._endsWithInteger) {
        this._space();
      }
      this._maybeAddAuxComment();
      this._appendChar(char);
      this._noLineTerminator = false;
    }
    newline(i = 1, force) {
      if (i <= 0) return;
      if (!force) {
        if (this.format.retainLines || this.format.compact) return;
        if (this.format.concise) {
          this.space();
          return;
        }
      }
      if (i > 2) i = 2;
      i -= this._buf.getNewlineCount();
      for (let j = 0; j < i; j++) {
        this._newline();
      }
      return;
    }
    endsWith(char) {
      return this.getLastChar() === char;
    }
    getLastChar() {
      return this._buf.getLastChar();
    }
    endsWithCharAndNewline() {
      return this._buf.endsWithCharAndNewline();
    }
    removeTrailingNewline() {
      this._buf.removeTrailingNewline();
    }
    exactSource(loc, cb) {
      if (!loc) {
        cb();
        return;
      }
      this._catchUp("start", loc);
      this._buf.exactSource(loc, cb);
    }
    source(prop, loc) {
      if (!loc) return;
      this._catchUp(prop, loc);
      this._buf.source(prop, loc);
    }
    sourceWithOffset(prop, loc, columnOffset) {
      if (!loc) return;
      this._catchUp(prop, loc);
      this._buf.sourceWithOffset(prop, loc, columnOffset);
    }
    withSource(prop, loc, cb) {
      if (!loc) {
        cb();
        return;
      }
      this._catchUp(prop, loc);
      this._buf.withSource(prop, loc, cb);
    }
    sourceIdentifierName(identifierName, pos2) {
      if (!this._buf._canMarkIdName) return;
      const sourcePosition = this._buf._sourcePosition;
      sourcePosition.identifierNamePos = pos2;
      sourcePosition.identifierName = identifierName;
    }
    _space() {
      this._queue(32);
    }
    _newline() {
      this._queue(10);
    }
    _append(str, maybeNewline) {
      this._maybeAddParen(str);
      this._maybeIndent(str.charCodeAt(0));
      this._buf.append(str, maybeNewline);
      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
    _appendChar(char) {
      this._maybeAddParenChar(char);
      this._maybeIndent(char);
      this._buf.appendChar(char);
      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
    _queue(char) {
      this._maybeAddParenChar(char);
      this._maybeIndent(char);
      this._buf.queue(char);
      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
    _maybeIndent(firstChar) {
      if (this._indent && firstChar !== 10 && this.endsWith(10)) {
        this._buf.queueIndentation(this._getIndent());
      }
    }
    _shouldIndent(firstChar) {
      if (this._indent && firstChar !== 10 && this.endsWith(10)) {
        return true;
      }
    }
    _maybeAddParenChar(char) {
      const parenPushNewlineState = this._parenPushNewlineState;
      if (!parenPushNewlineState) return;
      if (char === 32) {
        return;
      }
      if (char !== 10) {
        this._parenPushNewlineState = null;
        return;
      }
      this.tokenChar(40);
      this.indent();
      parenPushNewlineState.printed = true;
    }
    _maybeAddParen(str) {
      const parenPushNewlineState = this._parenPushNewlineState;
      if (!parenPushNewlineState) return;
      const len = str.length;
      let i;
      for (i = 0; i < len && str.charCodeAt(i) === 32; i++) continue;
      if (i === len) {
        return;
      }
      const cha = str.charCodeAt(i);
      if (cha !== 10) {
        if (cha !== 47 || i + 1 === len) {
          this._parenPushNewlineState = null;
          return;
        }
        const chaPost = str.charCodeAt(i + 1);
        if (chaPost === 42) {
          return;
        } else if (chaPost !== 47) {
          this._parenPushNewlineState = null;
          return;
        }
      }
      this.tokenChar(40);
      this.indent();
      parenPushNewlineState.printed = true;
    }
    catchUp(line2) {
      if (!this.format.retainLines) return;
      const count = line2 - this._buf.getCurrentLine();
      for (let i = 0; i < count; i++) {
        this._newline();
      }
    }
    _catchUp(prop, loc) {
      var _loc$prop;
      if (!this.format.retainLines) return;
      const line2 = loc == null || (_loc$prop = loc[prop]) == null ? void 0 : _loc$prop.line;
      if (line2 != null) {
        const count = line2 - this._buf.getCurrentLine();
        for (let i = 0; i < count; i++) {
          this._newline();
        }
      }
    }
    _getIndent() {
      return this._indentRepeat * this._indent;
    }
    printTerminatorless(node2, parent, isLabel) {
      if (isLabel) {
        this._noLineTerminator = true;
        this.print(node2, parent);
      } else {
        const terminatorState = {
          printed: false
        };
        this._parenPushNewlineState = terminatorState;
        this.print(node2, parent);
        if (terminatorState.printed) {
          this.dedent();
          this.newline();
          this.tokenChar(41);
        }
      }
    }
    print(node2, parent, noLineTerminatorAfter, trailingCommentsLineOffset, forceParens) {
      var _node$extra, _node$leadingComments;
      if (!node2) return;
      this._endsWithInnerRaw = false;
      const nodeType = node2.type;
      const format2 = this.format;
      const oldConcise = format2.concise;
      if (node2._compact) {
        format2.concise = true;
      }
      const printMethod = this[nodeType];
      if (printMethod === void 0) {
        throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node2.constructor.name)}`);
      }
      this._printStack.push(node2);
      const oldInAux = this._insideAux;
      this._insideAux = node2.loc == void 0;
      this._maybeAddAuxComment(this._insideAux && !oldInAux);
      const parenthesized = (_node$extra = node2.extra) == null ? void 0 : _node$extra.parenthesized;
      let shouldPrintParens = forceParens || parenthesized && format2.retainFunctionParens && nodeType === "FunctionExpression" || needsParens(node2, parent, this._printStack);
      if (!shouldPrintParens && parenthesized && (_node$leadingComments = node2.leadingComments) != null && _node$leadingComments.length && node2.leadingComments[0].type === "CommentBlock") {
        const parentType = parent == null ? void 0 : parent.type;
        switch (parentType) {
          case "ExpressionStatement":
          case "VariableDeclarator":
          case "AssignmentExpression":
          case "ReturnStatement":
            break;
          case "CallExpression":
          case "OptionalCallExpression":
          case "NewExpression":
            if (parent.callee !== node2) break;
          default:
            shouldPrintParens = true;
        }
      }
      if (shouldPrintParens) {
        this.tokenChar(40);
        this._endsWithInnerRaw = false;
      }
      this._lastCommentLine = 0;
      this._printLeadingComments(node2, parent);
      const loc = nodeType === "Program" || nodeType === "File" ? null : node2.loc;
      this.exactSource(loc, printMethod.bind(this, node2, parent));
      if (shouldPrintParens) {
        this._printTrailingComments(node2, parent);
        this.tokenChar(41);
        this._noLineTerminator = noLineTerminatorAfter;
      } else if (noLineTerminatorAfter && !this._noLineTerminator) {
        this._noLineTerminator = true;
        this._printTrailingComments(node2, parent);
      } else {
        this._printTrailingComments(node2, parent, trailingCommentsLineOffset);
      }
      this._printStack.pop();
      format2.concise = oldConcise;
      this._insideAux = oldInAux;
      this._endsWithInnerRaw = false;
    }
    _maybeAddAuxComment(enteredPositionlessNode) {
      if (enteredPositionlessNode) this._printAuxBeforeComment();
      if (!this._insideAux) this._printAuxAfterComment();
    }
    _printAuxBeforeComment() {
      if (this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = true;
      const comment = this.format.auxiliaryCommentBefore;
      if (comment) {
        this._printComment({
          type: "CommentBlock",
          value: comment
        }, 0);
      }
    }
    _printAuxAfterComment() {
      if (!this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = false;
      const comment = this.format.auxiliaryCommentAfter;
      if (comment) {
        this._printComment({
          type: "CommentBlock",
          value: comment
        }, 0);
      }
    }
    getPossibleRaw(node2) {
      const extra = node2.extra;
      if ((extra == null ? void 0 : extra.raw) != null && extra.rawValue != null && node2.value === extra.rawValue) {
        return extra.raw;
      }
    }
    printJoin(nodes, parent, opts = {}) {
      if (!(nodes != null && nodes.length)) return;
      let {
        indent
      } = opts;
      if (indent == null && this.format.retainLines) {
        var _nodes$0$loc;
        const startLine = (_nodes$0$loc = nodes[0].loc) == null ? void 0 : _nodes$0$loc.start.line;
        if (startLine != null && startLine !== this._buf.getCurrentLine()) {
          indent = true;
        }
      }
      if (indent) this.indent();
      const newlineOpts = {
        addNewlines: opts.addNewlines,
        nextNodeStartLine: 0
      };
      const separator = opts.separator ? opts.separator.bind(this) : null;
      const len = nodes.length;
      for (let i = 0; i < len; i++) {
        const node2 = nodes[i];
        if (!node2) continue;
        if (opts.statement) this._printNewline(i === 0, newlineOpts);
        this.print(node2, parent, void 0, opts.trailingCommentsLineOffset || 0);
        opts.iterator == null || opts.iterator(node2, i);
        if (i < len - 1) separator == null || separator();
        if (opts.statement) {
          var _node$trailingComment;
          if (!((_node$trailingComment = node2.trailingComments) != null && _node$trailingComment.length)) {
            this._lastCommentLine = 0;
          }
          if (i + 1 === len) {
            this.newline(1);
          } else {
            var _nextNode$loc;
            const nextNode = nodes[i + 1];
            newlineOpts.nextNodeStartLine = ((_nextNode$loc = nextNode.loc) == null ? void 0 : _nextNode$loc.start.line) || 0;
            this._printNewline(true, newlineOpts);
          }
        }
      }
      if (indent) this.dedent();
    }
    printAndIndentOnComments(node2, parent) {
      const indent = node2.leadingComments && node2.leadingComments.length > 0;
      if (indent) this.indent();
      this.print(node2, parent);
      if (indent) this.dedent();
    }
    printBlock(parent) {
      const node2 = parent.body;
      if (node2.type !== "EmptyStatement") {
        this.space();
      }
      this.print(node2, parent);
    }
    _printTrailingComments(node2, parent, lineOffset) {
      const {
        innerComments,
        trailingComments
      } = node2;
      if (innerComments != null && innerComments.length) {
        this._printComments(2, innerComments, node2, parent, lineOffset);
      }
      if (trailingComments != null && trailingComments.length) {
        this._printComments(2, trailingComments, node2, parent, lineOffset);
      }
    }
    _printLeadingComments(node2, parent) {
      const comments2 = node2.leadingComments;
      if (!(comments2 != null && comments2.length)) return;
      this._printComments(0, comments2, node2, parent);
    }
    _maybePrintInnerComments() {
      if (this._endsWithInnerRaw) this.printInnerComments();
      this._endsWithInnerRaw = true;
      this._indentInnerComments = true;
    }
    printInnerComments() {
      const node2 = this._printStack[this._printStack.length - 1];
      const comments2 = node2.innerComments;
      if (!(comments2 != null && comments2.length)) return;
      const hasSpace = this.endsWith(32);
      const indent = this._indentInnerComments;
      const printedCommentsCount = this._printedComments.size;
      if (indent) this.indent();
      this._printComments(1, comments2, node2);
      if (hasSpace && printedCommentsCount !== this._printedComments.size) {
        this.space();
      }
      if (indent) this.dedent();
    }
    noIndentInnerCommentsHere() {
      this._indentInnerComments = false;
    }
    printSequence(nodes, parent, opts = {}) {
      var _opts$indent;
      opts.statement = true;
      (_opts$indent = opts.indent) != null ? _opts$indent : opts.indent = false;
      this.printJoin(nodes, parent, opts);
    }
    printList(items, parent, opts = {}) {
      if (opts.separator == null) {
        opts.separator = commaSeparator;
      }
      this.printJoin(items, parent, opts);
    }
    _printNewline(newLine, opts) {
      const format2 = this.format;
      if (format2.retainLines || format2.compact) return;
      if (format2.concise) {
        this.space();
        return;
      }
      if (!newLine) {
        return;
      }
      const startLine = opts.nextNodeStartLine;
      const lastCommentLine = this._lastCommentLine;
      if (startLine > 0 && lastCommentLine > 0) {
        const offset = startLine - lastCommentLine;
        if (offset >= 0) {
          this.newline(offset || 1);
          return;
        }
      }
      if (this._buf.hasContent()) {
        this.newline(1);
      }
    }
    _shouldPrintComment(comment) {
      if (comment.ignore) return 0;
      if (this._printedComments.has(comment)) return 0;
      if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)) {
        return 2;
      }
      this._printedComments.add(comment);
      if (!this.format.shouldPrintComment(comment.value)) {
        return 0;
      }
      return 1;
    }
    _printComment(comment, skipNewLines) {
      const noLineTerminator = this._noLineTerminator;
      const isBlockComment = comment.type === "CommentBlock";
      const printNewLines = isBlockComment && skipNewLines !== 1 && !this._noLineTerminator;
      if (printNewLines && this._buf.hasContent() && skipNewLines !== 2) {
        this.newline(1);
      }
      const lastCharCode = this.getLastChar();
      if (lastCharCode !== 91 && lastCharCode !== 123) {
        this.space();
      }
      let val;
      if (isBlockComment) {
        const {
          _parenPushNewlineState
        } = this;
        if ((_parenPushNewlineState == null ? void 0 : _parenPushNewlineState.printed) === false && HAS_NEWLINE.test(comment.value)) {
          this.tokenChar(40);
          this.indent();
          _parenPushNewlineState.printed = true;
        }
        val = `/*${comment.value}*/`;
        if (this.format.indent.adjustMultilineComment) {
          var _comment$loc;
          const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;
          if (offset) {
            const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
            val = val.replace(newlineRegex, "\n");
          }
          if (this.format.concise) {
            val = val.replace(/\n(?!$)/g, `
`);
          } else {
            let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
            if (this._shouldIndent(47) || this.format.retainLines) {
              indentSize += this._getIndent();
            }
            val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`);
          }
        }
      } else if (!noLineTerminator) {
        val = `//${comment.value}`;
      } else {
        val = `/*${comment.value}*/`;
      }
      if (this.endsWith(47)) this._space();
      this.source("start", comment.loc);
      this._append(val, isBlockComment);
      if (!isBlockComment && !noLineTerminator) {
        this.newline(1, true);
      }
      if (printNewLines && skipNewLines !== 3) {
        this.newline(1);
      }
    }
    _printComments(type, comments2, node2, parent, lineOffset = 0) {
      const nodeLoc = node2.loc;
      const len = comments2.length;
      let hasLoc = !!nodeLoc;
      const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;
      const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
      let lastLine = 0;
      let leadingCommentNewline = 0;
      const maybeNewline = this._noLineTerminator ? function() {
      } : this.newline.bind(this);
      for (let i = 0; i < len; i++) {
        const comment = comments2[i];
        const shouldPrint = this._shouldPrintComment(comment);
        if (shouldPrint === 2) {
          hasLoc = false;
          break;
        }
        if (hasLoc && comment.loc && shouldPrint === 1) {
          const commentStartLine = comment.loc.start.line;
          const commentEndLine = comment.loc.end.line;
          if (type === 0) {
            let offset = 0;
            if (i === 0) {
              if (this._buf.hasContent() && (comment.type === "CommentLine" || commentStartLine != commentEndLine)) {
                offset = leadingCommentNewline = 1;
              }
            } else {
              offset = commentStartLine - lastLine;
            }
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
            if (i + 1 === len) {
              maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline));
              lastLine = nodeStartLine;
            }
          } else if (type === 1) {
            const offset = commentStartLine - (i === 0 ? nodeStartLine : lastLine);
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
            if (i + 1 === len) {
              maybeNewline(Math.min(1, nodeEndLine - lastLine));
              lastLine = nodeEndLine;
            }
          } else {
            const offset = commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
          }
        } else {
          hasLoc = false;
          if (shouldPrint !== 1) {
            continue;
          }
          if (len === 1) {
            const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value);
            const shouldSkipNewline = singleLine && !isStatement(node2) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
            if (type === 0) {
              this._printComment(comment, shouldSkipNewline && node2.type !== "ObjectExpression" || singleLine && isFunction(parent, {
                body: node2
              }) ? 1 : 0);
            } else if (shouldSkipNewline && type === 2) {
              this._printComment(comment, 1);
            } else {
              this._printComment(comment, 0);
            }
          } else if (type === 1 && !(node2.type === "ObjectExpression" && node2.properties.length > 1) && node2.type !== "ClassBody" && node2.type !== "TSInterfaceBody") {
            this._printComment(comment, i === 0 ? 2 : i === len - 1 ? 3 : 0);
          } else {
            this._printComment(comment, 0);
          }
        }
      }
      if (type === 2 && hasLoc && lastLine) {
        this._lastCommentLine = lastLine;
      }
    }
  }
  Object.assign(Printer.prototype, generatorFunctions);
  {
    Printer.prototype.Noop = function Noop() {
    };
  }
  printer$1.default = Printer;
  function commaSeparator() {
    this.tokenChar(44);
    this.space();
  }
  return printer$1;
}
var hasRequiredLib$L;
function requireLib$L() {
  if (hasRequiredLib$L) return lib$I;
  hasRequiredLib$L = 1;
  Object.defineProperty(lib$I, "__esModule", {
    value: true
  });
  lib$I.default = generate2;
  var _sourceMap = requireSourceMap();
  var _printer = requirePrinter$1();
  function normalizeOptions(code, opts) {
    var _opts$recordAndTupleS;
    const format2 = {
      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
      shouldPrintComment: opts.shouldPrintComment,
      retainLines: opts.retainLines,
      retainFunctionParens: opts.retainFunctionParens,
      comments: opts.comments == null || opts.comments,
      compact: opts.compact,
      minified: opts.minified,
      concise: opts.concise,
      indent: {
        adjustMultilineComment: true,
        style: "  "
      },
      jsescOption: Object.assign({
        quotes: "double",
        wrap: true,
        minimal: false
      }, opts.jsescOption),
      recordAndTupleSyntaxType: (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) != null ? _opts$recordAndTupleS : "hash",
      topicToken: opts.topicToken,
      importAttributesKeyword: opts.importAttributesKeyword
    };
    {
      format2.decoratorsBeforeExport = opts.decoratorsBeforeExport;
      format2.jsescOption.json = opts.jsonCompatibleStrings;
    }
    if (format2.minified) {
      format2.compact = true;
      format2.shouldPrintComment = format2.shouldPrintComment || (() => format2.comments);
    } else {
      format2.shouldPrintComment = format2.shouldPrintComment || ((value2) => format2.comments || value2.includes("@license") || value2.includes("@preserve"));
    }
    if (format2.compact === "auto") {
      format2.compact = typeof code === "string" && code.length > 5e5;
      if (format2.compact) {
        console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of ${"500KB"}.`);
      }
    }
    if (format2.compact) {
      format2.indent.adjustMultilineComment = false;
    }
    const {
      auxiliaryCommentBefore,
      auxiliaryCommentAfter,
      shouldPrintComment
    } = format2;
    if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {
      format2.auxiliaryCommentBefore = void 0;
    }
    if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {
      format2.auxiliaryCommentAfter = void 0;
    }
    return format2;
  }
  {
    lib$I.CodeGenerator = class CodeGenerator {
      constructor(ast, opts = {}, code) {
        this._ast = void 0;
        this._format = void 0;
        this._map = void 0;
        this._ast = ast;
        this._format = normalizeOptions(code, opts);
        this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
      }
      generate() {
        const printer2 = new _printer.default(this._format, this._map);
        return printer2.generate(this._ast);
      }
    };
  }
  function generate2(ast, opts = {}, code) {
    const format2 = normalizeOptions(code, opts);
    const map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
    const printer2 = new _printer.default(format2, map);
    return printer2.generate(ast);
  }
  return lib$I;
}
var ancestry = {};
var hasRequiredAncestry;
function requireAncestry() {
  if (hasRequiredAncestry) return ancestry;
  hasRequiredAncestry = 1;
  Object.defineProperty(ancestry, "__esModule", {
    value: true
  });
  ancestry.find = find;
  ancestry.findParent = findParent;
  ancestry.getAncestry = getAncestry;
  ancestry.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
  ancestry.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
  ancestry.getFunctionParent = getFunctionParent;
  ancestry.getStatementParent = getStatementParent;
  ancestry.inType = inType;
  ancestry.isAncestor = isAncestor;
  ancestry.isDescendant = isDescendant;
  var _t = requireLib$O();
  const {
    VISITOR_KEYS
  } = _t;
  function findParent(callback) {
    let path2 = this;
    while (path2 = path2.parentPath) {
      if (callback(path2)) return path2;
    }
    return null;
  }
  function find(callback) {
    let path2 = this;
    do {
      if (callback(path2)) return path2;
    } while (path2 = path2.parentPath);
    return null;
  }
  function getFunctionParent() {
    return this.findParent((p) => p.isFunction());
  }
  function getStatementParent() {
    let path2 = this;
    do {
      if (!path2.parentPath || Array.isArray(path2.container) && path2.isStatement()) {
        break;
      } else {
        path2 = path2.parentPath;
      }
    } while (path2);
    if (path2 && (path2.isProgram() || path2.isFile())) {
      throw new Error("File/Program node, we can't possibly find a statement parent to this");
    }
    return path2;
  }
  function getEarliestCommonAncestorFrom(paths) {
    return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
      let earliest;
      const keys2 = VISITOR_KEYS[deepest.type];
      for (const ancestry2 of ancestries) {
        const path2 = ancestry2[i + 1];
        if (!earliest) {
          earliest = path2;
          continue;
        }
        if (path2.listKey && earliest.listKey === path2.listKey) {
          if (path2.key < earliest.key) {
            earliest = path2;
            continue;
          }
        }
        const earliestKeyIndex = keys2.indexOf(earliest.parentKey);
        const currentKeyIndex = keys2.indexOf(path2.parentKey);
        if (earliestKeyIndex > currentKeyIndex) {
          earliest = path2;
        }
      }
      return earliest;
    });
  }
  function getDeepestCommonAncestorFrom(paths, filter) {
    if (!paths.length) {
      return this;
    }
    if (paths.length === 1) {
      return paths[0];
    }
    let minDepth = Infinity;
    let lastCommonIndex, lastCommon;
    const ancestries = paths.map((path2) => {
      const ancestry2 = [];
      do {
        ancestry2.unshift(path2);
      } while ((path2 = path2.parentPath) && path2 !== this);
      if (ancestry2.length < minDepth) {
        minDepth = ancestry2.length;
      }
      return ancestry2;
    });
    const first = ancestries[0];
    depthLoop: for (let i = 0; i < minDepth; i++) {
      const shouldMatch = first[i];
      for (const ancestry2 of ancestries) {
        if (ancestry2[i] !== shouldMatch) {
          break depthLoop;
        }
      }
      lastCommonIndex = i;
      lastCommon = shouldMatch;
    }
    if (lastCommon) {
      if (filter) {
        return filter(lastCommon, lastCommonIndex, ancestries);
      } else {
        return lastCommon;
      }
    } else {
      throw new Error("Couldn't find intersection");
    }
  }
  function getAncestry() {
    let path2 = this;
    const paths = [];
    do {
      paths.push(path2);
    } while (path2 = path2.parentPath);
    return paths;
  }
  function isAncestor(maybeDescendant) {
    return maybeDescendant.isDescendant(this);
  }
  function isDescendant(maybeAncestor) {
    return !!this.findParent((parent) => parent === maybeAncestor);
  }
  function inType(...candidateTypes) {
    let path2 = this;
    while (path2) {
      for (const type of candidateTypes) {
        if (path2.node.type === type) return true;
      }
      path2 = path2.parentPath;
    }
    return false;
  }
  return ancestry;
}
var inference = {};
var inferers = {};
var infererReference = {};
var util$8 = {};
var hasRequiredUtil$1;
function requireUtil$1() {
  if (hasRequiredUtil$1) return util$8;
  hasRequiredUtil$1 = 1;
  Object.defineProperty(util$8, "__esModule", {
    value: true
  });
  util$8.createUnionType = createUnionType;
  var _t = requireLib$O();
  const {
    createFlowUnionType: createFlowUnionType2,
    createTSUnionType: createTSUnionType2,
    createUnionTypeAnnotation,
    isFlowType,
    isTSType
  } = _t;
  function createUnionType(types2) {
    {
      if (types2.every((v) => isFlowType(v))) {
        if (createFlowUnionType2) {
          return createFlowUnionType2(types2);
        }
        return createUnionTypeAnnotation(types2);
      } else if (types2.every((v) => isTSType(v))) {
        if (createTSUnionType2) {
          return createTSUnionType2(types2);
        }
      }
    }
  }
  return util$8;
}
var hasRequiredInfererReference;
function requireInfererReference() {
  if (hasRequiredInfererReference) return infererReference;
  hasRequiredInfererReference = 1;
  Object.defineProperty(infererReference, "__esModule", {
    value: true
  });
  infererReference.default = _default2;
  var _t = requireLib$O();
  var _util2 = requireUtil$1();
  const {
    BOOLEAN_NUMBER_BINARY_OPERATORS,
    createTypeAnnotationBasedOnTypeof: createTypeAnnotationBasedOnTypeof2,
    numberTypeAnnotation,
    voidTypeAnnotation
  } = _t;
  function _default2(node2) {
    if (!this.isReferenced()) return;
    const binding2 = this.scope.getBinding(node2.name);
    if (binding2) {
      if (binding2.identifier.typeAnnotation) {
        return binding2.identifier.typeAnnotation;
      } else {
        return getTypeAnnotationBindingConstantViolations(binding2, this, node2.name);
      }
    }
    if (node2.name === "undefined") {
      return voidTypeAnnotation();
    } else if (node2.name === "NaN" || node2.name === "Infinity") {
      return numberTypeAnnotation();
    } else if (node2.name === "arguments") ;
  }
  function getTypeAnnotationBindingConstantViolations(binding2, path2, name) {
    const types2 = [];
    const functionConstantViolations = [];
    let constantViolations = getConstantViolationsBefore(binding2, path2, functionConstantViolations);
    const testType = getConditionalAnnotation(binding2, path2, name);
    if (testType) {
      const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
      constantViolations = constantViolations.filter((path3) => testConstantViolations.indexOf(path3) < 0);
      types2.push(testType.typeAnnotation);
    }
    if (constantViolations.length) {
      constantViolations.push(...functionConstantViolations);
      for (const violation of constantViolations) {
        types2.push(violation.getTypeAnnotation());
      }
    }
    if (!types2.length) {
      return;
    }
    return (0, _util2.createUnionType)(types2);
  }
  function getConstantViolationsBefore(binding2, path2, functions) {
    const violations = binding2.constantViolations.slice();
    violations.unshift(binding2.path);
    return violations.filter((violation) => {
      violation = violation.resolve();
      const status = violation._guessExecutionStatusRelativeTo(path2);
      if (functions && status === "unknown") functions.push(violation);
      return status === "before";
    });
  }
  function inferAnnotationFromBinaryExpression(name, path2) {
    const operator = path2.node.operator;
    const right = path2.get("right").resolve();
    const left = path2.get("left").resolve();
    let target;
    if (left.isIdentifier({
      name
    })) {
      target = right;
    } else if (right.isIdentifier({
      name
    })) {
      target = left;
    }
    if (target) {
      if (operator === "===") {
        return target.getTypeAnnotation();
      }
      if (BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
        return numberTypeAnnotation();
      }
      return;
    }
    if (operator !== "===" && operator !== "==") return;
    let typeofPath;
    let typePath;
    if (left.isUnaryExpression({
      operator: "typeof"
    })) {
      typeofPath = left;
      typePath = right;
    } else if (right.isUnaryExpression({
      operator: "typeof"
    })) {
      typeofPath = right;
      typePath = left;
    }
    if (!typeofPath) return;
    if (!typeofPath.get("argument").isIdentifier({
      name
    })) return;
    typePath = typePath.resolve();
    if (!typePath.isLiteral()) return;
    const typeValue = typePath.node.value;
    if (typeof typeValue !== "string") return;
    return createTypeAnnotationBasedOnTypeof2(typeValue);
  }
  function getParentConditionalPath(binding2, path2, name) {
    let parentPath;
    while (parentPath = path2.parentPath) {
      if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
        if (path2.key === "test") {
          return;
        }
        return parentPath;
      }
      if (parentPath.isFunction()) {
        if (parentPath.parentPath.scope.getBinding(name) !== binding2) return;
      }
      path2 = parentPath;
    }
  }
  function getConditionalAnnotation(binding2, path2, name) {
    const ifStatement = getParentConditionalPath(binding2, path2, name);
    if (!ifStatement) return;
    const test2 = ifStatement.get("test");
    const paths = [test2];
    const types2 = [];
    for (let i = 0; i < paths.length; i++) {
      const path3 = paths[i];
      if (path3.isLogicalExpression()) {
        if (path3.node.operator === "&&") {
          paths.push(path3.get("left"));
          paths.push(path3.get("right"));
        }
      } else if (path3.isBinaryExpression()) {
        const type = inferAnnotationFromBinaryExpression(name, path3);
        if (type) types2.push(type);
      }
    }
    if (types2.length) {
      return {
        typeAnnotation: (0, _util2.createUnionType)(types2),
        ifStatement
      };
    }
    return getConditionalAnnotation(binding2, ifStatement, name);
  }
  return infererReference;
}
var hasRequiredInferers;
function requireInferers() {
  if (hasRequiredInferers) return inferers;
  hasRequiredInferers = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ArrayExpression = ArrayExpression;
    exports.AssignmentExpression = AssignmentExpression;
    exports.BinaryExpression = BinaryExpression;
    exports.BooleanLiteral = BooleanLiteral;
    exports.CallExpression = CallExpression;
    exports.ConditionalExpression = ConditionalExpression;
    exports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;
    Object.defineProperty(exports, "Identifier", {
      enumerable: true,
      get: function() {
        return _infererReference.default;
      }
    });
    exports.LogicalExpression = LogicalExpression;
    exports.NewExpression = NewExpression;
    exports.NullLiteral = NullLiteral;
    exports.NumericLiteral = NumericLiteral;
    exports.ObjectExpression = ObjectExpression;
    exports.ParenthesizedExpression = ParenthesizedExpression;
    exports.RegExpLiteral = RegExpLiteral;
    exports.RestElement = RestElement;
    exports.SequenceExpression = SequenceExpression;
    exports.StringLiteral = StringLiteral;
    exports.TSAsExpression = TSAsExpression;
    exports.TSNonNullExpression = TSNonNullExpression;
    exports.TaggedTemplateExpression = TaggedTemplateExpression;
    exports.TemplateLiteral = TemplateLiteral;
    exports.TypeCastExpression = TypeCastExpression;
    exports.UnaryExpression = UnaryExpression;
    exports.UpdateExpression = UpdateExpression;
    exports.VariableDeclarator = VariableDeclarator;
    var _t = requireLib$O();
    var _infererReference = requireInfererReference();
    var _util2 = requireUtil$1();
    const {
      BOOLEAN_BINARY_OPERATORS,
      BOOLEAN_UNARY_OPERATORS,
      NUMBER_BINARY_OPERATORS,
      NUMBER_UNARY_OPERATORS,
      STRING_UNARY_OPERATORS,
      anyTypeAnnotation,
      arrayTypeAnnotation,
      booleanTypeAnnotation,
      buildMatchMemberExpression: buildMatchMemberExpression2,
      genericTypeAnnotation,
      identifier: identifier2,
      nullLiteralTypeAnnotation,
      numberTypeAnnotation,
      stringTypeAnnotation,
      tupleTypeAnnotation,
      unionTypeAnnotation,
      voidTypeAnnotation,
      isIdentifier
    } = _t;
    function VariableDeclarator() {
      if (!this.get("id").isIdentifier()) return;
      return this.get("init").getTypeAnnotation();
    }
    function TypeCastExpression(node2) {
      return node2.typeAnnotation;
    }
    TypeCastExpression.validParent = true;
    function TSAsExpression(node2) {
      return node2.typeAnnotation;
    }
    TSAsExpression.validParent = true;
    function TSNonNullExpression() {
      return this.get("expression").getTypeAnnotation();
    }
    function NewExpression(node2) {
      if (node2.callee.type === "Identifier") {
        return genericTypeAnnotation(node2.callee);
      }
    }
    function TemplateLiteral() {
      return stringTypeAnnotation();
    }
    function UnaryExpression(node2) {
      const operator = node2.operator;
      if (operator === "void") {
        return voidTypeAnnotation();
      } else if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
        return numberTypeAnnotation();
      } else if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
        return stringTypeAnnotation();
      } else if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
        return booleanTypeAnnotation();
      }
    }
    function BinaryExpression(node2) {
      const operator = node2.operator;
      if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
        return numberTypeAnnotation();
      } else if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
        return booleanTypeAnnotation();
      } else if (operator === "+") {
        const right = this.get("right");
        const left = this.get("left");
        if (left.isBaseType("number") && right.isBaseType("number")) {
          return numberTypeAnnotation();
        } else if (left.isBaseType("string") || right.isBaseType("string")) {
          return stringTypeAnnotation();
        }
        return unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
      }
    }
    function LogicalExpression() {
      const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
      return (0, _util2.createUnionType)(argumentTypes);
    }
    function ConditionalExpression() {
      const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
      return (0, _util2.createUnionType)(argumentTypes);
    }
    function SequenceExpression() {
      return this.get("expressions").pop().getTypeAnnotation();
    }
    function ParenthesizedExpression() {
      return this.get("expression").getTypeAnnotation();
    }
    function AssignmentExpression() {
      return this.get("right").getTypeAnnotation();
    }
    function UpdateExpression(node2) {
      const operator = node2.operator;
      if (operator === "++" || operator === "--") {
        return numberTypeAnnotation();
      }
    }
    function StringLiteral() {
      return stringTypeAnnotation();
    }
    function NumericLiteral() {
      return numberTypeAnnotation();
    }
    function BooleanLiteral() {
      return booleanTypeAnnotation();
    }
    function NullLiteral() {
      return nullLiteralTypeAnnotation();
    }
    function RegExpLiteral() {
      return genericTypeAnnotation(identifier2("RegExp"));
    }
    function ObjectExpression() {
      return genericTypeAnnotation(identifier2("Object"));
    }
    function ArrayExpression() {
      return genericTypeAnnotation(identifier2("Array"));
    }
    function RestElement() {
      return ArrayExpression();
    }
    RestElement.validParent = true;
    function Func() {
      return genericTypeAnnotation(identifier2("Function"));
    }
    const isArrayFrom = buildMatchMemberExpression2("Array.from");
    const isObjectKeys = buildMatchMemberExpression2("Object.keys");
    const isObjectValues = buildMatchMemberExpression2("Object.values");
    const isObjectEntries = buildMatchMemberExpression2("Object.entries");
    function CallExpression() {
      const {
        callee
      } = this.node;
      if (isObjectKeys(callee)) {
        return arrayTypeAnnotation(stringTypeAnnotation());
      } else if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, {
        name: "Array"
      })) {
        return arrayTypeAnnotation(anyTypeAnnotation());
      } else if (isObjectEntries(callee)) {
        return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
      }
      return resolveCall(this.get("callee"));
    }
    function TaggedTemplateExpression() {
      return resolveCall(this.get("tag"));
    }
    function resolveCall(callee) {
      callee = callee.resolve();
      if (callee.isFunction()) {
        const {
          node: node2
        } = callee;
        if (node2.async) {
          if (node2.generator) {
            return genericTypeAnnotation(identifier2("AsyncIterator"));
          } else {
            return genericTypeAnnotation(identifier2("Promise"));
          }
        } else {
          if (node2.generator) {
            return genericTypeAnnotation(identifier2("Iterator"));
          } else if (callee.node.returnType) {
            return callee.node.returnType;
          } else ;
        }
      }
    }
  })(inferers);
  return inferers;
}
var hasRequiredInference;
function requireInference() {
  if (hasRequiredInference) return inference;
  hasRequiredInference = 1;
  Object.defineProperty(inference, "__esModule", {
    value: true
  });
  inference._getTypeAnnotation = _getTypeAnnotation;
  inference.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
  inference.couldBeBaseType = couldBeBaseType;
  inference.getTypeAnnotation = getTypeAnnotation;
  inference.isBaseType = isBaseType;
  inference.isGenericType = isGenericType;
  var inferers2 = requireInferers();
  var _t = requireLib$O();
  const {
    anyTypeAnnotation,
    isAnyTypeAnnotation,
    isArrayTypeAnnotation,
    isBooleanTypeAnnotation,
    isEmptyTypeAnnotation,
    isFlowBaseAnnotation,
    isGenericTypeAnnotation,
    isIdentifier,
    isMixedTypeAnnotation,
    isNumberTypeAnnotation,
    isStringTypeAnnotation,
    isTSArrayType,
    isTSTypeAnnotation,
    isTSTypeReference,
    isTupleTypeAnnotation,
    isTypeAnnotation,
    isUnionTypeAnnotation,
    isVoidTypeAnnotation,
    stringTypeAnnotation,
    voidTypeAnnotation
  } = _t;
  function getTypeAnnotation() {
    let type = this.getData("typeAnnotation");
    if (type != null) {
      return type;
    }
    type = this._getTypeAnnotation() || anyTypeAnnotation();
    if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {
      type = type.typeAnnotation;
    }
    this.setData("typeAnnotation", type);
    return type;
  }
  const typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
  function _getTypeAnnotation() {
    const node2 = this.node;
    if (!node2) {
      if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
        const declar = this.parentPath.parentPath;
        const declarParent = declar.parentPath;
        if (declar.key === "left" && declarParent.isForInStatement()) {
          return stringTypeAnnotation();
        }
        if (declar.key === "left" && declarParent.isForOfStatement()) {
          return anyTypeAnnotation();
        }
        return voidTypeAnnotation();
      } else {
        return;
      }
    }
    if (node2.typeAnnotation) {
      return node2.typeAnnotation;
    }
    if (typeAnnotationInferringNodes.has(node2)) {
      return;
    }
    typeAnnotationInferringNodes.add(node2);
    try {
      var _inferer;
      let inferer = inferers2[node2.type];
      if (inferer) {
        return inferer.call(this, node2);
      }
      inferer = inferers2[this.parentPath.type];
      if ((_inferer = inferer) != null && _inferer.validParent) {
        return this.parentPath.getTypeAnnotation();
      }
    } finally {
      typeAnnotationInferringNodes.delete(node2);
    }
  }
  function isBaseType(baseName, soft) {
    return _isBaseType(baseName, this.getTypeAnnotation(), soft);
  }
  function _isBaseType(baseName, type, soft) {
    if (baseName === "string") {
      return isStringTypeAnnotation(type);
    } else if (baseName === "number") {
      return isNumberTypeAnnotation(type);
    } else if (baseName === "boolean") {
      return isBooleanTypeAnnotation(type);
    } else if (baseName === "any") {
      return isAnyTypeAnnotation(type);
    } else if (baseName === "mixed") {
      return isMixedTypeAnnotation(type);
    } else if (baseName === "empty") {
      return isEmptyTypeAnnotation(type);
    } else if (baseName === "void") {
      return isVoidTypeAnnotation(type);
    } else {
      if (soft) {
        return false;
      } else {
        throw new Error(`Unknown base type ${baseName}`);
      }
    }
  }
  function couldBeBaseType(name) {
    const type = this.getTypeAnnotation();
    if (isAnyTypeAnnotation(type)) return true;
    if (isUnionTypeAnnotation(type)) {
      for (const type2 of type.types) {
        if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
          return true;
        }
      }
      return false;
    } else {
      return _isBaseType(name, type, true);
    }
  }
  function baseTypeStrictlyMatches(rightArg) {
    const left = this.getTypeAnnotation();
    const right = rightArg.getTypeAnnotation();
    if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {
      return right.type === left.type;
    }
    return false;
  }
  function isGenericType(genericName) {
    const type = this.getTypeAnnotation();
    if (genericName === "Array") {
      if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {
        return true;
      }
    }
    return isGenericTypeAnnotation(type) && isIdentifier(type.id, {
      name: genericName
    }) || isTSTypeReference(type) && isIdentifier(type.typeName, {
      name: genericName
    });
  }
  return inference;
}
var replacement = {};
var lib$H = {};
var lib$G = {};
var jsTokens = {};
var hasRequiredJsTokens;
function requireJsTokens() {
  if (hasRequiredJsTokens) return jsTokens;
  hasRequiredJsTokens = 1;
  Object.defineProperty(jsTokens, "__esModule", {
    value: true
  });
  jsTokens.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
  jsTokens.matchToToken = function(match) {
    var token2 = { type: "invalid", value: match[0], closed: void 0 };
    if (match[1]) token2.type = "string", token2.closed = !!(match[3] || match[4]);
    else if (match[5]) token2.type = "comment";
    else if (match[6]) token2.type = "comment", token2.closed = !!match[7];
    else if (match[8]) token2.type = "regex";
    else if (match[9]) token2.type = "number";
    else if (match[10]) token2.type = "name";
    else if (match[11]) token2.type = "punctuator";
    else if (match[12]) token2.type = "whitespace";
    return token2;
  };
  return jsTokens;
}
var picocolors_browser = { exports: {} };
var hasRequiredPicocolors_browser;
function requirePicocolors_browser() {
  if (hasRequiredPicocolors_browser) return picocolors_browser.exports;
  hasRequiredPicocolors_browser = 1;
  var x2 = String;
  var create2 = function() {
    return { isColorSupported: false, reset: x2, bold: x2, dim: x2, italic: x2, underline: x2, inverse: x2, hidden: x2, strikethrough: x2, black: x2, red: x2, green: x2, yellow: x2, blue: x2, magenta: x2, cyan: x2, white: x2, gray: x2, bgBlack: x2, bgRed: x2, bgGreen: x2, bgYellow: x2, bgBlue: x2, bgMagenta: x2, bgCyan: x2, bgWhite: x2 };
  };
  picocolors_browser.exports = create2();
  picocolors_browser.exports.createColors = create2;
  return picocolors_browser.exports;
}
var chalk = { exports: {} };
var escapeStringRegexp;
var hasRequiredEscapeStringRegexp;
function requireEscapeStringRegexp() {
  if (hasRequiredEscapeStringRegexp) return escapeStringRegexp;
  hasRequiredEscapeStringRegexp = 1;
  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
  escapeStringRegexp = function(str) {
    if (typeof str !== "string") {
      throw new TypeError("Expected a string");
    }
    return str.replace(matchOperatorsRe, "\\$&");
  };
  return escapeStringRegexp;
}
var ansiStyles = { exports: {} };
var conversions = { exports: {} };
var colorName;
var hasRequiredColorName;
function requireColorName() {
  if (hasRequiredColorName) return colorName;
  hasRequiredColorName = 1;
  colorName = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
  return colorName;
}
var hasRequiredConversions;
function requireConversions() {
  if (hasRequiredConversions) return conversions.exports;
  hasRequiredConversions = 1;
  var cssKeywords = requireColorName();
  var reverseKeywords = {};
  for (var key2 in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key2)) {
      reverseKeywords[cssKeywords[key2]] = key2;
    }
  }
  var convert = conversions.exports = {
    rgb: { channels: 3, labels: "rgb" },
    hsl: { channels: 3, labels: "hsl" },
    hsv: { channels: 3, labels: "hsv" },
    hwb: { channels: 3, labels: "hwb" },
    cmyk: { channels: 4, labels: "cmyk" },
    xyz: { channels: 3, labels: "xyz" },
    lab: { channels: 3, labels: "lab" },
    lch: { channels: 3, labels: "lch" },
    hex: { channels: 1, labels: ["hex"] },
    keyword: { channels: 1, labels: ["keyword"] },
    ansi16: { channels: 1, labels: ["ansi16"] },
    ansi256: { channels: 1, labels: ["ansi256"] },
    hcg: { channels: 3, labels: ["h", "c", "g"] },
    apple: { channels: 3, labels: ["r16", "g16", "b16"] },
    gray: { channels: 1, labels: ["gray"] }
  };
  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      var channels = convert[model].channels;
      var labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", { value: channels });
      Object.defineProperty(convert[model], "labels", { value: labels });
    }
  }
  convert.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff2 = v - Math.min(r, g, b);
    var diffc = function(c2) {
      return (v - c2) / 6 / diff2 + 1 / 2;
    };
    if (diff2 === 0) {
      h = s = 0;
    } else {
      s = diff2 / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c2;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c2 = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c2 * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x2, y) {
    return Math.pow(x2[0] - y[0], 2) + Math.pow(x2[1] - y[1], 2) + Math.pow(x2[2] - y[2], 2);
  }
  convert.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for (var keyword2 in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword2)) {
        var value2 = cssKeywords[keyword2];
        var distance = comparativeDistance(rgb, value2);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword2;
        }
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword2) {
    return cssKeywords[keyword2];
  };
  convert.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x2 = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x2 * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function(rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x2 = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x2 /= 95.047;
    y /= 100;
    z /= 108.883;
    x2 = x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787 * x2 + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x2 - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh);
    var r;
    var g;
    var b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    var c2 = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c2 * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function(xyz) {
    var x2 = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x2 * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x2 * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x2 * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function(xyz) {
    var x2 = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x2 /= 95.047;
    y /= 100;
    z /= 108.883;
    x2 = x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787 * x2 + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x2 - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x2;
    var y;
    var z;
    y = (l + 16) / 116;
    x2 = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x22 = Math.pow(x2, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x2 *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x2, y, z];
  };
  convert.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c2;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c2 = Math.sqrt(a * a + b * b);
    return [l, c2, h];
  };
  convert.lch.lab = function(lch) {
    var l = lch[0];
    var c2 = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c2 * Math.cos(hr);
    b = c2 * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value2 = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
    value2 = Math.round(value2 / 50);
    if (value2 === 0) {
      return 30;
    }
    var ansi2 = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value2 === 2) {
      ansi2 += 60;
    }
    return ansi2;
  };
  convert.hsv.ansi16 = function(args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi2 = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi2;
  };
  convert.ansi16.rgb = function(args) {
    var color = args % 10;
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function(args) {
    if (args >= 232) {
      var c2 = (args - 232) * 10 + 8;
      return [c2, c2, c2];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function(args) {
    var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    var string2 = integer.toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert.hex.rgb = function(args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map(function(char) {
        return char + char;
      }).join("");
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 255;
    var g = integer >> 8 & 255;
    var b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c2 = 1;
    var f = 0;
    if (l < 0.5) {
      c2 = 2 * s * l;
    } else {
      c2 = 2 * s * (1 - l);
    }
    if (c2 < 1) {
      f = (l - 0.5 * c2) / (1 - c2);
    }
    return [hsl[0], c2 * 100, f * 100];
  };
  convert.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c2 = s * v;
    var f = 0;
    if (c2 < 1) {
      f = (v - c2) / (1 - c2);
    }
    return [hsv[0], c2 * 100, f * 100];
  };
  convert.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c2 = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c2 === 0) {
      return [g * 255, g * 255, g * 255];
    }
    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c2) * g;
    return [
      (c2 * pure[0] + mg) * 255,
      (c2 * pure[1] + mg) * 255,
      (c2 * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    var c2 = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c2 + g * (1 - c2);
    var f = 0;
    if (v > 0) {
      f = c2 / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function(hcg) {
    var c2 = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1 - c2) + 0.5 * c2;
    var s = 0;
    if (l > 0 && l < 0.5) {
      s = c2 / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c2 / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function(hcg) {
    var c2 = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c2 + g * (1 - c2);
    return [hcg[0], (v - c2) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c2 = v - w;
    var g = 0;
    if (c2 < 1) {
      g = (v - c2) / (1 - c2);
    }
    return [hwb[0], c2 * 100, g * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = convert.gray.hsv = function(args) {
    return [0, 0, args[0]];
  };
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    var val = Math.round(gray[0] / 100 * 255) & 255;
    var integer = (val << 16) + (val << 8) + val;
    var string2 = integer.toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert.rgb.gray = function(rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
  return conversions.exports;
}
var route;
var hasRequiredRoute;
function requireRoute() {
  if (hasRequiredRoute) return route;
  hasRequiredRoute = 1;
  var conversions2 = requireConversions();
  function buildGraph() {
    var graph = {};
    var models = Object.keys(conversions2);
    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions2[current]);
      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node2 = graph[adjacent];
        if (node2.distance === -1) {
          node2.distance = graph[current].distance + 1;
          node2.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    var path2 = [graph[toModel].parent, toModel];
    var fn2 = conversions2[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path2.unshift(graph[cur].parent);
      fn2 = link(conversions2[graph[cur].parent][cur], fn2);
      cur = graph[cur].parent;
    }
    fn2.conversion = path2;
    return fn2;
  }
  route = function(fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion2 = {};
    var models = Object.keys(graph);
    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node2 = graph[toModel];
      if (node2.parent === null) {
        continue;
      }
      conversion2[toModel] = wrapConversion(toModel, graph);
    }
    return conversion2;
  };
  return route;
}
var colorConvert;
var hasRequiredColorConvert;
function requireColorConvert() {
  if (hasRequiredColorConvert) return colorConvert;
  hasRequiredColorConvert = 1;
  var conversions2 = requireConversions();
  var route2 = requireRoute();
  var convert = {};
  var models = Object.keys(conversions2);
  function wrapRaw(fn2) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      return fn2(args);
    };
    if ("conversion" in fn2) {
      wrappedFn.conversion = fn2.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn2) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      var result = fn2(args);
      if (typeof result === "object") {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn2) {
      wrappedFn.conversion = fn2.conversion;
    }
    return wrappedFn;
  }
  models.forEach(function(fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", { value: conversions2[fromModel].channels });
    Object.defineProperty(convert[fromModel], "labels", { value: conversions2[fromModel].labels });
    var routes = route2(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function(toModel) {
      var fn2 = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn2);
      convert[fromModel][toModel].raw = wrapRaw(fn2);
    });
  });
  colorConvert = convert;
  return colorConvert;
}
ansiStyles.exports;
var hasRequiredAnsiStyles;
function requireAnsiStyles() {
  if (hasRequiredAnsiStyles) return ansiStyles.exports;
  hasRequiredAnsiStyles = 1;
  (function(module) {
    const colorConvert2 = requireColorConvert();
    const wrapAnsi16 = (fn2, offset) => function() {
      const code = fn2.apply(colorConvert2, arguments);
      return `\x1B[${code + offset}m`;
    };
    const wrapAnsi256 = (fn2, offset) => function() {
      const code = fn2.apply(colorConvert2, arguments);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    const wrapAnsi16m = (fn2, offset) => function() {
      const rgb = fn2.apply(colorConvert2, arguments);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles2 = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          gray: [90, 39],
          // Bright color
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles2.color.grey = styles2.color.gray;
      for (const groupName of Object.keys(styles2)) {
        const group = styles2[groupName];
        for (const styleName of Object.keys(group)) {
          const style = group[styleName];
          styles2[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles2[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles2, groupName, {
          value: group,
          enumerable: false
        });
        Object.defineProperty(styles2, "codes", {
          value: codes,
          enumerable: false
        });
      }
      const ansi2ansi = (n) => n;
      const rgb2rgb = (r, g, b) => [r, g, b];
      styles2.color.close = "\x1B[39m";
      styles2.bgColor.close = "\x1B[49m";
      styles2.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
      };
      styles2.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
      };
      styles2.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
      };
      styles2.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
      };
      styles2.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
      };
      styles2.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
      };
      for (let key2 of Object.keys(colorConvert2)) {
        if (typeof colorConvert2[key2] !== "object") {
          continue;
        }
        const suite = colorConvert2[key2];
        if (key2 === "ansi16") {
          key2 = "ansi";
        }
        if ("ansi16" in suite) {
          styles2.color.ansi[key2] = wrapAnsi16(suite.ansi16, 0);
          styles2.bgColor.ansi[key2] = wrapAnsi16(suite.ansi16, 10);
        }
        if ("ansi256" in suite) {
          styles2.color.ansi256[key2] = wrapAnsi256(suite.ansi256, 0);
          styles2.bgColor.ansi256[key2] = wrapAnsi256(suite.ansi256, 10);
        }
        if ("rgb" in suite) {
          styles2.color.ansi16m[key2] = wrapAnsi16m(suite.rgb, 0);
          styles2.bgColor.ansi16m[key2] = wrapAnsi16m(suite.rgb, 10);
        }
      }
      return styles2;
    }
    Object.defineProperty(module, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  })(ansiStyles);
  return ansiStyles.exports;
}
var browser$1;
var hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1) return browser$1;
  hasRequiredBrowser$1 = 1;
  browser$1 = {
    stdout: false,
    stderr: false
  };
  return browser$1;
}
var templates;
var hasRequiredTemplates;
function requireTemplates() {
  if (hasRequiredTemplates) return templates;
  hasRequiredTemplates = 1;
  const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
  const ESCAPES = /* @__PURE__ */ new Map([
    ["n", "\n"],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", "\x1B"],
    ["a", "\x07"]
  ]);
  function unescape2(c2) {
    if (c2[0] === "u" && c2.length === 5 || c2[0] === "x" && c2.length === 3) {
      return String.fromCharCode(parseInt(c2.slice(1), 16));
    }
    return ESCAPES.get(c2) || c2;
  }
  function parseArguments(name, args) {
    const results = [];
    const chunks = args.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      if (!isNaN(chunk)) {
        results.push(Number(chunk));
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape2, chr) => escape2 ? unescape2(escape2) : chr));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name = matches[1];
      if (matches[2]) {
        const args = parseArguments(name, matches[2]);
        results.push([name].concat(args));
      } else {
        results.push([name]);
      }
    }
    return results;
  }
  function buildStyle(chalk2, styles2) {
    const enabled = {};
    for (const layer of styles2) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk2;
    for (const styleName of Object.keys(enabled)) {
      if (Array.isArray(enabled[styleName])) {
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        if (enabled[styleName].length > 0) {
          current = current[styleName].apply(current, enabled[styleName]);
        } else {
          current = current[styleName];
        }
      }
    }
    return current;
  }
  templates = (chalk2, tmp) => {
    const styles2 = [];
    const chunks = [];
    let chunk = [];
    tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
      if (escapeChar) {
        chunk.push(unescape2(escapeChar));
      } else if (style) {
        const str = chunk.join("");
        chunk = [];
        chunks.push(styles2.length === 0 ? str : buildStyle(chalk2, styles2)(str));
        styles2.push({ inverse, styles: parseStyle(style) });
      } else if (close) {
        if (styles2.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk2, styles2)(chunk.join("")));
        chunk = [];
        styles2.pop();
      } else {
        chunk.push(chr);
      }
    });
    chunks.push(chunk.join(""));
    if (styles2.length > 0) {
      const errMsg = `Chalk template literal is missing ${styles2.length} closing bracket${styles2.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMsg);
    }
    return chunks.join("");
  };
  return templates;
}
var hasRequiredChalk;
function requireChalk() {
  if (hasRequiredChalk) return chalk.exports;
  hasRequiredChalk = 1;
  (function(module) {
    const escapeStringRegexp2 = requireEscapeStringRegexp();
    const ansiStyles2 = requireAnsiStyles();
    const stdoutColor2 = requireBrowser$1().stdout;
    const template2 = requireTemplates();
    const isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
    const levelMapping2 = ["ansi", "ansi", "ansi256", "ansi16m"];
    const skipModels = /* @__PURE__ */ new Set(["gray"]);
    const styles2 = /* @__PURE__ */ Object.create(null);
    function applyOptions2(obj, options2) {
      options2 = options2 || {};
      const scLevel = stdoutColor2 ? stdoutColor2.level : 0;
      obj.level = options2.level === void 0 ? scLevel : options2.level;
      obj.enabled = "enabled" in options2 ? options2.enabled : obj.level > 0;
    }
    function Chalk2(options2) {
      if (!this || !(this instanceof Chalk2) || this.template) {
        const chalk2 = {};
        applyOptions2(chalk2, options2);
        chalk2.template = function() {
          const args = [].slice.call(arguments);
          return chalkTag2.apply(null, [chalk2.template].concat(args));
        };
        Object.setPrototypeOf(chalk2, Chalk2.prototype);
        Object.setPrototypeOf(chalk2.template, chalk2);
        chalk2.template.constructor = Chalk2;
        return chalk2.template;
      }
      applyOptions2(this, options2);
    }
    if (isSimpleWindowsTerm) {
      ansiStyles2.blue.open = "\x1B[94m";
    }
    for (const key2 of Object.keys(ansiStyles2)) {
      ansiStyles2[key2].closeRe = new RegExp(escapeStringRegexp2(ansiStyles2[key2].close), "g");
      styles2[key2] = {
        get() {
          const codes = ansiStyles2[key2];
          return build2.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key2);
        }
      };
    }
    styles2.visible = {
      get() {
        return build2.call(this, this._styles || [], true, "visible");
      }
    };
    ansiStyles2.color.closeRe = new RegExp(escapeStringRegexp2(ansiStyles2.color.close), "g");
    for (const model of Object.keys(ansiStyles2.color.ansi)) {
      if (skipModels.has(model)) {
        continue;
      }
      styles2[model] = {
        get() {
          const level = this.level;
          return function() {
            const open = ansiStyles2.color[levelMapping2[level]][model].apply(null, arguments);
            const codes = {
              open,
              close: ansiStyles2.color.close,
              closeRe: ansiStyles2.color.closeRe
            };
            return build2.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    }
    ansiStyles2.bgColor.closeRe = new RegExp(escapeStringRegexp2(ansiStyles2.bgColor.close), "g");
    for (const model of Object.keys(ansiStyles2.bgColor.ansi)) {
      if (skipModels.has(model)) {
        continue;
      }
      const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles2[bgModel] = {
        get() {
          const level = this.level;
          return function() {
            const open = ansiStyles2.bgColor[levelMapping2[level]][model].apply(null, arguments);
            const codes = {
              open,
              close: ansiStyles2.bgColor.close,
              closeRe: ansiStyles2.bgColor.closeRe
            };
            return build2.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    }
    const proto2 = Object.defineProperties(() => {
    }, styles2);
    function build2(_styles, _empty, key2) {
      const builder2 = function() {
        return applyStyle2.apply(builder2, arguments);
      };
      builder2._styles = _styles;
      builder2._empty = _empty;
      const self = this;
      Object.defineProperty(builder2, "level", {
        enumerable: true,
        get() {
          return self.level;
        },
        set(level) {
          self.level = level;
        }
      });
      Object.defineProperty(builder2, "enabled", {
        enumerable: true,
        get() {
          return self.enabled;
        },
        set(enabled) {
          self.enabled = enabled;
        }
      });
      builder2.hasGrey = this.hasGrey || key2 === "gray" || key2 === "grey";
      builder2.__proto__ = proto2;
      return builder2;
    }
    function applyStyle2() {
      const args = arguments;
      const argsLen = args.length;
      let str = String(arguments[0]);
      if (argsLen === 0) {
        return "";
      }
      if (argsLen > 1) {
        for (let a = 1; a < argsLen; a++) {
          str += " " + args[a];
        }
      }
      if (!this.enabled || this.level <= 0 || !str) {
        return this._empty ? "" : str;
      }
      const originalDim = ansiStyles2.dim.open;
      if (isSimpleWindowsTerm && this.hasGrey) {
        ansiStyles2.dim.open = "";
      }
      for (const code of this._styles.slice().reverse()) {
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
        str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
      }
      ansiStyles2.dim.open = originalDim;
      return str;
    }
    function chalkTag2(chalk2, strings) {
      if (!Array.isArray(strings)) {
        return [].slice.call(arguments, 1).join(" ");
      }
      const args = [].slice.call(arguments, 2);
      const parts = [strings.raw[0]];
      for (let i = 1; i < strings.length; i++) {
        parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
        parts.push(String(strings.raw[i]));
      }
      return template2(chalk2, parts.join(""));
    }
    Object.defineProperties(Chalk2.prototype, styles2);
    module.exports = Chalk2();
    module.exports.supportsColor = stdoutColor2;
    module.exports.default = module.exports;
  })(chalk);
  return chalk.exports;
}
var hasRequiredLib$K;
function requireLib$K() {
  if (hasRequiredLib$K) return lib$G;
  hasRequiredLib$K = 1;
  Object.defineProperty(lib$G, "__esModule", {
    value: true
  });
  lib$G.default = highlight2;
  lib$G.shouldHighlight = shouldHighlight2;
  var _jsTokens2 = requireJsTokens();
  var _helperValidatorIdentifier2 = requireLib$Q();
  var _picocolors2 = _interopRequireWildcard2(requirePicocolors_browser(), true);
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const colors2 = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors2.createColors)(false) : _picocolors2.default;
  const compose2 = (f, g) => (v) => f(g(v));
  const sometimesKeywords2 = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]);
  function getDefs2(colors3) {
    return {
      keyword: colors3.cyan,
      capitalized: colors3.yellow,
      jsxIdentifier: colors3.yellow,
      punctuator: colors3.yellow,
      number: colors3.magenta,
      string: colors3.green,
      regex: colors3.magenta,
      comment: colors3.gray,
      invalid: compose2(compose2(colors3.white, colors3.bgRed), colors3.bold)
    };
  }
  const NEWLINE2 = /\r\n|[\n\r\u2028\u2029]/;
  const BRACKET2 = /^[()[\]{}]$/;
  let tokenize2;
  {
    const JSX_TAG = /^[a-z][\w-]*$/i;
    const getTokenType = function(token2, offset, text2) {
      if (token2.type === "name") {
        if ((0, _helperValidatorIdentifier2.isKeyword)(token2.value) || (0, _helperValidatorIdentifier2.isStrictReservedWord)(token2.value, true) || sometimesKeywords2.has(token2.value)) {
          return "keyword";
        }
        if (JSX_TAG.test(token2.value) && (text2[offset - 1] === "<" || text2.slice(offset - 2, offset) == "</")) {
          return "jsxIdentifier";
        }
        if (token2.value[0] !== token2.value[0].toLowerCase()) {
          return "capitalized";
        }
      }
      if (token2.type === "punctuator" && BRACKET2.test(token2.value)) {
        return "bracket";
      }
      if (token2.type === "invalid" && (token2.value === "@" || token2.value === "#")) {
        return "punctuator";
      }
      return token2.type;
    };
    tokenize2 = function* (text2) {
      let match;
      while (match = _jsTokens2.default.exec(text2)) {
        const token2 = _jsTokens2.matchToToken(match);
        yield {
          type: getTokenType(token2, match.index, text2),
          value: token2.value
        };
      }
    };
  }
  function highlightTokens2(defs, text2) {
    let highlighted = "";
    for (const {
      type,
      value: value2
    } of tokenize2(text2)) {
      const colorize = defs[type];
      if (colorize) {
        highlighted += value2.split(NEWLINE2).map((str) => colorize(str)).join("\n");
      } else {
        highlighted += value2;
      }
    }
    return highlighted;
  }
  function shouldHighlight2(options2) {
    return colors2.isColorSupported || options2.forceColor;
  }
  let pcWithForcedColor2 = void 0;
  function getColors2(forceColor) {
    if (forceColor) {
      var _pcWithForcedColor;
      (_pcWithForcedColor = pcWithForcedColor2) != null ? _pcWithForcedColor : pcWithForcedColor2 = (0, _picocolors2.createColors)(true);
      return pcWithForcedColor2;
    }
    return colors2;
  }
  function highlight2(code, options2 = {}) {
    if (code !== "" && shouldHighlight2(options2)) {
      const defs = getDefs2(getColors2(options2.forceColor));
      return highlightTokens2(defs, code);
    } else {
      return code;
    }
  }
  {
    let chalk2, chalkWithForcedColor;
    lib$G.getChalk = ({
      forceColor
    }) => {
      var _chalk2;
      (_chalk2 = chalk2) != null ? _chalk2 : chalk2 = requireChalk();
      if (forceColor) {
        var _chalkWithForcedColor;
        (_chalkWithForcedColor = chalkWithForcedColor) != null ? _chalkWithForcedColor : chalkWithForcedColor = new chalk2.constructor({
          enabled: true,
          level: 1
        });
        return chalkWithForcedColor;
      }
      return chalk2;
    };
  }
  return lib$G;
}
var hasRequiredLib$J;
function requireLib$J() {
  if (hasRequiredLib$J) return lib$H;
  hasRequiredLib$J = 1;
  Object.defineProperty(lib$H, "__esModule", {
    value: true
  });
  lib$H.codeFrameColumns = codeFrameColumns2;
  lib$H.default = _default2;
  var _highlight2 = requireLib$K();
  var _picocolors2 = _interopRequireWildcard2(requirePicocolors_browser(), true);
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const colors2 = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors2.createColors)(false) : _picocolors2.default;
  const compose2 = (f, g) => (v) => f(g(v));
  let pcWithForcedColor2 = void 0;
  function getColors2(forceColor) {
    if (forceColor) {
      var _pcWithForcedColor;
      (_pcWithForcedColor = pcWithForcedColor2) != null ? _pcWithForcedColor : pcWithForcedColor2 = (0, _picocolors2.createColors)(true);
      return pcWithForcedColor2;
    }
    return colors2;
  }
  let deprecationWarningShown2 = false;
  function getDefs2(colors3) {
    return {
      gutter: colors3.gray,
      marker: compose2(colors3.red, colors3.bold),
      message: compose2(colors3.red, colors3.bold)
    };
  }
  const NEWLINE2 = /\r\n|[\n\r\u2028\u2029]/;
  function getMarkerLines2(loc, source2, opts) {
    const startLoc = Object.assign({
      column: 0,
      line: -1
    }, loc.start);
    const endLoc = Object.assign({}, startLoc, loc.end);
    const {
      linesAbove = 2,
      linesBelow = 3
    } = opts || {};
    const startLine = startLoc.line;
    const startColumn = startLoc.column;
    const endLine = endLoc.line;
    const endColumn = endLoc.column;
    let start = Math.max(startLine - (linesAbove + 1), 0);
    let end = Math.min(source2.length, endLine + linesBelow);
    if (startLine === -1) {
      start = 0;
    }
    if (endLine === -1) {
      end = source2.length;
    }
    const lineDiff = endLine - startLine;
    const markerLines = {};
    if (lineDiff) {
      for (let i = 0; i <= lineDiff; i++) {
        const lineNumber = i + startLine;
        if (!startColumn) {
          markerLines[lineNumber] = true;
        } else if (i === 0) {
          const sourceLength = source2[lineNumber - 1].length;
          markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
        } else if (i === lineDiff) {
          markerLines[lineNumber] = [0, endColumn];
        } else {
          const sourceLength = source2[lineNumber - i].length;
          markerLines[lineNumber] = [0, sourceLength];
        }
      }
    } else {
      if (startColumn === endColumn) {
        if (startColumn) {
          markerLines[startLine] = [startColumn, 0];
        } else {
          markerLines[startLine] = true;
        }
      } else {
        markerLines[startLine] = [startColumn, endColumn - startColumn];
      }
    }
    return {
      start,
      end,
      markerLines
    };
  }
  function codeFrameColumns2(rawLines, loc, opts = {}) {
    const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight2.shouldHighlight)(opts);
    const colors3 = getColors2(opts.forceColor);
    const defs = getDefs2(colors3);
    const maybeHighlight = (fmt, string2) => {
      return highlighted ? fmt(string2) : string2;
    };
    const lines = rawLines.split(NEWLINE2);
    const {
      start,
      end,
      markerLines
    } = getMarkerLines2(loc, lines, opts);
    const hasColumns = loc.start && typeof loc.start.column === "number";
    const numberMaxWidth = String(end).length;
    const highlightedLines = highlighted ? (0, _highlight2.default)(rawLines, opts) : rawLines;
    let frame = highlightedLines.split(NEWLINE2, end).slice(start, end).map((line2, index2) => {
      const number2 = start + 1 + index2;
      const paddedNumber = ` ${number2}`.slice(-numberMaxWidth);
      const gutter = ` ${paddedNumber} |`;
      const hasMarker = markerLines[number2];
      const lastMarkerLine = !markerLines[number2 + 1];
      if (hasMarker) {
        let markerLine = "";
        if (Array.isArray(hasMarker)) {
          const markerSpacing = line2.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
          const numberOfMarkers = hasMarker[1] || 1;
          markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
          if (lastMarkerLine && opts.message) {
            markerLine += " " + maybeHighlight(defs.message, opts.message);
          }
        }
        return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line2.length > 0 ? ` ${line2}` : "", markerLine].join("");
      } else {
        return ` ${maybeHighlight(defs.gutter, gutter)}${line2.length > 0 ? ` ${line2}` : ""}`;
      }
    }).join("\n");
    if (opts.message && !hasColumns) {
      frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
    }
    if (highlighted) {
      return colors3.reset(frame);
    } else {
      return frame;
    }
  }
  function _default2(rawLines, lineNumber, colNumber, opts = {}) {
    if (!deprecationWarningShown2) {
      deprecationWarningShown2 = true;
      const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      if (process.emitWarning) {
        process.emitWarning(message, "DeprecationWarning");
      } else {
        const deprecationError = new Error(message);
        deprecationError.name = "DeprecationWarning";
        console.warn(new Error(message));
      }
    }
    colNumber = Math.max(colNumber, 0);
    const location = {
      start: {
        column: colNumber,
        line: lineNumber
      }
    };
    return codeFrameColumns2(rawLines, location, opts);
  }
  return lib$H;
}
var lib$F = {};
var hasRequiredLib$I;
function requireLib$I() {
  if (hasRequiredLib$I) return lib$F;
  hasRequiredLib$I = 1;
  Object.defineProperty(lib$F, "__esModule", {
    value: true
  });
  function _objectWithoutPropertiesLoose(source2, excluded) {
    if (source2 == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key2, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key2 = sourceKeys[i];
      if (excluded.indexOf(key2) >= 0) continue;
      target[key2] = source2[key2];
    }
    return target;
  }
  class Position {
    constructor(line2, col, index2) {
      this.line = void 0;
      this.column = void 0;
      this.index = void 0;
      this.line = line2;
      this.column = col;
      this.index = index2;
    }
  }
  class SourceLocation {
    constructor(start, end) {
      this.start = void 0;
      this.end = void 0;
      this.filename = void 0;
      this.identifierName = void 0;
      this.start = start;
      this.end = end;
    }
  }
  function createPositionWithColumnOffset(position, columnOffset) {
    const {
      line: line2,
      column: column2,
      index: index2
    } = position;
    return new Position(line2, column2 + columnOffset, index2 + columnOffset);
  }
  const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
  var ModuleErrors = {
    ImportMetaOutsideModule: {
      message: `import.meta may appear only with 'sourceType: "module"'`,
      code
    },
    ImportOutsideModule: {
      message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
      code
    }
  };
  const NodeDescriptions = {
    ArrayPattern: "array destructuring pattern",
    AssignmentExpression: "assignment expression",
    AssignmentPattern: "assignment expression",
    ArrowFunctionExpression: "arrow function expression",
    ConditionalExpression: "conditional expression",
    CatchClause: "catch clause",
    ForOfStatement: "for-of statement",
    ForInStatement: "for-in statement",
    ForStatement: "for-loop",
    FormalParameters: "function parameter list",
    Identifier: "identifier",
    ImportSpecifier: "import specifier",
    ImportDefaultSpecifier: "import default specifier",
    ImportNamespaceSpecifier: "import namespace specifier",
    ObjectPattern: "object destructuring pattern",
    ParenthesizedExpression: "parenthesized expression",
    RestElement: "rest element",
    UpdateExpression: {
      true: "prefix operation",
      false: "postfix operation"
    },
    VariableDeclarator: "variable declaration",
    YieldExpression: "yield expression"
  };
  const toNodeDescription = ({
    type,
    prefix: prefix2
  }) => type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[String(prefix2)] : NodeDescriptions[type];
  var StandardErrors = {
    AccessorIsGenerator: ({
      kind
    }) => `A ${kind}ter cannot be a generator.`,
    ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
    AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
    AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
    AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
    AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
    AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
    BadGetterArity: "A 'get' accessor must not have any formal parameters.",
    BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
    BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
    ConstructorClassField: "Classes may not have a field named 'constructor'.",
    ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
    ConstructorIsAccessor: "Class constructor may not be an accessor.",
    ConstructorIsAsync: "Constructor can't be an async function.",
    ConstructorIsGenerator: "Constructor can't be a generator.",
    DeclarationMissingInitializer: ({
      kind
    }) => `Missing initializer in ${kind} declaration.`,
    DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
    DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
    DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
    DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
    DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
    DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
    DecoratorStaticBlock: "Decorators can't be used with a static block.",
    DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.',
    DeletePrivateField: "Deleting a private field is not allowed.",
    DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
    DuplicateConstructor: "Duplicate constructor in the same class.",
    DuplicateDefaultExport: "Only one default export allowed per module.",
    DuplicateExport: ({
      exportName
    }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
    DuplicateProto: "Redefinition of __proto__ property.",
    DuplicateRegExpFlags: "Duplicate regular expression flag.",
    DynamicImportPhaseRequiresImportExpressions: ({
      phase
    }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,
    ElementAfterRest: "Rest element must be last element.",
    EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
    ExportBindingIsString: ({
      localName,
      exportName
    }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
    ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
    ForInOfLoopInitializer: ({
      type
    }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
    ForInUsing: "For-in loop may not start with 'using' declaration.",
    ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
    ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
    GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
    IllegalBreakContinue: ({
      type
    }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
    IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
    IllegalReturn: "'return' outside of function.",
    ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.",
    ImportBindingIsString: ({
      importName
    }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`,
    ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
    ImportCallArity: ({
      maxArgumentCount
    }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`,
    ImportCallNotNewExpression: "Cannot use new with import(...).",
    ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
    ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
    ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
    ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
    IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
    InvalidBigIntLiteral: "Invalid BigIntLiteral.",
    InvalidCodePoint: "Code point out of bounds.",
    InvalidCoverInitializedName: "Invalid shorthand property initializer.",
    InvalidDecimal: "Invalid decimal.",
    InvalidDigit: ({
      radix
    }) => `Expected number in radix ${radix}.`,
    InvalidEscapeSequence: "Bad character escape sequence.",
    InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
    InvalidEscapedReservedWord: ({
      reservedWord
    }) => `Escape sequence in keyword ${reservedWord}.`,
    InvalidIdentifier: ({
      identifierName
    }) => `Invalid identifier ${identifierName}.`,
    InvalidLhs: ({
      ancestor
    }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
    InvalidLhsBinding: ({
      ancestor
    }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
    InvalidLhsOptionalChaining: ({
      ancestor
    }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
    InvalidNumber: "Invalid number.",
    InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
    InvalidOrUnexpectedToken: ({
      unexpected
    }) => `Unexpected character '${unexpected}'.`,
    InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
    InvalidPrivateFieldResolution: ({
      identifierName
    }) => `Private name #${identifierName} is not defined.`,
    InvalidPropertyBindingPattern: "Binding member expression.",
    InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
    InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
    LabelRedeclaration: ({
      labelName
    }) => `Label '${labelName}' is already declared.`,
    LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
    LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
    MalformedRegExpFlags: "Invalid regular expression flag.",
    MissingClassName: "A class name is required.",
    MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
    MissingSemicolon: "Missing semicolon.",
    MissingPlugin: ({
      missingPlugin
    }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
    MissingOneOfPlugins: ({
      missingPlugin
    }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
    MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
    MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
    ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
    ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
    ModuleAttributesWithDuplicateKeys: ({
      key: key2
    }) => `Duplicate key "${key2}" is not allowed in module attributes.`,
    ModuleExportNameHasLoneSurrogate: ({
      surrogateCharCode
    }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
    ModuleExportUndefined: ({
      localName
    }) => `Export '${localName}' is not defined.`,
    MultipleDefaultsInSwitch: "Multiple default clauses.",
    NewlineAfterThrow: "Illegal newline after throw.",
    NoCatchOrFinally: "Missing catch or finally clause.",
    NumberIdentifier: "Identifier directly after number.",
    NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
    ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
    OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
    OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
    OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
    ParamDupe: "Argument name clash.",
    PatternHasAccessor: "Object pattern can't contain getter or setter.",
    PatternHasMethod: "Object pattern can't contain methods.",
    PrivateInExpectedIn: ({
      identifierName
    }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
    PrivateNameRedeclaration: ({
      identifierName
    }) => `Duplicate private name #${identifierName}.`,
    RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    RecordNoProto: "'__proto__' is not allowed in Record expressions.",
    RestTrailingComma: "Unexpected trailing comma after rest element.",
    SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
    SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
    SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.',
    StaticPrototype: "Classes may not have static property named prototype.",
    SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
    SuperPrivateField: "Private fields can't be accessed on super.",
    TrailingDecorator: "Decorators must be attached to a class element.",
    TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
    UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
    UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
    UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
    UnexpectedKeyword: ({
      keyword: keyword2
    }) => `Unexpected keyword '${keyword2}'.`,
    UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
    UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
    UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
    UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
    UnexpectedPrivateField: "Unexpected private name.",
    UnexpectedReservedWord: ({
      reservedWord
    }) => `Unexpected reserved word '${reservedWord}'.`,
    UnexpectedSuper: "'super' is only allowed in object methods and classes.",
    UnexpectedToken: ({
      expected,
      unexpected
    }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
    UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
    UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
    UnsupportedBind: "Binding should be performed on object property.",
    UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
    UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
    UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
    UnsupportedMetaProperty: ({
      target,
      onlyValidPropertyName
    }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
    UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
    UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
    UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
    UnterminatedComment: "Unterminated comment.",
    UnterminatedRegExp: "Unterminated regular expression.",
    UnterminatedString: "Unterminated string constant.",
    UnterminatedTemplate: "Unterminated template.",
    UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
    VarRedeclaration: ({
      identifierName
    }) => `Identifier '${identifierName}' has already been declared.`,
    YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
    YieldInParameter: "Yield expression is not allowed in formal parameters.",
    ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
  };
  var StrictModeErrors = {
    StrictDelete: "Deleting local variable in strict mode.",
    StrictEvalArguments: ({
      referenceName
    }) => `Assigning to '${referenceName}' in strict mode.`,
    StrictEvalArgumentsBinding: ({
      bindingName
    }) => `Binding '${bindingName}' in strict mode.`,
    StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
    StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
    StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
    StrictWith: "'with' in strict mode."
  };
  const UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
  var PipelineOperatorErrors = {
    PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
    PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
    PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
    PipeTopicUnconfiguredToken: ({
      token: token2
    }) => `Invalid topic token ${token2}. In order to use ${token2} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token2}" }.`,
    PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
    PipeUnparenthesizedBody: ({
      type
    }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
      type
    })}; please wrap it in parentheses.`,
    PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
    PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
    PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
    PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
    PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
    PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
  };
  const _excluded = ["toMessage"], _excluded2 = ["message"];
  function defineHidden(obj, key2, value2) {
    Object.defineProperty(obj, key2, {
      enumerable: false,
      configurable: true,
      value: value2
    });
  }
  function toParseErrorConstructor(_ref) {
    let {
      toMessage
    } = _ref, properties = _objectWithoutPropertiesLoose(_ref, _excluded);
    return function constructor(loc, details) {
      const error2 = new SyntaxError();
      Object.assign(error2, properties, {
        loc,
        pos: loc.index
      });
      if ("missingPlugin" in details) {
        Object.assign(error2, {
          missingPlugin: details.missingPlugin
        });
      }
      defineHidden(error2, "clone", function clone2(overrides = {}) {
        var _overrides$loc;
        const {
          line: line2,
          column: column2,
          index: index2
        } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
        return constructor(new Position(line2, column2, index2), Object.assign({}, details, overrides.details));
      });
      defineHidden(error2, "details", details);
      Object.defineProperty(error2, "message", {
        configurable: true,
        get() {
          const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
          this.message = message;
          return message;
        },
        set(value2) {
          Object.defineProperty(this, "message", {
            value: value2,
            writable: true
          });
        }
      });
      return error2;
    };
  }
  function ParseErrorEnum(argument, syntaxPlugin) {
    if (Array.isArray(argument)) {
      return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
    }
    const ParseErrorConstructors = {};
    for (const reasonCode of Object.keys(argument)) {
      const template2 = argument[reasonCode];
      const _ref2 = typeof template2 === "string" ? {
        message: () => template2
      } : typeof template2 === "function" ? {
        message: template2
      } : template2, {
        message
      } = _ref2, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);
      const toMessage = typeof message === "string" ? () => message : message;
      ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
        code: "BABEL_PARSER_SYNTAX_ERROR",
        reasonCode,
        toMessage
      }, syntaxPlugin ? {
        syntaxPlugin
      } : {}, rest));
    }
    return ParseErrorConstructors;
  }
  const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
  const {
    defineProperty
  } = Object;
  const toUnenumerable = (object, key2) => defineProperty(object, key2, {
    enumerable: false,
    value: object[key2]
  });
  function toESTreeLocation(node2) {
    node2.loc.start && toUnenumerable(node2.loc.start, "index");
    node2.loc.end && toUnenumerable(node2.loc.end, "index");
    return node2;
  }
  var estree = (superClass) => class ESTreeParserMixin extends superClass {
    parse() {
      const file2 = toESTreeLocation(super.parse());
      if (this.options.tokens) {
        file2.tokens = file2.tokens.map(toESTreeLocation);
      }
      return file2;
    }
    parseRegExpLiteral({
      pattern,
      flags
    }) {
      let regex = null;
      try {
        regex = new RegExp(pattern, flags);
      } catch (e) {
      }
      const node2 = this.estreeParseLiteral(regex);
      node2.regex = {
        pattern,
        flags
      };
      return node2;
    }
    parseBigIntLiteral(value2) {
      let bigInt;
      try {
        bigInt = BigInt(value2);
      } catch (_unused) {
        bigInt = null;
      }
      const node2 = this.estreeParseLiteral(bigInt);
      node2.bigint = String(node2.value || value2);
      return node2;
    }
    parseDecimalLiteral(value2) {
      const decimal = null;
      const node2 = this.estreeParseLiteral(decimal);
      node2.decimal = String(node2.value || value2);
      return node2;
    }
    estreeParseLiteral(value2) {
      return this.parseLiteral(value2, "Literal");
    }
    parseStringLiteral(value2) {
      return this.estreeParseLiteral(value2);
    }
    parseNumericLiteral(value2) {
      return this.estreeParseLiteral(value2);
    }
    parseNullLiteral() {
      return this.estreeParseLiteral(null);
    }
    parseBooleanLiteral(value2) {
      return this.estreeParseLiteral(value2);
    }
    directiveToStmt(directive) {
      const expression = directive.value;
      delete directive.value;
      expression.type = "Literal";
      expression.raw = expression.extra.raw;
      expression.value = expression.extra.expressionValue;
      const stmt = directive;
      stmt.type = "ExpressionStatement";
      stmt.expression = expression;
      stmt.directive = expression.extra.rawValue;
      delete expression.extra;
      return stmt;
    }
    initFunction(node2, isAsync) {
      super.initFunction(node2, isAsync);
      node2.expression = false;
    }
    checkDeclaration(node2) {
      if (node2 != null && this.isObjectProperty(node2)) {
        this.checkDeclaration(node2.value);
      } else {
        super.checkDeclaration(node2);
      }
    }
    getObjectOrClassMethodParams(method) {
      return method.value.params;
    }
    isValidDirective(stmt) {
      var _stmt$expression$extr;
      return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
    }
    parseBlockBody(node2, allowDirectives, topLevel, end, afterBlockParse) {
      super.parseBlockBody(node2, allowDirectives, topLevel, end, afterBlockParse);
      const directiveStatements = node2.directives.map((d) => this.directiveToStmt(d));
      node2.body = directiveStatements.concat(node2.body);
      delete node2.directives;
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
      if (method.typeParameters) {
        method.value.typeParameters = method.typeParameters;
        delete method.typeParameters;
      }
      classBody.body.push(method);
    }
    parsePrivateName() {
      const node2 = super.parsePrivateName();
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return node2;
        }
      }
      return this.convertPrivateNameToPrivateIdentifier(node2);
    }
    convertPrivateNameToPrivateIdentifier(node2) {
      const name = super.getPrivateNameSV(node2);
      node2 = node2;
      delete node2.id;
      node2.name = name;
      node2.type = "PrivateIdentifier";
      return node2;
    }
    isPrivateName(node2) {
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return super.isPrivateName(node2);
        }
      }
      return node2.type === "PrivateIdentifier";
    }
    getPrivateNameSV(node2) {
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return super.getPrivateNameSV(node2);
        }
      }
      return node2.name;
    }
    parseLiteral(value2, type) {
      const node2 = super.parseLiteral(value2, type);
      node2.raw = node2.extra.raw;
      delete node2.extra;
      return node2;
    }
    parseFunctionBody(node2, allowExpression, isMethod = false) {
      super.parseFunctionBody(node2, allowExpression, isMethod);
      node2.expression = node2.body.type !== "BlockStatement";
    }
    parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
      let funcNode = this.startNode();
      funcNode.kind = node2.kind;
      funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
      funcNode.type = "FunctionExpression";
      delete funcNode.kind;
      node2.value = funcNode;
      if (type === "ClassPrivateMethod") {
        node2.computed = false;
      }
      return this.finishNode(node2, "MethodDefinition");
    }
    parseClassProperty(...args) {
      const propertyNode = super.parseClassProperty(...args);
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return propertyNode;
        }
      }
      propertyNode.type = "PropertyDefinition";
      return propertyNode;
    }
    parseClassPrivateProperty(...args) {
      const propertyNode = super.parseClassPrivateProperty(...args);
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return propertyNode;
        }
      }
      propertyNode.type = "PropertyDefinition";
      propertyNode.computed = false;
      return propertyNode;
    }
    parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
      const node2 = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
      if (node2) {
        node2.type = "Property";
        if (node2.kind === "method") {
          node2.kind = "init";
        }
        node2.shorthand = false;
      }
      return node2;
    }
    parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
      const node2 = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
      if (node2) {
        node2.kind = "init";
        node2.type = "Property";
      }
      return node2;
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding2) {
      return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding2);
    }
    isAssignable(node2, isBinding2) {
      if (node2 != null && this.isObjectProperty(node2)) {
        return this.isAssignable(node2.value, isBinding2);
      }
      return super.isAssignable(node2, isBinding2);
    }
    toAssignable(node2, isLHS = false) {
      if (node2 != null && this.isObjectProperty(node2)) {
        const {
          key: key2,
          value: value2
        } = node2;
        if (this.isPrivateName(key2)) {
          this.classScope.usePrivateName(this.getPrivateNameSV(key2), key2.loc.start);
        }
        this.toAssignable(value2, isLHS);
      } else {
        super.toAssignable(node2, isLHS);
      }
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
      if (prop.kind === "get" || prop.kind === "set") {
        this.raise(Errors.PatternHasAccessor, prop.key);
      } else if (prop.method) {
        this.raise(Errors.PatternHasMethod, prop.key);
      } else {
        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
      }
    }
    finishCallExpression(unfinished, optional) {
      const node2 = super.finishCallExpression(unfinished, optional);
      if (node2.callee.type === "Import") {
        node2.type = "ImportExpression";
        node2.source = node2.arguments[0];
        if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
          var _node$arguments$, _node$arguments$2;
          node2.options = (_node$arguments$ = node2.arguments[1]) != null ? _node$arguments$ : null;
          node2.attributes = (_node$arguments$2 = node2.arguments[1]) != null ? _node$arguments$2 : null;
        }
        delete node2.arguments;
        delete node2.callee;
      }
      return node2;
    }
    toReferencedArguments(node2) {
      if (node2.type === "ImportExpression") {
        return;
      }
      super.toReferencedArguments(node2);
    }
    parseExport(unfinished, decorators2) {
      const exportStartLoc = this.state.lastTokStartLoc;
      const node2 = super.parseExport(unfinished, decorators2);
      switch (node2.type) {
        case "ExportAllDeclaration":
          node2.exported = null;
          break;
        case "ExportNamedDeclaration":
          if (node2.specifiers.length === 1 && node2.specifiers[0].type === "ExportNamespaceSpecifier") {
            node2.type = "ExportAllDeclaration";
            node2.exported = node2.specifiers[0].exported;
            delete node2.specifiers;
          }
        case "ExportDefaultDeclaration":
          {
            var _declaration$decorato;
            const {
              declaration
            } = node2;
            if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node2.start) {
              this.resetStartLocation(node2, exportStartLoc);
            }
          }
          break;
      }
      return node2;
    }
    parseSubscript(base2, startLoc, noCalls, state2) {
      const node2 = super.parseSubscript(base2, startLoc, noCalls, state2);
      if (state2.optionalChainMember) {
        if (node2.type === "OptionalMemberExpression" || node2.type === "OptionalCallExpression") {
          node2.type = node2.type.substring(8);
        }
        if (state2.stop) {
          const chain = this.startNodeAtNode(node2);
          chain.expression = node2;
          return this.finishNode(chain, "ChainExpression");
        }
      } else if (node2.type === "MemberExpression" || node2.type === "CallExpression") {
        node2.optional = false;
      }
      return node2;
    }
    isOptionalMemberExpression(node2) {
      if (node2.type === "ChainExpression") {
        return node2.expression.type === "MemberExpression";
      }
      return super.isOptionalMemberExpression(node2);
    }
    hasPropertyAsPrivateName(node2) {
      if (node2.type === "ChainExpression") {
        node2 = node2.expression;
      }
      return super.hasPropertyAsPrivateName(node2);
    }
    isObjectProperty(node2) {
      return node2.type === "Property" && node2.kind === "init" && !node2.method;
    }
    isObjectMethod(node2) {
      return node2.method || node2.kind === "get" || node2.kind === "set";
    }
    finishNodeAt(node2, type, endLoc) {
      return toESTreeLocation(super.finishNodeAt(node2, type, endLoc));
    }
    resetStartLocation(node2, startLoc) {
      super.resetStartLocation(node2, startLoc);
      toESTreeLocation(node2);
    }
    resetEndLocation(node2, endLoc = this.state.lastTokEndLoc) {
      super.resetEndLocation(node2, endLoc);
      toESTreeLocation(node2);
    }
  };
  class TokContext {
    constructor(token2, preserveSpace) {
      this.token = void 0;
      this.preserveSpace = void 0;
      this.token = token2;
      this.preserveSpace = !!preserveSpace;
    }
  }
  const types2 = {
    brace: new TokContext("{"),
    j_oTag: new TokContext("<tag"),
    j_cTag: new TokContext("</tag"),
    j_expr: new TokContext("<tag>...</tag>", true)
  };
  {
    types2.template = new TokContext("`", true);
  }
  const beforeExpr = true;
  const startsExpr = true;
  const isLoop = true;
  const isAssign = true;
  const prefix = true;
  const postfix = true;
  class ExportedTokenType {
    constructor(label, conf = {}) {
      this.label = void 0;
      this.keyword = void 0;
      this.beforeExpr = void 0;
      this.startsExpr = void 0;
      this.rightAssociative = void 0;
      this.isLoop = void 0;
      this.isAssign = void 0;
      this.prefix = void 0;
      this.postfix = void 0;
      this.binop = void 0;
      this.label = label;
      this.keyword = conf.keyword;
      this.beforeExpr = !!conf.beforeExpr;
      this.startsExpr = !!conf.startsExpr;
      this.rightAssociative = !!conf.rightAssociative;
      this.isLoop = !!conf.isLoop;
      this.isAssign = !!conf.isAssign;
      this.prefix = !!conf.prefix;
      this.postfix = !!conf.postfix;
      this.binop = conf.binop != null ? conf.binop : null;
      {
        this.updateContext = null;
      }
    }
  }
  const keywords$1 = /* @__PURE__ */ new Map();
  function createKeyword(name, options2 = {}) {
    options2.keyword = name;
    const token2 = createToken(name, options2);
    keywords$1.set(name, token2);
    return token2;
  }
  function createBinop(name, binop) {
    return createToken(name, {
      beforeExpr,
      binop
    });
  }
  let tokenTypeCounter = -1;
  const tokenTypes = [];
  const tokenLabels = [];
  const tokenBinops = [];
  const tokenBeforeExprs = [];
  const tokenStartsExprs = [];
  const tokenPrefixes = [];
  function createToken(name, options2 = {}) {
    var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
    ++tokenTypeCounter;
    tokenLabels.push(name);
    tokenBinops.push((_options$binop = options2.binop) != null ? _options$binop : -1);
    tokenBeforeExprs.push((_options$beforeExpr = options2.beforeExpr) != null ? _options$beforeExpr : false);
    tokenStartsExprs.push((_options$startsExpr = options2.startsExpr) != null ? _options$startsExpr : false);
    tokenPrefixes.push((_options$prefix = options2.prefix) != null ? _options$prefix : false);
    tokenTypes.push(new ExportedTokenType(name, options2));
    return tokenTypeCounter;
  }
  function createKeywordLike(name, options2 = {}) {
    var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
    ++tokenTypeCounter;
    keywords$1.set(name, tokenTypeCounter);
    tokenLabels.push(name);
    tokenBinops.push((_options$binop2 = options2.binop) != null ? _options$binop2 : -1);
    tokenBeforeExprs.push((_options$beforeExpr2 = options2.beforeExpr) != null ? _options$beforeExpr2 : false);
    tokenStartsExprs.push((_options$startsExpr2 = options2.startsExpr) != null ? _options$startsExpr2 : false);
    tokenPrefixes.push((_options$prefix2 = options2.prefix) != null ? _options$prefix2 : false);
    tokenTypes.push(new ExportedTokenType("name", options2));
    return tokenTypeCounter;
  }
  const tt = {
    bracketL: createToken("[", {
      beforeExpr,
      startsExpr
    }),
    bracketHashL: createToken("#[", {
      beforeExpr,
      startsExpr
    }),
    bracketBarL: createToken("[|", {
      beforeExpr,
      startsExpr
    }),
    bracketR: createToken("]"),
    bracketBarR: createToken("|]"),
    braceL: createToken("{", {
      beforeExpr,
      startsExpr
    }),
    braceBarL: createToken("{|", {
      beforeExpr,
      startsExpr
    }),
    braceHashL: createToken("#{", {
      beforeExpr,
      startsExpr
    }),
    braceR: createToken("}"),
    braceBarR: createToken("|}"),
    parenL: createToken("(", {
      beforeExpr,
      startsExpr
    }),
    parenR: createToken(")"),
    comma: createToken(",", {
      beforeExpr
    }),
    semi: createToken(";", {
      beforeExpr
    }),
    colon: createToken(":", {
      beforeExpr
    }),
    doubleColon: createToken("::", {
      beforeExpr
    }),
    dot: createToken("."),
    question: createToken("?", {
      beforeExpr
    }),
    questionDot: createToken("?."),
    arrow: createToken("=>", {
      beforeExpr
    }),
    template: createToken("template"),
    ellipsis: createToken("...", {
      beforeExpr
    }),
    backQuote: createToken("`", {
      startsExpr
    }),
    dollarBraceL: createToken("${", {
      beforeExpr,
      startsExpr
    }),
    templateTail: createToken("...`", {
      startsExpr
    }),
    templateNonTail: createToken("...${", {
      beforeExpr,
      startsExpr
    }),
    at: createToken("@"),
    hash: createToken("#", {
      startsExpr
    }),
    interpreterDirective: createToken("#!..."),
    eq: createToken("=", {
      beforeExpr,
      isAssign
    }),
    assign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    slashAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    xorAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    moduloAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    incDec: createToken("++/--", {
      prefix,
      postfix,
      startsExpr
    }),
    bang: createToken("!", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    tilde: createToken("~", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    doubleCaret: createToken("^^", {
      startsExpr
    }),
    doubleAt: createToken("@@", {
      startsExpr
    }),
    pipeline: createBinop("|>", 0),
    nullishCoalescing: createBinop("??", 1),
    logicalOR: createBinop("||", 1),
    logicalAND: createBinop("&&", 2),
    bitwiseOR: createBinop("|", 3),
    bitwiseXOR: createBinop("^", 4),
    bitwiseAND: createBinop("&", 5),
    equality: createBinop("==/!=/===/!==", 6),
    lt: createBinop("</>/<=/>=", 7),
    gt: createBinop("</>/<=/>=", 7),
    relational: createBinop("</>/<=/>=", 7),
    bitShift: createBinop("<</>>/>>>", 8),
    bitShiftL: createBinop("<</>>/>>>", 8),
    bitShiftR: createBinop("<</>>/>>>", 8),
    plusMin: createToken("+/-", {
      beforeExpr,
      binop: 9,
      prefix,
      startsExpr
    }),
    modulo: createToken("%", {
      binop: 10,
      startsExpr
    }),
    star: createToken("*", {
      binop: 10
    }),
    slash: createBinop("/", 10),
    exponent: createToken("**", {
      beforeExpr,
      binop: 11,
      rightAssociative: true
    }),
    _in: createKeyword("in", {
      beforeExpr,
      binop: 7
    }),
    _instanceof: createKeyword("instanceof", {
      beforeExpr,
      binop: 7
    }),
    _break: createKeyword("break"),
    _case: createKeyword("case", {
      beforeExpr
    }),
    _catch: createKeyword("catch"),
    _continue: createKeyword("continue"),
    _debugger: createKeyword("debugger"),
    _default: createKeyword("default", {
      beforeExpr
    }),
    _else: createKeyword("else", {
      beforeExpr
    }),
    _finally: createKeyword("finally"),
    _function: createKeyword("function", {
      startsExpr
    }),
    _if: createKeyword("if"),
    _return: createKeyword("return", {
      beforeExpr
    }),
    _switch: createKeyword("switch"),
    _throw: createKeyword("throw", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _try: createKeyword("try"),
    _var: createKeyword("var"),
    _const: createKeyword("const"),
    _with: createKeyword("with"),
    _new: createKeyword("new", {
      beforeExpr,
      startsExpr
    }),
    _this: createKeyword("this", {
      startsExpr
    }),
    _super: createKeyword("super", {
      startsExpr
    }),
    _class: createKeyword("class", {
      startsExpr
    }),
    _extends: createKeyword("extends", {
      beforeExpr
    }),
    _export: createKeyword("export"),
    _import: createKeyword("import", {
      startsExpr
    }),
    _null: createKeyword("null", {
      startsExpr
    }),
    _true: createKeyword("true", {
      startsExpr
    }),
    _false: createKeyword("false", {
      startsExpr
    }),
    _typeof: createKeyword("typeof", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _void: createKeyword("void", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _delete: createKeyword("delete", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _do: createKeyword("do", {
      isLoop,
      beforeExpr
    }),
    _for: createKeyword("for", {
      isLoop
    }),
    _while: createKeyword("while", {
      isLoop
    }),
    _as: createKeywordLike("as", {
      startsExpr
    }),
    _assert: createKeywordLike("assert", {
      startsExpr
    }),
    _async: createKeywordLike("async", {
      startsExpr
    }),
    _await: createKeywordLike("await", {
      startsExpr
    }),
    _defer: createKeywordLike("defer", {
      startsExpr
    }),
    _from: createKeywordLike("from", {
      startsExpr
    }),
    _get: createKeywordLike("get", {
      startsExpr
    }),
    _let: createKeywordLike("let", {
      startsExpr
    }),
    _meta: createKeywordLike("meta", {
      startsExpr
    }),
    _of: createKeywordLike("of", {
      startsExpr
    }),
    _sent: createKeywordLike("sent", {
      startsExpr
    }),
    _set: createKeywordLike("set", {
      startsExpr
    }),
    _source: createKeywordLike("source", {
      startsExpr
    }),
    _static: createKeywordLike("static", {
      startsExpr
    }),
    _using: createKeywordLike("using", {
      startsExpr
    }),
    _yield: createKeywordLike("yield", {
      startsExpr
    }),
    _asserts: createKeywordLike("asserts", {
      startsExpr
    }),
    _checks: createKeywordLike("checks", {
      startsExpr
    }),
    _exports: createKeywordLike("exports", {
      startsExpr
    }),
    _global: createKeywordLike("global", {
      startsExpr
    }),
    _implements: createKeywordLike("implements", {
      startsExpr
    }),
    _intrinsic: createKeywordLike("intrinsic", {
      startsExpr
    }),
    _infer: createKeywordLike("infer", {
      startsExpr
    }),
    _is: createKeywordLike("is", {
      startsExpr
    }),
    _mixins: createKeywordLike("mixins", {
      startsExpr
    }),
    _proto: createKeywordLike("proto", {
      startsExpr
    }),
    _require: createKeywordLike("require", {
      startsExpr
    }),
    _satisfies: createKeywordLike("satisfies", {
      startsExpr
    }),
    _keyof: createKeywordLike("keyof", {
      startsExpr
    }),
    _readonly: createKeywordLike("readonly", {
      startsExpr
    }),
    _unique: createKeywordLike("unique", {
      startsExpr
    }),
    _abstract: createKeywordLike("abstract", {
      startsExpr
    }),
    _declare: createKeywordLike("declare", {
      startsExpr
    }),
    _enum: createKeywordLike("enum", {
      startsExpr
    }),
    _module: createKeywordLike("module", {
      startsExpr
    }),
    _namespace: createKeywordLike("namespace", {
      startsExpr
    }),
    _interface: createKeywordLike("interface", {
      startsExpr
    }),
    _type: createKeywordLike("type", {
      startsExpr
    }),
    _opaque: createKeywordLike("opaque", {
      startsExpr
    }),
    name: createToken("name", {
      startsExpr
    }),
    string: createToken("string", {
      startsExpr
    }),
    num: createToken("num", {
      startsExpr
    }),
    bigint: createToken("bigint", {
      startsExpr
    }),
    decimal: createToken("decimal", {
      startsExpr
    }),
    regexp: createToken("regexp", {
      startsExpr
    }),
    privateName: createToken("#name", {
      startsExpr
    }),
    eof: createToken("eof"),
    jsxName: createToken("jsxName"),
    jsxText: createToken("jsxText", {
      beforeExpr: true
    }),
    jsxTagStart: createToken("jsxTagStart", {
      startsExpr: true
    }),
    jsxTagEnd: createToken("jsxTagEnd"),
    placeholder: createToken("%%", {
      startsExpr: true
    })
  };
  function tokenIsIdentifier(token2) {
    return token2 >= 93 && token2 <= 132;
  }
  function tokenKeywordOrIdentifierIsKeyword(token2) {
    return token2 <= 92;
  }
  function tokenIsKeywordOrIdentifier(token2) {
    return token2 >= 58 && token2 <= 132;
  }
  function tokenIsLiteralPropertyName(token2) {
    return token2 >= 58 && token2 <= 136;
  }
  function tokenComesBeforeExpression(token2) {
    return tokenBeforeExprs[token2];
  }
  function tokenCanStartExpression(token2) {
    return tokenStartsExprs[token2];
  }
  function tokenIsAssignment(token2) {
    return token2 >= 29 && token2 <= 33;
  }
  function tokenIsFlowInterfaceOrTypeOrOpaque(token2) {
    return token2 >= 129 && token2 <= 131;
  }
  function tokenIsLoop(token2) {
    return token2 >= 90 && token2 <= 92;
  }
  function tokenIsKeyword(token2) {
    return token2 >= 58 && token2 <= 92;
  }
  function tokenIsOperator(token2) {
    return token2 >= 39 && token2 <= 59;
  }
  function tokenIsPostfix(token2) {
    return token2 === 34;
  }
  function tokenIsPrefix(token2) {
    return tokenPrefixes[token2];
  }
  function tokenIsTSTypeOperator(token2) {
    return token2 >= 121 && token2 <= 123;
  }
  function tokenIsTSDeclarationStart(token2) {
    return token2 >= 124 && token2 <= 130;
  }
  function tokenLabelName(token2) {
    return tokenLabels[token2];
  }
  function tokenOperatorPrecedence(token2) {
    return tokenBinops[token2];
  }
  function tokenIsRightAssociative(token2) {
    return token2 === 57;
  }
  function tokenIsTemplate(token2) {
    return token2 >= 24 && token2 <= 25;
  }
  function getExportedToken(token2) {
    return tokenTypes[token2];
  }
  {
    tokenTypes[8].updateContext = (context2) => {
      context2.pop();
    };
    tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context2) => {
      context2.push(types2.brace);
    };
    tokenTypes[22].updateContext = (context2) => {
      if (context2[context2.length - 1] === types2.template) {
        context2.pop();
      } else {
        context2.push(types2.template);
      }
    };
    tokenTypes[142].updateContext = (context2) => {
      context2.push(types2.j_expr, types2.j_oTag);
    };
  }
  let nonASCIIidentifierStartChars2 = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
  let nonASCIIidentifierChars2 = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
  const nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]");
  const nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + nonASCIIidentifierChars2 + "]");
  nonASCIIidentifierStartChars2 = nonASCIIidentifierChars2 = null;
  const astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
  const astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function isInAstralSet2(code2, set) {
    let pos2 = 65536;
    for (let i = 0, length = set.length; i < length; i += 2) {
      pos2 += set[i];
      if (pos2 > code2) return false;
      pos2 += set[i + 1];
      if (pos2 >= code2) return true;
    }
    return false;
  }
  function isIdentifierStart2(code2) {
    if (code2 < 65) return code2 === 36;
    if (code2 <= 90) return true;
    if (code2 < 97) return code2 === 95;
    if (code2 <= 122) return true;
    if (code2 <= 65535) {
      return code2 >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code2));
    }
    return isInAstralSet2(code2, astralIdentifierStartCodes2);
  }
  function isIdentifierChar2(code2) {
    if (code2 < 48) return code2 === 36;
    if (code2 < 58) return true;
    if (code2 < 65) return false;
    if (code2 <= 90) return true;
    if (code2 < 97) return code2 === 95;
    if (code2 <= 122) return true;
    if (code2 <= 65535) {
      return code2 >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code2));
    }
    return isInAstralSet2(code2, astralIdentifierStartCodes2) || isInAstralSet2(code2, astralIdentifierCodes2);
  }
  const reservedWords2 = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  };
  const keywords2 = new Set(reservedWords2.keyword);
  const reservedWordsStrictSet2 = new Set(reservedWords2.strict);
  const reservedWordsStrictBindSet2 = new Set(reservedWords2.strictBind);
  function isReservedWord2(word, inModule) {
    return inModule && word === "await" || word === "enum";
  }
  function isStrictReservedWord2(word, inModule) {
    return isReservedWord2(word, inModule) || reservedWordsStrictSet2.has(word);
  }
  function isStrictBindOnlyReservedWord2(word) {
    return reservedWordsStrictBindSet2.has(word);
  }
  function isStrictBindReservedWord2(word, inModule) {
    return isStrictReservedWord2(word, inModule) || isStrictBindOnlyReservedWord2(word);
  }
  function isKeyword2(word) {
    return keywords2.has(word);
  }
  function isIteratorStart(current, next, next2) {
    return current === 64 && next === 64 && isIdentifierStart2(next2);
  }
  const reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
  function canBeReservedWord(word) {
    return reservedWordLikeSet.has(word);
  }
  class Scope {
    constructor(flags) {
      this.flags = 0;
      this.names = /* @__PURE__ */ new Map();
      this.firstLexicalName = "";
      this.flags = flags;
    }
  }
  class ScopeHandler {
    constructor(parser2, inModule) {
      this.parser = void 0;
      this.scopeStack = [];
      this.inModule = void 0;
      this.undefinedExports = /* @__PURE__ */ new Map();
      this.parser = parser2;
      this.inModule = inModule;
    }
    get inTopLevel() {
      return (this.currentScope().flags & 1) > 0;
    }
    get inFunction() {
      return (this.currentVarScopeFlags() & 2) > 0;
    }
    get allowSuper() {
      return (this.currentThisScopeFlags() & 16) > 0;
    }
    get allowDirectSuper() {
      return (this.currentThisScopeFlags() & 32) > 0;
    }
    get inClass() {
      return (this.currentThisScopeFlags() & 64) > 0;
    }
    get inClassAndNotInNonArrowFunction() {
      const flags = this.currentThisScopeFlags();
      return (flags & 64) > 0 && (flags & 2) === 0;
    }
    get inStaticBlock() {
      for (let i = this.scopeStack.length - 1; ; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & 128) {
          return true;
        }
        if (flags & (387 | 64)) {
          return false;
        }
      }
    }
    get inNonArrowFunction() {
      return (this.currentThisScopeFlags() & 2) > 0;
    }
    get treatFunctionsAsVar() {
      return this.treatFunctionsAsVarInScope(this.currentScope());
    }
    createScope(flags) {
      return new Scope(flags);
    }
    enter(flags) {
      this.scopeStack.push(this.createScope(flags));
    }
    exit() {
      const scope2 = this.scopeStack.pop();
      return scope2.flags;
    }
    treatFunctionsAsVarInScope(scope2) {
      return !!(scope2.flags & (2 | 128) || !this.parser.inModule && scope2.flags & 1);
    }
    declareName(name, bindingType, loc) {
      let scope2 = this.currentScope();
      if (bindingType & 8 || bindingType & 16) {
        this.checkRedeclarationInScope(scope2, name, bindingType, loc);
        let type = scope2.names.get(name) || 0;
        if (bindingType & 16) {
          type = type | 4;
        } else {
          if (!scope2.firstLexicalName) {
            scope2.firstLexicalName = name;
          }
          type = type | 2;
        }
        scope2.names.set(name, type);
        if (bindingType & 8) {
          this.maybeExportDefined(scope2, name);
        }
      } else if (bindingType & 4) {
        for (let i = this.scopeStack.length - 1; i >= 0; --i) {
          scope2 = this.scopeStack[i];
          this.checkRedeclarationInScope(scope2, name, bindingType, loc);
          scope2.names.set(name, (scope2.names.get(name) || 0) | 1);
          this.maybeExportDefined(scope2, name);
          if (scope2.flags & 387) break;
        }
      }
      if (this.parser.inModule && scope2.flags & 1) {
        this.undefinedExports.delete(name);
      }
    }
    maybeExportDefined(scope2, name) {
      if (this.parser.inModule && scope2.flags & 1) {
        this.undefinedExports.delete(name);
      }
    }
    checkRedeclarationInScope(scope2, name, bindingType, loc) {
      if (this.isRedeclaredInScope(scope2, name, bindingType)) {
        this.parser.raise(Errors.VarRedeclaration, loc, {
          identifierName: name
        });
      }
    }
    isRedeclaredInScope(scope2, name, bindingType) {
      if (!(bindingType & 1)) return false;
      if (bindingType & 8) {
        return scope2.names.has(name);
      }
      const type = scope2.names.get(name);
      if (bindingType & 16) {
        return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope2) && (type & 1) > 0;
      }
      return (type & 2) > 0 && !(scope2.flags & 8 && scope2.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope2) && (type & 4) > 0;
    }
    checkLocalExport(id) {
      const {
        name
      } = id;
      const topLevelScope = this.scopeStack[0];
      if (!topLevelScope.names.has(name)) {
        this.undefinedExports.set(name, id.loc.start);
      }
    }
    currentScope() {
      return this.scopeStack[this.scopeStack.length - 1];
    }
    currentVarScopeFlags() {
      for (let i = this.scopeStack.length - 1; ; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & 387) {
          return flags;
        }
      }
    }
    currentThisScopeFlags() {
      for (let i = this.scopeStack.length - 1; ; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & (387 | 64) && !(flags & 4)) {
          return flags;
        }
      }
    }
  }
  class FlowScope extends Scope {
    constructor(...args) {
      super(...args);
      this.declareFunctions = /* @__PURE__ */ new Set();
    }
  }
  class FlowScopeHandler extends ScopeHandler {
    createScope(flags) {
      return new FlowScope(flags);
    }
    declareName(name, bindingType, loc) {
      const scope2 = this.currentScope();
      if (bindingType & 2048) {
        this.checkRedeclarationInScope(scope2, name, bindingType, loc);
        this.maybeExportDefined(scope2, name);
        scope2.declareFunctions.add(name);
        return;
      }
      super.declareName(name, bindingType, loc);
    }
    isRedeclaredInScope(scope2, name, bindingType) {
      if (super.isRedeclaredInScope(scope2, name, bindingType)) return true;
      if (bindingType & 2048 && !scope2.declareFunctions.has(name)) {
        const type = scope2.names.get(name);
        return (type & 4) > 0 || (type & 2) > 0;
      }
      return false;
    }
    checkLocalExport(id) {
      if (!this.scopeStack[0].declareFunctions.has(id.name)) {
        super.checkLocalExport(id);
      }
    }
  }
  class BaseParser {
    constructor() {
      this.sawUnambiguousESM = false;
      this.ambiguousScriptDifferentAst = false;
    }
    hasPlugin(pluginConfig) {
      if (typeof pluginConfig === "string") {
        return this.plugins.has(pluginConfig);
      } else {
        const [pluginName, pluginOptions] = pluginConfig;
        if (!this.hasPlugin(pluginName)) {
          return false;
        }
        const actualOptions = this.plugins.get(pluginName);
        for (const key2 of Object.keys(pluginOptions)) {
          if ((actualOptions == null ? void 0 : actualOptions[key2]) !== pluginOptions[key2]) {
            return false;
          }
        }
        return true;
      }
    }
    getPluginOption(plugin2, name) {
      var _this$plugins$get;
      return (_this$plugins$get = this.plugins.get(plugin2)) == null ? void 0 : _this$plugins$get[name];
    }
  }
  function setTrailingComments(node2, comments2) {
    if (node2.trailingComments === void 0) {
      node2.trailingComments = comments2;
    } else {
      node2.trailingComments.unshift(...comments2);
    }
  }
  function setLeadingComments(node2, comments2) {
    if (node2.leadingComments === void 0) {
      node2.leadingComments = comments2;
    } else {
      node2.leadingComments.unshift(...comments2);
    }
  }
  function setInnerComments(node2, comments2) {
    if (node2.innerComments === void 0) {
      node2.innerComments = comments2;
    } else {
      node2.innerComments.unshift(...comments2);
    }
  }
  function adjustInnerComments(node2, elements, commentWS) {
    let lastElement = null;
    let i = elements.length;
    while (lastElement === null && i > 0) {
      lastElement = elements[--i];
    }
    if (lastElement === null || lastElement.start > commentWS.start) {
      setInnerComments(node2, commentWS.comments);
    } else {
      setTrailingComments(lastElement, commentWS.comments);
    }
  }
  class CommentsParser extends BaseParser {
    addComment(comment) {
      if (this.filename) comment.loc.filename = this.filename;
      const {
        commentsLen
      } = this.state;
      if (this.comments.length != commentsLen) this.comments.length = commentsLen;
      this.comments.push(comment);
      this.state.commentsLen++;
    }
    processComment(node2) {
      const {
        commentStack
      } = this.state;
      const commentStackLength = commentStack.length;
      if (commentStackLength === 0) return;
      let i = commentStackLength - 1;
      const lastCommentWS = commentStack[i];
      if (lastCommentWS.start === node2.end) {
        lastCommentWS.leadingNode = node2;
        i--;
      }
      const {
        start: nodeStart
      } = node2;
      for (; i >= 0; i--) {
        const commentWS = commentStack[i];
        const commentEnd = commentWS.end;
        if (commentEnd > nodeStart) {
          commentWS.containingNode = node2;
          this.finalizeComment(commentWS);
          commentStack.splice(i, 1);
        } else {
          if (commentEnd === nodeStart) {
            commentWS.trailingNode = node2;
          }
          break;
        }
      }
    }
    finalizeComment(commentWS) {
      const {
        comments: comments2
      } = commentWS;
      if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
        if (commentWS.leadingNode !== null) {
          setTrailingComments(commentWS.leadingNode, comments2);
        }
        if (commentWS.trailingNode !== null) {
          setLeadingComments(commentWS.trailingNode, comments2);
        }
      } else {
        const {
          containingNode: node2,
          start: commentStart
        } = commentWS;
        if (this.input.charCodeAt(commentStart - 1) === 44) {
          switch (node2.type) {
            case "ObjectExpression":
            case "ObjectPattern":
            case "RecordExpression":
              adjustInnerComments(node2, node2.properties, commentWS);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
              adjustInnerComments(node2, node2.arguments, commentWS);
              break;
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ArrowFunctionExpression":
            case "ObjectMethod":
            case "ClassMethod":
            case "ClassPrivateMethod":
              adjustInnerComments(node2, node2.params, commentWS);
              break;
            case "ArrayExpression":
            case "ArrayPattern":
            case "TupleExpression":
              adjustInnerComments(node2, node2.elements, commentWS);
              break;
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
              adjustInnerComments(node2, node2.specifiers, commentWS);
              break;
            default: {
              setInnerComments(node2, comments2);
            }
          }
        } else {
          setInnerComments(node2, comments2);
        }
      }
    }
    finalizeRemainingComments() {
      const {
        commentStack
      } = this.state;
      for (let i = commentStack.length - 1; i >= 0; i--) {
        this.finalizeComment(commentStack[i]);
      }
      this.state.commentStack = [];
    }
    resetPreviousNodeTrailingComments(node2) {
      const {
        commentStack
      } = this.state;
      const {
        length
      } = commentStack;
      if (length === 0) return;
      const commentWS = commentStack[length - 1];
      if (commentWS.leadingNode === node2) {
        commentWS.leadingNode = null;
      }
    }
    resetPreviousIdentifierLeadingComments(node2) {
      const {
        commentStack
      } = this.state;
      const {
        length
      } = commentStack;
      if (length === 0) return;
      if (commentStack[length - 1].trailingNode === node2) {
        commentStack[length - 1].trailingNode = null;
      } else if (length >= 2 && commentStack[length - 2].trailingNode === node2) {
        commentStack[length - 2].trailingNode = null;
      }
    }
    takeSurroundingComments(node2, start, end) {
      const {
        commentStack
      } = this.state;
      const commentStackLength = commentStack.length;
      if (commentStackLength === 0) return;
      let i = commentStackLength - 1;
      for (; i >= 0; i--) {
        const commentWS = commentStack[i];
        const commentEnd = commentWS.end;
        const commentStart = commentWS.start;
        if (commentStart === end) {
          commentWS.leadingNode = node2;
        } else if (commentEnd === start) {
          commentWS.trailingNode = node2;
        } else if (commentEnd < start) {
          break;
        }
      }
    }
  }
  const lineBreak = /\r\n?|[\n\u2028\u2029]/;
  const lineBreakG = new RegExp(lineBreak.source, "g");
  function isNewLine(code2) {
    switch (code2) {
      case 10:
      case 13:
      case 8232:
      case 8233:
        return true;
      default:
        return false;
    }
  }
  const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
  const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
  const skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
  function isWhitespace(code2) {
    switch (code2) {
      case 9:
      case 11:
      case 12:
      case 32:
      case 160:
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8239:
      case 8287:
      case 12288:
      case 65279:
        return true;
      default:
        return false;
    }
  }
  class State {
    constructor() {
      this.flags = 1024;
      this.curLine = void 0;
      this.lineStart = void 0;
      this.startLoc = void 0;
      this.endLoc = void 0;
      this.errors = [];
      this.potentialArrowAt = -1;
      this.noArrowAt = [];
      this.noArrowParamsConversionAt = [];
      this.topicContext = {
        maxNumOfResolvableTopics: 0,
        maxTopicIndex: null
      };
      this.labels = [];
      this.commentsLen = 0;
      this.commentStack = [];
      this.pos = 0;
      this.type = 139;
      this.value = null;
      this.start = 0;
      this.end = 0;
      this.lastTokEndLoc = null;
      this.lastTokStartLoc = null;
      this.context = [types2.brace];
      this.firstInvalidTemplateEscapePos = null;
      this.strictErrors = /* @__PURE__ */ new Map();
      this.tokensLength = 0;
    }
    get strict() {
      return (this.flags & 1) > 0;
    }
    set strict(value2) {
      if (value2) {
        this.flags |= 1;
      } else {
        this.flags &= ~1;
      }
    }
    init({
      strictMode,
      sourceType,
      startLine,
      startColumn
    }) {
      this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
      this.curLine = startLine;
      this.lineStart = -startColumn;
      this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
    }
    get maybeInArrowParameters() {
      return (this.flags & 2) > 0;
    }
    set maybeInArrowParameters(value2) {
      if (value2) {
        this.flags |= 2;
      } else {
        this.flags &= ~2;
      }
    }
    get inType() {
      return (this.flags & 4) > 0;
    }
    set inType(value2) {
      if (value2) {
        this.flags |= 4;
      } else {
        this.flags &= ~4;
      }
    }
    get noAnonFunctionType() {
      return (this.flags & 8) > 0;
    }
    set noAnonFunctionType(value2) {
      if (value2) {
        this.flags |= 8;
      } else {
        this.flags &= ~8;
      }
    }
    get hasFlowComment() {
      return (this.flags & 16) > 0;
    }
    set hasFlowComment(value2) {
      if (value2) {
        this.flags |= 16;
      } else {
        this.flags &= ~16;
      }
    }
    get isAmbientContext() {
      return (this.flags & 32) > 0;
    }
    set isAmbientContext(value2) {
      if (value2) {
        this.flags |= 32;
      } else {
        this.flags &= ~32;
      }
    }
    get inAbstractClass() {
      return (this.flags & 64) > 0;
    }
    set inAbstractClass(value2) {
      if (value2) {
        this.flags |= 64;
      } else {
        this.flags &= ~64;
      }
    }
    get inDisallowConditionalTypesContext() {
      return (this.flags & 128) > 0;
    }
    set inDisallowConditionalTypesContext(value2) {
      if (value2) {
        this.flags |= 128;
      } else {
        this.flags &= ~128;
      }
    }
    get soloAwait() {
      return (this.flags & 256) > 0;
    }
    set soloAwait(value2) {
      if (value2) {
        this.flags |= 256;
      } else {
        this.flags &= ~256;
      }
    }
    get inFSharpPipelineDirectBody() {
      return (this.flags & 512) > 0;
    }
    set inFSharpPipelineDirectBody(value2) {
      if (value2) {
        this.flags |= 512;
      } else {
        this.flags &= ~512;
      }
    }
    get canStartJSXElement() {
      return (this.flags & 1024) > 0;
    }
    set canStartJSXElement(value2) {
      if (value2) {
        this.flags |= 1024;
      } else {
        this.flags &= ~1024;
      }
    }
    get containsEsc() {
      return (this.flags & 2048) > 0;
    }
    set containsEsc(value2) {
      if (value2) {
        this.flags |= 2048;
      } else {
        this.flags &= ~2048;
      }
    }
    curPosition() {
      return new Position(this.curLine, this.pos - this.lineStart, this.pos);
    }
    clone() {
      const state2 = new State();
      state2.flags = this.flags;
      state2.curLine = this.curLine;
      state2.lineStart = this.lineStart;
      state2.startLoc = this.startLoc;
      state2.endLoc = this.endLoc;
      state2.errors = this.errors.slice();
      state2.potentialArrowAt = this.potentialArrowAt;
      state2.noArrowAt = this.noArrowAt.slice();
      state2.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();
      state2.topicContext = this.topicContext;
      state2.labels = this.labels.slice();
      state2.commentsLen = this.commentsLen;
      state2.commentStack = this.commentStack.slice();
      state2.pos = this.pos;
      state2.type = this.type;
      state2.value = this.value;
      state2.start = this.start;
      state2.end = this.end;
      state2.lastTokEndLoc = this.lastTokEndLoc;
      state2.lastTokStartLoc = this.lastTokStartLoc;
      state2.context = this.context.slice();
      state2.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;
      state2.strictErrors = this.strictErrors;
      state2.tokensLength = this.tokensLength;
      return state2;
    }
  }
  var _isDigit = function isDigit(code2) {
    return code2 >= 48 && code2 <= 57;
  };
  const forbiddenNumericSeparatorSiblings = {
    decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
  };
  const isAllowedNumericSeparatorSibling = {
    bin: (ch) => ch === 48 || ch === 49,
    oct: (ch) => ch >= 48 && ch <= 55,
    dec: (ch) => ch >= 48 && ch <= 57,
    hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
  };
  function readStringContents(type, input2, pos2, lineStart, curLine, errors) {
    const initialPos = pos2;
    const initialLineStart = lineStart;
    const initialCurLine = curLine;
    let out = "";
    let firstInvalidLoc = null;
    let chunkStart = pos2;
    const {
      length
    } = input2;
    for (; ; ) {
      if (pos2 >= length) {
        errors.unterminated(initialPos, initialLineStart, initialCurLine);
        out += input2.slice(chunkStart, pos2);
        break;
      }
      const ch = input2.charCodeAt(pos2);
      if (isStringEnd(type, ch, input2, pos2)) {
        out += input2.slice(chunkStart, pos2);
        break;
      }
      if (ch === 92) {
        out += input2.slice(chunkStart, pos2);
        const res = readEscapedChar(input2, pos2, lineStart, curLine, type === "template", errors);
        if (res.ch === null && !firstInvalidLoc) {
          firstInvalidLoc = {
            pos: pos2,
            lineStart,
            curLine
          };
        } else {
          out += res.ch;
        }
        ({
          pos: pos2,
          lineStart,
          curLine
        } = res);
        chunkStart = pos2;
      } else if (ch === 8232 || ch === 8233) {
        ++pos2;
        ++curLine;
        lineStart = pos2;
      } else if (ch === 10 || ch === 13) {
        if (type === "template") {
          out += input2.slice(chunkStart, pos2) + "\n";
          ++pos2;
          if (ch === 13 && input2.charCodeAt(pos2) === 10) {
            ++pos2;
          }
          ++curLine;
          chunkStart = lineStart = pos2;
        } else {
          errors.unterminated(initialPos, initialLineStart, initialCurLine);
        }
      } else {
        ++pos2;
      }
    }
    return {
      pos: pos2,
      str: out,
      firstInvalidLoc,
      lineStart,
      curLine,
      containsInvalid: !!firstInvalidLoc
    };
  }
  function isStringEnd(type, ch, input2, pos2) {
    if (type === "template") {
      return ch === 96 || ch === 36 && input2.charCodeAt(pos2 + 1) === 123;
    }
    return ch === (type === "double" ? 34 : 39);
  }
  function readEscapedChar(input2, pos2, lineStart, curLine, inTemplate, errors) {
    const throwOnInvalid = !inTemplate;
    pos2++;
    const res = (ch2) => ({
      pos: pos2,
      ch: ch2,
      lineStart,
      curLine
    });
    const ch = input2.charCodeAt(pos2++);
    switch (ch) {
      case 110:
        return res("\n");
      case 114:
        return res("\r");
      case 120: {
        let code2;
        ({
          code: code2,
          pos: pos2
        } = readHexChar(input2, pos2, lineStart, curLine, 2, false, throwOnInvalid, errors));
        return res(code2 === null ? null : String.fromCharCode(code2));
      }
      case 117: {
        let code2;
        ({
          code: code2,
          pos: pos2
        } = readCodePoint(input2, pos2, lineStart, curLine, throwOnInvalid, errors));
        return res(code2 === null ? null : String.fromCodePoint(code2));
      }
      case 116:
        return res("	");
      case 98:
        return res("\b");
      case 118:
        return res("\v");
      case 102:
        return res("\f");
      case 13:
        if (input2.charCodeAt(pos2) === 10) {
          ++pos2;
        }
      case 10:
        lineStart = pos2;
        ++curLine;
      case 8232:
      case 8233:
        return res("");
      case 56:
      case 57:
        if (inTemplate) {
          return res(null);
        } else {
          errors.strictNumericEscape(pos2 - 1, lineStart, curLine);
        }
      default:
        if (ch >= 48 && ch <= 55) {
          const startPos = pos2 - 1;
          const match = input2.slice(startPos, pos2 + 2).match(/^[0-7]+/);
          let octalStr = match[0];
          let octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          pos2 += octalStr.length - 1;
          const next = input2.charCodeAt(pos2);
          if (octalStr !== "0" || next === 56 || next === 57) {
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(startPos, lineStart, curLine);
            }
          }
          return res(String.fromCharCode(octal));
        }
        return res(String.fromCharCode(ch));
    }
  }
  function readHexChar(input2, pos2, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
    const initialPos = pos2;
    let n;
    ({
      n,
      pos: pos2
    } = readInt(input2, pos2, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
    if (n === null) {
      if (throwOnInvalid) {
        errors.invalidEscapeSequence(initialPos, lineStart, curLine);
      } else {
        pos2 = initialPos - 1;
      }
    }
    return {
      code: n,
      pos: pos2
    };
  }
  function readInt(input2, pos2, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
    const start = pos2;
    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
    let invalid = false;
    let total = 0;
    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
      const code2 = input2.charCodeAt(pos2);
      let val;
      if (code2 === 95 && allowNumSeparator !== "bail") {
        const prev = input2.charCodeAt(pos2 - 1);
        const next = input2.charCodeAt(pos2 + 1);
        if (!allowNumSeparator) {
          if (bailOnError) return {
            n: null,
            pos: pos2
          };
          errors.numericSeparatorInEscapeSequence(pos2, lineStart, curLine);
        } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
          if (bailOnError) return {
            n: null,
            pos: pos2
          };
          errors.unexpectedNumericSeparator(pos2, lineStart, curLine);
        }
        ++pos2;
        continue;
      }
      if (code2 >= 97) {
        val = code2 - 97 + 10;
      } else if (code2 >= 65) {
        val = code2 - 65 + 10;
      } else if (_isDigit(code2)) {
        val = code2 - 48;
      } else {
        val = Infinity;
      }
      if (val >= radix) {
        if (val <= 9 && bailOnError) {
          return {
            n: null,
            pos: pos2
          };
        } else if (val <= 9 && errors.invalidDigit(pos2, lineStart, curLine, radix)) {
          val = 0;
        } else if (forceLen) {
          val = 0;
          invalid = true;
        } else {
          break;
        }
      }
      ++pos2;
      total = total * radix + val;
    }
    if (pos2 === start || len != null && pos2 - start !== len || invalid) {
      return {
        n: null,
        pos: pos2
      };
    }
    return {
      n: total,
      pos: pos2
    };
  }
  function readCodePoint(input2, pos2, lineStart, curLine, throwOnInvalid, errors) {
    const ch = input2.charCodeAt(pos2);
    let code2;
    if (ch === 123) {
      ++pos2;
      ({
        code: code2,
        pos: pos2
      } = readHexChar(input2, pos2, lineStart, curLine, input2.indexOf("}", pos2) - pos2, true, throwOnInvalid, errors));
      ++pos2;
      if (code2 !== null && code2 > 1114111) {
        if (throwOnInvalid) {
          errors.invalidCodePoint(pos2, lineStart, curLine);
        } else {
          return {
            code: null,
            pos: pos2
          };
        }
      }
    } else {
      ({
        code: code2,
        pos: pos2
      } = readHexChar(input2, pos2, lineStart, curLine, 4, false, throwOnInvalid, errors));
    }
    return {
      code: code2,
      pos: pos2
    };
  }
  function buildPosition(pos2, lineStart, curLine) {
    return new Position(curLine, pos2 - lineStart, pos2);
  }
  const VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
  class Token {
    constructor(state2) {
      this.type = state2.type;
      this.value = state2.value;
      this.start = state2.start;
      this.end = state2.end;
      this.loc = new SourceLocation(state2.startLoc, state2.endLoc);
    }
  }
  class Tokenizer extends CommentsParser {
    constructor(options2, input2) {
      super();
      this.isLookahead = void 0;
      this.tokens = [];
      this.errorHandlers_readInt = {
        invalidDigit: (pos2, lineStart, curLine, radix) => {
          if (!this.options.errorRecovery) return false;
          this.raise(Errors.InvalidDigit, buildPosition(pos2, lineStart, curLine), {
            radix
          });
          return true;
        },
        numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
        unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
      };
      this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
        invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
        invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
      });
      this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: (pos2, lineStart, curLine) => {
          this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos2, lineStart, curLine));
        },
        unterminated: (pos2, lineStart, curLine) => {
          throw this.raise(Errors.UnterminatedString, buildPosition(pos2 - 1, lineStart, curLine));
        }
      });
      this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
        unterminated: (pos2, lineStart, curLine) => {
          throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos2, lineStart, curLine));
        }
      });
      this.state = new State();
      this.state.init(options2);
      this.input = input2;
      this.length = input2.length;
      this.comments = [];
      this.isLookahead = false;
    }
    pushToken(token2) {
      this.tokens.length = this.state.tokensLength;
      this.tokens.push(token2);
      ++this.state.tokensLength;
    }
    next() {
      this.checkKeywordEscapes();
      if (this.options.tokens) {
        this.pushToken(new Token(this.state));
      }
      this.state.lastTokEndLoc = this.state.endLoc;
      this.state.lastTokStartLoc = this.state.startLoc;
      this.nextToken();
    }
    eat(type) {
      if (this.match(type)) {
        this.next();
        return true;
      } else {
        return false;
      }
    }
    match(type) {
      return this.state.type === type;
    }
    createLookaheadState(state2) {
      return {
        pos: state2.pos,
        value: null,
        type: state2.type,
        start: state2.start,
        end: state2.end,
        context: [this.curContext()],
        inType: state2.inType,
        startLoc: state2.startLoc,
        lastTokEndLoc: state2.lastTokEndLoc,
        curLine: state2.curLine,
        lineStart: state2.lineStart,
        curPosition: state2.curPosition
      };
    }
    lookahead() {
      const old = this.state;
      this.state = this.createLookaheadState(old);
      this.isLookahead = true;
      this.nextToken();
      this.isLookahead = false;
      const curr = this.state;
      this.state = old;
      return curr;
    }
    nextTokenStart() {
      return this.nextTokenStartSince(this.state.pos);
    }
    nextTokenStartSince(pos2) {
      skipWhiteSpace.lastIndex = pos2;
      return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos2;
    }
    lookaheadCharCode() {
      return this.input.charCodeAt(this.nextTokenStart());
    }
    nextTokenInLineStart() {
      return this.nextTokenInLineStartSince(this.state.pos);
    }
    nextTokenInLineStartSince(pos2) {
      skipWhiteSpaceInLine.lastIndex = pos2;
      return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos2;
    }
    lookaheadInLineCharCode() {
      return this.input.charCodeAt(this.nextTokenInLineStart());
    }
    codePointAtPos(pos2) {
      let cp = this.input.charCodeAt(pos2);
      if ((cp & 64512) === 55296 && ++pos2 < this.input.length) {
        const trail = this.input.charCodeAt(pos2);
        if ((trail & 64512) === 56320) {
          cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
        }
      }
      return cp;
    }
    setStrict(strict) {
      this.state.strict = strict;
      if (strict) {
        this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at));
        this.state.strictErrors.clear();
      }
    }
    curContext() {
      return this.state.context[this.state.context.length - 1];
    }
    nextToken() {
      this.skipSpace();
      this.state.start = this.state.pos;
      if (!this.isLookahead) this.state.startLoc = this.state.curPosition();
      if (this.state.pos >= this.length) {
        this.finishToken(139);
        return;
      }
      this.getTokenFromCode(this.codePointAtPos(this.state.pos));
    }
    skipBlockComment(commentEnd) {
      let startLoc;
      if (!this.isLookahead) startLoc = this.state.curPosition();
      const start = this.state.pos;
      const end = this.input.indexOf(commentEnd, start + 2);
      if (end === -1) {
        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
      }
      this.state.pos = end + commentEnd.length;
      lineBreakG.lastIndex = start + 2;
      while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
        ++this.state.curLine;
        this.state.lineStart = lineBreakG.lastIndex;
      }
      if (this.isLookahead) return;
      const comment = {
        type: "CommentBlock",
        value: this.input.slice(start + 2, end),
        start,
        end: end + commentEnd.length,
        loc: new SourceLocation(startLoc, this.state.curPosition())
      };
      if (this.options.tokens) this.pushToken(comment);
      return comment;
    }
    skipLineComment(startSkip) {
      const start = this.state.pos;
      let startLoc;
      if (!this.isLookahead) startLoc = this.state.curPosition();
      let ch = this.input.charCodeAt(this.state.pos += startSkip);
      if (this.state.pos < this.length) {
        while (!isNewLine(ch) && ++this.state.pos < this.length) {
          ch = this.input.charCodeAt(this.state.pos);
        }
      }
      if (this.isLookahead) return;
      const end = this.state.pos;
      const value2 = this.input.slice(start + startSkip, end);
      const comment = {
        type: "CommentLine",
        value: value2,
        start,
        end,
        loc: new SourceLocation(startLoc, this.state.curPosition())
      };
      if (this.options.tokens) this.pushToken(comment);
      return comment;
    }
    skipSpace() {
      const spaceStart = this.state.pos;
      const comments2 = [];
      loop: while (this.state.pos < this.length) {
        const ch = this.input.charCodeAt(this.state.pos);
        switch (ch) {
          case 32:
          case 160:
          case 9:
            ++this.state.pos;
            break;
          case 13:
            if (this.input.charCodeAt(this.state.pos + 1) === 10) {
              ++this.state.pos;
            }
          case 10:
          case 8232:
          case 8233:
            ++this.state.pos;
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            break;
          case 47:
            switch (this.input.charCodeAt(this.state.pos + 1)) {
              case 42: {
                const comment = this.skipBlockComment("*/");
                if (comment !== void 0) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments2.push(comment);
                }
                break;
              }
              case 47: {
                const comment = this.skipLineComment(2);
                if (comment !== void 0) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments2.push(comment);
                }
                break;
              }
              default:
                break loop;
            }
            break;
          default:
            if (isWhitespace(ch)) {
              ++this.state.pos;
            } else if (ch === 45 && !this.inModule && this.options.annexB) {
              const pos2 = this.state.pos;
              if (this.input.charCodeAt(pos2 + 1) === 45 && this.input.charCodeAt(pos2 + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                const comment = this.skipLineComment(3);
                if (comment !== void 0) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments2.push(comment);
                }
              } else {
                break loop;
              }
            } else if (ch === 60 && !this.inModule && this.options.annexB) {
              const pos2 = this.state.pos;
              if (this.input.charCodeAt(pos2 + 1) === 33 && this.input.charCodeAt(pos2 + 2) === 45 && this.input.charCodeAt(pos2 + 3) === 45) {
                const comment = this.skipLineComment(4);
                if (comment !== void 0) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments2.push(comment);
                }
              } else {
                break loop;
              }
            } else {
              break loop;
            }
        }
      }
      if (comments2.length > 0) {
        const end = this.state.pos;
        const commentWhitespace = {
          start: spaceStart,
          end,
          comments: comments2,
          leadingNode: null,
          trailingNode: null,
          containingNode: null
        };
        this.state.commentStack.push(commentWhitespace);
      }
    }
    finishToken(type, val) {
      this.state.end = this.state.pos;
      this.state.endLoc = this.state.curPosition();
      const prevType = this.state.type;
      this.state.type = type;
      this.state.value = val;
      if (!this.isLookahead) {
        this.updateContext(prevType);
      }
    }
    replaceToken(type) {
      this.state.type = type;
      this.updateContext();
    }
    readToken_numberSign() {
      if (this.state.pos === 0 && this.readToken_interpreter()) {
        return;
      }
      const nextPos = this.state.pos + 1;
      const next = this.codePointAtPos(nextPos);
      if (next >= 48 && next <= 57) {
        throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
      }
      if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
        this.expectPlugin("recordAndTuple");
        if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
          throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
        }
        this.state.pos += 2;
        if (next === 123) {
          this.finishToken(7);
        } else {
          this.finishToken(1);
        }
      } else if (isIdentifierStart2(next)) {
        ++this.state.pos;
        this.finishToken(138, this.readWord1(next));
      } else if (next === 92) {
        ++this.state.pos;
        this.finishToken(138, this.readWord1());
      } else {
        this.finishOp(27, 1);
      }
    }
    readToken_dot() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next >= 48 && next <= 57) {
        this.readNumber(true);
        return;
      }
      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
        this.state.pos += 3;
        this.finishToken(21);
      } else {
        ++this.state.pos;
        this.finishToken(16);
      }
    }
    readToken_slash() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61) {
        this.finishOp(31, 2);
      } else {
        this.finishOp(56, 1);
      }
    }
    readToken_interpreter() {
      if (this.state.pos !== 0 || this.length < 2) return false;
      let ch = this.input.charCodeAt(this.state.pos + 1);
      if (ch !== 33) return false;
      const start = this.state.pos;
      this.state.pos += 1;
      while (!isNewLine(ch) && ++this.state.pos < this.length) {
        ch = this.input.charCodeAt(this.state.pos);
      }
      const value2 = this.input.slice(start + 2, this.state.pos);
      this.finishToken(28, value2);
      return true;
    }
    readToken_mult_modulo(code2) {
      let type = code2 === 42 ? 55 : 54;
      let width = 1;
      let next = this.input.charCodeAt(this.state.pos + 1);
      if (code2 === 42 && next === 42) {
        width++;
        next = this.input.charCodeAt(this.state.pos + 2);
        type = 57;
      }
      if (next === 61 && !this.state.inType) {
        width++;
        type = code2 === 37 ? 33 : 30;
      }
      this.finishOp(type, width);
    }
    readToken_pipe_amp(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === code2) {
        if (this.input.charCodeAt(this.state.pos + 2) === 61) {
          this.finishOp(30, 3);
        } else {
          this.finishOp(code2 === 124 ? 41 : 42, 2);
        }
        return;
      }
      if (code2 === 124) {
        if (next === 62) {
          this.finishOp(39, 2);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && next === 125) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          }
          this.state.pos += 2;
          this.finishToken(9);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && next === 93) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          }
          this.state.pos += 2;
          this.finishToken(4);
          return;
        }
      }
      if (next === 61) {
        this.finishOp(30, 2);
        return;
      }
      this.finishOp(code2 === 124 ? 43 : 45, 1);
    }
    readToken_caret() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61 && !this.state.inType) {
        this.finishOp(32, 2);
      } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "^^"
      }])) {
        this.finishOp(37, 2);
        const lookaheadCh = this.input.codePointAt(this.state.pos);
        if (lookaheadCh === 94) {
          this.unexpected();
        }
      } else {
        this.finishOp(44, 1);
      }
    }
    readToken_atSign() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 64 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "@@"
      }])) {
        this.finishOp(38, 2);
      } else {
        this.finishOp(26, 1);
      }
    }
    readToken_plus_min(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === code2) {
        this.finishOp(34, 2);
        return;
      }
      if (next === 61) {
        this.finishOp(30, 2);
      } else {
        this.finishOp(53, 1);
      }
    }
    readToken_lt() {
      const {
        pos: pos2
      } = this.state;
      const next = this.input.charCodeAt(pos2 + 1);
      if (next === 60) {
        if (this.input.charCodeAt(pos2 + 2) === 61) {
          this.finishOp(30, 3);
          return;
        }
        this.finishOp(51, 2);
        return;
      }
      if (next === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(47, 1);
    }
    readToken_gt() {
      const {
        pos: pos2
      } = this.state;
      const next = this.input.charCodeAt(pos2 + 1);
      if (next === 62) {
        const size = this.input.charCodeAt(pos2 + 2) === 62 ? 3 : 2;
        if (this.input.charCodeAt(pos2 + size) === 61) {
          this.finishOp(30, size + 1);
          return;
        }
        this.finishOp(52, size);
        return;
      }
      if (next === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(48, 1);
    }
    readToken_eq_excl(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61) {
        this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
        return;
      }
      if (code2 === 61 && next === 62) {
        this.state.pos += 2;
        this.finishToken(19);
        return;
      }
      this.finishOp(code2 === 61 ? 29 : 35, 1);
    }
    readToken_question() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      const next2 = this.input.charCodeAt(this.state.pos + 2);
      if (next === 63) {
        if (next2 === 61) {
          this.finishOp(30, 3);
        } else {
          this.finishOp(40, 2);
        }
      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
        this.state.pos += 2;
        this.finishToken(18);
      } else {
        ++this.state.pos;
        this.finishToken(17);
      }
    }
    getTokenFromCode(code2) {
      switch (code2) {
        case 46:
          this.readToken_dot();
          return;
        case 40:
          ++this.state.pos;
          this.finishToken(10);
          return;
        case 41:
          ++this.state.pos;
          this.finishToken(11);
          return;
        case 59:
          ++this.state.pos;
          this.finishToken(13);
          return;
        case 44:
          ++this.state.pos;
          this.finishToken(12);
          return;
        case 91:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            }
            this.state.pos += 2;
            this.finishToken(2);
          } else {
            ++this.state.pos;
            this.finishToken(0);
          }
          return;
        case 93:
          ++this.state.pos;
          this.finishToken(3);
          return;
        case 123:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            }
            this.state.pos += 2;
            this.finishToken(6);
          } else {
            ++this.state.pos;
            this.finishToken(5);
          }
          return;
        case 125:
          ++this.state.pos;
          this.finishToken(8);
          return;
        case 58:
          if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
            this.finishOp(15, 2);
          } else {
            ++this.state.pos;
            this.finishToken(14);
          }
          return;
        case 63:
          this.readToken_question();
          return;
        case 96:
          this.readTemplateToken();
          return;
        case 48: {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 120 || next === 88) {
            this.readRadixNumber(16);
            return;
          }
          if (next === 111 || next === 79) {
            this.readRadixNumber(8);
            return;
          }
          if (next === 98 || next === 66) {
            this.readRadixNumber(2);
            return;
          }
        }
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          this.readNumber(false);
          return;
        case 34:
        case 39:
          this.readString(code2);
          return;
        case 47:
          this.readToken_slash();
          return;
        case 37:
        case 42:
          this.readToken_mult_modulo(code2);
          return;
        case 124:
        case 38:
          this.readToken_pipe_amp(code2);
          return;
        case 94:
          this.readToken_caret();
          return;
        case 43:
        case 45:
          this.readToken_plus_min(code2);
          return;
        case 60:
          this.readToken_lt();
          return;
        case 62:
          this.readToken_gt();
          return;
        case 61:
        case 33:
          this.readToken_eq_excl(code2);
          return;
        case 126:
          this.finishOp(36, 1);
          return;
        case 64:
          this.readToken_atSign();
          return;
        case 35:
          this.readToken_numberSign();
          return;
        case 92:
          this.readWord();
          return;
        default:
          if (isIdentifierStart2(code2)) {
            this.readWord(code2);
            return;
          }
      }
      throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), {
        unexpected: String.fromCodePoint(code2)
      });
    }
    finishOp(type, size) {
      const str = this.input.slice(this.state.pos, this.state.pos + size);
      this.state.pos += size;
      this.finishToken(type, str);
    }
    readRegexp() {
      const startLoc = this.state.startLoc;
      const start = this.state.start + 1;
      let escaped, inClass;
      let {
        pos: pos2
      } = this.state;
      for (; ; ++pos2) {
        if (pos2 >= this.length) {
          throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
        }
        const ch = this.input.charCodeAt(pos2);
        if (isNewLine(ch)) {
          throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
        }
        if (escaped) {
          escaped = false;
        } else {
          if (ch === 91) {
            inClass = true;
          } else if (ch === 93 && inClass) {
            inClass = false;
          } else if (ch === 47 && !inClass) {
            break;
          }
          escaped = ch === 92;
        }
      }
      const content = this.input.slice(start, pos2);
      ++pos2;
      let mods = "";
      const nextPos = () => createPositionWithColumnOffset(startLoc, pos2 + 2 - start);
      while (pos2 < this.length) {
        const cp = this.codePointAtPos(pos2);
        const char = String.fromCharCode(cp);
        if (VALID_REGEX_FLAGS.has(cp)) {
          if (cp === 118) {
            if (mods.includes("u")) {
              this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
            }
          } else if (cp === 117) {
            if (mods.includes("v")) {
              this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
            }
          }
          if (mods.includes(char)) {
            this.raise(Errors.DuplicateRegExpFlags, nextPos());
          }
        } else if (isIdentifierChar2(cp) || cp === 92) {
          this.raise(Errors.MalformedRegExpFlags, nextPos());
        } else {
          break;
        }
        ++pos2;
        mods += char;
      }
      this.state.pos = pos2;
      this.finishToken(137, {
        pattern: content,
        flags: mods
      });
    }
    readInt(radix, len, forceLen = false, allowNumSeparator = true) {
      const {
        n,
        pos: pos2
      } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
      this.state.pos = pos2;
      return n;
    }
    readRadixNumber(radix) {
      const startLoc = this.state.curPosition();
      let isBigInt = false;
      this.state.pos += 2;
      const val = this.readInt(radix);
      if (val == null) {
        this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), {
          radix
        });
      }
      const next = this.input.charCodeAt(this.state.pos);
      if (next === 110) {
        ++this.state.pos;
        isBigInt = true;
      } else if (next === 109) {
        throw this.raise(Errors.InvalidDecimal, startLoc);
      }
      if (isIdentifierStart2(this.codePointAtPos(this.state.pos))) {
        throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
      }
      if (isBigInt) {
        const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
        this.finishToken(135, str);
        return;
      }
      this.finishToken(134, val);
    }
    readNumber(startsWithDot) {
      const start = this.state.pos;
      const startLoc = this.state.curPosition();
      let isFloat = false;
      let isBigInt = false;
      let isDecimal = false;
      let hasExponent = false;
      let isOctal = false;
      if (!startsWithDot && this.readInt(10) === null) {
        this.raise(Errors.InvalidNumber, this.state.curPosition());
      }
      const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
      if (hasLeadingZero) {
        const integer = this.input.slice(start, this.state.pos);
        this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);
        if (!this.state.strict) {
          const underscorePos = integer.indexOf("_");
          if (underscorePos > 0) {
            this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
          }
        }
        isOctal = hasLeadingZero && !/[89]/.test(integer);
      }
      let next = this.input.charCodeAt(this.state.pos);
      if (next === 46 && !isOctal) {
        ++this.state.pos;
        this.readInt(10);
        isFloat = true;
        next = this.input.charCodeAt(this.state.pos);
      }
      if ((next === 69 || next === 101) && !isOctal) {
        next = this.input.charCodeAt(++this.state.pos);
        if (next === 43 || next === 45) {
          ++this.state.pos;
        }
        if (this.readInt(10) === null) {
          this.raise(Errors.InvalidOrMissingExponent, startLoc);
        }
        isFloat = true;
        hasExponent = true;
        next = this.input.charCodeAt(this.state.pos);
      }
      if (next === 110) {
        if (isFloat || hasLeadingZero) {
          this.raise(Errors.InvalidBigIntLiteral, startLoc);
        }
        ++this.state.pos;
        isBigInt = true;
      }
      if (next === 109) {
        this.expectPlugin("decimal", this.state.curPosition());
        if (hasExponent || hasLeadingZero) {
          this.raise(Errors.InvalidDecimal, startLoc);
        }
        ++this.state.pos;
        isDecimal = true;
      }
      if (isIdentifierStart2(this.codePointAtPos(this.state.pos))) {
        throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
      }
      const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
      if (isBigInt) {
        this.finishToken(135, str);
        return;
      }
      if (isDecimal) {
        this.finishToken(136, str);
        return;
      }
      const val = isOctal ? parseInt(str, 8) : parseFloat(str);
      this.finishToken(134, val);
    }
    readCodePoint(throwOnInvalid) {
      const {
        code: code2,
        pos: pos2
      } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
      this.state.pos = pos2;
      return code2;
    }
    readString(quote) {
      const {
        str,
        pos: pos2,
        curLine,
        lineStart
      } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
      this.state.pos = pos2 + 1;
      this.state.lineStart = lineStart;
      this.state.curLine = curLine;
      this.finishToken(133, str);
    }
    readTemplateContinuation() {
      if (!this.match(8)) {
        this.unexpected(null, 8);
      }
      this.state.pos--;
      this.readTemplateToken();
    }
    readTemplateToken() {
      const opening = this.input[this.state.pos];
      const {
        str,
        firstInvalidLoc,
        pos: pos2,
        curLine,
        lineStart
      } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
      this.state.pos = pos2 + 1;
      this.state.lineStart = lineStart;
      this.state.curLine = curLine;
      if (firstInvalidLoc) {
        this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);
      }
      if (this.input.codePointAt(pos2) === 96) {
        this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
      } else {
        this.state.pos++;
        this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
      }
    }
    recordStrictModeErrors(toParseError, at) {
      const index2 = at.index;
      if (this.state.strict && !this.state.strictErrors.has(index2)) {
        this.raise(toParseError, at);
      } else {
        this.state.strictErrors.set(index2, [toParseError, at]);
      }
    }
    readWord1(firstCode) {
      this.state.containsEsc = false;
      let word = "";
      const start = this.state.pos;
      let chunkStart = this.state.pos;
      if (firstCode !== void 0) {
        this.state.pos += firstCode <= 65535 ? 1 : 2;
      }
      while (this.state.pos < this.length) {
        const ch = this.codePointAtPos(this.state.pos);
        if (isIdentifierChar2(ch)) {
          this.state.pos += ch <= 65535 ? 1 : 2;
        } else if (ch === 92) {
          this.state.containsEsc = true;
          word += this.input.slice(chunkStart, this.state.pos);
          const escStart = this.state.curPosition();
          const identifierCheck = this.state.pos === start ? isIdentifierStart2 : isIdentifierChar2;
          if (this.input.charCodeAt(++this.state.pos) !== 117) {
            this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());
            chunkStart = this.state.pos - 1;
            continue;
          }
          ++this.state.pos;
          const esc = this.readCodePoint(true);
          if (esc !== null) {
            if (!identifierCheck(esc)) {
              this.raise(Errors.EscapedCharNotAnIdentifier, escStart);
            }
            word += String.fromCodePoint(esc);
          }
          chunkStart = this.state.pos;
        } else {
          break;
        }
      }
      return word + this.input.slice(chunkStart, this.state.pos);
    }
    readWord(firstCode) {
      const word = this.readWord1(firstCode);
      const type = keywords$1.get(word);
      if (type !== void 0) {
        this.finishToken(type, tokenLabelName(type));
      } else {
        this.finishToken(132, word);
      }
    }
    checkKeywordEscapes() {
      const {
        type
      } = this.state;
      if (tokenIsKeyword(type) && this.state.containsEsc) {
        this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {
          reservedWord: tokenLabelName(type)
        });
      }
    }
    raise(toParseError, at, details = {}) {
      const loc = at instanceof Position ? at : at.loc.start;
      const error2 = toParseError(loc, details);
      if (!this.options.errorRecovery) throw error2;
      if (!this.isLookahead) this.state.errors.push(error2);
      return error2;
    }
    raiseOverwrite(toParseError, at, details = {}) {
      const loc = at instanceof Position ? at : at.loc.start;
      const pos2 = loc.index;
      const errors = this.state.errors;
      for (let i = errors.length - 1; i >= 0; i--) {
        const error2 = errors[i];
        if (error2.loc.index === pos2) {
          return errors[i] = toParseError(loc, details);
        }
        if (error2.loc.index < pos2) break;
      }
      return this.raise(toParseError, at, details);
    }
    updateContext(prevType) {
    }
    unexpected(loc, type) {
      throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, {
        expected: type ? tokenLabelName(type) : null
      });
    }
    expectPlugin(pluginName, loc) {
      if (this.hasPlugin(pluginName)) {
        return true;
      }
      throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, {
        missingPlugin: [pluginName]
      });
    }
    expectOnePlugin(pluginNames) {
      if (!pluginNames.some((name) => this.hasPlugin(name))) {
        throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {
          missingPlugin: pluginNames
        });
      }
    }
    errorBuilder(error2) {
      return (pos2, lineStart, curLine) => {
        this.raise(error2, buildPosition(pos2, lineStart, curLine));
      };
    }
  }
  class ClassScope {
    constructor() {
      this.privateNames = /* @__PURE__ */ new Set();
      this.loneAccessors = /* @__PURE__ */ new Map();
      this.undefinedPrivateNames = /* @__PURE__ */ new Map();
    }
  }
  class ClassScopeHandler {
    constructor(parser2) {
      this.parser = void 0;
      this.stack = [];
      this.undefinedPrivateNames = /* @__PURE__ */ new Map();
      this.parser = parser2;
    }
    current() {
      return this.stack[this.stack.length - 1];
    }
    enter() {
      this.stack.push(new ClassScope());
    }
    exit() {
      const oldClassScope = this.stack.pop();
      const current = this.current();
      for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
        if (current) {
          if (!current.undefinedPrivateNames.has(name)) {
            current.undefinedPrivateNames.set(name, loc);
          }
        } else {
          this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
            identifierName: name
          });
        }
      }
    }
    declarePrivateName(name, elementType, loc) {
      const {
        privateNames,
        loneAccessors,
        undefinedPrivateNames
      } = this.current();
      let redefined = privateNames.has(name);
      if (elementType & 3) {
        const accessor = redefined && loneAccessors.get(name);
        if (accessor) {
          const oldStatic = accessor & 4;
          const newStatic = elementType & 4;
          const oldKind = accessor & 3;
          const newKind = elementType & 3;
          redefined = oldKind === newKind || oldStatic !== newStatic;
          if (!redefined) loneAccessors.delete(name);
        } else if (!redefined) {
          loneAccessors.set(name, elementType);
        }
      }
      if (redefined) {
        this.parser.raise(Errors.PrivateNameRedeclaration, loc, {
          identifierName: name
        });
      }
      privateNames.add(name);
      undefinedPrivateNames.delete(name);
    }
    usePrivateName(name, loc) {
      let classScope;
      for (classScope of this.stack) {
        if (classScope.privateNames.has(name)) return;
      }
      if (classScope) {
        classScope.undefinedPrivateNames.set(name, loc);
      } else {
        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
          identifierName: name
        });
      }
    }
  }
  class ExpressionScope {
    constructor(type = 0) {
      this.type = type;
    }
    canBeArrowParameterDeclaration() {
      return this.type === 2 || this.type === 1;
    }
    isCertainlyParameterDeclaration() {
      return this.type === 3;
    }
  }
  class ArrowHeadParsingScope extends ExpressionScope {
    constructor(type) {
      super(type);
      this.declarationErrors = /* @__PURE__ */ new Map();
    }
    recordDeclarationError(ParsingErrorClass, at) {
      const index2 = at.index;
      this.declarationErrors.set(index2, [ParsingErrorClass, at]);
    }
    clearDeclarationError(index2) {
      this.declarationErrors.delete(index2);
    }
    iterateErrors(iterator2) {
      this.declarationErrors.forEach(iterator2);
    }
  }
  class ExpressionScopeHandler {
    constructor(parser2) {
      this.parser = void 0;
      this.stack = [new ExpressionScope()];
      this.parser = parser2;
    }
    enter(scope2) {
      this.stack.push(scope2);
    }
    exit() {
      this.stack.pop();
    }
    recordParameterInitializerError(toParseError, node2) {
      const origin = node2.loc.start;
      const {
        stack: stack2
      } = this;
      let i = stack2.length - 1;
      let scope2 = stack2[i];
      while (!scope2.isCertainlyParameterDeclaration()) {
        if (scope2.canBeArrowParameterDeclaration()) {
          scope2.recordDeclarationError(toParseError, origin);
        } else {
          return;
        }
        scope2 = stack2[--i];
      }
      this.parser.raise(toParseError, origin);
    }
    recordArrowParameterBindingError(error2, node2) {
      const {
        stack: stack2
      } = this;
      const scope2 = stack2[stack2.length - 1];
      const origin = node2.loc.start;
      if (scope2.isCertainlyParameterDeclaration()) {
        this.parser.raise(error2, origin);
      } else if (scope2.canBeArrowParameterDeclaration()) {
        scope2.recordDeclarationError(error2, origin);
      } else {
        return;
      }
    }
    recordAsyncArrowParametersError(at) {
      const {
        stack: stack2
      } = this;
      let i = stack2.length - 1;
      let scope2 = stack2[i];
      while (scope2.canBeArrowParameterDeclaration()) {
        if (scope2.type === 2) {
          scope2.recordDeclarationError(Errors.AwaitBindingIdentifier, at);
        }
        scope2 = stack2[--i];
      }
    }
    validateAsPattern() {
      const {
        stack: stack2
      } = this;
      const currentScope = stack2[stack2.length - 1];
      if (!currentScope.canBeArrowParameterDeclaration()) return;
      currentScope.iterateErrors(([toParseError, loc]) => {
        this.parser.raise(toParseError, loc);
        let i = stack2.length - 2;
        let scope2 = stack2[i];
        while (scope2.canBeArrowParameterDeclaration()) {
          scope2.clearDeclarationError(loc.index);
          scope2 = stack2[--i];
        }
      });
    }
  }
  function newParameterDeclarationScope() {
    return new ExpressionScope(3);
  }
  function newArrowHeadScope() {
    return new ArrowHeadParsingScope(1);
  }
  function newAsyncArrowScope() {
    return new ArrowHeadParsingScope(2);
  }
  function newExpressionScope() {
    return new ExpressionScope();
  }
  class ProductionParameterHandler {
    constructor() {
      this.stacks = [];
    }
    enter(flags) {
      this.stacks.push(flags);
    }
    exit() {
      this.stacks.pop();
    }
    currentFlags() {
      return this.stacks[this.stacks.length - 1];
    }
    get hasAwait() {
      return (this.currentFlags() & 2) > 0;
    }
    get hasYield() {
      return (this.currentFlags() & 1) > 0;
    }
    get hasReturn() {
      return (this.currentFlags() & 4) > 0;
    }
    get hasIn() {
      return (this.currentFlags() & 8) > 0;
    }
  }
  function functionFlags(isAsync, isGenerator) {
    return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
  }
  class UtilParser extends Tokenizer {
    addExtra(node2, key2, value2, enumerable = true) {
      if (!node2) return;
      const extra = node2.extra = node2.extra || {};
      if (enumerable) {
        extra[key2] = value2;
      } else {
        Object.defineProperty(extra, key2, {
          enumerable,
          value: value2
        });
      }
    }
    isContextual(token2) {
      return this.state.type === token2 && !this.state.containsEsc;
    }
    isUnparsedContextual(nameStart, name) {
      const nameEnd = nameStart + name.length;
      if (this.input.slice(nameStart, nameEnd) === name) {
        const nextCh = this.input.charCodeAt(nameEnd);
        return !(isIdentifierChar2(nextCh) || (nextCh & 64512) === 55296);
      }
      return false;
    }
    isLookaheadContextual(name) {
      const next = this.nextTokenStart();
      return this.isUnparsedContextual(next, name);
    }
    eatContextual(token2) {
      if (this.isContextual(token2)) {
        this.next();
        return true;
      }
      return false;
    }
    expectContextual(token2, toParseError) {
      if (!this.eatContextual(token2)) {
        if (toParseError != null) {
          throw this.raise(toParseError, this.state.startLoc);
        }
        this.unexpected(null, token2);
      }
    }
    canInsertSemicolon() {
      return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();
    }
    hasPrecedingLineBreak() {
      return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
    }
    hasFollowingLineBreak() {
      skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
      return skipWhiteSpaceToLineBreak.test(this.input);
    }
    isLineTerminator() {
      return this.eat(13) || this.canInsertSemicolon();
    }
    semicolon(allowAsi = true) {
      if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;
      this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
    }
    expect(type, loc) {
      this.eat(type) || this.unexpected(loc, type);
    }
    tryParse(fn2, oldState = this.state.clone()) {
      const abortSignal = {
        node: null
      };
      try {
        const node2 = fn2((node3 = null) => {
          abortSignal.node = node3;
          throw abortSignal;
        });
        if (this.state.errors.length > oldState.errors.length) {
          const failState = this.state;
          this.state = oldState;
          this.state.tokensLength = failState.tokensLength;
          return {
            node: node2,
            error: failState.errors[oldState.errors.length],
            thrown: false,
            aborted: false,
            failState
          };
        }
        return {
          node: node2,
          error: null,
          thrown: false,
          aborted: false,
          failState: null
        };
      } catch (error2) {
        const failState = this.state;
        this.state = oldState;
        if (error2 instanceof SyntaxError) {
          return {
            node: null,
            error: error2,
            thrown: true,
            aborted: false,
            failState
          };
        }
        if (error2 === abortSignal) {
          return {
            node: abortSignal.node,
            error: null,
            thrown: false,
            aborted: true,
            failState
          };
        }
        throw error2;
      }
    }
    checkExpressionErrors(refExpressionErrors, andThrow) {
      if (!refExpressionErrors) return false;
      const {
        shorthandAssignLoc,
        doubleProtoLoc,
        privateKeyLoc,
        optionalParametersLoc
      } = refExpressionErrors;
      const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
      if (!andThrow) {
        return hasErrors;
      }
      if (shorthandAssignLoc != null) {
        this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
      }
      if (doubleProtoLoc != null) {
        this.raise(Errors.DuplicateProto, doubleProtoLoc);
      }
      if (privateKeyLoc != null) {
        this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
      }
      if (optionalParametersLoc != null) {
        this.unexpected(optionalParametersLoc);
      }
    }
    isLiteralPropertyName() {
      return tokenIsLiteralPropertyName(this.state.type);
    }
    isPrivateName(node2) {
      return node2.type === "PrivateName";
    }
    getPrivateNameSV(node2) {
      return node2.id.name;
    }
    hasPropertyAsPrivateName(node2) {
      return (node2.type === "MemberExpression" || node2.type === "OptionalMemberExpression") && this.isPrivateName(node2.property);
    }
    isObjectProperty(node2) {
      return node2.type === "ObjectProperty";
    }
    isObjectMethod(node2) {
      return node2.type === "ObjectMethod";
    }
    initializeScopes(inModule = this.options.sourceType === "module") {
      const oldLabels = this.state.labels;
      this.state.labels = [];
      const oldExportedIdentifiers = this.exportedIdentifiers;
      this.exportedIdentifiers = /* @__PURE__ */ new Set();
      const oldInModule = this.inModule;
      this.inModule = inModule;
      const oldScope = this.scope;
      const ScopeHandler2 = this.getScopeHandler();
      this.scope = new ScopeHandler2(this, inModule);
      const oldProdParam = this.prodParam;
      this.prodParam = new ProductionParameterHandler();
      const oldClassScope = this.classScope;
      this.classScope = new ClassScopeHandler(this);
      const oldExpressionScope = this.expressionScope;
      this.expressionScope = new ExpressionScopeHandler(this);
      return () => {
        this.state.labels = oldLabels;
        this.exportedIdentifiers = oldExportedIdentifiers;
        this.inModule = oldInModule;
        this.scope = oldScope;
        this.prodParam = oldProdParam;
        this.classScope = oldClassScope;
        this.expressionScope = oldExpressionScope;
      };
    }
    enterInitialScopes() {
      let paramFlags = 0;
      if (this.inModule) {
        paramFlags |= 2;
      }
      this.scope.enter(1);
      this.prodParam.enter(paramFlags);
    }
    checkDestructuringPrivate(refExpressionErrors) {
      const {
        privateKeyLoc
      } = refExpressionErrors;
      if (privateKeyLoc !== null) {
        this.expectPlugin("destructuringPrivate", privateKeyLoc);
      }
    }
  }
  class ExpressionErrors {
    constructor() {
      this.shorthandAssignLoc = null;
      this.doubleProtoLoc = null;
      this.privateKeyLoc = null;
      this.optionalParametersLoc = null;
    }
  }
  class Node {
    constructor(parser2, pos2, loc) {
      this.type = "";
      this.start = pos2;
      this.end = 0;
      this.loc = new SourceLocation(loc);
      if (parser2 != null && parser2.options.ranges) this.range = [pos2, 0];
      if (parser2 != null && parser2.filename) this.loc.filename = parser2.filename;
    }
  }
  const NodePrototype = Node.prototype;
  {
    NodePrototype.__clone = function() {
      const newNode = new Node(void 0, this.start, this.loc.start);
      const keys2 = Object.keys(this);
      for (let i = 0, length = keys2.length; i < length; i++) {
        const key2 = keys2[i];
        if (key2 !== "leadingComments" && key2 !== "trailingComments" && key2 !== "innerComments") {
          newNode[key2] = this[key2];
        }
      }
      return newNode;
    };
  }
  function clonePlaceholder(node2) {
    return cloneIdentifier(node2);
  }
  function cloneIdentifier(node2) {
    const {
      type,
      start,
      end,
      loc,
      range,
      extra,
      name
    } = node2;
    const cloned = Object.create(NodePrototype);
    cloned.type = type;
    cloned.start = start;
    cloned.end = end;
    cloned.loc = loc;
    cloned.range = range;
    cloned.extra = extra;
    cloned.name = name;
    if (type === "Placeholder") {
      cloned.expectedNode = node2.expectedNode;
    }
    return cloned;
  }
  function cloneStringLiteral(node2) {
    const {
      type,
      start,
      end,
      loc,
      range,
      extra
    } = node2;
    if (type === "Placeholder") {
      return clonePlaceholder(node2);
    }
    const cloned = Object.create(NodePrototype);
    cloned.type = type;
    cloned.start = start;
    cloned.end = end;
    cloned.loc = loc;
    cloned.range = range;
    if (node2.raw !== void 0) {
      cloned.raw = node2.raw;
    } else {
      cloned.extra = extra;
    }
    cloned.value = node2.value;
    return cloned;
  }
  class NodeUtils extends UtilParser {
    startNode() {
      const loc = this.state.startLoc;
      return new Node(this, loc.index, loc);
    }
    startNodeAt(loc) {
      return new Node(this, loc.index, loc);
    }
    startNodeAtNode(type) {
      return this.startNodeAt(type.loc.start);
    }
    finishNode(node2, type) {
      return this.finishNodeAt(node2, type, this.state.lastTokEndLoc);
    }
    finishNodeAt(node2, type, endLoc) {
      node2.type = type;
      node2.end = endLoc.index;
      node2.loc.end = endLoc;
      if (this.options.ranges) node2.range[1] = endLoc.index;
      if (this.options.attachComment) this.processComment(node2);
      return node2;
    }
    resetStartLocation(node2, startLoc) {
      node2.start = startLoc.index;
      node2.loc.start = startLoc;
      if (this.options.ranges) node2.range[0] = startLoc.index;
    }
    resetEndLocation(node2, endLoc = this.state.lastTokEndLoc) {
      node2.end = endLoc.index;
      node2.loc.end = endLoc;
      if (this.options.ranges) node2.range[1] = endLoc.index;
    }
    resetStartLocationFromNode(node2, locationNode) {
      this.resetStartLocation(node2, locationNode.loc.start);
    }
  }
  const reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
  const FlowErrors = ParseErrorEnum`flow`({
    AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
    AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
    AssignReservedType: ({
      reservedType
    }) => `Cannot overwrite reserved type ${reservedType}.`,
    DeclareClassElement: "The `declare` modifier can only appear on class fields.",
    DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
    DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
    EnumBooleanMemberNotInitialized: ({
      memberName,
      enumName
    }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
    EnumDuplicateMemberName: ({
      memberName,
      enumName
    }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
    EnumInconsistentMemberValues: ({
      enumName
    }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
    EnumInvalidExplicitType: ({
      invalidEnumType,
      enumName
    }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
    EnumInvalidExplicitTypeUnknownSupplied: ({
      enumName
    }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
    EnumInvalidMemberInitializerPrimaryType: ({
      enumName,
      memberName,
      explicitType
    }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
    EnumInvalidMemberInitializerSymbolType: ({
      enumName,
      memberName
    }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
    EnumInvalidMemberInitializerUnknownType: ({
      enumName,
      memberName
    }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
    EnumInvalidMemberName: ({
      enumName,
      memberName,
      suggestion
    }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
    EnumNumberMemberNotInitialized: ({
      enumName,
      memberName
    }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
    EnumStringMemberInconsistentlyInitialized: ({
      enumName
    }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
    GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
    ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
    InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
    InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
    InexactVariance: "Explicit inexact syntax cannot have variance.",
    InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
    MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
    NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
    NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
    PatternIsOptional: Object.assign({
      message: "A binding pattern parameter cannot be optional in an implementation signature."
    }, {
      reasonCode: "OptionalBindingPattern"
    }),
    SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
    SpreadVariance: "Spread properties cannot have variance.",
    ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
    ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
    ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
    ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
    ThisParamNoDefault: "The `this` parameter may not have a default value.",
    TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
    UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
    UnexpectedReservedType: ({
      reservedType
    }) => `Unexpected reserved type ${reservedType}.`,
    UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
    UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
    UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
    UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
    UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
    UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
    UnsupportedDeclareExportKind: ({
      unsupportedExportKind,
      suggestion
    }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
    UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
    UnterminatedFlowComment: "Unterminated flow-comment."
  });
  function isEsModuleType(bodyElement) {
    return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
  }
  function hasTypeImportKind(node2) {
    return node2.importKind === "type" || node2.importKind === "typeof";
  }
  const exportSuggestions = {
    const: "declare export var",
    let: "declare export var",
    type: "export type",
    interface: "export interface"
  };
  function partition2(list2, test2) {
    const list1 = [];
    const list22 = [];
    for (let i = 0; i < list2.length; i++) {
      (test2(list2[i], i, list2) ? list1 : list22).push(list2[i]);
    }
    return [list1, list22];
  }
  const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
  var flow2 = (superClass) => class FlowParserMixin extends superClass {
    constructor(...args) {
      super(...args);
      this.flowPragma = void 0;
    }
    getScopeHandler() {
      return FlowScopeHandler;
    }
    shouldParseTypes() {
      return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
    }
    shouldParseEnums() {
      return !!this.getPluginOption("flow", "enums");
    }
    finishToken(type, val) {
      if (type !== 133 && type !== 13 && type !== 28) {
        if (this.flowPragma === void 0) {
          this.flowPragma = null;
        }
      }
      super.finishToken(type, val);
    }
    addComment(comment) {
      if (this.flowPragma === void 0) {
        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
        if (!matches) ;
        else if (matches[1] === "flow") {
          this.flowPragma = "flow";
        } else if (matches[1] === "noflow") {
          this.flowPragma = "noflow";
        } else {
          throw new Error("Unexpected flow pragma");
        }
      }
      super.addComment(comment);
    }
    flowParseTypeInitialiser(tok) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      this.expect(tok || 14);
      const type = this.flowParseType();
      this.state.inType = oldInType;
      return type;
    }
    flowParsePredicate() {
      const node2 = this.startNode();
      const moduloLoc = this.state.startLoc;
      this.next();
      this.expectContextual(110);
      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {
        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);
      }
      if (this.eat(10)) {
        node2.value = super.parseExpression();
        this.expect(11);
        return this.finishNode(node2, "DeclaredPredicate");
      } else {
        return this.finishNode(node2, "InferredPredicate");
      }
    }
    flowParseTypeAndPredicateInitialiser() {
      const oldInType = this.state.inType;
      this.state.inType = true;
      this.expect(14);
      let type = null;
      let predicate = null;
      if (this.match(54)) {
        this.state.inType = oldInType;
        predicate = this.flowParsePredicate();
      } else {
        type = this.flowParseType();
        this.state.inType = oldInType;
        if (this.match(54)) {
          predicate = this.flowParsePredicate();
        }
      }
      return [type, predicate];
    }
    flowParseDeclareClass(node2) {
      this.next();
      this.flowParseInterfaceish(node2, true);
      return this.finishNode(node2, "DeclareClass");
    }
    flowParseDeclareFunction(node2) {
      this.next();
      const id = node2.id = this.parseIdentifier();
      const typeNode = this.startNode();
      const typeContainer = this.startNode();
      if (this.match(47)) {
        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        typeNode.typeParameters = null;
      }
      this.expect(10);
      const tmp = this.flowParseFunctionTypeParams();
      typeNode.params = tmp.params;
      typeNode.rest = tmp.rest;
      typeNode.this = tmp._this;
      this.expect(11);
      [typeNode.returnType, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
      typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
      id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
      this.resetEndLocation(id);
      this.semicolon();
      this.scope.declareName(node2.id.name, 2048, node2.id.loc.start);
      return this.finishNode(node2, "DeclareFunction");
    }
    flowParseDeclare(node2, insideModule) {
      if (this.match(80)) {
        return this.flowParseDeclareClass(node2);
      } else if (this.match(68)) {
        return this.flowParseDeclareFunction(node2);
      } else if (this.match(74)) {
        return this.flowParseDeclareVariable(node2);
      } else if (this.eatContextual(127)) {
        if (this.match(16)) {
          return this.flowParseDeclareModuleExports(node2);
        } else {
          if (insideModule) {
            this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);
          }
          return this.flowParseDeclareModule(node2);
        }
      } else if (this.isContextual(130)) {
        return this.flowParseDeclareTypeAlias(node2);
      } else if (this.isContextual(131)) {
        return this.flowParseDeclareOpaqueType(node2);
      } else if (this.isContextual(129)) {
        return this.flowParseDeclareInterface(node2);
      } else if (this.match(82)) {
        return this.flowParseDeclareExportDeclaration(node2, insideModule);
      } else {
        this.unexpected();
      }
    }
    flowParseDeclareVariable(node2) {
      this.next();
      node2.id = this.flowParseTypeAnnotatableIdentifier(true);
      this.scope.declareName(node2.id.name, 5, node2.id.loc.start);
      this.semicolon();
      return this.finishNode(node2, "DeclareVariable");
    }
    flowParseDeclareModule(node2) {
      this.scope.enter(0);
      if (this.match(133)) {
        node2.id = super.parseExprAtom();
      } else {
        node2.id = this.parseIdentifier();
      }
      const bodyNode = node2.body = this.startNode();
      const body = bodyNode.body = [];
      this.expect(5);
      while (!this.match(8)) {
        let bodyNode2 = this.startNode();
        if (this.match(83)) {
          this.next();
          if (!this.isContextual(130) && !this.match(87)) {
            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);
          }
          super.parseImport(bodyNode2);
        } else {
          this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);
          bodyNode2 = this.flowParseDeclare(bodyNode2, true);
        }
        body.push(bodyNode2);
      }
      this.scope.exit();
      this.expect(8);
      this.finishNode(bodyNode, "BlockStatement");
      let kind = null;
      let hasModuleExport = false;
      body.forEach((bodyElement) => {
        if (isEsModuleType(bodyElement)) {
          if (kind === "CommonJS") {
            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
          }
          kind = "ES";
        } else if (bodyElement.type === "DeclareModuleExports") {
          if (hasModuleExport) {
            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);
          }
          if (kind === "ES") {
            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
          }
          kind = "CommonJS";
          hasModuleExport = true;
        }
      });
      node2.kind = kind || "CommonJS";
      return this.finishNode(node2, "DeclareModule");
    }
    flowParseDeclareExportDeclaration(node2, insideModule) {
      this.expect(82);
      if (this.eat(65)) {
        if (this.match(68) || this.match(80)) {
          node2.declaration = this.flowParseDeclare(this.startNode());
        } else {
          node2.declaration = this.flowParseType();
          this.semicolon();
        }
        node2.default = true;
        return this.finishNode(node2, "DeclareExportDeclaration");
      } else {
        if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
          const label = this.state.value;
          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {
            unsupportedExportKind: label,
            suggestion: exportSuggestions[label]
          });
        }
        if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {
          node2.declaration = this.flowParseDeclare(this.startNode());
          node2.default = false;
          return this.finishNode(node2, "DeclareExportDeclaration");
        } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {
          node2 = this.parseExport(node2, null);
          if (node2.type === "ExportNamedDeclaration") {
            node2.type = "ExportDeclaration";
            node2.default = false;
            delete node2.exportKind;
          }
          node2.type = "Declare" + node2.type;
          return node2;
        }
      }
      this.unexpected();
    }
    flowParseDeclareModuleExports(node2) {
      this.next();
      this.expectContextual(111);
      node2.typeAnnotation = this.flowParseTypeAnnotation();
      this.semicolon();
      return this.finishNode(node2, "DeclareModuleExports");
    }
    flowParseDeclareTypeAlias(node2) {
      this.next();
      const finished = this.flowParseTypeAlias(node2);
      finished.type = "DeclareTypeAlias";
      return finished;
    }
    flowParseDeclareOpaqueType(node2) {
      this.next();
      const finished = this.flowParseOpaqueType(node2, true);
      finished.type = "DeclareOpaqueType";
      return finished;
    }
    flowParseDeclareInterface(node2) {
      this.next();
      this.flowParseInterfaceish(node2, false);
      return this.finishNode(node2, "DeclareInterface");
    }
    flowParseInterfaceish(node2, isClass) {
      node2.id = this.flowParseRestrictedIdentifier(!isClass, true);
      this.scope.declareName(node2.id.name, isClass ? 17 : 8201, node2.id.loc.start);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node2.typeParameters = null;
      }
      node2.extends = [];
      if (this.eat(81)) {
        do {
          node2.extends.push(this.flowParseInterfaceExtends());
        } while (!isClass && this.eat(12));
      }
      if (isClass) {
        node2.implements = [];
        node2.mixins = [];
        if (this.eatContextual(117)) {
          do {
            node2.mixins.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        if (this.eatContextual(113)) {
          do {
            node2.implements.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
      }
      node2.body = this.flowParseObjectType({
        allowStatic: isClass,
        allowExact: false,
        allowSpread: false,
        allowProto: isClass,
        allowInexact: false
      });
    }
    flowParseInterfaceExtends() {
      const node2 = this.startNode();
      node2.id = this.flowParseQualifiedTypeIdentifier();
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterInstantiation();
      } else {
        node2.typeParameters = null;
      }
      return this.finishNode(node2, "InterfaceExtends");
    }
    flowParseInterface(node2) {
      this.flowParseInterfaceish(node2, false);
      return this.finishNode(node2, "InterfaceDeclaration");
    }
    checkNotUnderscore(word) {
      if (word === "_") {
        this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
      }
    }
    checkReservedType(word, startLoc, declaration) {
      if (!reservedTypes.has(word)) return;
      this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, {
        reservedType: word
      });
    }
    flowParseRestrictedIdentifier(liberal, declaration) {
      this.checkReservedType(this.state.value, this.state.startLoc, declaration);
      return this.parseIdentifier(liberal);
    }
    flowParseTypeAlias(node2) {
      node2.id = this.flowParseRestrictedIdentifier(false, true);
      this.scope.declareName(node2.id.name, 8201, node2.id.loc.start);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node2.typeParameters = null;
      }
      node2.right = this.flowParseTypeInitialiser(29);
      this.semicolon();
      return this.finishNode(node2, "TypeAlias");
    }
    flowParseOpaqueType(node2, declare) {
      this.expectContextual(130);
      node2.id = this.flowParseRestrictedIdentifier(true, true);
      this.scope.declareName(node2.id.name, 8201, node2.id.loc.start);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node2.typeParameters = null;
      }
      node2.supertype = null;
      if (this.match(14)) {
        node2.supertype = this.flowParseTypeInitialiser(14);
      }
      node2.impltype = null;
      if (!declare) {
        node2.impltype = this.flowParseTypeInitialiser(29);
      }
      this.semicolon();
      return this.finishNode(node2, "OpaqueType");
    }
    flowParseTypeParameter(requireDefault = false) {
      const nodeStartLoc = this.state.startLoc;
      const node2 = this.startNode();
      const variance = this.flowParseVariance();
      const ident = this.flowParseTypeAnnotatableIdentifier();
      node2.name = ident.name;
      node2.variance = variance;
      node2.bound = ident.typeAnnotation;
      if (this.match(29)) {
        this.eat(29);
        node2.default = this.flowParseType();
      } else {
        if (requireDefault) {
          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);
        }
      }
      return this.finishNode(node2, "TypeParameter");
    }
    flowParseTypeParameterDeclaration() {
      const oldInType = this.state.inType;
      const node2 = this.startNode();
      node2.params = [];
      this.state.inType = true;
      if (this.match(47) || this.match(142)) {
        this.next();
      } else {
        this.unexpected();
      }
      let defaultRequired = false;
      do {
        const typeParameter = this.flowParseTypeParameter(defaultRequired);
        node2.params.push(typeParameter);
        if (typeParameter.default) {
          defaultRequired = true;
        }
        if (!this.match(48)) {
          this.expect(12);
        }
      } while (!this.match(48));
      this.expect(48);
      this.state.inType = oldInType;
      return this.finishNode(node2, "TypeParameterDeclaration");
    }
    flowParseTypeParameterInstantiation() {
      const node2 = this.startNode();
      const oldInType = this.state.inType;
      node2.params = [];
      this.state.inType = true;
      this.expect(47);
      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
      this.state.noAnonFunctionType = false;
      while (!this.match(48)) {
        node2.params.push(this.flowParseType());
        if (!this.match(48)) {
          this.expect(12);
        }
      }
      this.state.noAnonFunctionType = oldNoAnonFunctionType;
      this.expect(48);
      this.state.inType = oldInType;
      return this.finishNode(node2, "TypeParameterInstantiation");
    }
    flowParseTypeParameterInstantiationCallOrNew() {
      const node2 = this.startNode();
      const oldInType = this.state.inType;
      node2.params = [];
      this.state.inType = true;
      this.expect(47);
      while (!this.match(48)) {
        node2.params.push(this.flowParseTypeOrImplicitInstantiation());
        if (!this.match(48)) {
          this.expect(12);
        }
      }
      this.expect(48);
      this.state.inType = oldInType;
      return this.finishNode(node2, "TypeParameterInstantiation");
    }
    flowParseInterfaceType() {
      const node2 = this.startNode();
      this.expectContextual(129);
      node2.extends = [];
      if (this.eat(81)) {
        do {
          node2.extends.push(this.flowParseInterfaceExtends());
        } while (this.eat(12));
      }
      node2.body = this.flowParseObjectType({
        allowStatic: false,
        allowExact: false,
        allowSpread: false,
        allowProto: false,
        allowInexact: false
      });
      return this.finishNode(node2, "InterfaceTypeAnnotation");
    }
    flowParseObjectPropertyKey() {
      return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(true);
    }
    flowParseObjectTypeIndexer(node2, isStatic, variance) {
      node2.static = isStatic;
      if (this.lookahead().type === 14) {
        node2.id = this.flowParseObjectPropertyKey();
        node2.key = this.flowParseTypeInitialiser();
      } else {
        node2.id = null;
        node2.key = this.flowParseType();
      }
      this.expect(3);
      node2.value = this.flowParseTypeInitialiser();
      node2.variance = variance;
      return this.finishNode(node2, "ObjectTypeIndexer");
    }
    flowParseObjectTypeInternalSlot(node2, isStatic) {
      node2.static = isStatic;
      node2.id = this.flowParseObjectPropertyKey();
      this.expect(3);
      this.expect(3);
      if (this.match(47) || this.match(10)) {
        node2.method = true;
        node2.optional = false;
        node2.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node2.loc.start));
      } else {
        node2.method = false;
        if (this.eat(17)) {
          node2.optional = true;
        }
        node2.value = this.flowParseTypeInitialiser();
      }
      return this.finishNode(node2, "ObjectTypeInternalSlot");
    }
    flowParseObjectTypeMethodish(node2) {
      node2.params = [];
      node2.rest = null;
      node2.typeParameters = null;
      node2.this = null;
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      this.expect(10);
      if (this.match(78)) {
        node2.this = this.flowParseFunctionTypeParam(true);
        node2.this.name = null;
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      while (!this.match(11) && !this.match(21)) {
        node2.params.push(this.flowParseFunctionTypeParam(false));
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      if (this.eat(21)) {
        node2.rest = this.flowParseFunctionTypeParam(false);
      }
      this.expect(11);
      node2.returnType = this.flowParseTypeInitialiser();
      return this.finishNode(node2, "FunctionTypeAnnotation");
    }
    flowParseObjectTypeCallProperty(node2, isStatic) {
      const valueNode = this.startNode();
      node2.static = isStatic;
      node2.value = this.flowParseObjectTypeMethodish(valueNode);
      return this.finishNode(node2, "ObjectTypeCallProperty");
    }
    flowParseObjectType({
      allowStatic,
      allowExact,
      allowSpread,
      allowProto,
      allowInexact
    }) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      const nodeStart = this.startNode();
      nodeStart.callProperties = [];
      nodeStart.properties = [];
      nodeStart.indexers = [];
      nodeStart.internalSlots = [];
      let endDelim;
      let exact;
      let inexact = false;
      if (allowExact && this.match(6)) {
        this.expect(6);
        endDelim = 9;
        exact = true;
      } else {
        this.expect(5);
        endDelim = 8;
        exact = false;
      }
      nodeStart.exact = exact;
      while (!this.match(endDelim)) {
        let isStatic = false;
        let protoStartLoc = null;
        let inexactStartLoc = null;
        const node2 = this.startNode();
        if (allowProto && this.isContextual(118)) {
          const lookahead = this.lookahead();
          if (lookahead.type !== 14 && lookahead.type !== 17) {
            this.next();
            protoStartLoc = this.state.startLoc;
            allowStatic = false;
          }
        }
        if (allowStatic && this.isContextual(106)) {
          const lookahead = this.lookahead();
          if (lookahead.type !== 14 && lookahead.type !== 17) {
            this.next();
            isStatic = true;
          }
        }
        const variance = this.flowParseVariance();
        if (this.eat(0)) {
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (this.eat(0)) {
            if (variance) {
              this.unexpected(variance.loc.start);
            }
            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node2, isStatic));
          } else {
            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node2, isStatic, variance));
          }
        } else if (this.match(10) || this.match(47)) {
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (variance) {
            this.unexpected(variance.loc.start);
          }
          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node2, isStatic));
        } else {
          let kind = "init";
          if (this.isContextual(99) || this.isContextual(104)) {
            const lookahead = this.lookahead();
            if (tokenIsLiteralPropertyName(lookahead.type)) {
              kind = this.state.value;
              this.next();
            }
          }
          const propOrInexact = this.flowParseObjectTypeProperty(node2, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
          if (propOrInexact === null) {
            inexact = true;
            inexactStartLoc = this.state.lastTokStartLoc;
          } else {
            nodeStart.properties.push(propOrInexact);
          }
        }
        this.flowObjectTypeSemicolon();
        if (inexactStartLoc && !this.match(8) && !this.match(9)) {
          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
        }
      }
      this.expect(endDelim);
      if (allowSpread) {
        nodeStart.inexact = inexact;
      }
      const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
      this.state.inType = oldInType;
      return out;
    }
    flowParseObjectTypeProperty(node2, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
      if (this.eat(21)) {
        const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
        if (isInexactToken) {
          if (!allowSpread) {
            this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);
          } else if (!allowInexact) {
            this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);
          }
          if (variance) {
            this.raise(FlowErrors.InexactVariance, variance);
          }
          return null;
        }
        if (!allowSpread) {
          this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);
        }
        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }
        if (variance) {
          this.raise(FlowErrors.SpreadVariance, variance);
        }
        node2.argument = this.flowParseType();
        return this.finishNode(node2, "ObjectTypeSpreadProperty");
      } else {
        node2.key = this.flowParseObjectPropertyKey();
        node2.static = isStatic;
        node2.proto = protoStartLoc != null;
        node2.kind = kind;
        let optional = false;
        if (this.match(47) || this.match(10)) {
          node2.method = true;
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (variance) {
            this.unexpected(variance.loc.start);
          }
          node2.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node2.loc.start));
          if (kind === "get" || kind === "set") {
            this.flowCheckGetterSetterParams(node2);
          }
          if (!allowSpread && node2.key.name === "constructor" && node2.value.this) {
            this.raise(FlowErrors.ThisParamBannedInConstructor, node2.value.this);
          }
        } else {
          if (kind !== "init") this.unexpected();
          node2.method = false;
          if (this.eat(17)) {
            optional = true;
          }
          node2.value = this.flowParseTypeInitialiser();
          node2.variance = variance;
        }
        node2.optional = optional;
        return this.finishNode(node2, "ObjectTypeProperty");
      }
    }
    flowCheckGetterSetterParams(property) {
      const paramCount = property.kind === "get" ? 0 : 1;
      const length = property.value.params.length + (property.value.rest ? 1 : 0);
      if (property.value.this) {
        this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);
      }
      if (length !== paramCount) {
        this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, property);
      }
      if (property.kind === "set" && property.value.rest) {
        this.raise(Errors.BadSetterRestParameter, property);
      }
    }
    flowObjectTypeSemicolon() {
      if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
        this.unexpected();
      }
    }
    flowParseQualifiedTypeIdentifier(startLoc, id) {
      var _startLoc;
      (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
      let node2 = id || this.flowParseRestrictedIdentifier(true);
      while (this.eat(16)) {
        const node22 = this.startNodeAt(startLoc);
        node22.qualification = node2;
        node22.id = this.flowParseRestrictedIdentifier(true);
        node2 = this.finishNode(node22, "QualifiedTypeIdentifier");
      }
      return node2;
    }
    flowParseGenericType(startLoc, id) {
      const node2 = this.startNodeAt(startLoc);
      node2.typeParameters = null;
      node2.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterInstantiation();
      }
      return this.finishNode(node2, "GenericTypeAnnotation");
    }
    flowParseTypeofType() {
      const node2 = this.startNode();
      this.expect(87);
      node2.argument = this.flowParsePrimaryType();
      return this.finishNode(node2, "TypeofTypeAnnotation");
    }
    flowParseTupleType() {
      const node2 = this.startNode();
      node2.types = [];
      this.expect(0);
      while (this.state.pos < this.length && !this.match(3)) {
        node2.types.push(this.flowParseType());
        if (this.match(3)) break;
        this.expect(12);
      }
      this.expect(3);
      return this.finishNode(node2, "TupleTypeAnnotation");
    }
    flowParseFunctionTypeParam(first) {
      let name = null;
      let optional = false;
      let typeAnnotation = null;
      const node2 = this.startNode();
      const lh = this.lookahead();
      const isThis = this.state.type === 78;
      if (lh.type === 14 || lh.type === 17) {
        if (isThis && !first) {
          this.raise(FlowErrors.ThisParamMustBeFirst, node2);
        }
        name = this.parseIdentifier(isThis);
        if (this.eat(17)) {
          optional = true;
          if (isThis) {
            this.raise(FlowErrors.ThisParamMayNotBeOptional, node2);
          }
        }
        typeAnnotation = this.flowParseTypeInitialiser();
      } else {
        typeAnnotation = this.flowParseType();
      }
      node2.name = name;
      node2.optional = optional;
      node2.typeAnnotation = typeAnnotation;
      return this.finishNode(node2, "FunctionTypeParam");
    }
    reinterpretTypeAsFunctionTypeParam(type) {
      const node2 = this.startNodeAt(type.loc.start);
      node2.name = null;
      node2.optional = false;
      node2.typeAnnotation = type;
      return this.finishNode(node2, "FunctionTypeParam");
    }
    flowParseFunctionTypeParams(params = []) {
      let rest = null;
      let _this = null;
      if (this.match(78)) {
        _this = this.flowParseFunctionTypeParam(true);
        _this.name = null;
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      while (!this.match(11) && !this.match(21)) {
        params.push(this.flowParseFunctionTypeParam(false));
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      if (this.eat(21)) {
        rest = this.flowParseFunctionTypeParam(false);
      }
      return {
        params,
        rest,
        _this
      };
    }
    flowIdentToTypeAnnotation(startLoc, node2, id) {
      switch (id.name) {
        case "any":
          return this.finishNode(node2, "AnyTypeAnnotation");
        case "bool":
        case "boolean":
          return this.finishNode(node2, "BooleanTypeAnnotation");
        case "mixed":
          return this.finishNode(node2, "MixedTypeAnnotation");
        case "empty":
          return this.finishNode(node2, "EmptyTypeAnnotation");
        case "number":
          return this.finishNode(node2, "NumberTypeAnnotation");
        case "string":
          return this.finishNode(node2, "StringTypeAnnotation");
        case "symbol":
          return this.finishNode(node2, "SymbolTypeAnnotation");
        default:
          this.checkNotUnderscore(id.name);
          return this.flowParseGenericType(startLoc, id);
      }
    }
    flowParsePrimaryType() {
      const startLoc = this.state.startLoc;
      const node2 = this.startNode();
      let tmp;
      let type;
      let isGroupedType = false;
      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
      switch (this.state.type) {
        case 5:
          return this.flowParseObjectType({
            allowStatic: false,
            allowExact: false,
            allowSpread: true,
            allowProto: false,
            allowInexact: true
          });
        case 6:
          return this.flowParseObjectType({
            allowStatic: false,
            allowExact: true,
            allowSpread: true,
            allowProto: false,
            allowInexact: false
          });
        case 0:
          this.state.noAnonFunctionType = false;
          type = this.flowParseTupleType();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          return type;
        case 47:
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
          this.expect(10);
          tmp = this.flowParseFunctionTypeParams();
          node2.params = tmp.params;
          node2.rest = tmp.rest;
          node2.this = tmp._this;
          this.expect(11);
          this.expect(19);
          node2.returnType = this.flowParseType();
          return this.finishNode(node2, "FunctionTypeAnnotation");
        case 10:
          this.next();
          if (!this.match(11) && !this.match(21)) {
            if (tokenIsIdentifier(this.state.type) || this.match(78)) {
              const token2 = this.lookahead().type;
              isGroupedType = token2 !== 17 && token2 !== 14;
            } else {
              isGroupedType = true;
            }
          }
          if (isGroupedType) {
            this.state.noAnonFunctionType = false;
            type = this.flowParseType();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
              this.expect(11);
              return type;
            } else {
              this.eat(12);
            }
          }
          if (type) {
            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
          } else {
            tmp = this.flowParseFunctionTypeParams();
          }
          node2.params = tmp.params;
          node2.rest = tmp.rest;
          node2.this = tmp._this;
          this.expect(11);
          this.expect(19);
          node2.returnType = this.flowParseType();
          node2.typeParameters = null;
          return this.finishNode(node2, "FunctionTypeAnnotation");
        case 133:
          return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
        case 85:
        case 86:
          node2.value = this.match(85);
          this.next();
          return this.finishNode(node2, "BooleanLiteralTypeAnnotation");
        case 53:
          if (this.state.value === "-") {
            this.next();
            if (this.match(134)) {
              return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node2);
            }
            if (this.match(135)) {
              return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node2);
            }
            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
          }
          this.unexpected();
          return;
        case 134:
          return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
        case 135:
          return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
        case 88:
          this.next();
          return this.finishNode(node2, "VoidTypeAnnotation");
        case 84:
          this.next();
          return this.finishNode(node2, "NullLiteralTypeAnnotation");
        case 78:
          this.next();
          return this.finishNode(node2, "ThisTypeAnnotation");
        case 55:
          this.next();
          return this.finishNode(node2, "ExistsTypeAnnotation");
        case 87:
          return this.flowParseTypeofType();
        default:
          if (tokenIsKeyword(this.state.type)) {
            const label = tokenLabelName(this.state.type);
            this.next();
            return super.createIdentifier(node2, label);
          } else if (tokenIsIdentifier(this.state.type)) {
            if (this.isContextual(129)) {
              return this.flowParseInterfaceType();
            }
            return this.flowIdentToTypeAnnotation(startLoc, node2, this.parseIdentifier());
          }
      }
      this.unexpected();
    }
    flowParsePostfixType() {
      const startLoc = this.state.startLoc;
      let type = this.flowParsePrimaryType();
      let seenOptionalIndexedAccess = false;
      while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
        const node2 = this.startNodeAt(startLoc);
        const optional = this.eat(18);
        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
        this.expect(0);
        if (!optional && this.match(3)) {
          node2.elementType = type;
          this.next();
          type = this.finishNode(node2, "ArrayTypeAnnotation");
        } else {
          node2.objectType = type;
          node2.indexType = this.flowParseType();
          this.expect(3);
          if (seenOptionalIndexedAccess) {
            node2.optional = optional;
            type = this.finishNode(node2, "OptionalIndexedAccessType");
          } else {
            type = this.finishNode(node2, "IndexedAccessType");
          }
        }
      }
      return type;
    }
    flowParsePrefixType() {
      const node2 = this.startNode();
      if (this.eat(17)) {
        node2.typeAnnotation = this.flowParsePrefixType();
        return this.finishNode(node2, "NullableTypeAnnotation");
      } else {
        return this.flowParsePostfixType();
      }
    }
    flowParseAnonFunctionWithoutParens() {
      const param = this.flowParsePrefixType();
      if (!this.state.noAnonFunctionType && this.eat(19)) {
        const node2 = this.startNodeAt(param.loc.start);
        node2.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
        node2.rest = null;
        node2.this = null;
        node2.returnType = this.flowParseType();
        node2.typeParameters = null;
        return this.finishNode(node2, "FunctionTypeAnnotation");
      }
      return param;
    }
    flowParseIntersectionType() {
      const node2 = this.startNode();
      this.eat(45);
      const type = this.flowParseAnonFunctionWithoutParens();
      node2.types = [type];
      while (this.eat(45)) {
        node2.types.push(this.flowParseAnonFunctionWithoutParens());
      }
      return node2.types.length === 1 ? type : this.finishNode(node2, "IntersectionTypeAnnotation");
    }
    flowParseUnionType() {
      const node2 = this.startNode();
      this.eat(43);
      const type = this.flowParseIntersectionType();
      node2.types = [type];
      while (this.eat(43)) {
        node2.types.push(this.flowParseIntersectionType());
      }
      return node2.types.length === 1 ? type : this.finishNode(node2, "UnionTypeAnnotation");
    }
    flowParseType() {
      const oldInType = this.state.inType;
      this.state.inType = true;
      const type = this.flowParseUnionType();
      this.state.inType = oldInType;
      return type;
    }
    flowParseTypeOrImplicitInstantiation() {
      if (this.state.type === 132 && this.state.value === "_") {
        const startLoc = this.state.startLoc;
        const node2 = this.parseIdentifier();
        return this.flowParseGenericType(startLoc, node2);
      } else {
        return this.flowParseType();
      }
    }
    flowParseTypeAnnotation() {
      const node2 = this.startNode();
      node2.typeAnnotation = this.flowParseTypeInitialiser();
      return this.finishNode(node2, "TypeAnnotation");
    }
    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
      if (this.match(14)) {
        ident.typeAnnotation = this.flowParseTypeAnnotation();
        this.resetEndLocation(ident);
      }
      return ident;
    }
    typeCastToParameter(node2) {
      node2.expression.typeAnnotation = node2.typeAnnotation;
      this.resetEndLocation(node2.expression, node2.typeAnnotation.loc.end);
      return node2.expression;
    }
    flowParseVariance() {
      let variance = null;
      if (this.match(53)) {
        variance = this.startNode();
        if (this.state.value === "+") {
          variance.kind = "plus";
        } else {
          variance.kind = "minus";
        }
        this.next();
        return this.finishNode(variance, "Variance");
      }
      return variance;
    }
    parseFunctionBody(node2, allowExpressionBody, isMethod = false) {
      if (allowExpressionBody) {
        this.forwardNoArrowParamsConversionAt(node2, () => super.parseFunctionBody(node2, true, isMethod));
        return;
      }
      super.parseFunctionBody(node2, false, isMethod);
    }
    parseFunctionBodyAndFinish(node2, type, isMethod = false) {
      if (this.match(14)) {
        const typeNode = this.startNode();
        [typeNode.typeAnnotation, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
        node2.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
      }
      return super.parseFunctionBodyAndFinish(node2, type, isMethod);
    }
    parseStatementLike(flags) {
      if (this.state.strict && this.isContextual(129)) {
        const lookahead = this.lookahead();
        if (tokenIsKeywordOrIdentifier(lookahead.type)) {
          const node2 = this.startNode();
          this.next();
          return this.flowParseInterface(node2);
        }
      } else if (this.shouldParseEnums() && this.isContextual(126)) {
        const node2 = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(node2);
      }
      const stmt = super.parseStatementLike(flags);
      if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) {
        this.flowPragma = null;
      }
      return stmt;
    }
    parseExpressionStatement(node2, expr, decorators2) {
      if (expr.type === "Identifier") {
        if (expr.name === "declare") {
          if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
            return this.flowParseDeclare(node2);
          }
        } else if (tokenIsIdentifier(this.state.type)) {
          if (expr.name === "interface") {
            return this.flowParseInterface(node2);
          } else if (expr.name === "type") {
            return this.flowParseTypeAlias(node2);
          } else if (expr.name === "opaque") {
            return this.flowParseOpaqueType(node2, false);
          }
        }
      }
      return super.parseExpressionStatement(node2, expr, decorators2);
    }
    shouldParseExportDeclaration() {
      const {
        type
      } = this.state;
      if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
        return !this.state.containsEsc;
      }
      return super.shouldParseExportDeclaration();
    }
    isExportDefaultSpecifier() {
      const {
        type
      } = this.state;
      if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
        return this.state.containsEsc;
      }
      return super.isExportDefaultSpecifier();
    }
    parseExportDefaultExpression() {
      if (this.shouldParseEnums() && this.isContextual(126)) {
        const node2 = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(node2);
      }
      return super.parseExportDefaultExpression();
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (!this.match(17)) return expr;
      if (this.state.maybeInArrowParameters) {
        const nextCh = this.lookaheadCharCode();
        if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
          this.setOptionalParametersError(refExpressionErrors);
          return expr;
        }
      }
      this.expect(17);
      const state2 = this.state.clone();
      const originalNoArrowAt = this.state.noArrowAt;
      const node2 = this.startNodeAt(startLoc);
      let {
        consequent,
        failed
      } = this.tryParseConditionalConsequent();
      let [valid, invalid] = this.getArrowLikeExpressions(consequent);
      if (failed || invalid.length > 0) {
        const noArrowAt = [...originalNoArrowAt];
        if (invalid.length > 0) {
          this.state = state2;
          this.state.noArrowAt = noArrowAt;
          for (let i = 0; i < invalid.length; i++) {
            noArrowAt.push(invalid[i].start);
          }
          ({
            consequent,
            failed
          } = this.tryParseConditionalConsequent());
          [valid, invalid] = this.getArrowLikeExpressions(consequent);
        }
        if (failed && valid.length > 1) {
          this.raise(FlowErrors.AmbiguousConditionalArrow, state2.startLoc);
        }
        if (failed && valid.length === 1) {
          this.state = state2;
          noArrowAt.push(valid[0].start);
          this.state.noArrowAt = noArrowAt;
          ({
            consequent,
            failed
          } = this.tryParseConditionalConsequent());
        }
      }
      this.getArrowLikeExpressions(consequent, true);
      this.state.noArrowAt = originalNoArrowAt;
      this.expect(14);
      node2.test = expr;
      node2.consequent = consequent;
      node2.alternate = this.forwardNoArrowParamsConversionAt(node2, () => this.parseMaybeAssign(void 0, void 0));
      return this.finishNode(node2, "ConditionalExpression");
    }
    tryParseConditionalConsequent() {
      this.state.noArrowParamsConversionAt.push(this.state.start);
      const consequent = this.parseMaybeAssignAllowIn();
      const failed = !this.match(14);
      this.state.noArrowParamsConversionAt.pop();
      return {
        consequent,
        failed
      };
    }
    getArrowLikeExpressions(node2, disallowInvalid) {
      const stack2 = [node2];
      const arrows = [];
      while (stack2.length !== 0) {
        const node3 = stack2.pop();
        if (node3.type === "ArrowFunctionExpression") {
          if (node3.typeParameters || !node3.returnType) {
            this.finishArrowValidation(node3);
          } else {
            arrows.push(node3);
          }
          stack2.push(node3.body);
        } else if (node3.type === "ConditionalExpression") {
          stack2.push(node3.consequent);
          stack2.push(node3.alternate);
        }
      }
      if (disallowInvalid) {
        arrows.forEach((node3) => this.finishArrowValidation(node3));
        return [arrows, []];
      }
      return partition2(arrows, (node3) => node3.params.every((param) => this.isAssignable(param, true)));
    }
    finishArrowValidation(node2) {
      var _node$extra;
      this.toAssignableList(node2.params, (_node$extra = node2.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
      this.scope.enter(2 | 4);
      super.checkParams(node2, false, true);
      this.scope.exit();
    }
    forwardNoArrowParamsConversionAt(node2, parse4) {
      let result;
      if (this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        result = parse4();
        this.state.noArrowParamsConversionAt.pop();
      } else {
        result = parse4();
      }
      return result;
    }
    parseParenItem(node2, startLoc) {
      node2 = super.parseParenItem(node2, startLoc);
      if (this.eat(17)) {
        node2.optional = true;
        this.resetEndLocation(node2);
      }
      if (this.match(14)) {
        const typeCastNode = this.startNodeAt(startLoc);
        typeCastNode.expression = node2;
        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
        return this.finishNode(typeCastNode, "TypeCastExpression");
      }
      return node2;
    }
    assertModuleNodeAllowed(node2) {
      if (node2.type === "ImportDeclaration" && (node2.importKind === "type" || node2.importKind === "typeof") || node2.type === "ExportNamedDeclaration" && node2.exportKind === "type" || node2.type === "ExportAllDeclaration" && node2.exportKind === "type") {
        return;
      }
      super.assertModuleNodeAllowed(node2);
    }
    parseExportDeclaration(node2) {
      if (this.isContextual(130)) {
        node2.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        if (this.match(5)) {
          node2.specifiers = this.parseExportSpecifiers(true);
          super.parseExportFrom(node2);
          return null;
        } else {
          return this.flowParseTypeAlias(declarationNode);
        }
      } else if (this.isContextual(131)) {
        node2.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseOpaqueType(declarationNode, false);
      } else if (this.isContextual(129)) {
        node2.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseInterface(declarationNode);
      } else if (this.shouldParseEnums() && this.isContextual(126)) {
        node2.exportKind = "value";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(declarationNode);
      } else {
        return super.parseExportDeclaration(node2);
      }
    }
    eatExportStar(node2) {
      if (super.eatExportStar(node2)) return true;
      if (this.isContextual(130) && this.lookahead().type === 55) {
        node2.exportKind = "type";
        this.next();
        this.next();
        return true;
      }
      return false;
    }
    maybeParseExportNamespaceSpecifier(node2) {
      const {
        startLoc
      } = this.state;
      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node2);
      if (hasNamespace && node2.exportKind === "type") {
        this.unexpected(startLoc);
      }
      return hasNamespace;
    }
    parseClassId(node2, isStatement, optionalId) {
      super.parseClassId(node2, isStatement, optionalId);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      }
    }
    parseClassMember(classBody, member, state2) {
      const {
        startLoc
      } = this.state;
      if (this.isContextual(125)) {
        if (super.parseClassMemberFromModifier(classBody, member)) {
          return;
        }
        member.declare = true;
      }
      super.parseClassMember(classBody, member, state2);
      if (member.declare) {
        if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
          this.raise(FlowErrors.DeclareClassElement, startLoc);
        } else if (member.value) {
          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);
        }
      }
    }
    isIterator(word) {
      return word === "iterator" || word === "asyncIterator";
    }
    readIterator() {
      const word = super.readWord1();
      const fullWord = "@@" + word;
      if (!this.isIterator(word) || !this.state.inType) {
        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {
          identifierName: fullWord
        });
      }
      this.finishToken(132, fullWord);
    }
    getTokenFromCode(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code2 === 123 && next === 124) {
        this.finishOp(6, 2);
      } else if (this.state.inType && (code2 === 62 || code2 === 60)) {
        this.finishOp(code2 === 62 ? 48 : 47, 1);
      } else if (this.state.inType && code2 === 63) {
        if (next === 46) {
          this.finishOp(18, 2);
        } else {
          this.finishOp(17, 1);
        }
      } else if (isIteratorStart(code2, next, this.input.charCodeAt(this.state.pos + 2))) {
        this.state.pos += 2;
        this.readIterator();
      } else {
        super.getTokenFromCode(code2);
      }
    }
    isAssignable(node2, isBinding2) {
      if (node2.type === "TypeCastExpression") {
        return this.isAssignable(node2.expression, isBinding2);
      } else {
        return super.isAssignable(node2, isBinding2);
      }
    }
    toAssignable(node2, isLHS = false) {
      if (!isLHS && node2.type === "AssignmentExpression" && node2.left.type === "TypeCastExpression") {
        node2.left = this.typeCastToParameter(node2.left);
      }
      super.toAssignable(node2, isLHS);
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
      for (let i = 0; i < exprList.length; i++) {
        const expr = exprList[i];
        if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
          exprList[i] = this.typeCastToParameter(expr);
        }
      }
      super.toAssignableList(exprList, trailingCommaLoc, isLHS);
    }
    toReferencedList(exprList, isParenthesizedExpr) {
      for (let i = 0; i < exprList.length; i++) {
        var _expr$extra;
        const expr = exprList[i];
        if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
        }
      }
      return exprList;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      const node2 = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
      if (canBePattern && !this.state.maybeInArrowParameters) {
        this.toReferencedList(node2.elements);
      }
      return node2;
    }
    isValidLVal(type, isParenthesized, binding2) {
      return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding2);
    }
    parseClassProperty(node2) {
      if (this.match(14)) {
        node2.typeAnnotation = this.flowParseTypeAnnotation();
      }
      return super.parseClassProperty(node2);
    }
    parseClassPrivateProperty(node2) {
      if (this.match(14)) {
        node2.typeAnnotation = this.flowParseTypeAnnotation();
      }
      return super.parseClassPrivateProperty(node2);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(14) || super.isClassProperty();
    }
    isNonstaticConstructor(method) {
      return !this.match(14) && super.isNonstaticConstructor(method);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      if (method.variance) {
        this.unexpected(method.variance.loc.start);
      }
      delete method.variance;
      if (this.match(47)) {
        method.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
      if (method.params && isConstructor) {
        const params = method.params;
        if (params.length > 0 && this.isThisParam(params[0])) {
          this.raise(FlowErrors.ThisParamBannedInConstructor, method);
        }
      } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
        const params = method.value.params;
        if (params.length > 0 && this.isThisParam(params[0])) {
          this.raise(FlowErrors.ThisParamBannedInConstructor, method);
        }
      }
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      if (method.variance) {
        this.unexpected(method.variance.loc.start);
      }
      delete method.variance;
      if (this.match(47)) {
        method.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
    }
    parseClassSuper(node2) {
      super.parseClassSuper(node2);
      if (node2.superClass && this.match(47)) {
        node2.superTypeParameters = this.flowParseTypeParameterInstantiation();
      }
      if (this.isContextual(113)) {
        this.next();
        const implemented = node2.implements = [];
        do {
          const node3 = this.startNode();
          node3.id = this.flowParseRestrictedIdentifier(true);
          if (this.match(47)) {
            node3.typeParameters = this.flowParseTypeParameterInstantiation();
          } else {
            node3.typeParameters = null;
          }
          implemented.push(this.finishNode(node3, "ClassImplements"));
        } while (this.eat(12));
      }
    }
    checkGetterSetterParams(method) {
      super.checkGetterSetterParams(method);
      const params = this.getObjectOrClassMethodParams(method);
      if (params.length > 0) {
        const param = params[0];
        if (this.isThisParam(param) && method.kind === "get") {
          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);
        } else if (this.isThisParam(param)) {
          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
        }
      }
    }
    parsePropertyNamePrefixOperator(node2) {
      node2.variance = this.flowParseVariance();
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      if (prop.variance) {
        this.unexpected(prop.variance.loc.start);
      }
      delete prop.variance;
      let typeParameters;
      if (this.match(47) && !isAccessor) {
        typeParameters = this.flowParseTypeParameterDeclaration();
        if (!this.match(10)) this.unexpected();
      }
      const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
      if (typeParameters) {
        (result.value || result).typeParameters = typeParameters;
      }
      return result;
    }
    parseAssignableListItemTypes(param) {
      if (this.eat(17)) {
        if (param.type !== "Identifier") {
          this.raise(FlowErrors.PatternIsOptional, param);
        }
        if (this.isThisParam(param)) {
          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);
        }
        param.optional = true;
      }
      if (this.match(14)) {
        param.typeAnnotation = this.flowParseTypeAnnotation();
      } else if (this.isThisParam(param)) {
        this.raise(FlowErrors.ThisParamAnnotationRequired, param);
      }
      if (this.match(29) && this.isThisParam(param)) {
        this.raise(FlowErrors.ThisParamNoDefault, param);
      }
      this.resetEndLocation(param);
      return param;
    }
    parseMaybeDefault(startLoc, left) {
      const node2 = super.parseMaybeDefault(startLoc, left);
      if (node2.type === "AssignmentPattern" && node2.typeAnnotation && node2.right.start < node2.typeAnnotation.start) {
        this.raise(FlowErrors.TypeBeforeInitializer, node2.typeAnnotation);
      }
      return node2;
    }
    checkImportReflection(node2) {
      super.checkImportReflection(node2);
      if (node2.module && node2.importKind !== "value") {
        this.raise(FlowErrors.ImportReflectionHasImportType, node2.specifiers[0].loc.start);
      }
    }
    parseImportSpecifierLocal(node2, specifier, type) {
      specifier.local = hasTypeImportKind(node2) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
      node2.specifiers.push(this.finishImportSpecifier(specifier, type));
    }
    isPotentialImportPhase(isExport) {
      if (super.isPotentialImportPhase(isExport)) return true;
      if (this.isContextual(130)) {
        if (!isExport) return true;
        const ch = this.lookaheadCharCode();
        return ch === 123 || ch === 42;
      }
      return !isExport && this.isContextual(87);
    }
    applyImportPhase(node2, isExport, phase, loc) {
      super.applyImportPhase(node2, isExport, phase, loc);
      if (isExport) {
        if (!phase && this.match(65)) {
          return;
        }
        node2.exportKind = phase === "type" ? phase : "value";
      } else {
        if (phase === "type" && this.match(55)) this.unexpected();
        node2.importKind = phase === "type" || phase === "typeof" ? phase : "value";
      }
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      const firstIdent = specifier.imported;
      let specifierTypeKind = null;
      if (firstIdent.type === "Identifier") {
        if (firstIdent.name === "type") {
          specifierTypeKind = "type";
        } else if (firstIdent.name === "typeof") {
          specifierTypeKind = "typeof";
        }
      }
      let isBinding2 = false;
      if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
        const as_ident = this.parseIdentifier(true);
        if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
          specifier.imported = as_ident;
          specifier.importKind = specifierTypeKind;
          specifier.local = cloneIdentifier(as_ident);
        } else {
          specifier.imported = firstIdent;
          specifier.importKind = null;
          specifier.local = this.parseIdentifier();
        }
      } else {
        if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
          specifier.imported = this.parseIdentifier(true);
          specifier.importKind = specifierTypeKind;
        } else {
          if (importedIsString) {
            throw this.raise(Errors.ImportBindingIsString, specifier, {
              importName: firstIdent.value
            });
          }
          specifier.imported = firstIdent;
          specifier.importKind = null;
        }
        if (this.eatContextual(93)) {
          specifier.local = this.parseIdentifier();
        } else {
          isBinding2 = true;
          specifier.local = cloneIdentifier(specifier.imported);
        }
      }
      const specifierIsTypeImport = hasTypeImportKind(specifier);
      if (isInTypeOnlyImport && specifierIsTypeImport) {
        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);
      }
      if (isInTypeOnlyImport || specifierIsTypeImport) {
        this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
      }
      if (isBinding2 && !isInTypeOnlyImport && !specifierIsTypeImport) {
        this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
      }
      return this.finishImportSpecifier(specifier, "ImportSpecifier");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 78:
          return this.parseIdentifier(true);
        default:
          return super.parseBindingAtom();
      }
    }
    parseFunctionParams(node2, isConstructor) {
      const kind = node2.kind;
      if (kind !== "get" && kind !== "set" && this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.parseFunctionParams(node2, isConstructor);
    }
    parseVarId(decl, kind) {
      super.parseVarId(decl, kind);
      if (this.match(14)) {
        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
        this.resetEndLocation(decl.id);
      }
    }
    parseAsyncArrowFromCallExpression(node2, call) {
      if (this.match(14)) {
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = true;
        node2.returnType = this.flowParseTypeAnnotation();
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
      }
      return super.parseAsyncArrowFromCallExpression(node2, call);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      var _jsx;
      let state2 = null;
      let jsx3;
      if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
        state2 = this.state.clone();
        jsx3 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state2);
        if (!jsx3.error) return jsx3.node;
        const {
          context: context2
        } = this.state;
        const currentContext = context2[context2.length - 1];
        if (currentContext === types2.j_oTag || currentContext === types2.j_expr) {
          context2.pop();
        }
      }
      if ((_jsx = jsx3) != null && _jsx.error || this.match(47)) {
        var _jsx2, _jsx3;
        state2 = state2 || this.state.clone();
        let typeParameters;
        const arrow = this.tryParse((abort) => {
          var _arrowExpression$extr;
          typeParameters = this.flowParseTypeParameterDeclaration();
          const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            this.resetStartLocationFromNode(result, typeParameters);
            return result;
          });
          if ((_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized) abort();
          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
          if (expr.type !== "ArrowFunctionExpression") abort();
          expr.typeParameters = typeParameters;
          this.resetStartLocationFromNode(expr, typeParameters);
          return arrowExpression2;
        }, state2);
        let arrowExpression = null;
        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
          if (!arrow.error && !arrow.aborted) {
            if (arrow.node.async) {
              this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);
            }
            return arrow.node;
          }
          arrowExpression = arrow.node;
        }
        if ((_jsx2 = jsx3) != null && _jsx2.node) {
          this.state = jsx3.failState;
          return jsx3.node;
        }
        if (arrowExpression) {
          this.state = arrow.failState;
          return arrowExpression;
        }
        if ((_jsx3 = jsx3) != null && _jsx3.thrown) throw jsx3.error;
        if (arrow.thrown) throw arrow.error;
        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
      }
      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
    }
    parseArrow(node2) {
      if (this.match(14)) {
        const result = this.tryParse(() => {
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = true;
          const typeNode = this.startNode();
          [typeNode.typeAnnotation, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          if (this.canInsertSemicolon()) this.unexpected();
          if (!this.match(19)) this.unexpected();
          return typeNode;
        });
        if (result.thrown) return null;
        if (result.error) this.state = result.failState;
        node2.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
      }
      return super.parseArrow(node2);
    }
    shouldParseArrow(params) {
      return this.match(14) || super.shouldParseArrow(params);
    }
    setArrowFunctionParameters(node2, params) {
      if (this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
        node2.params = params;
      } else {
        super.setArrowFunctionParameters(node2, params);
      }
    }
    checkParams(node2, allowDuplicates, isArrowFunction, strictModeChanged = true) {
      if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
        return;
      }
      for (let i = 0; i < node2.params.length; i++) {
        if (this.isThisParam(node2.params[i]) && i > 0) {
          this.raise(FlowErrors.ThisParamMustBeFirst, node2.params[i]);
        }
      }
      super.checkParams(node2, allowDuplicates, isArrowFunction, strictModeChanged);
    }
    parseParenAndDistinguishExpression(canBeArrow) {
      return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
    }
    parseSubscripts(base2, startLoc, noCalls) {
      if (base2.type === "Identifier" && base2.name === "async" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {
        this.next();
        const node2 = this.startNodeAt(startLoc);
        node2.callee = base2;
        node2.arguments = super.parseCallExpressionArguments(11, false);
        base2 = this.finishNode(node2, "CallExpression");
      } else if (base2.type === "Identifier" && base2.name === "async" && this.match(47)) {
        const state2 = this.state.clone();
        const arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state2);
        if (!arrow.error && !arrow.aborted) return arrow.node;
        const result = this.tryParse(() => super.parseSubscripts(base2, startLoc, noCalls), state2);
        if (result.node && !result.error) return result.node;
        if (arrow.node) {
          this.state = arrow.failState;
          return arrow.node;
        }
        if (result.node) {
          this.state = result.failState;
          return result.node;
        }
        throw arrow.error || result.error;
      }
      return super.parseSubscripts(base2, startLoc, noCalls);
    }
    parseSubscript(base2, startLoc, noCalls, subscriptState) {
      if (this.match(18) && this.isLookaheadToken_lt()) {
        subscriptState.optionalChainMember = true;
        if (noCalls) {
          subscriptState.stop = true;
          return base2;
        }
        this.next();
        const node2 = this.startNodeAt(startLoc);
        node2.callee = base2;
        node2.typeArguments = this.flowParseTypeParameterInstantiation();
        this.expect(10);
        node2.arguments = this.parseCallExpressionArguments(11, false);
        node2.optional = true;
        return this.finishCallExpression(node2, true);
      } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
        const node2 = this.startNodeAt(startLoc);
        node2.callee = base2;
        const result = this.tryParse(() => {
          node2.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
          this.expect(10);
          node2.arguments = super.parseCallExpressionArguments(11, false);
          if (subscriptState.optionalChainMember) {
            node2.optional = false;
          }
          return this.finishCallExpression(node2, subscriptState.optionalChainMember);
        });
        if (result.node) {
          if (result.error) this.state = result.failState;
          return result.node;
        }
      }
      return super.parseSubscript(base2, startLoc, noCalls, subscriptState);
    }
    parseNewCallee(node2) {
      super.parseNewCallee(node2);
      let targs = null;
      if (this.shouldParseTypes() && this.match(47)) {
        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
      }
      node2.typeArguments = targs;
    }
    parseAsyncArrowWithTypeParameters(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      this.parseFunctionParams(node2, false);
      if (!this.parseArrow(node2)) return;
      return super.parseArrowExpression(node2, void 0, true);
    }
    readToken_mult_modulo(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code2 === 42 && next === 47 && this.state.hasFlowComment) {
        this.state.hasFlowComment = false;
        this.state.pos += 2;
        this.nextToken();
        return;
      }
      super.readToken_mult_modulo(code2);
    }
    readToken_pipe_amp(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code2 === 124 && next === 125) {
        this.finishOp(9, 2);
        return;
      }
      super.readToken_pipe_amp(code2);
    }
    parseTopLevel(file2, program) {
      const fileNode = super.parseTopLevel(file2, program);
      if (this.state.hasFlowComment) {
        this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());
      }
      return fileNode;
    }
    skipBlockComment() {
      if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
        if (this.state.hasFlowComment) {
          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
        }
        this.hasFlowCommentCompletion();
        const commentSkip = this.skipFlowComment();
        if (commentSkip) {
          this.state.pos += commentSkip;
          this.state.hasFlowComment = true;
        }
        return;
      }
      return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
    }
    skipFlowComment() {
      const {
        pos: pos2
      } = this.state;
      let shiftToFirstNonWhiteSpace = 2;
      while ([32, 9].includes(this.input.charCodeAt(pos2 + shiftToFirstNonWhiteSpace))) {
        shiftToFirstNonWhiteSpace++;
      }
      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos2);
      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos2 + 1);
      if (ch2 === 58 && ch3 === 58) {
        return shiftToFirstNonWhiteSpace + 2;
      }
      if (this.input.slice(shiftToFirstNonWhiteSpace + pos2, shiftToFirstNonWhiteSpace + pos2 + 12) === "flow-include") {
        return shiftToFirstNonWhiteSpace + 12;
      }
      if (ch2 === 58 && ch3 !== 58) {
        return shiftToFirstNonWhiteSpace;
      }
      return false;
    }
    hasFlowCommentCompletion() {
      const end = this.input.indexOf("*/", this.state.pos);
      if (end === -1) {
        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
      }
    }
    flowEnumErrorBooleanMemberNotInitialized(loc, {
      enumName,
      memberName
    }) {
      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {
        memberName,
        enumName
      });
    }
    flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
      return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);
    }
    flowEnumErrorNumberMemberNotInitialized(loc, details) {
      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
    }
    flowEnumErrorStringMemberInconsistentlyInitialized(node2, details) {
      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node2, details);
    }
    flowEnumMemberInit() {
      const startLoc = this.state.startLoc;
      const endOfInit = () => this.match(12) || this.match(8);
      switch (this.state.type) {
        case 134: {
          const literal2 = this.parseNumericLiteral(this.state.value);
          if (endOfInit()) {
            return {
              type: "number",
              loc: literal2.loc.start,
              value: literal2
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
        case 133: {
          const literal2 = this.parseStringLiteral(this.state.value);
          if (endOfInit()) {
            return {
              type: "string",
              loc: literal2.loc.start,
              value: literal2
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
        case 85:
        case 86: {
          const literal2 = this.parseBooleanLiteral(this.match(85));
          if (endOfInit()) {
            return {
              type: "boolean",
              loc: literal2.loc.start,
              value: literal2
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
        default:
          return {
            type: "invalid",
            loc: startLoc
          };
      }
    }
    flowEnumMemberRaw() {
      const loc = this.state.startLoc;
      const id = this.parseIdentifier(true);
      const init = this.eat(29) ? this.flowEnumMemberInit() : {
        type: "none",
        loc
      };
      return {
        id,
        init
      };
    }
    flowEnumCheckExplicitTypeMismatch(loc, context2, expectedType) {
      const {
        explicitType
      } = context2;
      if (explicitType === null) {
        return;
      }
      if (explicitType !== expectedType) {
        this.flowEnumErrorInvalidMemberInitializer(loc, context2);
      }
    }
    flowEnumMembers({
      enumName,
      explicitType
    }) {
      const seenNames = /* @__PURE__ */ new Set();
      const members = {
        booleanMembers: [],
        numberMembers: [],
        stringMembers: [],
        defaultedMembers: []
      };
      let hasUnknownMembers = false;
      while (!this.match(8)) {
        if (this.eat(21)) {
          hasUnknownMembers = true;
          break;
        }
        const memberNode = this.startNode();
        const {
          id,
          init
        } = this.flowEnumMemberRaw();
        const memberName = id.name;
        if (memberName === "") {
          continue;
        }
        if (/^[a-z]/.test(memberName)) {
          this.raise(FlowErrors.EnumInvalidMemberName, id, {
            memberName,
            suggestion: memberName[0].toUpperCase() + memberName.slice(1),
            enumName
          });
        }
        if (seenNames.has(memberName)) {
          this.raise(FlowErrors.EnumDuplicateMemberName, id, {
            memberName,
            enumName
          });
        }
        seenNames.add(memberName);
        const context2 = {
          enumName,
          explicitType,
          memberName
        };
        memberNode.id = id;
        switch (init.type) {
          case "boolean": {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context2, "boolean");
            memberNode.init = init.value;
            members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
            break;
          }
          case "number": {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context2, "number");
            memberNode.init = init.value;
            members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
            break;
          }
          case "string": {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context2, "string");
            memberNode.init = init.value;
            members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
            break;
          }
          case "invalid": {
            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context2);
          }
          case "none": {
            switch (explicitType) {
              case "boolean":
                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context2);
                break;
              case "number":
                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context2);
                break;
              default:
                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
            }
          }
        }
        if (!this.match(8)) {
          this.expect(12);
        }
      }
      return {
        members,
        hasUnknownMembers
      };
    }
    flowEnumStringMembers(initializedMembers, defaultedMembers, {
      enumName
    }) {
      if (initializedMembers.length === 0) {
        return defaultedMembers;
      } else if (defaultedMembers.length === 0) {
        return initializedMembers;
      } else if (defaultedMembers.length > initializedMembers.length) {
        for (const member of initializedMembers) {
          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
            enumName
          });
        }
        return defaultedMembers;
      } else {
        for (const member of defaultedMembers) {
          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
            enumName
          });
        }
        return initializedMembers;
      }
    }
    flowEnumParseExplicitType({
      enumName
    }) {
      if (!this.eatContextual(102)) return null;
      if (!tokenIsIdentifier(this.state.type)) {
        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {
          enumName
        });
      }
      const {
        value: value2
      } = this.state;
      this.next();
      if (value2 !== "boolean" && value2 !== "number" && value2 !== "string" && value2 !== "symbol") {
        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {
          enumName,
          invalidEnumType: value2
        });
      }
      return value2;
    }
    flowEnumBody(node2, id) {
      const enumName = id.name;
      const nameLoc = id.loc.start;
      const explicitType = this.flowEnumParseExplicitType({
        enumName
      });
      this.expect(5);
      const {
        members,
        hasUnknownMembers
      } = this.flowEnumMembers({
        enumName,
        explicitType
      });
      node2.hasUnknownMembers = hasUnknownMembers;
      switch (explicitType) {
        case "boolean":
          node2.explicitType = true;
          node2.members = members.booleanMembers;
          this.expect(8);
          return this.finishNode(node2, "EnumBooleanBody");
        case "number":
          node2.explicitType = true;
          node2.members = members.numberMembers;
          this.expect(8);
          return this.finishNode(node2, "EnumNumberBody");
        case "string":
          node2.explicitType = true;
          node2.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
            enumName
          });
          this.expect(8);
          return this.finishNode(node2, "EnumStringBody");
        case "symbol":
          node2.members = members.defaultedMembers;
          this.expect(8);
          return this.finishNode(node2, "EnumSymbolBody");
        default: {
          const empty = () => {
            node2.members = [];
            this.expect(8);
            return this.finishNode(node2, "EnumStringBody");
          };
          node2.explicitType = false;
          const boolsLen = members.booleanMembers.length;
          const numsLen = members.numberMembers.length;
          const strsLen = members.stringMembers.length;
          const defaultedLen = members.defaultedMembers.length;
          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
            return empty();
          } else if (!boolsLen && !numsLen) {
            node2.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
              enumName
            });
            this.expect(8);
            return this.finishNode(node2, "EnumStringBody");
          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
            for (const member of members.defaultedMembers) {
              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                enumName,
                memberName: member.id.name
              });
            }
            node2.members = members.booleanMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumBooleanBody");
          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
            for (const member of members.defaultedMembers) {
              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                enumName,
                memberName: member.id.name
              });
            }
            node2.members = members.numberMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumNumberBody");
          } else {
            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {
              enumName
            });
            return empty();
          }
        }
      }
    }
    flowParseEnumDeclaration(node2) {
      const id = this.parseIdentifier();
      node2.id = id;
      node2.body = this.flowEnumBody(this.startNode(), id);
      return this.finishNode(node2, "EnumDeclaration");
    }
    isLookaheadToken_lt() {
      const next = this.nextTokenStart();
      if (this.input.charCodeAt(next) === 60) {
        const afterNext = this.input.charCodeAt(next + 1);
        return afterNext !== 60 && afterNext !== 61;
      }
      return false;
    }
    maybeUnwrapTypeCastExpression(node2) {
      return node2.type === "TypeCastExpression" ? node2.expression : node2;
    }
  };
  const entities = {
    __proto__: null,
    quot: '"',
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: " ",
    iexcl: "¡",
    cent: "¢",
    pound: "£",
    curren: "¤",
    yen: "¥",
    brvbar: "¦",
    sect: "§",
    uml: "¨",
    copy: "©",
    ordf: "ª",
    laquo: "«",
    not: "¬",
    shy: "­",
    reg: "®",
    macr: "¯",
    deg: "°",
    plusmn: "±",
    sup2: "²",
    sup3: "³",
    acute: "´",
    micro: "µ",
    para: "¶",
    middot: "·",
    cedil: "¸",
    sup1: "¹",
    ordm: "º",
    raquo: "»",
    frac14: "¼",
    frac12: "½",
    frac34: "¾",
    iquest: "¿",
    Agrave: "À",
    Aacute: "Á",
    Acirc: "Â",
    Atilde: "Ã",
    Auml: "Ä",
    Aring: "Å",
    AElig: "Æ",
    Ccedil: "Ç",
    Egrave: "È",
    Eacute: "É",
    Ecirc: "Ê",
    Euml: "Ë",
    Igrave: "Ì",
    Iacute: "Í",
    Icirc: "Î",
    Iuml: "Ï",
    ETH: "Ð",
    Ntilde: "Ñ",
    Ograve: "Ò",
    Oacute: "Ó",
    Ocirc: "Ô",
    Otilde: "Õ",
    Ouml: "Ö",
    times: "×",
    Oslash: "Ø",
    Ugrave: "Ù",
    Uacute: "Ú",
    Ucirc: "Û",
    Uuml: "Ü",
    Yacute: "Ý",
    THORN: "Þ",
    szlig: "ß",
    agrave: "à",
    aacute: "á",
    acirc: "â",
    atilde: "ã",
    auml: "ä",
    aring: "å",
    aelig: "æ",
    ccedil: "ç",
    egrave: "è",
    eacute: "é",
    ecirc: "ê",
    euml: "ë",
    igrave: "ì",
    iacute: "í",
    icirc: "î",
    iuml: "ï",
    eth: "ð",
    ntilde: "ñ",
    ograve: "ò",
    oacute: "ó",
    ocirc: "ô",
    otilde: "õ",
    ouml: "ö",
    divide: "÷",
    oslash: "ø",
    ugrave: "ù",
    uacute: "ú",
    ucirc: "û",
    uuml: "ü",
    yacute: "ý",
    thorn: "þ",
    yuml: "ÿ",
    OElig: "Œ",
    oelig: "œ",
    Scaron: "Š",
    scaron: "š",
    Yuml: "Ÿ",
    fnof: "ƒ",
    circ: "ˆ",
    tilde: "˜",
    Alpha: "Α",
    Beta: "Β",
    Gamma: "Γ",
    Delta: "Δ",
    Epsilon: "Ε",
    Zeta: "Ζ",
    Eta: "Η",
    Theta: "Θ",
    Iota: "Ι",
    Kappa: "Κ",
    Lambda: "Λ",
    Mu: "Μ",
    Nu: "Ν",
    Xi: "Ξ",
    Omicron: "Ο",
    Pi: "Π",
    Rho: "Ρ",
    Sigma: "Σ",
    Tau: "Τ",
    Upsilon: "Υ",
    Phi: "Φ",
    Chi: "Χ",
    Psi: "Ψ",
    Omega: "Ω",
    alpha: "α",
    beta: "β",
    gamma: "γ",
    delta: "δ",
    epsilon: "ε",
    zeta: "ζ",
    eta: "η",
    theta: "θ",
    iota: "ι",
    kappa: "κ",
    lambda: "λ",
    mu: "μ",
    nu: "ν",
    xi: "ξ",
    omicron: "ο",
    pi: "π",
    rho: "ρ",
    sigmaf: "ς",
    sigma: "σ",
    tau: "τ",
    upsilon: "υ",
    phi: "φ",
    chi: "χ",
    psi: "ψ",
    omega: "ω",
    thetasym: "ϑ",
    upsih: "ϒ",
    piv: "ϖ",
    ensp: " ",
    emsp: " ",
    thinsp: " ",
    zwnj: "‌",
    zwj: "‍",
    lrm: "‎",
    rlm: "‏",
    ndash: "–",
    mdash: "—",
    lsquo: "‘",
    rsquo: "’",
    sbquo: "‚",
    ldquo: "“",
    rdquo: "”",
    bdquo: "„",
    dagger: "†",
    Dagger: "‡",
    bull: "•",
    hellip: "…",
    permil: "‰",
    prime: "′",
    Prime: "″",
    lsaquo: "‹",
    rsaquo: "›",
    oline: "‾",
    frasl: "⁄",
    euro: "€",
    image: "ℑ",
    weierp: "℘",
    real: "ℜ",
    trade: "™",
    alefsym: "ℵ",
    larr: "←",
    uarr: "↑",
    rarr: "→",
    darr: "↓",
    harr: "↔",
    crarr: "↵",
    lArr: "⇐",
    uArr: "⇑",
    rArr: "⇒",
    dArr: "⇓",
    hArr: "⇔",
    forall: "∀",
    part: "∂",
    exist: "∃",
    empty: "∅",
    nabla: "∇",
    isin: "∈",
    notin: "∉",
    ni: "∋",
    prod: "∏",
    sum: "∑",
    minus: "−",
    lowast: "∗",
    radic: "√",
    prop: "∝",
    infin: "∞",
    ang: "∠",
    and: "∧",
    or: "∨",
    cap: "∩",
    cup: "∪",
    int: "∫",
    there4: "∴",
    sim: "∼",
    cong: "≅",
    asymp: "≈",
    ne: "≠",
    equiv: "≡",
    le: "≤",
    ge: "≥",
    sub: "⊂",
    sup: "⊃",
    nsub: "⊄",
    sube: "⊆",
    supe: "⊇",
    oplus: "⊕",
    otimes: "⊗",
    perp: "⊥",
    sdot: "⋅",
    lceil: "⌈",
    rceil: "⌉",
    lfloor: "⌊",
    rfloor: "⌋",
    lang: "〈",
    rang: "〉",
    loz: "◊",
    spades: "♠",
    clubs: "♣",
    hearts: "♥",
    diams: "♦"
  };
  const JsxErrors = ParseErrorEnum`jsx`({
    AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
    MissingClosingTagElement: ({
      openingTagName
    }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
    MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
    UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
    UnexpectedToken: ({
      unexpected,
      HTMLEntity
    }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
    UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
    UnterminatedJsxContent: "Unterminated JSX contents.",
    UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
  });
  function isFragment(object) {
    return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
  }
  function getQualifiedJSXName(object) {
    if (object.type === "JSXIdentifier") {
      return object.name;
    }
    if (object.type === "JSXNamespacedName") {
      return object.namespace.name + ":" + object.name.name;
    }
    if (object.type === "JSXMemberExpression") {
      return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    }
    throw new Error("Node had unexpected type: " + object.type);
  }
  var jsx2 = (superClass) => class JSXParserMixin extends superClass {
    jsxReadToken() {
      let out = "";
      let chunkStart = this.state.pos;
      for (; ; ) {
        if (this.state.pos >= this.length) {
          throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
        }
        const ch = this.input.charCodeAt(this.state.pos);
        switch (ch) {
          case 60:
          case 123:
            if (this.state.pos === this.state.start) {
              if (ch === 60 && this.state.canStartJSXElement) {
                ++this.state.pos;
                this.finishToken(142);
              } else {
                super.getTokenFromCode(ch);
              }
              return;
            }
            out += this.input.slice(chunkStart, this.state.pos);
            this.finishToken(141, out);
            return;
          case 38:
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadEntity();
            chunkStart = this.state.pos;
            break;
          case 62:
          case 125:
          default:
            if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadNewLine(true);
              chunkStart = this.state.pos;
            } else {
              ++this.state.pos;
            }
        }
      }
    }
    jsxReadNewLine(normalizeCRLF) {
      const ch = this.input.charCodeAt(this.state.pos);
      let out;
      ++this.state.pos;
      if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
        ++this.state.pos;
        out = normalizeCRLF ? "\n" : "\r\n";
      } else {
        out = String.fromCharCode(ch);
      }
      ++this.state.curLine;
      this.state.lineStart = this.state.pos;
      return out;
    }
    jsxReadString(quote) {
      let out = "";
      let chunkStart = ++this.state.pos;
      for (; ; ) {
        if (this.state.pos >= this.length) {
          throw this.raise(Errors.UnterminatedString, this.state.startLoc);
        }
        const ch = this.input.charCodeAt(this.state.pos);
        if (ch === quote) break;
        if (ch === 38) {
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadEntity();
          chunkStart = this.state.pos;
        } else if (isNewLine(ch)) {
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadNewLine(false);
          chunkStart = this.state.pos;
        } else {
          ++this.state.pos;
        }
      }
      out += this.input.slice(chunkStart, this.state.pos++);
      this.finishToken(133, out);
    }
    jsxReadEntity() {
      const startPos = ++this.state.pos;
      if (this.codePointAtPos(this.state.pos) === 35) {
        ++this.state.pos;
        let radix = 10;
        if (this.codePointAtPos(this.state.pos) === 120) {
          radix = 16;
          ++this.state.pos;
        }
        const codePoint = this.readInt(radix, void 0, false, "bail");
        if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
          ++this.state.pos;
          return String.fromCodePoint(codePoint);
        }
      } else {
        let count = 0;
        let semi = false;
        while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {
          ++this.state.pos;
        }
        if (semi) {
          const desc = this.input.slice(startPos, this.state.pos);
          const entity = entities[desc];
          ++this.state.pos;
          if (entity) {
            return entity;
          }
        }
      }
      this.state.pos = startPos;
      return "&";
    }
    jsxReadWord() {
      let ch;
      const start = this.state.pos;
      do {
        ch = this.input.charCodeAt(++this.state.pos);
      } while (isIdentifierChar2(ch) || ch === 45);
      this.finishToken(140, this.input.slice(start, this.state.pos));
    }
    jsxParseIdentifier() {
      const node2 = this.startNode();
      if (this.match(140)) {
        node2.name = this.state.value;
      } else if (tokenIsKeyword(this.state.type)) {
        node2.name = tokenLabelName(this.state.type);
      } else {
        this.unexpected();
      }
      this.next();
      return this.finishNode(node2, "JSXIdentifier");
    }
    jsxParseNamespacedName() {
      const startLoc = this.state.startLoc;
      const name = this.jsxParseIdentifier();
      if (!this.eat(14)) return name;
      const node2 = this.startNodeAt(startLoc);
      node2.namespace = name;
      node2.name = this.jsxParseIdentifier();
      return this.finishNode(node2, "JSXNamespacedName");
    }
    jsxParseElementName() {
      const startLoc = this.state.startLoc;
      let node2 = this.jsxParseNamespacedName();
      if (node2.type === "JSXNamespacedName") {
        return node2;
      }
      while (this.eat(16)) {
        const newNode = this.startNodeAt(startLoc);
        newNode.object = node2;
        newNode.property = this.jsxParseIdentifier();
        node2 = this.finishNode(newNode, "JSXMemberExpression");
      }
      return node2;
    }
    jsxParseAttributeValue() {
      let node2;
      switch (this.state.type) {
        case 5:
          node2 = this.startNode();
          this.setContext(types2.brace);
          this.next();
          node2 = this.jsxParseExpressionContainer(node2, types2.j_oTag);
          if (node2.expression.type === "JSXEmptyExpression") {
            this.raise(JsxErrors.AttributeIsEmpty, node2);
          }
          return node2;
        case 142:
        case 133:
          return this.parseExprAtom();
        default:
          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
      }
    }
    jsxParseEmptyExpression() {
      const node2 = this.startNodeAt(this.state.lastTokEndLoc);
      return this.finishNodeAt(node2, "JSXEmptyExpression", this.state.startLoc);
    }
    jsxParseSpreadChild(node2) {
      this.next();
      node2.expression = this.parseExpression();
      this.setContext(types2.j_expr);
      this.state.canStartJSXElement = true;
      this.expect(8);
      return this.finishNode(node2, "JSXSpreadChild");
    }
    jsxParseExpressionContainer(node2, previousContext) {
      if (this.match(8)) {
        node2.expression = this.jsxParseEmptyExpression();
      } else {
        const expression = this.parseExpression();
        node2.expression = expression;
      }
      this.setContext(previousContext);
      this.state.canStartJSXElement = true;
      this.expect(8);
      return this.finishNode(node2, "JSXExpressionContainer");
    }
    jsxParseAttribute() {
      const node2 = this.startNode();
      if (this.match(5)) {
        this.setContext(types2.brace);
        this.next();
        this.expect(21);
        node2.argument = this.parseMaybeAssignAllowIn();
        this.setContext(types2.j_oTag);
        this.state.canStartJSXElement = true;
        this.expect(8);
        return this.finishNode(node2, "JSXSpreadAttribute");
      }
      node2.name = this.jsxParseNamespacedName();
      node2.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
      return this.finishNode(node2, "JSXAttribute");
    }
    jsxParseOpeningElementAt(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      if (this.eat(143)) {
        return this.finishNode(node2, "JSXOpeningFragment");
      }
      node2.name = this.jsxParseElementName();
      return this.jsxParseOpeningElementAfterName(node2);
    }
    jsxParseOpeningElementAfterName(node2) {
      const attributes = [];
      while (!this.match(56) && !this.match(143)) {
        attributes.push(this.jsxParseAttribute());
      }
      node2.attributes = attributes;
      node2.selfClosing = this.eat(56);
      this.expect(143);
      return this.finishNode(node2, "JSXOpeningElement");
    }
    jsxParseClosingElementAt(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      if (this.eat(143)) {
        return this.finishNode(node2, "JSXClosingFragment");
      }
      node2.name = this.jsxParseElementName();
      this.expect(143);
      return this.finishNode(node2, "JSXClosingElement");
    }
    jsxParseElementAt(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      const children = [];
      const openingElement = this.jsxParseOpeningElementAt(startLoc);
      let closingElement = null;
      if (!openingElement.selfClosing) {
        contents: for (; ; ) {
          switch (this.state.type) {
            case 142:
              startLoc = this.state.startLoc;
              this.next();
              if (this.eat(56)) {
                closingElement = this.jsxParseClosingElementAt(startLoc);
                break contents;
              }
              children.push(this.jsxParseElementAt(startLoc));
              break;
            case 141:
              children.push(this.parseExprAtom());
              break;
            case 5: {
              const node3 = this.startNode();
              this.setContext(types2.brace);
              this.next();
              if (this.match(21)) {
                children.push(this.jsxParseSpreadChild(node3));
              } else {
                children.push(this.jsxParseExpressionContainer(node3, types2.j_expr));
              }
              break;
            }
            default:
              this.unexpected();
          }
        }
        if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);
        } else if (!isFragment(openingElement) && isFragment(closingElement)) {
          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
            openingTagName: getQualifiedJSXName(openingElement.name)
          });
        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
          if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
              openingTagName: getQualifiedJSXName(openingElement.name)
            });
          }
        }
      }
      if (isFragment(openingElement)) {
        node2.openingFragment = openingElement;
        node2.closingFragment = closingElement;
      } else {
        node2.openingElement = openingElement;
        node2.closingElement = closingElement;
      }
      node2.children = children;
      if (this.match(47)) {
        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
      }
      return isFragment(openingElement) ? this.finishNode(node2, "JSXFragment") : this.finishNode(node2, "JSXElement");
    }
    jsxParseElement() {
      const startLoc = this.state.startLoc;
      this.next();
      return this.jsxParseElementAt(startLoc);
    }
    setContext(newContext) {
      const {
        context: context2
      } = this.state;
      context2[context2.length - 1] = newContext;
    }
    parseExprAtom(refExpressionErrors) {
      if (this.match(141)) {
        return this.parseLiteral(this.state.value, "JSXText");
      } else if (this.match(142)) {
        return this.jsxParseElement();
      } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
        this.replaceToken(142);
        return this.jsxParseElement();
      } else {
        return super.parseExprAtom(refExpressionErrors);
      }
    }
    skipSpace() {
      const curContext = this.curContext();
      if (!curContext.preserveSpace) super.skipSpace();
    }
    getTokenFromCode(code2) {
      const context2 = this.curContext();
      if (context2 === types2.j_expr) {
        this.jsxReadToken();
        return;
      }
      if (context2 === types2.j_oTag || context2 === types2.j_cTag) {
        if (isIdentifierStart2(code2)) {
          this.jsxReadWord();
          return;
        }
        if (code2 === 62) {
          ++this.state.pos;
          this.finishToken(143);
          return;
        }
        if ((code2 === 34 || code2 === 39) && context2 === types2.j_oTag) {
          this.jsxReadString(code2);
          return;
        }
      }
      if (code2 === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
        ++this.state.pos;
        this.finishToken(142);
        return;
      }
      super.getTokenFromCode(code2);
    }
    updateContext(prevType) {
      const {
        context: context2,
        type
      } = this.state;
      if (type === 56 && prevType === 142) {
        context2.splice(-2, 2, types2.j_cTag);
        this.state.canStartJSXElement = false;
      } else if (type === 142) {
        context2.push(types2.j_oTag);
      } else if (type === 143) {
        const out = context2[context2.length - 1];
        if (out === types2.j_oTag && prevType === 56 || out === types2.j_cTag) {
          context2.pop();
          this.state.canStartJSXElement = context2[context2.length - 1] === types2.j_expr;
        } else {
          this.setContext(types2.j_expr);
          this.state.canStartJSXElement = true;
        }
      } else {
        this.state.canStartJSXElement = tokenComesBeforeExpression(type);
      }
    }
  };
  class TypeScriptScope extends Scope {
    constructor(...args) {
      super(...args);
      this.tsNames = /* @__PURE__ */ new Map();
    }
  }
  class TypeScriptScopeHandler extends ScopeHandler {
    constructor(...args) {
      super(...args);
      this.importsStack = [];
    }
    createScope(flags) {
      this.importsStack.push(/* @__PURE__ */ new Set());
      return new TypeScriptScope(flags);
    }
    enter(flags) {
      if (flags == 256) {
        this.importsStack.push(/* @__PURE__ */ new Set());
      }
      super.enter(flags);
    }
    exit() {
      const flags = super.exit();
      if (flags == 256) {
        this.importsStack.pop();
      }
      return flags;
    }
    hasImport(name, allowShadow) {
      const len = this.importsStack.length;
      if (this.importsStack[len - 1].has(name)) {
        return true;
      }
      if (!allowShadow && len > 1) {
        for (let i = 0; i < len - 1; i++) {
          if (this.importsStack[i].has(name)) return true;
        }
      }
      return false;
    }
    declareName(name, bindingType, loc) {
      if (bindingType & 4096) {
        if (this.hasImport(name, true)) {
          this.parser.raise(Errors.VarRedeclaration, loc, {
            identifierName: name
          });
        }
        this.importsStack[this.importsStack.length - 1].add(name);
        return;
      }
      const scope2 = this.currentScope();
      let type = scope2.tsNames.get(name) || 0;
      if (bindingType & 1024) {
        this.maybeExportDefined(scope2, name);
        scope2.tsNames.set(name, type | 16);
        return;
      }
      super.declareName(name, bindingType, loc);
      if (bindingType & 2) {
        if (!(bindingType & 1)) {
          this.checkRedeclarationInScope(scope2, name, bindingType, loc);
          this.maybeExportDefined(scope2, name);
        }
        type = type | 1;
      }
      if (bindingType & 256) {
        type = type | 2;
      }
      if (bindingType & 512) {
        type = type | 4;
      }
      if (bindingType & 128) {
        type = type | 8;
      }
      if (type) scope2.tsNames.set(name, type);
    }
    isRedeclaredInScope(scope2, name, bindingType) {
      const type = scope2.tsNames.get(name);
      if ((type & 2) > 0) {
        if (bindingType & 256) {
          const isConst = !!(bindingType & 512);
          const wasConst = (type & 4) > 0;
          return isConst !== wasConst;
        }
        return true;
      }
      if (bindingType & 128 && (type & 8) > 0) {
        if (scope2.names.get(name) & 2) {
          return !!(bindingType & 1);
        } else {
          return false;
        }
      }
      if (bindingType & 2 && (type & 1) > 0) {
        return true;
      }
      return super.isRedeclaredInScope(scope2, name, bindingType);
    }
    checkLocalExport(id) {
      const {
        name
      } = id;
      if (this.hasImport(name)) return;
      const len = this.scopeStack.length;
      for (let i = len - 1; i >= 0; i--) {
        const scope2 = this.scopeStack[i];
        const type = scope2.tsNames.get(name);
        if ((type & 1) > 0 || (type & 16) > 0) {
          return;
        }
      }
      super.checkLocalExport(id);
    }
  }
  const getOwn$1 = (object, key2) => hasOwnProperty.call(object, key2) && object[key2];
  const unwrapParenthesizedExpression = (node2) => {
    return node2.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node2.expression) : node2;
  };
  class LValParser extends NodeUtils {
    toAssignable(node2, isLHS = false) {
      var _node$extra, _node$extra3;
      let parenthesized = void 0;
      if (node2.type === "ParenthesizedExpression" || (_node$extra = node2.extra) != null && _node$extra.parenthesized) {
        parenthesized = unwrapParenthesizedExpression(node2);
        if (isLHS) {
          if (parenthesized.type === "Identifier") {
            this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node2);
          } else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) {
            this.raise(Errors.InvalidParenthesizedAssignment, node2);
          }
        } else {
          this.raise(Errors.InvalidParenthesizedAssignment, node2);
        }
      }
      switch (node2.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          break;
        case "ObjectExpression":
          node2.type = "ObjectPattern";
          for (let i = 0, length = node2.properties.length, last = length - 1; i < length; i++) {
            var _node$extra2;
            const prop = node2.properties[i];
            const isLast = i === last;
            this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
            if (isLast && prop.type === "RestElement" && (_node$extra2 = node2.extra) != null && _node$extra2.trailingCommaLoc) {
              this.raise(Errors.RestTrailingComma, node2.extra.trailingCommaLoc);
            }
          }
          break;
        case "ObjectProperty": {
          const {
            key: key2,
            value: value2
          } = node2;
          if (this.isPrivateName(key2)) {
            this.classScope.usePrivateName(this.getPrivateNameSV(key2), key2.loc.start);
          }
          this.toAssignable(value2, isLHS);
          break;
        }
        case "SpreadElement": {
          throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
        }
        case "ArrayExpression":
          node2.type = "ArrayPattern";
          this.toAssignableList(node2.elements, (_node$extra3 = node2.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
          break;
        case "AssignmentExpression":
          if (node2.operator !== "=") {
            this.raise(Errors.MissingEqInAssignment, node2.left.loc.end);
          }
          node2.type = "AssignmentPattern";
          delete node2.operator;
          this.toAssignable(node2.left, isLHS);
          break;
        case "ParenthesizedExpression":
          this.toAssignable(parenthesized, isLHS);
          break;
      }
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
      if (prop.type === "ObjectMethod") {
        this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
      } else if (prop.type === "SpreadElement") {
        prop.type = "RestElement";
        const arg = prop.argument;
        this.checkToRestConversion(arg, false);
        this.toAssignable(arg, isLHS);
        if (!isLast) {
          this.raise(Errors.RestTrailingComma, prop);
        }
      } else {
        this.toAssignable(prop, isLHS);
      }
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
      const end = exprList.length - 1;
      for (let i = 0; i <= end; i++) {
        const elt = exprList[i];
        if (!elt) continue;
        if (elt.type === "SpreadElement") {
          elt.type = "RestElement";
          const arg = elt.argument;
          this.checkToRestConversion(arg, true);
          this.toAssignable(arg, isLHS);
        } else {
          this.toAssignable(elt, isLHS);
        }
        if (elt.type === "RestElement") {
          if (i < end) {
            this.raise(Errors.RestTrailingComma, elt);
          } else if (trailingCommaLoc) {
            this.raise(Errors.RestTrailingComma, trailingCommaLoc);
          }
        }
      }
    }
    isAssignable(node2, isBinding2) {
      switch (node2.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          return true;
        case "ObjectExpression": {
          const last = node2.properties.length - 1;
          return node2.properties.every((prop, i) => {
            return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
          });
        }
        case "ObjectProperty":
          return this.isAssignable(node2.value);
        case "SpreadElement":
          return this.isAssignable(node2.argument);
        case "ArrayExpression":
          return node2.elements.every((element) => element === null || this.isAssignable(element));
        case "AssignmentExpression":
          return node2.operator === "=";
        case "ParenthesizedExpression":
          return this.isAssignable(node2.expression);
        case "MemberExpression":
        case "OptionalMemberExpression":
          return !isBinding2;
        default:
          return false;
      }
    }
    toReferencedList(exprList, isParenthesizedExpr) {
      return exprList;
    }
    toReferencedListDeep(exprList, isParenthesizedExpr) {
      this.toReferencedList(exprList, isParenthesizedExpr);
      for (const expr of exprList) {
        if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
          this.toReferencedListDeep(expr.elements);
        }
      }
    }
    parseSpread(refExpressionErrors) {
      const node2 = this.startNode();
      this.next();
      node2.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0);
      return this.finishNode(node2, "SpreadElement");
    }
    parseRestBinding() {
      const node2 = this.startNode();
      this.next();
      node2.argument = this.parseBindingAtom();
      return this.finishNode(node2, "RestElement");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 0: {
          const node2 = this.startNode();
          this.next();
          node2.elements = this.parseBindingList(3, 93, 1);
          return this.finishNode(node2, "ArrayPattern");
        }
        case 5:
          return this.parseObjectLike(8, true);
      }
      return this.parseIdentifier();
    }
    parseBindingList(close, closeCharCode, flags) {
      const allowEmpty = flags & 1;
      const elts = [];
      let first = true;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
        }
        if (allowEmpty && this.match(12)) {
          elts.push(null);
        } else if (this.eat(close)) {
          break;
        } else if (this.match(21)) {
          elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));
          if (!this.checkCommaAfterRest(closeCharCode)) {
            this.expect(close);
            break;
          }
        } else {
          const decorators2 = [];
          if (this.match(26) && this.hasPlugin("decorators")) {
            this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);
          }
          while (this.match(26)) {
            decorators2.push(this.parseDecorator());
          }
          elts.push(this.parseAssignableListItem(flags, decorators2));
        }
      }
      return elts;
    }
    parseBindingRestProperty(prop) {
      this.next();
      prop.argument = this.parseIdentifier();
      this.checkCommaAfterRest(125);
      return this.finishNode(prop, "RestElement");
    }
    parseBindingProperty() {
      const prop = this.startNode();
      const {
        type,
        startLoc
      } = this.state;
      if (type === 21) {
        return this.parseBindingRestProperty(prop);
      } else if (type === 138) {
        this.expectPlugin("destructuringPrivate", startLoc);
        this.classScope.usePrivateName(this.state.value, startLoc);
        prop.key = this.parsePrivateName();
      } else {
        this.parsePropertyName(prop);
      }
      prop.method = false;
      return this.parseObjPropValue(prop, startLoc, false, false, true, false);
    }
    parseAssignableListItem(flags, decorators2) {
      const left = this.parseMaybeDefault();
      this.parseAssignableListItemTypes(left, flags);
      const elt = this.parseMaybeDefault(left.loc.start, left);
      if (decorators2.length) {
        left.decorators = decorators2;
      }
      return elt;
    }
    parseAssignableListItemTypes(param, flags) {
      return param;
    }
    parseMaybeDefault(startLoc, left) {
      var _startLoc, _left;
      (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
      left = (_left = left) != null ? _left : this.parseBindingAtom();
      if (!this.eat(29)) return left;
      const node2 = this.startNodeAt(startLoc);
      node2.left = left;
      node2.right = this.parseMaybeAssignAllowIn();
      return this.finishNode(node2, "AssignmentPattern");
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding2) {
      return getOwn$1({
        AssignmentPattern: "left",
        RestElement: "argument",
        ObjectProperty: "value",
        ParenthesizedExpression: "expression",
        ArrayPattern: "elements",
        ObjectPattern: "properties"
      }, type);
    }
    isOptionalMemberExpression(expression) {
      return expression.type === "OptionalMemberExpression";
    }
    checkLVal(expression, {
      in: ancestor,
      binding: binding2 = 64,
      checkClashes = false,
      strictModeChanged = false,
      hasParenthesizedAncestor = false
    }) {
      var _expression$extra;
      const type = expression.type;
      if (this.isObjectMethod(expression)) return;
      const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
      if (isOptionalMemberExpression || type === "MemberExpression") {
        if (isOptionalMemberExpression) {
          this.expectPlugin("optionalChainingAssign", expression.loc.start);
          if (ancestor.type !== "AssignmentExpression") {
            this.raise(Errors.InvalidLhsOptionalChaining, expression, {
              ancestor
            });
          }
        }
        if (binding2 !== 64) {
          this.raise(Errors.InvalidPropertyBindingPattern, expression);
        }
        return;
      }
      if (type === "Identifier") {
        this.checkIdentifier(expression, binding2, strictModeChanged);
        const {
          name
        } = expression;
        if (checkClashes) {
          if (checkClashes.has(name)) {
            this.raise(Errors.ParamDupe, expression);
          } else {
            checkClashes.add(name);
          }
        }
        return;
      }
      const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding2);
      if (validity === true) return;
      if (validity === false) {
        const ParseErrorClass = binding2 === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
        this.raise(ParseErrorClass, expression, {
          ancestor
        });
        return;
      }
      const [key2, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === "ParenthesizedExpression"];
      const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? {
        type
      } : ancestor;
      for (const child of [].concat(expression[key2])) {
        if (child) {
          this.checkLVal(child, {
            in: nextAncestor,
            binding: binding2,
            checkClashes,
            strictModeChanged,
            hasParenthesizedAncestor: isParenthesizedExpression
          });
        }
      }
    }
    checkIdentifier(at, bindingType, strictModeChanged = false) {
      if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord2(at.name, this.inModule) : isStrictBindOnlyReservedWord2(at.name))) {
        if (bindingType === 64) {
          this.raise(Errors.StrictEvalArguments, at, {
            referenceName: at.name
          });
        } else {
          this.raise(Errors.StrictEvalArgumentsBinding, at, {
            bindingName: at.name
          });
        }
      }
      if (bindingType & 8192 && at.name === "let") {
        this.raise(Errors.LetInLexicalBinding, at);
      }
      if (!(bindingType & 64)) {
        this.declareNameFromIdentifier(at, bindingType);
      }
    }
    declareNameFromIdentifier(identifier2, binding2) {
      this.scope.declareName(identifier2.name, binding2, identifier2.loc.start);
    }
    checkToRestConversion(node2, allowPattern) {
      switch (node2.type) {
        case "ParenthesizedExpression":
          this.checkToRestConversion(node2.expression, allowPattern);
          break;
        case "Identifier":
        case "MemberExpression":
          break;
        case "ArrayExpression":
        case "ObjectExpression":
          if (allowPattern) break;
        default:
          this.raise(Errors.InvalidRestAssignmentPattern, node2);
      }
    }
    checkCommaAfterRest(close) {
      if (!this.match(12)) {
        return false;
      }
      this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);
      return true;
    }
  }
  const getOwn = (object, key2) => hasOwnProperty.call(object, key2) && object[key2];
  function nonNull(x2) {
    if (x2 == null) {
      throw new Error(`Unexpected ${x2} value.`);
    }
    return x2;
  }
  function assert2(x2) {
    if (!x2) {
      throw new Error("Assert fail");
    }
  }
  const TSErrors = ParseErrorEnum`typescript`({
    AbstractMethodHasImplementation: ({
      methodName
    }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
    AbstractPropertyHasInitializer: ({
      propertyName
    }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
    AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
    AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
    AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
    ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
    ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
    ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
    ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
    DeclareAccessor: ({
      kind
    }) => `'declare' is not allowed in ${kind}ters.`,
    DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
    DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
    DuplicateAccessibilityModifier: ({
      modifier
    }) => `Accessibility modifier already seen.`,
    DuplicateModifier: ({
      modifier
    }) => `Duplicate modifier: '${modifier}'.`,
    EmptyHeritageClauseType: ({
      token: token2
    }) => `'${token2}' list cannot be empty.`,
    EmptyTypeArguments: "Type argument list cannot be empty.",
    EmptyTypeParameters: "Type parameter list cannot be empty.",
    ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
    ImportAliasHasImportType: "An import alias can not use 'import type'.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
    IncompatibleModifiers: ({
      modifiers
    }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
    IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
    IndexSignatureHasAccessibility: ({
      modifier
    }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
    IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
    IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
    IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
    InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
    InvalidModifierOnTypeMember: ({
      modifier
    }) => `'${modifier}' modifier cannot appear on a type member.`,
    InvalidModifierOnTypeParameter: ({
      modifier
    }) => `'${modifier}' modifier cannot appear on a type parameter.`,
    InvalidModifierOnTypeParameterPositions: ({
      modifier
    }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
    InvalidModifiersOrder: ({
      orderedModifiers
    }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
    InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
    InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
    MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
    NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
    NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
    OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
    OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
    PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
    PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
    PrivateElementHasAccessibility: ({
      modifier
    }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
    ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
    ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
    ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
    SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
    SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
    SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
    SingleTypeParameterWithoutTrailingComma: ({
      typeParameterName
    }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
    StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
    TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
    TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
    TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
    TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
    UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
    UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
    UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
    UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
    UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
    UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
    UnsupportedSignatureParameterKind: ({
      type
    }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
  });
  function keywordTypeFromName(value2) {
    switch (value2) {
      case "any":
        return "TSAnyKeyword";
      case "boolean":
        return "TSBooleanKeyword";
      case "bigint":
        return "TSBigIntKeyword";
      case "never":
        return "TSNeverKeyword";
      case "number":
        return "TSNumberKeyword";
      case "object":
        return "TSObjectKeyword";
      case "string":
        return "TSStringKeyword";
      case "symbol":
        return "TSSymbolKeyword";
      case "undefined":
        return "TSUndefinedKeyword";
      case "unknown":
        return "TSUnknownKeyword";
      default:
        return void 0;
    }
  }
  function tsIsAccessModifier(modifier) {
    return modifier === "private" || modifier === "public" || modifier === "protected";
  }
  function tsIsVarianceAnnotations(modifier) {
    return modifier === "in" || modifier === "out";
  }
  var typescript2 = (superClass) => class TypeScriptParserMixin extends superClass {
    constructor(...args) {
      super(...args);
      this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out"],
        disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameter
      });
      this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["const"],
        disallowedModifiers: ["in", "out"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
      });
      this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out", "const"],
        disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameter
      });
    }
    getScopeHandler() {
      return TypeScriptScopeHandler;
    }
    tsIsIdentifier() {
      return tokenIsIdentifier(this.state.type);
    }
    tsTokenCanFollowModifier() {
      return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
    }
    tsNextTokenCanFollowModifier() {
      this.next();
      return this.tsTokenCanFollowModifier();
    }
    tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
      if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {
        return void 0;
      }
      const modifier = this.state.value;
      if (allowedModifiers.indexOf(modifier) !== -1) {
        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
          return void 0;
        }
        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
          return modifier;
        }
      }
      return void 0;
    }
    tsParseModifiers({
      allowedModifiers,
      disallowedModifiers,
      stopOnStartOfClassStaticBlock,
      errorTemplate = TSErrors.InvalidModifierOnTypeMember
    }, modified) {
      const enforceOrder = (loc, modifier, before, after) => {
        if (modifier === before && modified[after]) {
          this.raise(TSErrors.InvalidModifiersOrder, loc, {
            orderedModifiers: [before, after]
          });
        }
      };
      const incompatible = (loc, modifier, mod1, mod2) => {
        if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
          this.raise(TSErrors.IncompatibleModifiers, loc, {
            modifiers: [mod1, mod2]
          });
        }
      };
      for (; ; ) {
        const {
          startLoc
        } = this.state;
        const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
        if (!modifier) break;
        if (tsIsAccessModifier(modifier)) {
          if (modified.accessibility) {
            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {
              modifier
            });
          } else {
            enforceOrder(startLoc, modifier, modifier, "override");
            enforceOrder(startLoc, modifier, modifier, "static");
            enforceOrder(startLoc, modifier, modifier, "readonly");
            modified.accessibility = modifier;
          }
        } else if (tsIsVarianceAnnotations(modifier)) {
          if (modified[modifier]) {
            this.raise(TSErrors.DuplicateModifier, startLoc, {
              modifier
            });
          }
          modified[modifier] = true;
          enforceOrder(startLoc, modifier, "in", "out");
        } else {
          if (hasOwnProperty.call(modified, modifier)) {
            this.raise(TSErrors.DuplicateModifier, startLoc, {
              modifier
            });
          } else {
            enforceOrder(startLoc, modifier, "static", "readonly");
            enforceOrder(startLoc, modifier, "static", "override");
            enforceOrder(startLoc, modifier, "override", "readonly");
            enforceOrder(startLoc, modifier, "abstract", "override");
            incompatible(startLoc, modifier, "declare", "override");
            incompatible(startLoc, modifier, "static", "abstract");
          }
          modified[modifier] = true;
        }
        if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
          this.raise(errorTemplate, startLoc, {
            modifier
          });
        }
      }
    }
    tsIsListTerminator(kind) {
      switch (kind) {
        case "EnumMembers":
        case "TypeMembers":
          return this.match(8);
        case "HeritageClauseElement":
          return this.match(5);
        case "TupleElementTypes":
          return this.match(3);
        case "TypeParametersOrArguments":
          return this.match(48);
      }
    }
    tsParseList(kind, parseElement) {
      const result = [];
      while (!this.tsIsListTerminator(kind)) {
        result.push(parseElement());
      }
      return result;
    }
    tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
      return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
    }
    tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
      const result = [];
      let trailingCommaPos = -1;
      for (; ; ) {
        if (this.tsIsListTerminator(kind)) {
          break;
        }
        trailingCommaPos = -1;
        const element = parseElement();
        if (element == null) {
          return void 0;
        }
        result.push(element);
        if (this.eat(12)) {
          trailingCommaPos = this.state.lastTokStartLoc.index;
          continue;
        }
        if (this.tsIsListTerminator(kind)) {
          break;
        }
        if (expectSuccess) {
          this.expect(12);
        }
        return void 0;
      }
      if (refTrailingCommaPos) {
        refTrailingCommaPos.value = trailingCommaPos;
      }
      return result;
    }
    tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
      if (!skipFirstToken) {
        if (bracket) {
          this.expect(0);
        } else {
          this.expect(47);
        }
      }
      const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
      if (bracket) {
        this.expect(3);
      } else {
        this.expect(48);
      }
      return result;
    }
    tsParseImportType() {
      const node2 = this.startNode();
      this.expect(83);
      this.expect(10);
      if (!this.match(133)) {
        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);
      }
      node2.argument = super.parseExprAtom();
      if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
        node2.options = null;
      }
      if (this.eat(12)) {
        this.expectImportAttributesPlugin();
        if (!this.match(11)) {
          node2.options = super.parseMaybeAssignAllowIn();
          this.eat(12);
        }
      }
      this.expect(11);
      if (this.eat(16)) {
        node2.qualifier = this.tsParseEntityName();
      }
      if (this.match(47)) {
        node2.typeParameters = this.tsParseTypeArguments();
      }
      return this.finishNode(node2, "TSImportType");
    }
    tsParseEntityName(allowReservedWords = true) {
      let entity = this.parseIdentifier(allowReservedWords);
      while (this.eat(16)) {
        const node2 = this.startNodeAtNode(entity);
        node2.left = entity;
        node2.right = this.parseIdentifier(allowReservedWords);
        entity = this.finishNode(node2, "TSQualifiedName");
      }
      return entity;
    }
    tsParseTypeReference() {
      const node2 = this.startNode();
      node2.typeName = this.tsParseEntityName();
      if (!this.hasPrecedingLineBreak() && this.match(47)) {
        node2.typeParameters = this.tsParseTypeArguments();
      }
      return this.finishNode(node2, "TSTypeReference");
    }
    tsParseThisTypePredicate(lhs) {
      this.next();
      const node2 = this.startNodeAtNode(lhs);
      node2.parameterName = lhs;
      node2.typeAnnotation = this.tsParseTypeAnnotation(false);
      node2.asserts = false;
      return this.finishNode(node2, "TSTypePredicate");
    }
    tsParseThisTypeNode() {
      const node2 = this.startNode();
      this.next();
      return this.finishNode(node2, "TSThisType");
    }
    tsParseTypeQuery() {
      const node2 = this.startNode();
      this.expect(87);
      if (this.match(83)) {
        node2.exprName = this.tsParseImportType();
      } else {
        node2.exprName = this.tsParseEntityName();
      }
      if (!this.hasPrecedingLineBreak() && this.match(47)) {
        node2.typeParameters = this.tsParseTypeArguments();
      }
      return this.finishNode(node2, "TSTypeQuery");
    }
    tsParseTypeParameter(parseModifiers) {
      const node2 = this.startNode();
      parseModifiers(node2);
      node2.name = this.tsParseTypeParameterName();
      node2.constraint = this.tsEatThenParseType(81);
      node2.default = this.tsEatThenParseType(29);
      return this.finishNode(node2, "TSTypeParameter");
    }
    tsTryParseTypeParameters(parseModifiers) {
      if (this.match(47)) {
        return this.tsParseTypeParameters(parseModifiers);
      }
    }
    tsParseTypeParameters(parseModifiers) {
      const node2 = this.startNode();
      if (this.match(47) || this.match(142)) {
        this.next();
      } else {
        this.unexpected();
      }
      const refTrailingCommaPos = {
        value: -1
      };
      node2.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
      if (node2.params.length === 0) {
        this.raise(TSErrors.EmptyTypeParameters, node2);
      }
      if (refTrailingCommaPos.value !== -1) {
        this.addExtra(node2, "trailingComma", refTrailingCommaPos.value);
      }
      return this.finishNode(node2, "TSTypeParameterDeclaration");
    }
    tsFillSignature(returnToken, signature) {
      const returnTokenRequired = returnToken === 19;
      const paramsKey = "parameters";
      const returnTypeKey = "typeAnnotation";
      signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      this.expect(10);
      signature[paramsKey] = this.tsParseBindingListForSignature();
      if (returnTokenRequired) {
        signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
      } else if (this.match(returnToken)) {
        signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
      }
    }
    tsParseBindingListForSignature() {
      const list2 = super.parseBindingList(11, 41, 2);
      for (const pattern of list2) {
        const {
          type
        } = pattern;
        if (type === "AssignmentPattern" || type === "TSParameterProperty") {
          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {
            type
          });
        }
      }
      return list2;
    }
    tsParseTypeMemberSemicolon() {
      if (!this.eat(12) && !this.isLineTerminator()) {
        this.expect(13);
      }
    }
    tsParseSignatureMember(kind, node2) {
      this.tsFillSignature(14, node2);
      this.tsParseTypeMemberSemicolon();
      return this.finishNode(node2, kind);
    }
    tsIsUnambiguouslyIndexSignature() {
      this.next();
      if (tokenIsIdentifier(this.state.type)) {
        this.next();
        return this.match(14);
      }
      return false;
    }
    tsTryParseIndexSignature(node2) {
      if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
        return;
      }
      this.expect(0);
      const id = this.parseIdentifier();
      id.typeAnnotation = this.tsParseTypeAnnotation();
      this.resetEndLocation(id);
      this.expect(3);
      node2.parameters = [id];
      const type = this.tsTryParseTypeAnnotation();
      if (type) node2.typeAnnotation = type;
      this.tsParseTypeMemberSemicolon();
      return this.finishNode(node2, "TSIndexSignature");
    }
    tsParsePropertyOrMethodSignature(node2, readonly) {
      if (this.eat(17)) node2.optional = true;
      const nodeAny = node2;
      if (this.match(10) || this.match(47)) {
        if (readonly) {
          this.raise(TSErrors.ReadonlyForMethodSignature, node2);
        }
        const method = nodeAny;
        if (method.kind && this.match(47)) {
          this.raise(TSErrors.AccesorCannotHaveTypeParameters, this.state.curPosition());
        }
        this.tsFillSignature(14, method);
        this.tsParseTypeMemberSemicolon();
        const paramsKey = "parameters";
        const returnTypeKey = "typeAnnotation";
        if (method.kind === "get") {
          if (method[paramsKey].length > 0) {
            this.raise(Errors.BadGetterArity, this.state.curPosition());
            if (this.isThisParam(method[paramsKey][0])) {
              this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());
            }
          }
        } else if (method.kind === "set") {
          if (method[paramsKey].length !== 1) {
            this.raise(Errors.BadSetterArity, this.state.curPosition());
          } else {
            const firstParameter = method[paramsKey][0];
            if (this.isThisParam(firstParameter)) {
              this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());
            }
            if (firstParameter.type === "Identifier" && firstParameter.optional) {
              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, this.state.curPosition());
            }
            if (firstParameter.type === "RestElement") {
              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, this.state.curPosition());
            }
          }
          if (method[returnTypeKey]) {
            this.raise(TSErrors.SetAccesorCannotHaveReturnType, method[returnTypeKey]);
          }
        } else {
          method.kind = "method";
        }
        return this.finishNode(method, "TSMethodSignature");
      } else {
        const property = nodeAny;
        if (readonly) property.readonly = true;
        const type = this.tsTryParseTypeAnnotation();
        if (type) property.typeAnnotation = type;
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(property, "TSPropertySignature");
      }
    }
    tsParseTypeMember() {
      const node2 = this.startNode();
      if (this.match(10) || this.match(47)) {
        return this.tsParseSignatureMember("TSCallSignatureDeclaration", node2);
      }
      if (this.match(77)) {
        const id = this.startNode();
        this.next();
        if (this.match(10) || this.match(47)) {
          return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node2);
        } else {
          node2.key = this.createIdentifier(id, "new");
          return this.tsParsePropertyOrMethodSignature(node2, false);
        }
      }
      this.tsParseModifiers({
        allowedModifiers: ["readonly"],
        disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
      }, node2);
      const idx = this.tsTryParseIndexSignature(node2);
      if (idx) {
        return idx;
      }
      super.parsePropertyName(node2);
      if (!node2.computed && node2.key.type === "Identifier" && (node2.key.name === "get" || node2.key.name === "set") && this.tsTokenCanFollowModifier()) {
        node2.kind = node2.key.name;
        super.parsePropertyName(node2);
      }
      return this.tsParsePropertyOrMethodSignature(node2, !!node2.readonly);
    }
    tsParseTypeLiteral() {
      const node2 = this.startNode();
      node2.members = this.tsParseObjectTypeMembers();
      return this.finishNode(node2, "TSTypeLiteral");
    }
    tsParseObjectTypeMembers() {
      this.expect(5);
      const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
      this.expect(8);
      return members;
    }
    tsIsStartOfMappedType() {
      this.next();
      if (this.eat(53)) {
        return this.isContextual(122);
      }
      if (this.isContextual(122)) {
        this.next();
      }
      if (!this.match(0)) {
        return false;
      }
      this.next();
      if (!this.tsIsIdentifier()) {
        return false;
      }
      this.next();
      return this.match(58);
    }
    tsParseMappedTypeParameter() {
      const node2 = this.startNode();
      node2.name = this.tsParseTypeParameterName();
      node2.constraint = this.tsExpectThenParseType(58);
      return this.finishNode(node2, "TSTypeParameter");
    }
    tsParseMappedType() {
      const node2 = this.startNode();
      this.expect(5);
      if (this.match(53)) {
        node2.readonly = this.state.value;
        this.next();
        this.expectContextual(122);
      } else if (this.eatContextual(122)) {
        node2.readonly = true;
      }
      this.expect(0);
      node2.typeParameter = this.tsParseMappedTypeParameter();
      node2.nameType = this.eatContextual(93) ? this.tsParseType() : null;
      this.expect(3);
      if (this.match(53)) {
        node2.optional = this.state.value;
        this.next();
        this.expect(17);
      } else if (this.eat(17)) {
        node2.optional = true;
      }
      node2.typeAnnotation = this.tsTryParseType();
      this.semicolon();
      this.expect(8);
      return this.finishNode(node2, "TSMappedType");
    }
    tsParseTupleType() {
      const node2 = this.startNode();
      node2.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
      let seenOptionalElement = false;
      node2.elementTypes.forEach((elementNode) => {
        const {
          type
        } = elementNode;
        if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);
        }
        seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
      });
      return this.finishNode(node2, "TSTupleType");
    }
    tsParseTupleElementType() {
      const {
        startLoc
      } = this.state;
      const rest = this.eat(21);
      let labeled;
      let label;
      let optional;
      let type;
      const isWord = tokenIsKeywordOrIdentifier(this.state.type);
      const chAfterWord = isWord ? this.lookaheadCharCode() : null;
      if (chAfterWord === 58) {
        labeled = true;
        optional = false;
        label = this.parseIdentifier(true);
        this.expect(14);
        type = this.tsParseType();
      } else if (chAfterWord === 63) {
        optional = true;
        const startLoc2 = this.state.startLoc;
        const wordName = this.state.value;
        const typeOrLabel = this.tsParseNonArrayType();
        if (this.lookaheadCharCode() === 58) {
          labeled = true;
          label = this.createIdentifier(this.startNodeAt(startLoc2), wordName);
          this.expect(17);
          this.expect(14);
          type = this.tsParseType();
        } else {
          labeled = false;
          type = typeOrLabel;
          this.expect(17);
        }
      } else {
        type = this.tsParseType();
        optional = this.eat(17);
        labeled = this.eat(14);
      }
      if (labeled) {
        let labeledNode;
        if (label) {
          labeledNode = this.startNodeAtNode(label);
          labeledNode.optional = optional;
          labeledNode.label = label;
          labeledNode.elementType = type;
          if (this.eat(17)) {
            labeledNode.optional = true;
            this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);
          }
        } else {
          labeledNode = this.startNodeAtNode(type);
          labeledNode.optional = optional;
          this.raise(TSErrors.InvalidTupleMemberLabel, type);
          labeledNode.label = type;
          labeledNode.elementType = this.tsParseType();
        }
        type = this.finishNode(labeledNode, "TSNamedTupleMember");
      } else if (optional) {
        const optionalTypeNode = this.startNodeAtNode(type);
        optionalTypeNode.typeAnnotation = type;
        type = this.finishNode(optionalTypeNode, "TSOptionalType");
      }
      if (rest) {
        const restNode = this.startNodeAt(startLoc);
        restNode.typeAnnotation = type;
        type = this.finishNode(restNode, "TSRestType");
      }
      return type;
    }
    tsParseParenthesizedType() {
      const node2 = this.startNode();
      this.expect(10);
      node2.typeAnnotation = this.tsParseType();
      this.expect(11);
      return this.finishNode(node2, "TSParenthesizedType");
    }
    tsParseFunctionOrConstructorType(type, abstract) {
      const node2 = this.startNode();
      if (type === "TSConstructorType") {
        node2.abstract = !!abstract;
        if (abstract) this.next();
        this.next();
      }
      this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node2));
      return this.finishNode(node2, type);
    }
    tsParseLiteralTypeNode() {
      const node2 = this.startNode();
      switch (this.state.type) {
        case 134:
        case 135:
        case 133:
        case 85:
        case 86:
          node2.literal = super.parseExprAtom();
          break;
        default:
          this.unexpected();
      }
      return this.finishNode(node2, "TSLiteralType");
    }
    tsParseTemplateLiteralType() {
      const node2 = this.startNode();
      node2.literal = super.parseTemplate(false);
      return this.finishNode(node2, "TSLiteralType");
    }
    parseTemplateSubstitution() {
      if (this.state.inType) return this.tsParseType();
      return super.parseTemplateSubstitution();
    }
    tsParseThisTypeOrThisTypePredicate() {
      const thisKeyword = this.tsParseThisTypeNode();
      if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
        return this.tsParseThisTypePredicate(thisKeyword);
      } else {
        return thisKeyword;
      }
    }
    tsParseNonArrayType() {
      switch (this.state.type) {
        case 133:
        case 134:
        case 135:
        case 85:
        case 86:
          return this.tsParseLiteralTypeNode();
        case 53:
          if (this.state.value === "-") {
            const node2 = this.startNode();
            const nextToken = this.lookahead();
            if (nextToken.type !== 134 && nextToken.type !== 135) {
              this.unexpected();
            }
            node2.literal = this.parseMaybeUnary();
            return this.finishNode(node2, "TSLiteralType");
          }
          break;
        case 78:
          return this.tsParseThisTypeOrThisTypePredicate();
        case 87:
          return this.tsParseTypeQuery();
        case 83:
          return this.tsParseImportType();
        case 5:
          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
        case 0:
          return this.tsParseTupleType();
        case 10:
          return this.tsParseParenthesizedType();
        case 25:
        case 24:
          return this.tsParseTemplateLiteralType();
        default: {
          const {
            type
          } = this.state;
          if (tokenIsIdentifier(type) || type === 88 || type === 84) {
            const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
            if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
              const node2 = this.startNode();
              this.next();
              return this.finishNode(node2, nodeType);
            }
            return this.tsParseTypeReference();
          }
        }
      }
      this.unexpected();
    }
    tsParseArrayTypeOrHigher() {
      let type = this.tsParseNonArrayType();
      while (!this.hasPrecedingLineBreak() && this.eat(0)) {
        if (this.match(3)) {
          const node2 = this.startNodeAtNode(type);
          node2.elementType = type;
          this.expect(3);
          type = this.finishNode(node2, "TSArrayType");
        } else {
          const node2 = this.startNodeAtNode(type);
          node2.objectType = type;
          node2.indexType = this.tsParseType();
          this.expect(3);
          type = this.finishNode(node2, "TSIndexedAccessType");
        }
      }
      return type;
    }
    tsParseTypeOperator() {
      const node2 = this.startNode();
      const operator = this.state.value;
      this.next();
      node2.operator = operator;
      node2.typeAnnotation = this.tsParseTypeOperatorOrHigher();
      if (operator === "readonly") {
        this.tsCheckTypeAnnotationForReadOnly(node2);
      }
      return this.finishNode(node2, "TSTypeOperator");
    }
    tsCheckTypeAnnotationForReadOnly(node2) {
      switch (node2.typeAnnotation.type) {
        case "TSTupleType":
        case "TSArrayType":
          return;
        default:
          this.raise(TSErrors.UnexpectedReadonly, node2);
      }
    }
    tsParseInferType() {
      const node2 = this.startNode();
      this.expectContextual(115);
      const typeParameter = this.startNode();
      typeParameter.name = this.tsParseTypeParameterName();
      typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
      node2.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
      return this.finishNode(node2, "TSInferType");
    }
    tsParseConstraintForInferType() {
      if (this.eat(81)) {
        const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
        if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
          return constraint;
        }
      }
    }
    tsParseTypeOperatorOrHigher() {
      const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
      return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
    }
    tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
      const node2 = this.startNode();
      const hasLeadingOperator = this.eat(operator);
      const types3 = [];
      do {
        types3.push(parseConstituentType());
      } while (this.eat(operator));
      if (types3.length === 1 && !hasLeadingOperator) {
        return types3[0];
      }
      node2.types = types3;
      return this.finishNode(node2, kind);
    }
    tsParseIntersectionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
    }
    tsParseUnionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
    }
    tsIsStartOfFunctionType() {
      if (this.match(47)) {
        return true;
      }
      return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
    }
    tsSkipParameterStart() {
      if (tokenIsIdentifier(this.state.type) || this.match(78)) {
        this.next();
        return true;
      }
      if (this.match(5)) {
        const {
          errors
        } = this.state;
        const previousErrorCount = errors.length;
        try {
          this.parseObjectLike(8, true);
          return errors.length === previousErrorCount;
        } catch (_unused) {
          return false;
        }
      }
      if (this.match(0)) {
        this.next();
        const {
          errors
        } = this.state;
        const previousErrorCount = errors.length;
        try {
          super.parseBindingList(3, 93, 1);
          return errors.length === previousErrorCount;
        } catch (_unused2) {
          return false;
        }
      }
      return false;
    }
    tsIsUnambiguouslyStartOfFunctionType() {
      this.next();
      if (this.match(11) || this.match(21)) {
        return true;
      }
      if (this.tsSkipParameterStart()) {
        if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
          return true;
        }
        if (this.match(11)) {
          this.next();
          if (this.match(19)) {
            return true;
          }
        }
      }
      return false;
    }
    tsParseTypeOrTypePredicateAnnotation(returnToken) {
      return this.tsInType(() => {
        const t = this.startNode();
        this.expect(returnToken);
        const node2 = this.startNode();
        const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
        if (asserts && this.match(78)) {
          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
          if (thisTypePredicate.type === "TSThisType") {
            node2.parameterName = thisTypePredicate;
            node2.asserts = true;
            node2.typeAnnotation = null;
            thisTypePredicate = this.finishNode(node2, "TSTypePredicate");
          } else {
            this.resetStartLocationFromNode(thisTypePredicate, node2);
            thisTypePredicate.asserts = true;
          }
          t.typeAnnotation = thisTypePredicate;
          return this.finishNode(t, "TSTypeAnnotation");
        }
        const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
        if (!typePredicateVariable) {
          if (!asserts) {
            return this.tsParseTypeAnnotation(false, t);
          }
          node2.parameterName = this.parseIdentifier();
          node2.asserts = asserts;
          node2.typeAnnotation = null;
          t.typeAnnotation = this.finishNode(node2, "TSTypePredicate");
          return this.finishNode(t, "TSTypeAnnotation");
        }
        const type = this.tsParseTypeAnnotation(false);
        node2.parameterName = typePredicateVariable;
        node2.typeAnnotation = type;
        node2.asserts = asserts;
        t.typeAnnotation = this.finishNode(node2, "TSTypePredicate");
        return this.finishNode(t, "TSTypeAnnotation");
      });
    }
    tsTryParseTypeOrTypePredicateAnnotation() {
      if (this.match(14)) {
        return this.tsParseTypeOrTypePredicateAnnotation(14);
      }
    }
    tsTryParseTypeAnnotation() {
      if (this.match(14)) {
        return this.tsParseTypeAnnotation();
      }
    }
    tsTryParseType() {
      return this.tsEatThenParseType(14);
    }
    tsParseTypePredicatePrefix() {
      const id = this.parseIdentifier();
      if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
        this.next();
        return id;
      }
    }
    tsParseTypePredicateAsserts() {
      if (this.state.type !== 109) {
        return false;
      }
      const containsEsc = this.state.containsEsc;
      this.next();
      if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
        return false;
      }
      if (containsEsc) {
        this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, {
          reservedWord: "asserts"
        });
      }
      return true;
    }
    tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
      this.tsInType(() => {
        if (eatColon) this.expect(14);
        t.typeAnnotation = this.tsParseType();
      });
      return this.finishNode(t, "TSTypeAnnotation");
    }
    tsParseType() {
      assert2(this.state.inType);
      const type = this.tsParseNonConditionalType();
      if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
        return type;
      }
      const node2 = this.startNodeAtNode(type);
      node2.checkType = type;
      node2.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
      this.expect(17);
      node2.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
      this.expect(14);
      node2.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
      return this.finishNode(node2, "TSConditionalType");
    }
    isAbstractConstructorSignature() {
      return this.isContextual(124) && this.lookahead().type === 77;
    }
    tsParseNonConditionalType() {
      if (this.tsIsStartOfFunctionType()) {
        return this.tsParseFunctionOrConstructorType("TSFunctionType");
      }
      if (this.match(77)) {
        return this.tsParseFunctionOrConstructorType("TSConstructorType");
      } else if (this.isAbstractConstructorSignature()) {
        return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
      }
      return this.tsParseUnionTypeOrHigher();
    }
    tsParseTypeAssertion() {
      if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
      }
      const node2 = this.startNode();
      node2.typeAnnotation = this.tsInType(() => {
        this.next();
        return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
      });
      this.expect(48);
      node2.expression = this.parseMaybeUnary();
      return this.finishNode(node2, "TSTypeAssertion");
    }
    tsParseHeritageClause(token2) {
      const originalStartLoc = this.state.startLoc;
      const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
        const node2 = this.startNode();
        node2.expression = this.tsParseEntityName();
        if (this.match(47)) {
          node2.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node2, "TSExpressionWithTypeArguments");
      });
      if (!delimitedList.length) {
        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {
          token: token2
        });
      }
      return delimitedList;
    }
    tsParseInterfaceDeclaration(node2, properties = {}) {
      if (this.hasFollowingLineBreak()) return null;
      this.expectContextual(129);
      if (properties.declare) node2.declare = true;
      if (tokenIsIdentifier(this.state.type)) {
        node2.id = this.parseIdentifier();
        this.checkIdentifier(node2.id, 130);
      } else {
        node2.id = null;
        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);
      }
      node2.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
      if (this.eat(81)) {
        node2.extends = this.tsParseHeritageClause("extends");
      }
      const body = this.startNode();
      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
      node2.body = this.finishNode(body, "TSInterfaceBody");
      return this.finishNode(node2, "TSInterfaceDeclaration");
    }
    tsParseTypeAliasDeclaration(node2) {
      node2.id = this.parseIdentifier();
      this.checkIdentifier(node2.id, 2);
      node2.typeAnnotation = this.tsInType(() => {
        node2.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
        this.expect(29);
        if (this.isContextual(114) && this.lookahead().type !== 16) {
          const node3 = this.startNode();
          this.next();
          return this.finishNode(node3, "TSIntrinsicKeyword");
        }
        return this.tsParseType();
      });
      this.semicolon();
      return this.finishNode(node2, "TSTypeAliasDeclaration");
    }
    tsInNoContext(cb) {
      const oldContext = this.state.context;
      this.state.context = [oldContext[0]];
      try {
        return cb();
      } finally {
        this.state.context = oldContext;
      }
    }
    tsInType(cb) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      try {
        return cb();
      } finally {
        this.state.inType = oldInType;
      }
    }
    tsInDisallowConditionalTypesContext(cb) {
      const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = true;
      try {
        return cb();
      } finally {
        this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
      }
    }
    tsInAllowConditionalTypesContext(cb) {
      const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = false;
      try {
        return cb();
      } finally {
        this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
      }
    }
    tsEatThenParseType(token2) {
      if (this.match(token2)) {
        return this.tsNextThenParseType();
      }
    }
    tsExpectThenParseType(token2) {
      return this.tsInType(() => {
        this.expect(token2);
        return this.tsParseType();
      });
    }
    tsNextThenParseType() {
      return this.tsInType(() => {
        this.next();
        return this.tsParseType();
      });
    }
    tsParseEnumMember() {
      const node2 = this.startNode();
      node2.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
      if (this.eat(29)) {
        node2.initializer = super.parseMaybeAssignAllowIn();
      }
      return this.finishNode(node2, "TSEnumMember");
    }
    tsParseEnumDeclaration(node2, properties = {}) {
      if (properties.const) node2.const = true;
      if (properties.declare) node2.declare = true;
      this.expectContextual(126);
      node2.id = this.parseIdentifier();
      this.checkIdentifier(node2.id, node2.const ? 8971 : 8459);
      this.expect(5);
      node2.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
      this.expect(8);
      return this.finishNode(node2, "TSEnumDeclaration");
    }
    tsParseModuleBlock() {
      const node2 = this.startNode();
      this.scope.enter(0);
      this.expect(5);
      super.parseBlockOrModuleBlockBody(node2.body = [], void 0, true, 8);
      this.scope.exit();
      return this.finishNode(node2, "TSModuleBlock");
    }
    tsParseModuleOrNamespaceDeclaration(node2, nested = false) {
      node2.id = this.parseIdentifier();
      if (!nested) {
        this.checkIdentifier(node2.id, 1024);
      }
      if (this.eat(16)) {
        const inner = this.startNode();
        this.tsParseModuleOrNamespaceDeclaration(inner, true);
        node2.body = inner;
      } else {
        this.scope.enter(256);
        this.prodParam.enter(0);
        node2.body = this.tsParseModuleBlock();
        this.prodParam.exit();
        this.scope.exit();
      }
      return this.finishNode(node2, "TSModuleDeclaration");
    }
    tsParseAmbientExternalModuleDeclaration(node2) {
      if (this.isContextual(112)) {
        node2.global = true;
        node2.id = this.parseIdentifier();
      } else if (this.match(133)) {
        node2.id = super.parseStringLiteral(this.state.value);
      } else {
        this.unexpected();
      }
      if (this.match(5)) {
        this.scope.enter(256);
        this.prodParam.enter(0);
        node2.body = this.tsParseModuleBlock();
        this.prodParam.exit();
        this.scope.exit();
      } else {
        this.semicolon();
      }
      return this.finishNode(node2, "TSModuleDeclaration");
    }
    tsParseImportEqualsDeclaration(node2, maybeDefaultIdentifier, isExport) {
      node2.isExport = isExport || false;
      node2.id = maybeDefaultIdentifier || this.parseIdentifier();
      this.checkIdentifier(node2.id, 4096);
      this.expect(29);
      const moduleReference = this.tsParseModuleReference();
      if (node2.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);
      }
      node2.moduleReference = moduleReference;
      this.semicolon();
      return this.finishNode(node2, "TSImportEqualsDeclaration");
    }
    tsIsExternalModuleReference() {
      return this.isContextual(119) && this.lookaheadCharCode() === 40;
    }
    tsParseModuleReference() {
      return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
    }
    tsParseExternalModuleReference() {
      const node2 = this.startNode();
      this.expectContextual(119);
      this.expect(10);
      if (!this.match(133)) {
        this.unexpected();
      }
      node2.expression = super.parseExprAtom();
      this.expect(11);
      this.sawUnambiguousESM = true;
      return this.finishNode(node2, "TSExternalModuleReference");
    }
    tsLookAhead(f) {
      const state2 = this.state.clone();
      const res = f();
      this.state = state2;
      return res;
    }
    tsTryParseAndCatch(f) {
      const result = this.tryParse((abort) => f() || abort());
      if (result.aborted || !result.node) return;
      if (result.error) this.state = result.failState;
      return result.node;
    }
    tsTryParse(f) {
      const state2 = this.state.clone();
      const result = f();
      if (result !== void 0 && result !== false) {
        return result;
      }
      this.state = state2;
    }
    tsTryParseDeclare(nany) {
      if (this.isLineTerminator()) {
        return;
      }
      let startType = this.state.type;
      let kind;
      if (this.isContextual(100)) {
        startType = 74;
        kind = "let";
      }
      return this.tsInAmbientContext(() => {
        switch (startType) {
          case 68:
            nany.declare = true;
            return super.parseFunctionStatement(nany, false, false);
          case 80:
            nany.declare = true;
            return this.parseClass(nany, true, false);
          case 126:
            return this.tsParseEnumDeclaration(nany, {
              declare: true
            });
          case 112:
            return this.tsParseAmbientExternalModuleDeclaration(nany);
          case 75:
          case 74:
            if (!this.match(75) || !this.isLookaheadContextual("enum")) {
              nany.declare = true;
              return this.parseVarStatement(nany, kind || this.state.value, true);
            }
            this.expect(75);
            return this.tsParseEnumDeclaration(nany, {
              const: true,
              declare: true
            });
          case 129: {
            const result = this.tsParseInterfaceDeclaration(nany, {
              declare: true
            });
            if (result) return result;
          }
          default:
            if (tokenIsIdentifier(startType)) {
              return this.tsParseDeclaration(nany, this.state.value, true, null);
            }
        }
      });
    }
    tsTryParseExportDeclaration() {
      return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
    }
    tsParseExpressionStatement(node2, expr, decorators2) {
      switch (expr.name) {
        case "declare": {
          const declaration = this.tsTryParseDeclare(node2);
          if (declaration) {
            declaration.declare = true;
          }
          return declaration;
        }
        case "global":
          if (this.match(5)) {
            this.scope.enter(256);
            this.prodParam.enter(0);
            const mod = node2;
            mod.global = true;
            mod.id = expr;
            mod.body = this.tsParseModuleBlock();
            this.scope.exit();
            this.prodParam.exit();
            return this.finishNode(mod, "TSModuleDeclaration");
          }
          break;
        default:
          return this.tsParseDeclaration(node2, expr.name, false, decorators2);
      }
    }
    tsParseDeclaration(node2, value2, next, decorators2) {
      switch (value2) {
        case "abstract":
          if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
            return this.tsParseAbstractDeclaration(node2, decorators2);
          }
          break;
        case "module":
          if (this.tsCheckLineTerminator(next)) {
            if (this.match(133)) {
              return this.tsParseAmbientExternalModuleDeclaration(node2);
            } else if (tokenIsIdentifier(this.state.type)) {
              return this.tsParseModuleOrNamespaceDeclaration(node2);
            }
          }
          break;
        case "namespace":
          if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
            return this.tsParseModuleOrNamespaceDeclaration(node2);
          }
          break;
        case "type":
          if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
            return this.tsParseTypeAliasDeclaration(node2);
          }
          break;
      }
    }
    tsCheckLineTerminator(next) {
      if (next) {
        if (this.hasFollowingLineBreak()) return false;
        this.next();
        return true;
      }
      return !this.isLineTerminator();
    }
    tsTryParseGenericAsyncArrowFunction(startLoc) {
      if (!this.match(47)) return;
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      this.state.maybeInArrowParameters = true;
      const res = this.tsTryParseAndCatch(() => {
        const node2 = this.startNodeAt(startLoc);
        node2.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
        super.parseFunctionParams(node2);
        node2.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
        this.expect(19);
        return node2;
      });
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      if (!res) return;
      return super.parseArrowExpression(res, null, true);
    }
    tsParseTypeArgumentsInExpression() {
      if (this.reScan_lt() !== 47) return;
      return this.tsParseTypeArguments();
    }
    tsParseTypeArguments() {
      const node2 = this.startNode();
      node2.params = this.tsInType(() => this.tsInNoContext(() => {
        this.expect(47);
        return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
      }));
      if (node2.params.length === 0) {
        this.raise(TSErrors.EmptyTypeArguments, node2);
      } else if (!this.state.inType && this.curContext() === types2.brace) {
        this.reScan_lt_gt();
      }
      this.expect(48);
      return this.finishNode(node2, "TSTypeParameterInstantiation");
    }
    tsIsDeclarationStart() {
      return tokenIsTSDeclarationStart(this.state.type);
    }
    isExportDefaultSpecifier() {
      if (this.tsIsDeclarationStart()) return false;
      return super.isExportDefaultSpecifier();
    }
    parseAssignableListItem(flags, decorators2) {
      const startLoc = this.state.startLoc;
      const modified = {};
      this.tsParseModifiers({
        allowedModifiers: ["public", "private", "protected", "override", "readonly"]
      }, modified);
      const accessibility = modified.accessibility;
      const override = modified.override;
      const readonly = modified.readonly;
      if (!(flags & 4) && (accessibility || readonly || override)) {
        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
      }
      const left = this.parseMaybeDefault();
      this.parseAssignableListItemTypes(left, flags);
      const elt = this.parseMaybeDefault(left.loc.start, left);
      if (accessibility || readonly || override) {
        const pp = this.startNodeAt(startLoc);
        if (decorators2.length) {
          pp.decorators = decorators2;
        }
        if (accessibility) pp.accessibility = accessibility;
        if (readonly) pp.readonly = readonly;
        if (override) pp.override = override;
        if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);
        }
        pp.parameter = elt;
        return this.finishNode(pp, "TSParameterProperty");
      }
      if (decorators2.length) {
        left.decorators = decorators2;
      }
      return elt;
    }
    isSimpleParameter(node2) {
      return node2.type === "TSParameterProperty" && super.isSimpleParameter(node2.parameter) || super.isSimpleParameter(node2);
    }
    tsDisallowOptionalPattern(node2) {
      for (const param of node2.params) {
        if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {
          this.raise(TSErrors.PatternIsOptional, param);
        }
      }
    }
    setArrowFunctionParameters(node2, params, trailingCommaLoc) {
      super.setArrowFunctionParameters(node2, params, trailingCommaLoc);
      this.tsDisallowOptionalPattern(node2);
    }
    parseFunctionBodyAndFinish(node2, type, isMethod = false) {
      if (this.match(14)) {
        node2.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
      }
      const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
      if (bodilessType && !this.match(5) && this.isLineTerminator()) {
        return this.finishNode(node2, bodilessType);
      }
      if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
        this.raise(TSErrors.DeclareFunctionHasImplementation, node2);
        if (node2.declare) {
          return super.parseFunctionBodyAndFinish(node2, bodilessType, isMethod);
        }
      }
      this.tsDisallowOptionalPattern(node2);
      return super.parseFunctionBodyAndFinish(node2, type, isMethod);
    }
    registerFunctionStatementId(node2) {
      if (!node2.body && node2.id) {
        this.checkIdentifier(node2.id, 1024);
      } else {
        super.registerFunctionStatementId(node2);
      }
    }
    tsCheckForInvalidTypeCasts(items) {
      items.forEach((node2) => {
        if ((node2 == null ? void 0 : node2.type) === "TSTypeCastExpression") {
          this.raise(TSErrors.UnexpectedTypeAnnotation, node2.typeAnnotation);
        }
      });
    }
    toReferencedList(exprList, isInParens) {
      this.tsCheckForInvalidTypeCasts(exprList);
      return exprList;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      const node2 = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
      if (node2.type === "ArrayExpression") {
        this.tsCheckForInvalidTypeCasts(node2.elements);
      }
      return node2;
    }
    parseSubscript(base2, startLoc, noCalls, state2) {
      if (!this.hasPrecedingLineBreak() && this.match(35)) {
        this.state.canStartJSXElement = false;
        this.next();
        const nonNullExpression = this.startNodeAt(startLoc);
        nonNullExpression.expression = base2;
        return this.finishNode(nonNullExpression, "TSNonNullExpression");
      }
      let isOptionalCall = false;
      if (this.match(18) && this.lookaheadCharCode() === 60) {
        if (noCalls) {
          state2.stop = true;
          return base2;
        }
        state2.optionalChainMember = isOptionalCall = true;
        this.next();
      }
      if (this.match(47) || this.match(51)) {
        let missingParenErrorLoc;
        const result = this.tsTryParseAndCatch(() => {
          if (!noCalls && this.atPossibleAsyncArrow(base2)) {
            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
            if (asyncArrowFn) {
              return asyncArrowFn;
            }
          }
          const typeArguments = this.tsParseTypeArgumentsInExpression();
          if (!typeArguments) return;
          if (isOptionalCall && !this.match(10)) {
            missingParenErrorLoc = this.state.curPosition();
            return;
          }
          if (tokenIsTemplate(this.state.type)) {
            const result2 = super.parseTaggedTemplateExpression(base2, startLoc, state2);
            result2.typeParameters = typeArguments;
            return result2;
          }
          if (!noCalls && this.eat(10)) {
            const node3 = this.startNodeAt(startLoc);
            node3.callee = base2;
            node3.arguments = this.parseCallExpressionArguments(11, false);
            this.tsCheckForInvalidTypeCasts(node3.arguments);
            node3.typeParameters = typeArguments;
            if (state2.optionalChainMember) {
              node3.optional = isOptionalCall;
            }
            return this.finishCallExpression(node3, state2.optionalChainMember);
          }
          const tokenType = this.state.type;
          if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
            return;
          }
          const node2 = this.startNodeAt(startLoc);
          node2.expression = base2;
          node2.typeParameters = typeArguments;
          return this.finishNode(node2, "TSInstantiationExpression");
        });
        if (missingParenErrorLoc) {
          this.unexpected(missingParenErrorLoc, 10);
        }
        if (result) {
          if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {
            this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);
          }
          return result;
        }
      }
      return super.parseSubscript(base2, startLoc, noCalls, state2);
    }
    parseNewCallee(node2) {
      var _callee$extra;
      super.parseNewCallee(node2);
      const {
        callee
      } = node2;
      if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
        node2.typeParameters = callee.typeParameters;
        node2.callee = callee.expression;
      }
    }
    parseExprOp(left, leftStartLoc, minPrec) {
      let isSatisfies;
      if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
        const node2 = this.startNodeAt(leftStartLoc);
        node2.expression = left;
        node2.typeAnnotation = this.tsInType(() => {
          this.next();
          if (this.match(75)) {
            if (isSatisfies) {
              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {
                keyword: "const"
              });
            }
            return this.tsParseTypeReference();
          }
          return this.tsParseType();
        });
        this.finishNode(node2, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
        this.reScan_lt_gt();
        return this.parseExprOp(node2, leftStartLoc, minPrec);
      }
      return super.parseExprOp(left, leftStartLoc, minPrec);
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding2) {
      if (!this.state.isAmbientContext) {
        super.checkReservedWord(word, startLoc, checkKeywords, isBinding2);
      }
    }
    checkImportReflection(node2) {
      super.checkImportReflection(node2);
      if (node2.module && node2.importKind !== "value") {
        this.raise(TSErrors.ImportReflectionHasImportType, node2.specifiers[0].loc.start);
      }
    }
    checkDuplicateExports() {
    }
    isPotentialImportPhase(isExport) {
      if (super.isPotentialImportPhase(isExport)) return true;
      if (this.isContextual(130)) {
        const ch = this.lookaheadCharCode();
        return isExport ? ch === 123 || ch === 42 : ch !== 61;
      }
      return !isExport && this.isContextual(87);
    }
    applyImportPhase(node2, isExport, phase, loc) {
      super.applyImportPhase(node2, isExport, phase, loc);
      if (isExport) {
        node2.exportKind = phase === "type" ? "type" : "value";
      } else {
        node2.importKind = phase === "type" || phase === "typeof" ? phase : "value";
      }
    }
    parseImport(node2) {
      if (this.match(133)) {
        node2.importKind = "value";
        return super.parseImport(node2);
      }
      let importNode;
      if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
        node2.importKind = "value";
        return this.tsParseImportEqualsDeclaration(node2);
      } else if (this.isContextual(130)) {
        const maybeDefaultIdentifier = this.parseMaybeImportPhase(node2, false);
        if (this.lookaheadCharCode() === 61) {
          return this.tsParseImportEqualsDeclaration(node2, maybeDefaultIdentifier);
        } else {
          importNode = super.parseImportSpecifiersAndAfter(node2, maybeDefaultIdentifier);
        }
      } else {
        importNode = super.parseImport(node2);
      }
      if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);
      }
      return importNode;
    }
    parseExport(node2, decorators2) {
      if (this.match(83)) {
        this.next();
        let maybeDefaultIdentifier = null;
        if (this.isContextual(130) && this.isPotentialImportPhase(false)) {
          maybeDefaultIdentifier = this.parseMaybeImportPhase(node2, false);
        } else {
          node2.importKind = "value";
        }
        return this.tsParseImportEqualsDeclaration(node2, maybeDefaultIdentifier, true);
      } else if (this.eat(29)) {
        const assign = node2;
        assign.expression = super.parseExpression();
        this.semicolon();
        this.sawUnambiguousESM = true;
        return this.finishNode(assign, "TSExportAssignment");
      } else if (this.eatContextual(93)) {
        const decl = node2;
        this.expectContextual(128);
        decl.id = this.parseIdentifier();
        this.semicolon();
        return this.finishNode(decl, "TSNamespaceExportDeclaration");
      } else {
        return super.parseExport(node2, decorators2);
      }
    }
    isAbstractClass() {
      return this.isContextual(124) && this.lookahead().type === 80;
    }
    parseExportDefaultExpression() {
      if (this.isAbstractClass()) {
        const cls = this.startNode();
        this.next();
        cls.abstract = true;
        return this.parseClass(cls, true, true);
      }
      if (this.match(129)) {
        const result = this.tsParseInterfaceDeclaration(this.startNode());
        if (result) return result;
      }
      return super.parseExportDefaultExpression();
    }
    parseVarStatement(node2, kind, allowMissingInitializer = false) {
      const {
        isAmbientContext
      } = this.state;
      const declaration = super.parseVarStatement(node2, kind, allowMissingInitializer || isAmbientContext);
      if (!isAmbientContext) return declaration;
      for (const {
        id,
        init
      } of declaration.declarations) {
        if (!init) continue;
        if (kind !== "const" || !!id.typeAnnotation) {
          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);
        } else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {
          this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, init);
        }
      }
      return declaration;
    }
    parseStatementContent(flags, decorators2) {
      if (this.match(75) && this.isLookaheadContextual("enum")) {
        const node2 = this.startNode();
        this.expect(75);
        return this.tsParseEnumDeclaration(node2, {
          const: true
        });
      }
      if (this.isContextual(126)) {
        return this.tsParseEnumDeclaration(this.startNode());
      }
      if (this.isContextual(129)) {
        const result = this.tsParseInterfaceDeclaration(this.startNode());
        if (result) return result;
      }
      return super.parseStatementContent(flags, decorators2);
    }
    parseAccessModifier() {
      return this.tsParseModifier(["public", "protected", "private"]);
    }
    tsHasSomeModifiers(member, modifiers) {
      return modifiers.some((modifier) => {
        if (tsIsAccessModifier(modifier)) {
          return member.accessibility === modifier;
        }
        return !!member[modifier];
      });
    }
    tsIsStartOfStaticBlocks() {
      return this.isContextual(106) && this.lookaheadCharCode() === 123;
    }
    parseClassMember(classBody, member, state2) {
      const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
      this.tsParseModifiers({
        allowedModifiers: modifiers,
        disallowedModifiers: ["in", "out"],
        stopOnStartOfClassStaticBlock: true,
        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
      }, member);
      const callParseClassMemberWithIsStatic = () => {
        if (this.tsIsStartOfStaticBlocks()) {
          this.next();
          this.next();
          if (this.tsHasSomeModifiers(member, modifiers)) {
            this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());
          }
          super.parseClassStaticBlock(classBody, member);
        } else {
          this.parseClassMemberWithIsStatic(classBody, member, state2, !!member.static);
        }
      };
      if (member.declare) {
        this.tsInAmbientContext(callParseClassMemberWithIsStatic);
      } else {
        callParseClassMemberWithIsStatic();
      }
    }
    parseClassMemberWithIsStatic(classBody, member, state2, isStatic) {
      const idx = this.tsTryParseIndexSignature(member);
      if (idx) {
        classBody.body.push(idx);
        if (member.abstract) {
          this.raise(TSErrors.IndexSignatureHasAbstract, member);
        }
        if (member.accessibility) {
          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {
            modifier: member.accessibility
          });
        }
        if (member.declare) {
          this.raise(TSErrors.IndexSignatureHasDeclare, member);
        }
        if (member.override) {
          this.raise(TSErrors.IndexSignatureHasOverride, member);
        }
        return;
      }
      if (!this.state.inAbstractClass && member.abstract) {
        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);
      }
      if (member.override) {
        if (!state2.hadSuperClass) {
          this.raise(TSErrors.OverrideNotInSubClass, member);
        }
      }
      super.parseClassMemberWithIsStatic(classBody, member, state2, isStatic);
    }
    parsePostMemberNameModifiers(methodOrProp) {
      const optional = this.eat(17);
      if (optional) methodOrProp.optional = true;
      if (methodOrProp.readonly && this.match(10)) {
        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);
      }
      if (methodOrProp.declare && this.match(10)) {
        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
      }
    }
    parseExpressionStatement(node2, expr, decorators2) {
      const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node2, expr, decorators2) : void 0;
      return decl || super.parseExpressionStatement(node2, expr, decorators2);
    }
    shouldParseExportDeclaration() {
      if (this.tsIsDeclarationStart()) return true;
      return super.shouldParseExportDeclaration();
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (!this.state.maybeInArrowParameters || !this.match(17)) {
        return super.parseConditional(expr, startLoc, refExpressionErrors);
      }
      const result = this.tryParse(() => super.parseConditional(expr, startLoc));
      if (!result.node) {
        if (result.error) {
          super.setOptionalParametersError(refExpressionErrors, result.error);
        }
        return expr;
      }
      if (result.error) this.state = result.failState;
      return result.node;
    }
    parseParenItem(node2, startLoc) {
      node2 = super.parseParenItem(node2, startLoc);
      if (this.eat(17)) {
        node2.optional = true;
        this.resetEndLocation(node2);
      }
      if (this.match(14)) {
        const typeCastNode = this.startNodeAt(startLoc);
        typeCastNode.expression = node2;
        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
        return this.finishNode(typeCastNode, "TSTypeCastExpression");
      }
      return node2;
    }
    parseExportDeclaration(node2) {
      if (!this.state.isAmbientContext && this.isContextual(125)) {
        return this.tsInAmbientContext(() => this.parseExportDeclaration(node2));
      }
      const startLoc = this.state.startLoc;
      const isDeclare = this.eatContextual(125);
      if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {
        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
      }
      const isIdentifier = tokenIsIdentifier(this.state.type);
      const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node2);
      if (!declaration) return null;
      if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
        node2.exportKind = "type";
      }
      if (isDeclare) {
        this.resetStartLocation(declaration, startLoc);
        declaration.declare = true;
      }
      return declaration;
    }
    parseClassId(node2, isStatement, optionalId, bindingType) {
      if ((!isStatement || optionalId) && this.isContextual(113)) {
        return;
      }
      super.parseClassId(node2, isStatement, optionalId, node2.declare ? 1024 : 8331);
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
      if (typeParameters) node2.typeParameters = typeParameters;
    }
    parseClassPropertyAnnotation(node2) {
      if (!node2.optional) {
        if (this.eat(35)) {
          node2.definite = true;
        } else if (this.eat(17)) {
          node2.optional = true;
        }
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) node2.typeAnnotation = type;
    }
    parseClassProperty(node2) {
      this.parseClassPropertyAnnotation(node2);
      if (this.state.isAmbientContext && !(node2.readonly && !node2.typeAnnotation) && this.match(29)) {
        this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);
      }
      if (node2.abstract && this.match(29)) {
        const {
          key: key2
        } = node2;
        this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, {
          propertyName: key2.type === "Identifier" && !node2.computed ? key2.name : `[${this.input.slice(key2.start, key2.end)}]`
        });
      }
      return super.parseClassProperty(node2);
    }
    parseClassPrivateProperty(node2) {
      if (node2.abstract) {
        this.raise(TSErrors.PrivateElementHasAbstract, node2);
      }
      if (node2.accessibility) {
        this.raise(TSErrors.PrivateElementHasAccessibility, node2, {
          modifier: node2.accessibility
        });
      }
      this.parseClassPropertyAnnotation(node2);
      return super.parseClassPrivateProperty(node2);
    }
    parseClassAccessorProperty(node2) {
      this.parseClassPropertyAnnotation(node2);
      if (node2.optional) {
        this.raise(TSErrors.AccessorCannotBeOptional, node2);
      }
      return super.parseClassAccessorProperty(node2);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters && isConstructor) {
        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
      }
      const {
        declare = false,
        kind
      } = method;
      if (declare && (kind === "get" || kind === "set")) {
        this.raise(TSErrors.DeclareAccessor, method, {
          kind
        });
      }
      if (typeParameters) method.typeParameters = typeParameters;
      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) method.typeParameters = typeParameters;
      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
    }
    declareClassPrivateMethodInScope(node2, kind) {
      if (node2.type === "TSDeclareMethod") return;
      if (node2.type === "MethodDefinition" && !node2.value.body) return;
      super.declareClassPrivateMethodInScope(node2, kind);
    }
    parseClassSuper(node2) {
      super.parseClassSuper(node2);
      if (node2.superClass && (this.match(47) || this.match(51))) {
        node2.superTypeParameters = this.tsParseTypeArgumentsInExpression();
      }
      if (this.eatContextual(113)) {
        node2.implements = this.tsParseHeritageClause("implements");
      }
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) prop.typeParameters = typeParameters;
      return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
    }
    parseFunctionParams(node2, isConstructor) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) node2.typeParameters = typeParameters;
      super.parseFunctionParams(node2, isConstructor);
    }
    parseVarId(decl, kind) {
      super.parseVarId(decl, kind);
      if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
        decl.definite = true;
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) {
        decl.id.typeAnnotation = type;
        this.resetEndLocation(decl.id);
      }
    }
    parseAsyncArrowFromCallExpression(node2, call) {
      if (this.match(14)) {
        node2.returnType = this.tsParseTypeAnnotation();
      }
      return super.parseAsyncArrowFromCallExpression(node2, call);
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
      let state2;
      let jsx3;
      let typeCast;
      if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
        state2 = this.state.clone();
        jsx3 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state2);
        if (!jsx3.error) return jsx3.node;
        const {
          context: context2
        } = this.state;
        const currentContext = context2[context2.length - 1];
        if (currentContext === types2.j_oTag || currentContext === types2.j_expr) {
          context2.pop();
        }
      }
      if (!((_jsx = jsx3) != null && _jsx.error) && !this.match(47)) {
        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
      }
      if (!state2 || state2 === this.state) state2 = this.state.clone();
      let typeParameters;
      const arrow = this.tryParse((abort) => {
        var _expr$extra, _typeParameters;
        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
        const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
        if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
          abort();
        }
        if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
          this.resetStartLocationFromNode(expr, typeParameters);
        }
        expr.typeParameters = typeParameters;
        return expr;
      }, state2);
      if (!arrow.error && !arrow.aborted) {
        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
        return arrow.node;
      }
      if (!jsx3) {
        assert2(!this.hasPlugin("jsx"));
        typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state2);
        if (!typeCast.error) return typeCast.node;
      }
      if ((_jsx2 = jsx3) != null && _jsx2.node) {
        this.state = jsx3.failState;
        return jsx3.node;
      }
      if (arrow.node) {
        this.state = arrow.failState;
        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
        return arrow.node;
      }
      if ((_typeCast = typeCast) != null && _typeCast.node) {
        this.state = typeCast.failState;
        return typeCast.node;
      }
      throw ((_jsx3 = jsx3) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
    }
    reportReservedArrowTypeParam(node2) {
      var _node$extra;
      if (node2.params.length === 1 && !node2.params[0].constraint && !((_node$extra = node2.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
        this.raise(TSErrors.ReservedArrowTypeParam, node2);
      }
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
      if (!this.hasPlugin("jsx") && this.match(47)) {
        return this.tsParseTypeAssertion();
      }
      return super.parseMaybeUnary(refExpressionErrors, sawUnary);
    }
    parseArrow(node2) {
      if (this.match(14)) {
        const result = this.tryParse((abort) => {
          const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
          if (this.canInsertSemicolon() || !this.match(19)) abort();
          return returnType;
        });
        if (result.aborted) return;
        if (!result.thrown) {
          if (result.error) this.state = result.failState;
          node2.returnType = result.node;
        }
      }
      return super.parseArrow(node2);
    }
    parseAssignableListItemTypes(param, flags) {
      if (!(flags & 2)) return param;
      if (this.eat(17)) {
        param.optional = true;
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) param.typeAnnotation = type;
      this.resetEndLocation(param);
      return param;
    }
    isAssignable(node2, isBinding2) {
      switch (node2.type) {
        case "TSTypeCastExpression":
          return this.isAssignable(node2.expression, isBinding2);
        case "TSParameterProperty":
          return true;
        default:
          return super.isAssignable(node2, isBinding2);
      }
    }
    toAssignable(node2, isLHS = false) {
      switch (node2.type) {
        case "ParenthesizedExpression":
          this.toAssignableParenthesizedExpression(node2, isLHS);
          break;
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
          if (isLHS) {
            this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node2);
          } else {
            this.raise(TSErrors.UnexpectedTypeCastInParameter, node2);
          }
          this.toAssignable(node2.expression, isLHS);
          break;
        case "AssignmentExpression":
          if (!isLHS && node2.left.type === "TSTypeCastExpression") {
            node2.left = this.typeCastToParameter(node2.left);
          }
        default:
          super.toAssignable(node2, isLHS);
      }
    }
    toAssignableParenthesizedExpression(node2, isLHS) {
      switch (node2.expression.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
        case "ParenthesizedExpression":
          this.toAssignable(node2.expression, isLHS);
          break;
        default:
          super.toAssignable(node2, isLHS);
      }
    }
    checkToRestConversion(node2, allowPattern) {
      switch (node2.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSNonNullExpression":
          this.checkToRestConversion(node2.expression, false);
          break;
        default:
          super.checkToRestConversion(node2, allowPattern);
      }
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding2) {
      return getOwn({
        TSTypeCastExpression: true,
        TSParameterProperty: "parameter",
        TSNonNullExpression: "expression",
        TSAsExpression: (binding2 !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
        TSSatisfiesExpression: (binding2 !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
        TSTypeAssertion: (binding2 !== 64 || !isUnparenthesizedInAssign) && ["expression", true]
      }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding2);
    }
    parseBindingAtom() {
      if (this.state.type === 78) {
        return this.parseIdentifier(true);
      }
      return super.parseBindingAtom();
    }
    parseMaybeDecoratorArguments(expr) {
      if (this.match(47) || this.match(51)) {
        const typeArguments = this.tsParseTypeArgumentsInExpression();
        if (this.match(10)) {
          const call = super.parseMaybeDecoratorArguments(expr);
          call.typeParameters = typeArguments;
          return call;
        }
        this.unexpected(null, 10);
      }
      return super.parseMaybeDecoratorArguments(expr);
    }
    checkCommaAfterRest(close) {
      if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
        this.next();
        return false;
      }
      return super.checkCommaAfterRest(close);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(35) || this.match(14) || super.isClassProperty();
    }
    parseMaybeDefault(startLoc, left) {
      const node2 = super.parseMaybeDefault(startLoc, left);
      if (node2.type === "AssignmentPattern" && node2.typeAnnotation && node2.right.start < node2.typeAnnotation.start) {
        this.raise(TSErrors.TypeAnnotationAfterAssign, node2.typeAnnotation);
      }
      return node2;
    }
    getTokenFromCode(code2) {
      if (this.state.inType) {
        if (code2 === 62) {
          this.finishOp(48, 1);
          return;
        }
        if (code2 === 60) {
          this.finishOp(47, 1);
          return;
        }
      }
      super.getTokenFromCode(code2);
    }
    reScan_lt_gt() {
      const {
        type
      } = this.state;
      if (type === 47) {
        this.state.pos -= 1;
        this.readToken_lt();
      } else if (type === 48) {
        this.state.pos -= 1;
        this.readToken_gt();
      }
    }
    reScan_lt() {
      const {
        type
      } = this.state;
      if (type === 51) {
        this.state.pos -= 2;
        this.finishOp(47, 1);
        return 47;
      }
      return type;
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
      for (let i = 0; i < exprList.length; i++) {
        const expr = exprList[i];
        if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
          exprList[i] = this.typeCastToParameter(expr);
        }
      }
      super.toAssignableList(exprList, trailingCommaLoc, isLHS);
    }
    typeCastToParameter(node2) {
      node2.expression.typeAnnotation = node2.typeAnnotation;
      this.resetEndLocation(node2.expression, node2.typeAnnotation.loc.end);
      return node2.expression;
    }
    shouldParseArrow(params) {
      if (this.match(14)) {
        return params.every((expr) => this.isAssignable(expr, true));
      }
      return super.shouldParseArrow(params);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    canHaveLeadingDecorator() {
      return super.canHaveLeadingDecorator() || this.isAbstractClass();
    }
    jsxParseOpeningElementAfterName(node2) {
      if (this.match(47) || this.match(51)) {
        const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
        if (typeArguments) node2.typeParameters = typeArguments;
      }
      return super.jsxParseOpeningElementAfterName(node2);
    }
    getGetterSetterExpectedParamCount(method) {
      const baseCount = super.getGetterSetterExpectedParamCount(method);
      const params = this.getObjectOrClassMethodParams(method);
      const firstParam = params[0];
      const hasContextParam = firstParam && this.isThisParam(firstParam);
      return hasContextParam ? baseCount + 1 : baseCount;
    }
    parseCatchClauseParam() {
      const param = super.parseCatchClauseParam();
      const type = this.tsTryParseTypeAnnotation();
      if (type) {
        param.typeAnnotation = type;
        this.resetEndLocation(param);
      }
      return param;
    }
    tsInAmbientContext(cb) {
      const oldIsAmbientContext = this.state.isAmbientContext;
      this.state.isAmbientContext = true;
      try {
        return cb();
      } finally {
        this.state.isAmbientContext = oldIsAmbientContext;
      }
    }
    parseClass(node2, isStatement, optionalId) {
      const oldInAbstractClass = this.state.inAbstractClass;
      this.state.inAbstractClass = !!node2.abstract;
      try {
        return super.parseClass(node2, isStatement, optionalId);
      } finally {
        this.state.inAbstractClass = oldInAbstractClass;
      }
    }
    tsParseAbstractDeclaration(node2, decorators2) {
      if (this.match(80)) {
        node2.abstract = true;
        return this.maybeTakeDecorators(decorators2, this.parseClass(node2, true, false));
      } else if (this.isContextual(129)) {
        if (!this.hasFollowingLineBreak()) {
          node2.abstract = true;
          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node2);
          return this.tsParseInterfaceDeclaration(node2);
        }
      } else {
        this.unexpected(null, 80);
      }
    }
    parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
      const method = super.parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
      if (method.abstract) {
        const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
        if (hasBody) {
          const {
            key: key2
          } = method;
          this.raise(TSErrors.AbstractMethodHasImplementation, method, {
            methodName: key2.type === "Identifier" && !method.computed ? key2.name : `[${this.input.slice(key2.start, key2.end)}]`
          });
        }
      }
      return method;
    }
    tsParseTypeParameterName() {
      const typeName = this.parseIdentifier();
      return typeName.name;
    }
    shouldParseAsAmbientContext() {
      return !!this.getPluginOption("typescript", "dts");
    }
    parse() {
      if (this.shouldParseAsAmbientContext()) {
        this.state.isAmbientContext = true;
      }
      return super.parse();
    }
    getExpression() {
      if (this.shouldParseAsAmbientContext()) {
        this.state.isAmbientContext = true;
      }
      return super.getExpression();
    }
    parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly) {
      if (!isString2 && isMaybeTypeOnly) {
        this.parseTypeOnlyImportExportSpecifier(node2, false, isInTypeExport);
        return this.finishNode(node2, "ExportSpecifier");
      }
      node2.exportKind = "value";
      return super.parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly);
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      if (!importedIsString && isMaybeTypeOnly) {
        this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
        return this.finishNode(specifier, "ImportSpecifier");
      }
      specifier.importKind = "value";
      return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);
    }
    parseTypeOnlyImportExportSpecifier(node2, isImport, isInTypeOnlyImportExport) {
      const leftOfAsKey = isImport ? "imported" : "local";
      const rightOfAsKey = isImport ? "local" : "exported";
      let leftOfAs = node2[leftOfAsKey];
      let rightOfAs;
      let hasTypeSpecifier = false;
      let canParseAsKeyword = true;
      const loc = leftOfAs.loc.start;
      if (this.isContextual(93)) {
        const firstAs = this.parseIdentifier();
        if (this.isContextual(93)) {
          const secondAs = this.parseIdentifier();
          if (tokenIsKeywordOrIdentifier(this.state.type)) {
            hasTypeSpecifier = true;
            leftOfAs = firstAs;
            rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
            canParseAsKeyword = false;
          } else {
            rightOfAs = secondAs;
            canParseAsKeyword = false;
          }
        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
          canParseAsKeyword = false;
          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
        } else {
          hasTypeSpecifier = true;
          leftOfAs = firstAs;
        }
      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
        hasTypeSpecifier = true;
        if (isImport) {
          leftOfAs = this.parseIdentifier(true);
          if (!this.isContextual(93)) {
            this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
          }
        } else {
          leftOfAs = this.parseModuleExportName();
        }
      }
      if (hasTypeSpecifier && isInTypeOnlyImportExport) {
        this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);
      }
      node2[leftOfAsKey] = leftOfAs;
      node2[rightOfAsKey] = rightOfAs;
      const kindKey = isImport ? "importKind" : "exportKind";
      node2[kindKey] = hasTypeSpecifier ? "type" : "value";
      if (canParseAsKeyword && this.eatContextual(93)) {
        node2[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
      }
      if (!node2[rightOfAsKey]) {
        node2[rightOfAsKey] = cloneIdentifier(node2[leftOfAsKey]);
      }
      if (isImport) {
        this.checkIdentifier(node2[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
      }
    }
  };
  function isPossiblyLiteralEnum(expression) {
    if (expression.type !== "MemberExpression") return false;
    const {
      computed,
      property
    } = expression;
    if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
      return false;
    }
    return isUncomputedMemberExpressionChain(expression.object);
  }
  function isValidAmbientConstInitializer(expression, estree2) {
    var _expression$extra;
    const {
      type
    } = expression;
    if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {
      return false;
    }
    if (estree2) {
      if (type === "Literal") {
        const {
          value: value2
        } = expression;
        if (typeof value2 === "string" || typeof value2 === "boolean") {
          return true;
        }
      }
    } else {
      if (type === "StringLiteral" || type === "BooleanLiteral") {
        return true;
      }
    }
    if (isNumber2(expression, estree2) || isNegativeNumber(expression, estree2)) {
      return true;
    }
    if (type === "TemplateLiteral" && expression.expressions.length === 0) {
      return true;
    }
    if (isPossiblyLiteralEnum(expression)) {
      return true;
    }
    return false;
  }
  function isNumber2(expression, estree2) {
    if (estree2) {
      return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);
    }
    return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
  }
  function isNegativeNumber(expression, estree2) {
    if (expression.type === "UnaryExpression") {
      const {
        operator,
        argument
      } = expression;
      if (operator === "-" && isNumber2(argument, estree2)) {
        return true;
      }
    }
    return false;
  }
  function isUncomputedMemberExpressionChain(expression) {
    if (expression.type === "Identifier") return true;
    if (expression.type !== "MemberExpression" || expression.computed) {
      return false;
    }
    return isUncomputedMemberExpressionChain(expression.object);
  }
  const PlaceholderErrors = ParseErrorEnum`placeholders`({
    ClassNameIsRequired: "A class name is required.",
    UnexpectedSpace: "Unexpected space in placeholder."
  });
  var placeholders2 = (superClass) => class PlaceholdersParserMixin extends superClass {
    parsePlaceholder(expectedNode) {
      if (this.match(144)) {
        const node2 = this.startNode();
        this.next();
        this.assertNoSpace();
        node2.name = super.parseIdentifier(true);
        this.assertNoSpace();
        this.expect(144);
        return this.finishPlaceholder(node2, expectedNode);
      }
    }
    finishPlaceholder(node2, expectedNode) {
      const isFinished = !!(node2.expectedNode && node2.type === "Placeholder");
      node2.expectedNode = expectedNode;
      return isFinished ? node2 : this.finishNode(node2, "Placeholder");
    }
    getTokenFromCode(code2) {
      if (code2 === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
        this.finishOp(144, 2);
      } else {
        super.getTokenFromCode(code2);
      }
    }
    parseExprAtom(refExpressionErrors) {
      return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
    }
    parseIdentifier(liberal) {
      return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding2) {
      if (word !== void 0) {
        super.checkReservedWord(word, startLoc, checkKeywords, isBinding2);
      }
    }
    parseBindingAtom() {
      return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
    }
    isValidLVal(type, isParenthesized, binding2) {
      return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding2);
    }
    toAssignable(node2, isLHS) {
      if (node2 && node2.type === "Placeholder" && node2.expectedNode === "Expression") {
        node2.expectedNode = "Pattern";
      } else {
        super.toAssignable(node2, isLHS);
      }
    }
    chStartsBindingIdentifier(ch, pos2) {
      if (super.chStartsBindingIdentifier(ch, pos2)) {
        return true;
      }
      const nextToken = this.lookahead();
      if (nextToken.type === 144) {
        return true;
      }
      return false;
    }
    verifyBreakContinue(node2, isBreak) {
      if (node2.label && node2.label.type === "Placeholder") return;
      super.verifyBreakContinue(node2, isBreak);
    }
    parseExpressionStatement(node2, expr) {
      var _expr$extra;
      if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
        return super.parseExpressionStatement(node2, expr);
      }
      if (this.match(14)) {
        const stmt = node2;
        stmt.label = this.finishPlaceholder(expr, "Identifier");
        this.next();
        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
        return this.finishNode(stmt, "LabeledStatement");
      }
      this.semicolon();
      node2.name = expr.name;
      return this.finishPlaceholder(node2, "Statement");
    }
    parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
      return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
    }
    parseFunctionId(requireId) {
      return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
    }
    parseClass(node2, isStatement, optionalId) {
      const type = isStatement ? "ClassDeclaration" : "ClassExpression";
      this.next();
      const oldStrict = this.state.strict;
      const placeholder2 = this.parsePlaceholder("Identifier");
      if (placeholder2) {
        if (this.match(81) || this.match(144) || this.match(5)) {
          node2.id = placeholder2;
        } else if (optionalId || !isStatement) {
          node2.id = null;
          node2.body = this.finishPlaceholder(placeholder2, "ClassBody");
          return this.finishNode(node2, type);
        } else {
          throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
        }
      } else {
        this.parseClassId(node2, isStatement, optionalId);
      }
      super.parseClassSuper(node2);
      node2.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node2.superClass, oldStrict);
      return this.finishNode(node2, type);
    }
    parseExport(node2, decorators2) {
      const placeholder2 = this.parsePlaceholder("Identifier");
      if (!placeholder2) return super.parseExport(node2, decorators2);
      if (!this.isContextual(98) && !this.match(12)) {
        node2.specifiers = [];
        node2.source = null;
        node2.declaration = this.finishPlaceholder(placeholder2, "Declaration");
        return this.finishNode(node2, "ExportNamedDeclaration");
      }
      this.expectPlugin("exportDefaultFrom");
      const specifier = this.startNode();
      specifier.exported = placeholder2;
      node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
      return super.parseExport(node2, decorators2);
    }
    isExportDefaultSpecifier() {
      if (this.match(65)) {
        const next = this.nextTokenStart();
        if (this.isUnparsedContextual(next, "from")) {
          if (this.input.startsWith(tokenLabelName(144), this.nextTokenStartSince(next + 4))) {
            return true;
          }
        }
      }
      return super.isExportDefaultSpecifier();
    }
    maybeParseExportDefaultSpecifier(node2, maybeDefaultIdentifier) {
      var _specifiers;
      if ((_specifiers = node2.specifiers) != null && _specifiers.length) {
        return true;
      }
      return super.maybeParseExportDefaultSpecifier(node2, maybeDefaultIdentifier);
    }
    checkExport(node2) {
      const {
        specifiers
      } = node2;
      if (specifiers != null && specifiers.length) {
        node2.specifiers = specifiers.filter((node3) => node3.exported.type === "Placeholder");
      }
      super.checkExport(node2);
      node2.specifiers = specifiers;
    }
    parseImport(node2) {
      const placeholder2 = this.parsePlaceholder("Identifier");
      if (!placeholder2) return super.parseImport(node2);
      node2.specifiers = [];
      if (!this.isContextual(98) && !this.match(12)) {
        node2.source = this.finishPlaceholder(placeholder2, "StringLiteral");
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      }
      const specifier = this.startNodeAtNode(placeholder2);
      specifier.local = placeholder2;
      node2.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
      if (this.eat(12)) {
        const hasStarImport = this.maybeParseStarImportSpecifier(node2);
        if (!hasStarImport) this.parseNamedImportSpecifiers(node2);
      }
      this.expectContextual(98);
      node2.source = this.parseImportSource();
      this.semicolon();
      return this.finishNode(node2, "ImportDeclaration");
    }
    parseImportSource() {
      return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
    }
    assertNoSpace() {
      if (this.state.start > this.state.lastTokEndLoc.index) {
        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
      }
    }
  };
  var v8intrinsic = (superClass) => class V8IntrinsicMixin extends superClass {
    parseV8Intrinsic() {
      if (this.match(54)) {
        const v8IntrinsicStartLoc = this.state.startLoc;
        const node2 = this.startNode();
        this.next();
        if (tokenIsIdentifier(this.state.type)) {
          const name = this.parseIdentifierName();
          const identifier2 = this.createIdentifier(node2, name);
          identifier2.type = "V8IntrinsicIdentifier";
          if (this.match(10)) {
            return identifier2;
          }
        }
        this.unexpected(v8IntrinsicStartLoc);
      }
    }
    parseExprAtom(refExpressionErrors) {
      return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
    }
  };
  function hasPlugin(plugins2, expectedConfig) {
    const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
    const expectedKeys = Object.keys(expectedOptions);
    const expectedOptionsIsEmpty = expectedKeys.length === 0;
    return plugins2.some((p) => {
      if (typeof p === "string") {
        return expectedOptionsIsEmpty && p === expectedName;
      } else {
        const [pluginName, pluginOptions] = p;
        if (pluginName !== expectedName) {
          return false;
        }
        for (const key2 of expectedKeys) {
          if (pluginOptions[key2] !== expectedOptions[key2]) {
            return false;
          }
        }
        return true;
      }
    });
  }
  function getPluginOption(plugins2, name, option) {
    const plugin2 = plugins2.find((plugin3) => {
      if (Array.isArray(plugin3)) {
        return plugin3[0] === name;
      } else {
        return plugin3 === name;
      }
    });
    if (plugin2 && Array.isArray(plugin2) && plugin2.length > 1) {
      return plugin2[1][option];
    }
    return null;
  }
  const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
  const TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
  const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
  function validatePlugins(plugins2) {
    if (hasPlugin(plugins2, "decorators")) {
      if (hasPlugin(plugins2, "decorators-legacy")) {
        throw new Error("Cannot use the decorators and decorators-legacy plugin together");
      }
      const decoratorsBeforeExport = getPluginOption(plugins2, "decorators", "decoratorsBeforeExport");
      if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
        throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
      }
      const allowCallParenthesized = getPluginOption(plugins2, "decorators", "allowCallParenthesized");
      if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
        throw new Error("'allowCallParenthesized' must be a boolean.");
      }
    }
    if (hasPlugin(plugins2, "flow") && hasPlugin(plugins2, "typescript")) {
      throw new Error("Cannot combine flow and typescript plugins.");
    }
    if (hasPlugin(plugins2, "placeholders") && hasPlugin(plugins2, "v8intrinsic")) {
      throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
    }
    if (hasPlugin(plugins2, "pipelineOperator")) {
      const proposal = getPluginOption(plugins2, "pipelineOperator", "proposal");
      if (!PIPELINE_PROPOSALS.includes(proposal)) {
        const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
        throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
      }
      const tupleSyntaxIsHash = hasPlugin(plugins2, ["recordAndTuple", {
        syntaxType: "hash"
      }]);
      if (proposal === "hack") {
        if (hasPlugin(plugins2, "placeholders")) {
          throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
        }
        if (hasPlugin(plugins2, "v8intrinsic")) {
          throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
        }
        const topicToken = getPluginOption(plugins2, "pipelineOperator", "topicToken");
        if (!TOPIC_TOKENS.includes(topicToken)) {
          const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
          throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
        }
        if (topicToken === "#" && tupleSyntaxIsHash) {
          throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
        }
      } else if (proposal === "smart" && tupleSyntaxIsHash) {
        throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
      }
    }
    if (hasPlugin(plugins2, "moduleAttributes")) {
      {
        if (hasPlugin(plugins2, "importAssertions") || hasPlugin(plugins2, "importAttributes")) {
          throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
        }
        const moduleAttributesVersionPluginOption = getPluginOption(plugins2, "moduleAttributes", "version");
        if (moduleAttributesVersionPluginOption !== "may-2020") {
          throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
        }
      }
    }
    if (hasPlugin(plugins2, "importAssertions") && hasPlugin(plugins2, "importAttributes")) {
      throw new Error("Cannot combine importAssertions and importAttributes plugins.");
    }
    if (hasPlugin(plugins2, "recordAndTuple") && getPluginOption(plugins2, "recordAndTuple", "syntaxType") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins2, "recordAndTuple", "syntaxType"))) {
      throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
    }
    if (hasPlugin(plugins2, "asyncDoExpressions") && !hasPlugin(plugins2, "doExpressions")) {
      const error2 = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
      error2.missingPlugins = "doExpressions";
      throw error2;
    }
    if (hasPlugin(plugins2, "optionalChainingAssign") && getPluginOption(plugins2, "optionalChainingAssign", "version") !== "2023-07") {
      throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
    }
  }
  const mixinPlugins = {
    estree,
    jsx: jsx2,
    flow: flow2,
    typescript: typescript2,
    v8intrinsic,
    placeholders: placeholders2
  };
  const mixinPluginNames = Object.keys(mixinPlugins);
  const defaultOptions = {
    sourceType: "script",
    sourceFilename: void 0,
    startColumn: 0,
    startLine: 1,
    allowAwaitOutsideFunction: false,
    allowReturnOutsideFunction: false,
    allowNewTargetOutsideFunction: false,
    allowImportExportEverywhere: false,
    allowSuperOutsideMethod: false,
    allowUndeclaredExports: false,
    plugins: [],
    strictMode: null,
    ranges: false,
    tokens: false,
    createImportExpressions: false,
    createParenthesizedExpressions: false,
    errorRecovery: false,
    attachComment: true,
    annexB: true
  };
  function getOptions(opts) {
    if (opts == null) {
      return Object.assign({}, defaultOptions);
    }
    if (opts.annexB != null && opts.annexB !== false) {
      throw new Error("The `annexB` option can only be set to `false`.");
    }
    const options2 = {};
    for (const key2 of Object.keys(defaultOptions)) {
      var _opts$key;
      options2[key2] = (_opts$key = opts[key2]) != null ? _opts$key : defaultOptions[key2];
    }
    return options2;
  }
  class ExpressionParser extends LValParser {
    checkProto(prop, isRecord, protoRef, refExpressionErrors) {
      if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
        return;
      }
      const key2 = prop.key;
      const name = key2.type === "Identifier" ? key2.name : key2.value;
      if (name === "__proto__") {
        if (isRecord) {
          this.raise(Errors.RecordNoProto, key2);
          return;
        }
        if (protoRef.used) {
          if (refExpressionErrors) {
            if (refExpressionErrors.doubleProtoLoc === null) {
              refExpressionErrors.doubleProtoLoc = key2.loc.start;
            }
          } else {
            this.raise(Errors.DuplicateProto, key2);
          }
        }
        protoRef.used = true;
      }
    }
    shouldExitDescending(expr, potentialArrowAt) {
      return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
    }
    getExpression() {
      this.enterInitialScopes();
      this.nextToken();
      const expr = this.parseExpression();
      if (!this.match(139)) {
        this.unexpected();
      }
      this.finalizeRemainingComments();
      expr.comments = this.comments;
      expr.errors = this.state.errors;
      if (this.options.tokens) {
        expr.tokens = this.tokens;
      }
      return expr;
    }
    parseExpression(disallowIn, refExpressionErrors) {
      if (disallowIn) {
        return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
      }
      return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
    }
    parseExpressionBase(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const expr = this.parseMaybeAssign(refExpressionErrors);
      if (this.match(12)) {
        const node2 = this.startNodeAt(startLoc);
        node2.expressions = [expr];
        while (this.eat(12)) {
          node2.expressions.push(this.parseMaybeAssign(refExpressionErrors));
        }
        this.toReferencedList(node2.expressions);
        return this.finishNode(node2, "SequenceExpression");
      }
      return expr;
    }
    parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
      return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
    }
    parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
      return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
    }
    setOptionalParametersError(refExpressionErrors, resultError) {
      var _resultError$loc;
      refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      const startLoc = this.state.startLoc;
      if (this.isContextual(108)) {
        if (this.prodParam.hasYield) {
          let left2 = this.parseYield();
          if (afterLeftParse) {
            left2 = afterLeftParse.call(this, left2, startLoc);
          }
          return left2;
        }
      }
      let ownExpressionErrors;
      if (refExpressionErrors) {
        ownExpressionErrors = false;
      } else {
        refExpressionErrors = new ExpressionErrors();
        ownExpressionErrors = true;
      }
      const {
        type
      } = this.state;
      if (type === 10 || tokenIsIdentifier(type)) {
        this.state.potentialArrowAt = this.state.start;
      }
      let left = this.parseMaybeConditional(refExpressionErrors);
      if (afterLeftParse) {
        left = afterLeftParse.call(this, left, startLoc);
      }
      if (tokenIsAssignment(this.state.type)) {
        const node2 = this.startNodeAt(startLoc);
        const operator = this.state.value;
        node2.operator = operator;
        if (this.match(29)) {
          this.toAssignable(left, true);
          node2.left = left;
          const startIndex = startLoc.index;
          if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
            refExpressionErrors.doubleProtoLoc = null;
          }
          if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
            refExpressionErrors.shorthandAssignLoc = null;
          }
          if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
            this.checkDestructuringPrivate(refExpressionErrors);
            refExpressionErrors.privateKeyLoc = null;
          }
        } else {
          node2.left = left;
        }
        this.next();
        node2.right = this.parseMaybeAssign();
        this.checkLVal(left, {
          in: this.finishNode(node2, "AssignmentExpression")
        });
        return node2;
      } else if (ownExpressionErrors) {
        this.checkExpressionErrors(refExpressionErrors, true);
      }
      return left;
    }
    parseMaybeConditional(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseExprOps(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseConditional(expr, startLoc, refExpressionErrors);
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (this.eat(17)) {
        const node2 = this.startNodeAt(startLoc);
        node2.test = expr;
        node2.consequent = this.parseMaybeAssignAllowIn();
        this.expect(14);
        node2.alternate = this.parseMaybeAssign();
        return this.finishNode(node2, "ConditionalExpression");
      }
      return expr;
    }
    parseMaybeUnaryOrPrivate(refExpressionErrors) {
      return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
    }
    parseExprOps(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseExprOp(expr, startLoc, -1);
    }
    parseExprOp(left, leftStartLoc, minPrec) {
      if (this.isPrivateName(left)) {
        const value2 = this.getPrivateNameSV(left);
        if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
          this.raise(Errors.PrivateInExpectedIn, left, {
            identifierName: value2
          });
        }
        this.classScope.usePrivateName(value2, left.loc.start);
      }
      const op = this.state.type;
      if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
        let prec = tokenOperatorPrecedence(op);
        if (prec > minPrec) {
          if (op === 39) {
            this.expectPlugin("pipelineOperator");
            if (this.state.inFSharpPipelineDirectBody) {
              return left;
            }
            this.checkPipelineAtInfixOperator(left, leftStartLoc);
          }
          const node2 = this.startNodeAt(leftStartLoc);
          node2.left = left;
          node2.operator = this.state.value;
          const logical = op === 41 || op === 42;
          const coalesce = op === 40;
          if (coalesce) {
            prec = tokenOperatorPrecedence(42);
          }
          this.next();
          if (op === 39 && this.hasPlugin(["pipelineOperator", {
            proposal: "minimal"
          }])) {
            if (this.state.type === 96 && this.prodParam.hasAwait) {
              throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
            }
          }
          node2.right = this.parseExprOpRightExpr(op, prec);
          const finishedNode = this.finishNode(node2, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
          const nextOp = this.state.type;
          if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
            throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
          }
          return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
        }
      }
      return left;
    }
    parseExprOpRightExpr(op, prec) {
      const startLoc = this.state.startLoc;
      switch (op) {
        case 39:
          switch (this.getPluginOption("pipelineOperator", "proposal")) {
            case "hack":
              return this.withTopicBindingContext(() => {
                return this.parseHackPipeBody();
              });
            case "smart":
              return this.withTopicBindingContext(() => {
                if (this.prodParam.hasYield && this.isContextual(108)) {
                  throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
                }
                return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
              });
            case "fsharp":
              return this.withSoloAwaitPermittingContext(() => {
                return this.parseFSharpPipelineBody(prec);
              });
          }
        default:
          return this.parseExprOpBaseRightExpr(op, prec);
      }
    }
    parseExprOpBaseRightExpr(op, prec) {
      const startLoc = this.state.startLoc;
      return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
    }
    parseHackPipeBody() {
      var _body$extra;
      const {
        startLoc
      } = this.state;
      const body = this.parseMaybeAssign();
      const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
      if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
        this.raise(Errors.PipeUnparenthesizedBody, startLoc, {
          type: body.type
        });
      }
      if (!this.topicReferenceWasUsedInCurrentContext()) {
        this.raise(Errors.PipeTopicUnused, startLoc);
      }
      return body;
    }
    checkExponentialAfterUnary(node2) {
      if (this.match(57)) {
        this.raise(Errors.UnexpectedTokenUnaryExponentiation, node2.argument);
      }
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
      const startLoc = this.state.startLoc;
      const isAwait = this.isContextual(96);
      if (isAwait && this.isAwaitAllowed()) {
        this.next();
        const expr2 = this.parseAwait(startLoc);
        if (!sawUnary) this.checkExponentialAfterUnary(expr2);
        return expr2;
      }
      const update = this.match(34);
      const node2 = this.startNode();
      if (tokenIsPrefix(this.state.type)) {
        node2.operator = this.state.value;
        node2.prefix = true;
        if (this.match(72)) {
          this.expectPlugin("throwExpressions");
        }
        const isDelete = this.match(89);
        this.next();
        node2.argument = this.parseMaybeUnary(null, true);
        this.checkExpressionErrors(refExpressionErrors, true);
        if (this.state.strict && isDelete) {
          const arg = node2.argument;
          if (arg.type === "Identifier") {
            this.raise(Errors.StrictDelete, node2);
          } else if (this.hasPropertyAsPrivateName(arg)) {
            this.raise(Errors.DeletePrivateField, node2);
          }
        }
        if (!update) {
          if (!sawUnary) {
            this.checkExponentialAfterUnary(node2);
          }
          return this.finishNode(node2, "UnaryExpression");
        }
      }
      const expr = this.parseUpdate(node2, update, refExpressionErrors);
      if (isAwait) {
        const {
          type
        } = this.state;
        const startsExpr2 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
        if (startsExpr2 && !this.isAmbiguousAwait()) {
          this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);
          return this.parseAwait(startLoc);
        }
      }
      return expr;
    }
    parseUpdate(node2, update, refExpressionErrors) {
      if (update) {
        const updateExpressionNode = node2;
        this.checkLVal(updateExpressionNode.argument, {
          in: this.finishNode(updateExpressionNode, "UpdateExpression")
        });
        return node2;
      }
      const startLoc = this.state.startLoc;
      let expr = this.parseExprSubscripts(refExpressionErrors);
      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
      while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
        const node3 = this.startNodeAt(startLoc);
        node3.operator = this.state.value;
        node3.prefix = false;
        node3.argument = expr;
        this.next();
        this.checkLVal(expr, {
          in: expr = this.finishNode(node3, "UpdateExpression")
        });
      }
      return expr;
    }
    parseExprSubscripts(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseExprAtom(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseSubscripts(expr, startLoc);
    }
    parseSubscripts(base2, startLoc, noCalls) {
      const state2 = {
        optionalChainMember: false,
        maybeAsyncArrow: this.atPossibleAsyncArrow(base2),
        stop: false
      };
      do {
        base2 = this.parseSubscript(base2, startLoc, noCalls, state2);
        state2.maybeAsyncArrow = false;
      } while (!state2.stop);
      return base2;
    }
    parseSubscript(base2, startLoc, noCalls, state2) {
      const {
        type
      } = this.state;
      if (!noCalls && type === 15) {
        return this.parseBind(base2, startLoc, noCalls, state2);
      } else if (tokenIsTemplate(type)) {
        return this.parseTaggedTemplateExpression(base2, startLoc, state2);
      }
      let optional = false;
      if (type === 18) {
        if (noCalls) {
          this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);
          if (this.lookaheadCharCode() === 40) {
            state2.stop = true;
            return base2;
          }
        }
        state2.optionalChainMember = optional = true;
        this.next();
      }
      if (!noCalls && this.match(10)) {
        return this.parseCoverCallAndAsyncArrowHead(base2, startLoc, state2, optional);
      } else {
        const computed = this.eat(0);
        if (computed || optional || this.eat(16)) {
          return this.parseMember(base2, startLoc, state2, computed, optional);
        } else {
          state2.stop = true;
          return base2;
        }
      }
    }
    parseMember(base2, startLoc, state2, computed, optional) {
      const node2 = this.startNodeAt(startLoc);
      node2.object = base2;
      node2.computed = computed;
      if (computed) {
        node2.property = this.parseExpression();
        this.expect(3);
      } else if (this.match(138)) {
        if (base2.type === "Super") {
          this.raise(Errors.SuperPrivateField, startLoc);
        }
        this.classScope.usePrivateName(this.state.value, this.state.startLoc);
        node2.property = this.parsePrivateName();
      } else {
        node2.property = this.parseIdentifier(true);
      }
      if (state2.optionalChainMember) {
        node2.optional = optional;
        return this.finishNode(node2, "OptionalMemberExpression");
      } else {
        return this.finishNode(node2, "MemberExpression");
      }
    }
    parseBind(base2, startLoc, noCalls, state2) {
      const node2 = this.startNodeAt(startLoc);
      node2.object = base2;
      this.next();
      node2.callee = this.parseNoCallExpr();
      state2.stop = true;
      return this.parseSubscripts(this.finishNode(node2, "BindExpression"), startLoc, noCalls);
    }
    parseCoverCallAndAsyncArrowHead(base2, startLoc, state2, optional) {
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      let refExpressionErrors = null;
      this.state.maybeInArrowParameters = true;
      this.next();
      const node2 = this.startNodeAt(startLoc);
      node2.callee = base2;
      const {
        maybeAsyncArrow,
        optionalChainMember
      } = state2;
      if (maybeAsyncArrow) {
        this.expressionScope.enter(newAsyncArrowScope());
        refExpressionErrors = new ExpressionErrors();
      }
      if (optionalChainMember) {
        node2.optional = optional;
      }
      if (optional) {
        node2.arguments = this.parseCallExpressionArguments(11);
      } else {
        node2.arguments = this.parseCallExpressionArguments(11, base2.type === "Import", base2.type !== "Super", node2, refExpressionErrors);
      }
      let finishedNode = this.finishCallExpression(node2, optionalChainMember);
      if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
        state2.stop = true;
        this.checkDestructuringPrivate(refExpressionErrors);
        this.expressionScope.validateAsPattern();
        this.expressionScope.exit();
        finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
      } else {
        if (maybeAsyncArrow) {
          this.checkExpressionErrors(refExpressionErrors, true);
          this.expressionScope.exit();
        }
        this.toReferencedArguments(finishedNode);
      }
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return finishedNode;
    }
    toReferencedArguments(node2, isParenthesizedExpr) {
      this.toReferencedListDeep(node2.arguments, isParenthesizedExpr);
    }
    parseTaggedTemplateExpression(base2, startLoc, state2) {
      const node2 = this.startNodeAt(startLoc);
      node2.tag = base2;
      node2.quasi = this.parseTemplate(true);
      if (state2.optionalChainMember) {
        this.raise(Errors.OptionalChainingNoTemplate, startLoc);
      }
      return this.finishNode(node2, "TaggedTemplateExpression");
    }
    atPossibleAsyncArrow(base2) {
      return base2.type === "Identifier" && base2.name === "async" && this.state.lastTokEndLoc.index === base2.end && !this.canInsertSemicolon() && base2.end - base2.start === 5 && base2.start === this.state.potentialArrowAt;
    }
    expectImportAttributesPlugin() {
      if (!this.hasPlugin("importAssertions")) {
        this.expectPlugin("importAttributes");
      }
    }
    finishCallExpression(node2, optional) {
      if (node2.callee.type === "Import") {
        if (node2.arguments.length === 2) {
          {
            if (!this.hasPlugin("moduleAttributes")) {
              this.expectImportAttributesPlugin();
            }
          }
        }
        if (node2.arguments.length === 0 || node2.arguments.length > 2) {
          this.raise(Errors.ImportCallArity, node2, {
            maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
          });
        } else {
          for (const arg of node2.arguments) {
            if (arg.type === "SpreadElement") {
              this.raise(Errors.ImportCallSpreadArgument, arg);
            }
          }
        }
      }
      return this.finishNode(node2, optional ? "OptionalCallExpression" : "CallExpression");
    }
    parseCallExpressionArguments(close, dynamicImport2, allowPlaceholder, nodeForExtra, refExpressionErrors) {
      const elts = [];
      let first = true;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            if (dynamicImport2 && !this.hasPlugin("importAttributes") && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
              this.raise(Errors.ImportCallArgumentTrailingComma, this.state.lastTokStartLoc);
            }
            if (nodeForExtra) {
              this.addTrailingCommaExtraToNode(nodeForExtra);
            }
            this.next();
            break;
          }
        }
        elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
      }
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return elts;
    }
    shouldParseAsyncArrow() {
      return this.match(19) && !this.canInsertSemicolon();
    }
    parseAsyncArrowFromCallExpression(node2, call) {
      var _call$extra;
      this.resetPreviousNodeTrailingComments(call);
      this.expect(19);
      this.parseArrowExpression(node2, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
      if (call.innerComments) {
        setInnerComments(node2, call.innerComments);
      }
      if (call.callee.trailingComments) {
        setInnerComments(node2, call.callee.trailingComments);
      }
      return node2;
    }
    parseNoCallExpr() {
      const startLoc = this.state.startLoc;
      return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
    }
    parseExprAtom(refExpressionErrors) {
      let node2;
      let decorators2 = null;
      const {
        type
      } = this.state;
      switch (type) {
        case 79:
          return this.parseSuper();
        case 83:
          node2 = this.startNode();
          this.next();
          if (this.match(16)) {
            return this.parseImportMetaProperty(node2);
          }
          if (this.match(10)) {
            if (this.options.createImportExpressions) {
              return this.parseImportCall(node2);
            } else {
              return this.finishNode(node2, "Import");
            }
          } else {
            this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);
            return this.finishNode(node2, "Import");
          }
        case 78:
          node2 = this.startNode();
          this.next();
          return this.finishNode(node2, "ThisExpression");
        case 90: {
          return this.parseDo(this.startNode(), false);
        }
        case 56:
        case 31: {
          this.readRegexp();
          return this.parseRegExpLiteral(this.state.value);
        }
        case 134:
          return this.parseNumericLiteral(this.state.value);
        case 135:
          return this.parseBigIntLiteral(this.state.value);
        case 136:
          return this.parseDecimalLiteral(this.state.value);
        case 133:
          return this.parseStringLiteral(this.state.value);
        case 84:
          return this.parseNullLiteral();
        case 85:
          return this.parseBooleanLiteral(true);
        case 86:
          return this.parseBooleanLiteral(false);
        case 10: {
          const canBeArrow = this.state.potentialArrowAt === this.state.start;
          return this.parseParenAndDistinguishExpression(canBeArrow);
        }
        case 2:
        case 1: {
          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
        }
        case 0: {
          return this.parseArrayLike(3, true, false, refExpressionErrors);
        }
        case 6:
        case 7: {
          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
        }
        case 5: {
          return this.parseObjectLike(8, false, false, refExpressionErrors);
        }
        case 68:
          return this.parseFunctionOrFunctionSent();
        case 26:
          decorators2 = this.parseDecorators();
        case 80:
          return this.parseClass(this.maybeTakeDecorators(decorators2, this.startNode()), false);
        case 77:
          return this.parseNewOrNewTarget();
        case 25:
        case 24:
          return this.parseTemplate(false);
        case 15: {
          node2 = this.startNode();
          this.next();
          node2.object = null;
          const callee = node2.callee = this.parseNoCallExpr();
          if (callee.type === "MemberExpression") {
            return this.finishNode(node2, "BindExpression");
          } else {
            throw this.raise(Errors.UnsupportedBind, callee);
          }
        }
        case 138: {
          this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {
            identifierName: this.state.value
          });
          return this.parsePrivateName();
        }
        case 33: {
          return this.parseTopicReferenceThenEqualsSign(54, "%");
        }
        case 32: {
          return this.parseTopicReferenceThenEqualsSign(44, "^");
        }
        case 37:
        case 38: {
          return this.parseTopicReference("hack");
        }
        case 44:
        case 54:
        case 27: {
          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
          if (pipeProposal) {
            return this.parseTopicReference(pipeProposal);
          }
          this.unexpected();
          break;
        }
        case 47: {
          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
          if (isIdentifierStart2(lookaheadCh) || lookaheadCh === 62) {
            this.expectOnePlugin(["jsx", "flow", "typescript"]);
          } else {
            this.unexpected();
          }
          break;
        }
        default:
          if (tokenIsIdentifier(type)) {
            if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {
              return this.parseModuleExpression();
            }
            const canBeArrow = this.state.potentialArrowAt === this.state.start;
            const containsEsc = this.state.containsEsc;
            const id = this.parseIdentifier();
            if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
              const {
                type: type2
              } = this.state;
              if (type2 === 68) {
                this.resetPreviousNodeTrailingComments(id);
                this.next();
                return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
              } else if (tokenIsIdentifier(type2)) {
                if (this.lookaheadCharCode() === 61) {
                  return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
                } else {
                  return id;
                }
              } else if (type2 === 90) {
                this.resetPreviousNodeTrailingComments(id);
                return this.parseDo(this.startNodeAtNode(id), true);
              }
            }
            if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
              this.next();
              return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
            }
            return id;
          } else {
            this.unexpected();
          }
      }
    }
    parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
      const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
      if (pipeProposal) {
        this.state.type = topicTokenType;
        this.state.value = topicTokenValue;
        this.state.pos--;
        this.state.end--;
        this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
        return this.parseTopicReference(pipeProposal);
      } else {
        this.unexpected();
      }
    }
    parseTopicReference(pipeProposal) {
      const node2 = this.startNode();
      const startLoc = this.state.startLoc;
      const tokenType = this.state.type;
      this.next();
      return this.finishTopicReference(node2, startLoc, pipeProposal, tokenType);
    }
    finishTopicReference(node2, startLoc, pipeProposal, tokenType) {
      if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
        const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
        if (!this.topicReferenceIsAllowedInCurrentContext()) {
          this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc);
        }
        this.registerTopicReference();
        return this.finishNode(node2, nodeType);
      } else {
        throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {
          token: tokenLabelName(tokenType)
        });
      }
    }
    testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
      switch (pipeProposal) {
        case "hack": {
          return this.hasPlugin(["pipelineOperator", {
            topicToken: tokenLabelName(tokenType)
          }]);
        }
        case "smart":
          return tokenType === 27;
        default:
          throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
      }
    }
    parseAsyncArrowUnaryFunction(node2) {
      this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
      const params = [this.parseIdentifier()];
      this.prodParam.exit();
      if (this.hasPrecedingLineBreak()) {
        this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());
      }
      this.expect(19);
      return this.parseArrowExpression(node2, params, true);
    }
    parseDo(node2, isAsync) {
      this.expectPlugin("doExpressions");
      if (isAsync) {
        this.expectPlugin("asyncDoExpressions");
      }
      node2.async = isAsync;
      this.next();
      const oldLabels = this.state.labels;
      this.state.labels = [];
      if (isAsync) {
        this.prodParam.enter(2);
        node2.body = this.parseBlock();
        this.prodParam.exit();
      } else {
        node2.body = this.parseBlock();
      }
      this.state.labels = oldLabels;
      return this.finishNode(node2, "DoExpression");
    }
    parseSuper() {
      const node2 = this.startNode();
      this.next();
      if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
        this.raise(Errors.SuperNotAllowed, node2);
      } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
        this.raise(Errors.UnexpectedSuper, node2);
      }
      if (!this.match(10) && !this.match(0) && !this.match(16)) {
        this.raise(Errors.UnsupportedSuper, node2);
      }
      return this.finishNode(node2, "Super");
    }
    parsePrivateName() {
      const node2 = this.startNode();
      const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
      const name = this.state.value;
      this.next();
      node2.id = this.createIdentifier(id, name);
      return this.finishNode(node2, "PrivateName");
    }
    parseFunctionOrFunctionSent() {
      const node2 = this.startNode();
      this.next();
      if (this.prodParam.hasYield && this.match(16)) {
        const meta = this.createIdentifier(this.startNodeAtNode(node2), "function");
        this.next();
        if (this.match(103)) {
          this.expectPlugin("functionSent");
        } else if (!this.hasPlugin("functionSent")) {
          this.unexpected();
        }
        return this.parseMetaProperty(node2, meta, "sent");
      }
      return this.parseFunction(node2);
    }
    parseMetaProperty(node2, meta, propertyName) {
      node2.meta = meta;
      const containsEsc = this.state.containsEsc;
      node2.property = this.parseIdentifier(true);
      if (node2.property.name !== propertyName || containsEsc) {
        this.raise(Errors.UnsupportedMetaProperty, node2.property, {
          target: meta.name,
          onlyValidPropertyName: propertyName
        });
      }
      return this.finishNode(node2, "MetaProperty");
    }
    parseImportMetaProperty(node2) {
      const id = this.createIdentifier(this.startNodeAtNode(node2), "import");
      this.next();
      if (this.isContextual(101)) {
        if (!this.inModule) {
          this.raise(Errors.ImportMetaOutsideModule, id);
        }
        this.sawUnambiguousESM = true;
      } else if (this.isContextual(105) || this.isContextual(97)) {
        const isSource = this.isContextual(105);
        if (!isSource) this.unexpected();
        this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");
        if (!this.options.createImportExpressions) {
          throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {
            phase: this.state.value
          });
        }
        this.next();
        node2.phase = isSource ? "source" : "defer";
        return this.parseImportCall(node2);
      }
      return this.parseMetaProperty(node2, id, "meta");
    }
    parseLiteralAtNode(value2, type, node2) {
      this.addExtra(node2, "rawValue", value2);
      this.addExtra(node2, "raw", this.input.slice(node2.start, this.state.end));
      node2.value = value2;
      this.next();
      return this.finishNode(node2, type);
    }
    parseLiteral(value2, type) {
      const node2 = this.startNode();
      return this.parseLiteralAtNode(value2, type, node2);
    }
    parseStringLiteral(value2) {
      return this.parseLiteral(value2, "StringLiteral");
    }
    parseNumericLiteral(value2) {
      return this.parseLiteral(value2, "NumericLiteral");
    }
    parseBigIntLiteral(value2) {
      return this.parseLiteral(value2, "BigIntLiteral");
    }
    parseDecimalLiteral(value2) {
      return this.parseLiteral(value2, "DecimalLiteral");
    }
    parseRegExpLiteral(value2) {
      const node2 = this.parseLiteral(value2.value, "RegExpLiteral");
      node2.pattern = value2.pattern;
      node2.flags = value2.flags;
      return node2;
    }
    parseBooleanLiteral(value2) {
      const node2 = this.startNode();
      node2.value = value2;
      this.next();
      return this.finishNode(node2, "BooleanLiteral");
    }
    parseNullLiteral() {
      const node2 = this.startNode();
      this.next();
      return this.finishNode(node2, "NullLiteral");
    }
    parseParenAndDistinguishExpression(canBeArrow) {
      const startLoc = this.state.startLoc;
      let val;
      this.next();
      this.expressionScope.enter(newArrowHeadScope());
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.maybeInArrowParameters = true;
      this.state.inFSharpPipelineDirectBody = false;
      const innerStartLoc = this.state.startLoc;
      const exprList = [];
      const refExpressionErrors = new ExpressionErrors();
      let first = true;
      let spreadStartLoc;
      let optionalCommaStartLoc;
      while (!this.match(11)) {
        if (first) {
          first = false;
        } else {
          this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
          if (this.match(11)) {
            optionalCommaStartLoc = this.state.startLoc;
            break;
          }
        }
        if (this.match(21)) {
          const spreadNodeStartLoc = this.state.startLoc;
          spreadStartLoc = this.state.startLoc;
          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
          if (!this.checkCommaAfterRest(41)) {
            break;
          }
        } else {
          exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
        }
      }
      const innerEndLoc = this.state.lastTokEndLoc;
      this.expect(11);
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      let arrowNode = this.startNodeAt(startLoc);
      if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
        this.checkDestructuringPrivate(refExpressionErrors);
        this.expressionScope.validateAsPattern();
        this.expressionScope.exit();
        this.parseArrowExpression(arrowNode, exprList, false);
        return arrowNode;
      }
      this.expressionScope.exit();
      if (!exprList.length) {
        this.unexpected(this.state.lastTokStartLoc);
      }
      if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);
      if (spreadStartLoc) this.unexpected(spreadStartLoc);
      this.checkExpressionErrors(refExpressionErrors, true);
      this.toReferencedListDeep(exprList, true);
      if (exprList.length > 1) {
        val = this.startNodeAt(innerStartLoc);
        val.expressions = exprList;
        this.finishNode(val, "SequenceExpression");
        this.resetEndLocation(val, innerEndLoc);
      } else {
        val = exprList[0];
      }
      return this.wrapParenthesis(startLoc, val);
    }
    wrapParenthesis(startLoc, expression) {
      if (!this.options.createParenthesizedExpressions) {
        this.addExtra(expression, "parenthesized", true);
        this.addExtra(expression, "parenStart", startLoc.index);
        this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
        return expression;
      }
      const parenExpression = this.startNodeAt(startLoc);
      parenExpression.expression = expression;
      return this.finishNode(parenExpression, "ParenthesizedExpression");
    }
    shouldParseArrow(params) {
      return !this.canInsertSemicolon();
    }
    parseArrow(node2) {
      if (this.eat(19)) {
        return node2;
      }
    }
    parseParenItem(node2, startLoc) {
      return node2;
    }
    parseNewOrNewTarget() {
      const node2 = this.startNode();
      this.next();
      if (this.match(16)) {
        const meta = this.createIdentifier(this.startNodeAtNode(node2), "new");
        this.next();
        const metaProp = this.parseMetaProperty(node2, meta, "target");
        if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {
          this.raise(Errors.UnexpectedNewTarget, metaProp);
        }
        return metaProp;
      }
      return this.parseNew(node2);
    }
    parseNew(node2) {
      this.parseNewCallee(node2);
      if (this.eat(10)) {
        const args = this.parseExprList(11);
        this.toReferencedList(args);
        node2.arguments = args;
      } else {
        node2.arguments = [];
      }
      return this.finishNode(node2, "NewExpression");
    }
    parseNewCallee(node2) {
      const isImport = this.match(83);
      const callee = this.parseNoCallExpr();
      node2.callee = callee;
      if (isImport && (callee.type === "Import" || callee.type === "ImportExpression")) {
        this.raise(Errors.ImportCallNotNewExpression, callee);
      }
    }
    parseTemplateElement(isTagged) {
      const {
        start,
        startLoc,
        end,
        value: value2
      } = this.state;
      const elemStart = start + 1;
      const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
      if (value2 === null) {
        if (!isTagged) {
          this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));
        }
      }
      const isTail = this.match(24);
      const endOffset = isTail ? -1 : -2;
      const elemEnd = end + endOffset;
      elem.value = {
        raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
        cooked: value2 === null ? null : value2.slice(1, endOffset)
      };
      elem.tail = isTail;
      this.next();
      const finishedNode = this.finishNode(elem, "TemplateElement");
      this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
      return finishedNode;
    }
    parseTemplate(isTagged) {
      const node2 = this.startNode();
      node2.expressions = [];
      let curElt = this.parseTemplateElement(isTagged);
      node2.quasis = [curElt];
      while (!curElt.tail) {
        node2.expressions.push(this.parseTemplateSubstitution());
        this.readTemplateContinuation();
        node2.quasis.push(curElt = this.parseTemplateElement(isTagged));
      }
      return this.finishNode(node2, "TemplateLiteral");
    }
    parseTemplateSubstitution() {
      return this.parseExpression();
    }
    parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
      if (isRecord) {
        this.expectPlugin("recordAndTuple");
      }
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      const propHash = /* @__PURE__ */ Object.create(null);
      let first = true;
      const node2 = this.startNode();
      node2.properties = [];
      this.next();
      while (!this.match(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            this.addTrailingCommaExtraToNode(node2);
            break;
          }
        }
        let prop;
        if (isPattern) {
          prop = this.parseBindingProperty();
        } else {
          prop = this.parsePropertyDefinition(refExpressionErrors);
          this.checkProto(prop, isRecord, propHash, refExpressionErrors);
        }
        if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
          this.raise(Errors.InvalidRecordProperty, prop);
        }
        if (prop.shorthand) {
          this.addExtra(prop, "shorthand", true);
        }
        node2.properties.push(prop);
      }
      this.next();
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      let type = "ObjectExpression";
      if (isPattern) {
        type = "ObjectPattern";
      } else if (isRecord) {
        type = "RecordExpression";
      }
      return this.finishNode(node2, type);
    }
    addTrailingCommaExtraToNode(node2) {
      this.addExtra(node2, "trailingComma", this.state.lastTokStartLoc.index);
      this.addExtra(node2, "trailingCommaLoc", this.state.lastTokStartLoc, false);
    }
    maybeAsyncOrAccessorProp(prop) {
      return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
    }
    parsePropertyDefinition(refExpressionErrors) {
      let decorators2 = [];
      if (this.match(26)) {
        if (this.hasPlugin("decorators")) {
          this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);
        }
        while (this.match(26)) {
          decorators2.push(this.parseDecorator());
        }
      }
      const prop = this.startNode();
      let isAsync = false;
      let isAccessor = false;
      let startLoc;
      if (this.match(21)) {
        if (decorators2.length) this.unexpected();
        return this.parseSpread();
      }
      if (decorators2.length) {
        prop.decorators = decorators2;
        decorators2 = [];
      }
      prop.method = false;
      if (refExpressionErrors) {
        startLoc = this.state.startLoc;
      }
      let isGenerator = this.eat(55);
      this.parsePropertyNamePrefixOperator(prop);
      const containsEsc = this.state.containsEsc;
      const key2 = this.parsePropertyName(prop, refExpressionErrors);
      if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
        const keyName = key2.name;
        if (keyName === "async" && !this.hasPrecedingLineBreak()) {
          isAsync = true;
          this.resetPreviousNodeTrailingComments(key2);
          isGenerator = this.eat(55);
          this.parsePropertyName(prop);
        }
        if (keyName === "get" || keyName === "set") {
          isAccessor = true;
          this.resetPreviousNodeTrailingComments(key2);
          prop.kind = keyName;
          if (this.match(55)) {
            isGenerator = true;
            this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {
              kind: keyName
            });
            this.next();
          }
          this.parsePropertyName(prop);
        }
      }
      return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
    }
    getGetterSetterExpectedParamCount(method) {
      return method.kind === "get" ? 0 : 1;
    }
    getObjectOrClassMethodParams(method) {
      return method.params;
    }
    checkGetterSetterParams(method) {
      var _params;
      const paramCount = this.getGetterSetterExpectedParamCount(method);
      const params = this.getObjectOrClassMethodParams(method);
      if (params.length !== paramCount) {
        this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, method);
      }
      if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
        this.raise(Errors.BadSetterRestParameter, method);
      }
    }
    parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
      if (isAccessor) {
        const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
        this.checkGetterSetterParams(finishedProp);
        return finishedProp;
      }
      if (isAsync || isGenerator || this.match(10)) {
        if (isPattern) this.unexpected();
        prop.kind = "method";
        prop.method = true;
        return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
      }
    }
    parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
      prop.shorthand = false;
      if (this.eat(14)) {
        prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
        return this.finishNode(prop, "ObjectProperty");
      }
      if (!prop.computed && prop.key.type === "Identifier") {
        this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
        if (isPattern) {
          prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
        } else if (this.match(29)) {
          const shorthandAssignLoc = this.state.startLoc;
          if (refExpressionErrors != null) {
            if (refExpressionErrors.shorthandAssignLoc === null) {
              refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
            }
          } else {
            this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
          }
          prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
        } else {
          prop.value = cloneIdentifier(prop.key);
        }
        prop.shorthand = true;
        return this.finishNode(prop, "ObjectProperty");
      }
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      const node2 = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
      if (!node2) this.unexpected();
      return node2;
    }
    parsePropertyName(prop, refExpressionErrors) {
      if (this.eat(0)) {
        prop.computed = true;
        prop.key = this.parseMaybeAssignAllowIn();
        this.expect(3);
      } else {
        const {
          type,
          value: value2
        } = this.state;
        let key2;
        if (tokenIsKeywordOrIdentifier(type)) {
          key2 = this.parseIdentifier(true);
        } else {
          switch (type) {
            case 134:
              key2 = this.parseNumericLiteral(value2);
              break;
            case 133:
              key2 = this.parseStringLiteral(value2);
              break;
            case 135:
              key2 = this.parseBigIntLiteral(value2);
              break;
            case 136:
              key2 = this.parseDecimalLiteral(value2);
              break;
            case 138: {
              const privateKeyLoc = this.state.startLoc;
              if (refExpressionErrors != null) {
                if (refExpressionErrors.privateKeyLoc === null) {
                  refExpressionErrors.privateKeyLoc = privateKeyLoc;
                }
              } else {
                this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
              }
              key2 = this.parsePrivateName();
              break;
            }
            default:
              this.unexpected();
          }
        }
        prop.key = key2;
        if (type !== 138) {
          prop.computed = false;
        }
      }
      return prop.key;
    }
    initFunction(node2, isAsync) {
      node2.id = null;
      node2.generator = false;
      node2.async = isAsync;
    }
    parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
      this.initFunction(node2, isAsync);
      node2.generator = isGenerator;
      this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));
      this.prodParam.enter(functionFlags(isAsync, node2.generator));
      this.parseFunctionParams(node2, isConstructor);
      const finishedNode = this.parseFunctionBodyAndFinish(node2, type, true);
      this.prodParam.exit();
      this.scope.exit();
      return finishedNode;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      if (isTuple) {
        this.expectPlugin("recordAndTuple");
      }
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      const node2 = this.startNode();
      this.next();
      node2.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node2);
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return this.finishNode(node2, isTuple ? "TupleExpression" : "ArrayExpression");
    }
    parseArrowExpression(node2, params, isAsync, trailingCommaLoc) {
      this.scope.enter(2 | 4);
      let flags = functionFlags(isAsync, false);
      if (!this.match(5) && this.prodParam.hasIn) {
        flags |= 8;
      }
      this.prodParam.enter(flags);
      this.initFunction(node2, isAsync);
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      if (params) {
        this.state.maybeInArrowParameters = true;
        this.setArrowFunctionParameters(node2, params, trailingCommaLoc);
      }
      this.state.maybeInArrowParameters = false;
      this.parseFunctionBody(node2, true);
      this.prodParam.exit();
      this.scope.exit();
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return this.finishNode(node2, "ArrowFunctionExpression");
    }
    setArrowFunctionParameters(node2, params, trailingCommaLoc) {
      this.toAssignableList(params, trailingCommaLoc, false);
      node2.params = params;
    }
    parseFunctionBodyAndFinish(node2, type, isMethod = false) {
      this.parseFunctionBody(node2, false, isMethod);
      return this.finishNode(node2, type);
    }
    parseFunctionBody(node2, allowExpression, isMethod = false) {
      const isExpression = allowExpression && !this.match(5);
      this.expressionScope.enter(newExpressionScope());
      if (isExpression) {
        node2.body = this.parseMaybeAssign();
        this.checkParams(node2, false, allowExpression, false);
      } else {
        const oldStrict = this.state.strict;
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(this.prodParam.currentFlags() | 4);
        node2.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
          const nonSimple = !this.isSimpleParamList(node2.params);
          if (hasStrictModeDirective && nonSimple) {
            this.raise(Errors.IllegalLanguageModeDirective, (node2.kind === "method" || node2.kind === "constructor") && !!node2.key ? node2.key.loc.end : node2);
          }
          const strictModeChanged = !oldStrict && this.state.strict;
          this.checkParams(node2, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
          if (this.state.strict && node2.id) {
            this.checkIdentifier(node2.id, 65, strictModeChanged);
          }
        });
        this.prodParam.exit();
        this.state.labels = oldLabels;
      }
      this.expressionScope.exit();
    }
    isSimpleParameter(node2) {
      return node2.type === "Identifier";
    }
    isSimpleParamList(params) {
      for (let i = 0, len = params.length; i < len; i++) {
        if (!this.isSimpleParameter(params[i])) return false;
      }
      return true;
    }
    checkParams(node2, allowDuplicates, isArrowFunction, strictModeChanged = true) {
      const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set();
      const formalParameters = {
        type: "FormalParameters"
      };
      for (const param of node2.params) {
        this.checkLVal(param, {
          in: formalParameters,
          binding: 5,
          checkClashes,
          strictModeChanged
        });
      }
    }
    parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
      const elts = [];
      let first = true;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            if (nodeForExtra) {
              this.addTrailingCommaExtraToNode(nodeForExtra);
            }
            this.next();
            break;
          }
        }
        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
      }
      return elts;
    }
    parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
      let elt;
      if (this.match(12)) {
        if (!allowEmpty) {
          this.raise(Errors.UnexpectedToken, this.state.curPosition(), {
            unexpected: ","
          });
        }
        elt = null;
      } else if (this.match(21)) {
        const spreadNodeStartLoc = this.state.startLoc;
        elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
      } else if (this.match(17)) {
        this.expectPlugin("partialApplication");
        if (!allowPlaceholder) {
          this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
        }
        const node2 = this.startNode();
        this.next();
        elt = this.finishNode(node2, "ArgumentPlaceholder");
      } else {
        elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
      }
      return elt;
    }
    parseIdentifier(liberal) {
      const node2 = this.startNode();
      const name = this.parseIdentifierName(liberal);
      return this.createIdentifier(node2, name);
    }
    createIdentifier(node2, name) {
      node2.name = name;
      node2.loc.identifierName = name;
      return this.finishNode(node2, "Identifier");
    }
    parseIdentifierName(liberal) {
      let name;
      const {
        startLoc,
        type
      } = this.state;
      if (tokenIsKeywordOrIdentifier(type)) {
        name = this.state.value;
      } else {
        this.unexpected();
      }
      const tokenIsKeyword2 = tokenKeywordOrIdentifierIsKeyword(type);
      if (liberal) {
        if (tokenIsKeyword2) {
          this.replaceToken(132);
        }
      } else {
        this.checkReservedWord(name, startLoc, tokenIsKeyword2, false);
      }
      this.next();
      return name;
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding2) {
      if (word.length > 10) {
        return;
      }
      if (!canBeReservedWord(word)) {
        return;
      }
      if (checkKeywords && isKeyword2(word)) {
        this.raise(Errors.UnexpectedKeyword, startLoc, {
          keyword: word
        });
        return;
      }
      const reservedTest = !this.state.strict ? isReservedWord2 : isBinding2 ? isStrictBindReservedWord2 : isStrictReservedWord2;
      if (reservedTest(word, this.inModule)) {
        this.raise(Errors.UnexpectedReservedWord, startLoc, {
          reservedWord: word
        });
        return;
      } else if (word === "yield") {
        if (this.prodParam.hasYield) {
          this.raise(Errors.YieldBindingIdentifier, startLoc);
          return;
        }
      } else if (word === "await") {
        if (this.prodParam.hasAwait) {
          this.raise(Errors.AwaitBindingIdentifier, startLoc);
          return;
        }
        if (this.scope.inStaticBlock) {
          this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
          return;
        }
        this.expressionScope.recordAsyncArrowParametersError(startLoc);
      } else if (word === "arguments") {
        if (this.scope.inClassAndNotInNonArrowFunction) {
          this.raise(Errors.ArgumentsInClass, startLoc);
          return;
        }
      }
    }
    isAwaitAllowed() {
      if (this.prodParam.hasAwait) return true;
      if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
        return true;
      }
      return false;
    }
    parseAwait(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node2);
      if (this.eat(55)) {
        this.raise(Errors.ObsoleteAwaitStar, node2);
      }
      if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
        if (this.isAmbiguousAwait()) {
          this.ambiguousScriptDifferentAst = true;
        } else {
          this.sawUnambiguousESM = true;
        }
      }
      if (!this.state.soloAwait) {
        node2.argument = this.parseMaybeUnary(null, true);
      }
      return this.finishNode(node2, "AwaitExpression");
    }
    isAmbiguousAwait() {
      if (this.hasPrecedingLineBreak()) return true;
      const {
        type
      } = this.state;
      return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 137 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
    }
    parseYield() {
      const node2 = this.startNode();
      this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node2);
      this.next();
      let delegating = false;
      let argument = null;
      if (!this.hasPrecedingLineBreak()) {
        delegating = this.eat(55);
        switch (this.state.type) {
          case 13:
          case 139:
          case 8:
          case 11:
          case 3:
          case 9:
          case 14:
          case 12:
            if (!delegating) break;
          default:
            argument = this.parseMaybeAssign();
        }
      }
      node2.delegate = delegating;
      node2.argument = argument;
      return this.finishNode(node2, "YieldExpression");
    }
    parseImportCall(node2) {
      this.next();
      node2.source = this.parseMaybeAssignAllowIn();
      if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
        node2.options = null;
      }
      if (this.eat(12)) {
        this.expectImportAttributesPlugin();
        if (!this.match(11)) {
          node2.options = this.parseMaybeAssignAllowIn();
          this.eat(12);
        }
      }
      this.expect(11);
      return this.finishNode(node2, "ImportExpression");
    }
    checkPipelineAtInfixOperator(left, leftStartLoc) {
      if (this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }])) {
        if (left.type === "SequenceExpression") {
          this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
        }
      }
    }
    parseSmartPipelineBodyInStyle(childExpr, startLoc) {
      if (this.isSimpleReference(childExpr)) {
        const bodyNode = this.startNodeAt(startLoc);
        bodyNode.callee = childExpr;
        return this.finishNode(bodyNode, "PipelineBareFunction");
      } else {
        const bodyNode = this.startNodeAt(startLoc);
        this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
        bodyNode.expression = childExpr;
        return this.finishNode(bodyNode, "PipelineTopicExpression");
      }
    }
    isSimpleReference(expression) {
      switch (expression.type) {
        case "MemberExpression":
          return !expression.computed && this.isSimpleReference(expression.object);
        case "Identifier":
          return true;
        default:
          return false;
      }
    }
    checkSmartPipeTopicBodyEarlyErrors(startLoc) {
      if (this.match(19)) {
        throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
      }
      if (!this.topicReferenceWasUsedInCurrentContext()) {
        this.raise(Errors.PipelineTopicUnused, startLoc);
      }
    }
    withTopicBindingContext(callback) {
      const outerContextTopicState = this.state.topicContext;
      this.state.topicContext = {
        maxNumOfResolvableTopics: 1,
        maxTopicIndex: null
      };
      try {
        return callback();
      } finally {
        this.state.topicContext = outerContextTopicState;
      }
    }
    withSmartMixTopicForbiddingContext(callback) {
      if (this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }])) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        try {
          return callback();
        } finally {
          this.state.topicContext = outerContextTopicState;
        }
      } else {
        return callback();
      }
    }
    withSoloAwaitPermittingContext(callback) {
      const outerContextSoloAwaitState = this.state.soloAwait;
      this.state.soloAwait = true;
      try {
        return callback();
      } finally {
        this.state.soloAwait = outerContextSoloAwaitState;
      }
    }
    allowInAnd(callback) {
      const flags = this.prodParam.currentFlags();
      const prodParamToSet = 8 & ~flags;
      if (prodParamToSet) {
        this.prodParam.enter(flags | 8);
        try {
          return callback();
        } finally {
          this.prodParam.exit();
        }
      }
      return callback();
    }
    disallowInAnd(callback) {
      const flags = this.prodParam.currentFlags();
      const prodParamToClear = 8 & flags;
      if (prodParamToClear) {
        this.prodParam.enter(flags & ~8);
        try {
          return callback();
        } finally {
          this.prodParam.exit();
        }
      }
      return callback();
    }
    registerTopicReference() {
      this.state.topicContext.maxTopicIndex = 0;
    }
    topicReferenceIsAllowedInCurrentContext() {
      return this.state.topicContext.maxNumOfResolvableTopics >= 1;
    }
    topicReferenceWasUsedInCurrentContext() {
      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
    }
    parseFSharpPipelineBody(prec) {
      const startLoc = this.state.startLoc;
      this.state.potentialArrowAt = this.state.start;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = true;
      const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return ret;
    }
    parseModuleExpression() {
      this.expectPlugin("moduleBlocks");
      const node2 = this.startNode();
      this.next();
      if (!this.match(5)) {
        this.unexpected(null, 5);
      }
      const program = this.startNodeAt(this.state.endLoc);
      this.next();
      const revertScopes = this.initializeScopes(true);
      this.enterInitialScopes();
      try {
        node2.body = this.parseProgram(program, 8, "module");
      } finally {
        revertScopes();
      }
      return this.finishNode(node2, "ModuleExpression");
    }
    parsePropertyNamePrefixOperator(prop) {
    }
  }
  const loopLabel = {
    kind: 1
  }, switchLabel = {
    kind: 2
  };
  const loneSurrogate = /[\uD800-\uDFFF]/u;
  const keywordRelationalOperator = /in(?:stanceof)?/y;
  function babel7CompatTokens(tokens, input2) {
    for (let i = 0; i < tokens.length; i++) {
      const token2 = tokens[i];
      const {
        type
      } = token2;
      if (typeof type === "number") {
        {
          if (type === 138) {
            const {
              loc,
              start,
              value: value2,
              end
            } = token2;
            const hashEndPos = start + 1;
            const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
            tokens.splice(i, 1, new Token({
              type: getExportedToken(27),
              value: "#",
              start,
              end: hashEndPos,
              startLoc: loc.start,
              endLoc: hashEndLoc
            }), new Token({
              type: getExportedToken(132),
              value: value2,
              start: hashEndPos,
              end,
              startLoc: hashEndLoc,
              endLoc: loc.end
            }));
            i++;
            continue;
          }
          if (tokenIsTemplate(type)) {
            const {
              loc,
              start,
              value: value2,
              end
            } = token2;
            const backquoteEnd = start + 1;
            const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
            let startToken;
            if (input2.charCodeAt(start) === 96) {
              startToken = new Token({
                type: getExportedToken(22),
                value: "`",
                start,
                end: backquoteEnd,
                startLoc: loc.start,
                endLoc: backquoteEndLoc
              });
            } else {
              startToken = new Token({
                type: getExportedToken(8),
                value: "}",
                start,
                end: backquoteEnd,
                startLoc: loc.start,
                endLoc: backquoteEndLoc
              });
            }
            let templateValue, templateElementEnd, templateElementEndLoc, endToken;
            if (type === 24) {
              templateElementEnd = end - 1;
              templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
              templateValue = value2 === null ? null : value2.slice(1, -1);
              endToken = new Token({
                type: getExportedToken(22),
                value: "`",
                start: templateElementEnd,
                end,
                startLoc: templateElementEndLoc,
                endLoc: loc.end
              });
            } else {
              templateElementEnd = end - 2;
              templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
              templateValue = value2 === null ? null : value2.slice(1, -2);
              endToken = new Token({
                type: getExportedToken(23),
                value: "${",
                start: templateElementEnd,
                end,
                startLoc: templateElementEndLoc,
                endLoc: loc.end
              });
            }
            tokens.splice(i, 1, startToken, new Token({
              type: getExportedToken(20),
              value: templateValue,
              start: backquoteEnd,
              end: templateElementEnd,
              startLoc: backquoteEndLoc,
              endLoc: templateElementEndLoc
            }), endToken);
            i += 2;
            continue;
          }
        }
        token2.type = getExportedToken(type);
      }
    }
    return tokens;
  }
  class StatementParser extends ExpressionParser {
    parseTopLevel(file2, program) {
      file2.program = this.parseProgram(program);
      file2.comments = this.comments;
      if (this.options.tokens) {
        file2.tokens = babel7CompatTokens(this.tokens, this.input);
      }
      return this.finishNode(file2, "File");
    }
    parseProgram(program, end = 139, sourceType = this.options.sourceType) {
      program.sourceType = sourceType;
      program.interpreter = this.parseInterpreterDirective();
      this.parseBlockBody(program, true, true, end);
      if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
          this.raise(Errors.ModuleExportUndefined, at, {
            localName
          });
        }
      }
      let finishedProgram;
      if (end === 139) {
        finishedProgram = this.finishNode(program, "Program");
      } else {
        finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
      }
      return finishedProgram;
    }
    stmtToDirective(stmt) {
      const directive = stmt;
      directive.type = "Directive";
      directive.value = directive.expression;
      delete directive.expression;
      const directiveLiteral = directive.value;
      const expressionValue = directiveLiteral.value;
      const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
      const val = directiveLiteral.value = raw.slice(1, -1);
      this.addExtra(directiveLiteral, "raw", raw);
      this.addExtra(directiveLiteral, "rawValue", val);
      this.addExtra(directiveLiteral, "expressionValue", expressionValue);
      directiveLiteral.type = "DirectiveLiteral";
      return directive;
    }
    parseInterpreterDirective() {
      if (!this.match(28)) {
        return null;
      }
      const node2 = this.startNode();
      node2.value = this.state.value;
      this.next();
      return this.finishNode(node2, "InterpreterDirective");
    }
    isLet() {
      if (!this.isContextual(100)) {
        return false;
      }
      return this.hasFollowingBindingAtom();
    }
    chStartsBindingIdentifier(ch, pos2) {
      if (isIdentifierStart2(ch)) {
        keywordRelationalOperator.lastIndex = pos2;
        if (keywordRelationalOperator.test(this.input)) {
          const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
          if (!isIdentifierChar2(endCh) && endCh !== 92) {
            return false;
          }
        }
        return true;
      } else if (ch === 92) {
        return true;
      } else {
        return false;
      }
    }
    chStartsBindingPattern(ch) {
      return ch === 91 || ch === 123;
    }
    hasFollowingBindingAtom() {
      const next = this.nextTokenStart();
      const nextCh = this.codePointAtPos(next);
      return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
    }
    hasInLineFollowingBindingIdentifier() {
      const next = this.nextTokenInLineStart();
      const nextCh = this.codePointAtPos(next);
      return this.chStartsBindingIdentifier(nextCh, next);
    }
    startsUsingForOf() {
      const {
        type,
        containsEsc
      } = this.lookahead();
      if (type === 102 && !containsEsc) {
        return false;
      } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
        this.expectPlugin("explicitResourceManagement");
        return true;
      }
    }
    startsAwaitUsing() {
      let next = this.nextTokenInLineStart();
      if (this.isUnparsedContextual(next, "using")) {
        next = this.nextTokenInLineStartSince(next + 5);
        const nextCh = this.codePointAtPos(next);
        if (this.chStartsBindingIdentifier(nextCh, next)) {
          this.expectPlugin("explicitResourceManagement");
          return true;
        }
      }
      return false;
    }
    parseModuleItem() {
      return this.parseStatementLike(1 | 2 | 4 | 8);
    }
    parseStatementListItem() {
      return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));
    }
    parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
      let flags = 0;
      if (this.options.annexB && !this.state.strict) {
        flags |= 4;
        if (allowLabeledFunction) {
          flags |= 8;
        }
      }
      return this.parseStatementLike(flags);
    }
    parseStatement() {
      return this.parseStatementLike(0);
    }
    parseStatementLike(flags) {
      let decorators2 = null;
      if (this.match(26)) {
        decorators2 = this.parseDecorators(true);
      }
      return this.parseStatementContent(flags, decorators2);
    }
    parseStatementContent(flags, decorators2) {
      const starttype = this.state.type;
      const node2 = this.startNode();
      const allowDeclaration = !!(flags & 2);
      const allowFunctionDeclaration = !!(flags & 4);
      const topLevel = flags & 1;
      switch (starttype) {
        case 60:
          return this.parseBreakContinueStatement(node2, true);
        case 63:
          return this.parseBreakContinueStatement(node2, false);
        case 64:
          return this.parseDebuggerStatement(node2);
        case 90:
          return this.parseDoWhileStatement(node2);
        case 91:
          return this.parseForStatement(node2);
        case 68:
          if (this.lookaheadCharCode() === 46) break;
          if (!allowFunctionDeclaration) {
            this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);
          }
          return this.parseFunctionStatement(node2, false, !allowDeclaration && allowFunctionDeclaration);
        case 80:
          if (!allowDeclaration) this.unexpected();
          return this.parseClass(this.maybeTakeDecorators(decorators2, node2), true);
        case 69:
          return this.parseIfStatement(node2);
        case 70:
          return this.parseReturnStatement(node2);
        case 71:
          return this.parseSwitchStatement(node2);
        case 72:
          return this.parseThrowStatement(node2);
        case 73:
          return this.parseTryStatement(node2);
        case 96:
          if (!this.state.containsEsc && this.startsAwaitUsing()) {
            if (!this.isAwaitAllowed()) {
              this.raise(Errors.AwaitUsingNotInAsyncContext, node2);
            } else if (!allowDeclaration) {
              this.raise(Errors.UnexpectedLexicalDeclaration, node2);
            }
            this.next();
            return this.parseVarStatement(node2, "await using");
          }
          break;
        case 107:
          if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {
            break;
          }
          this.expectPlugin("explicitResourceManagement");
          if (!this.scope.inModule && this.scope.inTopLevel) {
            this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);
          } else if (!allowDeclaration) {
            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
          }
          return this.parseVarStatement(node2, "using");
        case 100: {
          if (this.state.containsEsc) {
            break;
          }
          const next = this.nextTokenStart();
          const nextCh = this.codePointAtPos(next);
          if (nextCh !== 91) {
            if (!allowDeclaration && this.hasFollowingLineBreak()) break;
            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {
              break;
            }
          }
        }
        case 75: {
          if (!allowDeclaration) {
            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
          }
        }
        case 74: {
          const kind = this.state.value;
          return this.parseVarStatement(node2, kind);
        }
        case 92:
          return this.parseWhileStatement(node2);
        case 76:
          return this.parseWithStatement(node2);
        case 5:
          return this.parseBlock();
        case 13:
          return this.parseEmptyStatement(node2);
        case 83: {
          const nextTokenCharCode = this.lookaheadCharCode();
          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
            break;
          }
        }
        case 82: {
          if (!this.options.allowImportExportEverywhere && !topLevel) {
            this.raise(Errors.UnexpectedImportExport, this.state.startLoc);
          }
          this.next();
          let result;
          if (starttype === 83) {
            result = this.parseImport(node2);
            if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
              this.sawUnambiguousESM = true;
            }
          } else {
            result = this.parseExport(node2, decorators2);
            if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
              this.sawUnambiguousESM = true;
            }
          }
          this.assertModuleNodeAllowed(result);
          return result;
        }
        default: {
          if (this.isAsyncFunction()) {
            if (!allowDeclaration) {
              this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);
            }
            this.next();
            return this.parseFunctionStatement(node2, true, !allowDeclaration && allowFunctionDeclaration);
          }
        }
      }
      const maybeName = this.state.value;
      const expr = this.parseExpression();
      if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
        return this.parseLabeledStatement(node2, maybeName, expr, flags);
      } else {
        return this.parseExpressionStatement(node2, expr, decorators2);
      }
    }
    assertModuleNodeAllowed(node2) {
      if (!this.options.allowImportExportEverywhere && !this.inModule) {
        this.raise(Errors.ImportOutsideModule, node2);
      }
    }
    decoratorsEnabledBeforeExport() {
      if (this.hasPlugin("decorators-legacy")) return true;
      return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
    }
    maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
      if (maybeDecorators) {
        if (classNode.decorators && classNode.decorators.length > 0) {
          if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {
            this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);
          }
          classNode.decorators.unshift(...maybeDecorators);
        } else {
          classNode.decorators = maybeDecorators;
        }
        this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
        if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);
      }
      return classNode;
    }
    canHaveLeadingDecorator() {
      return this.match(80);
    }
    parseDecorators(allowExport) {
      const decorators2 = [];
      do {
        decorators2.push(this.parseDecorator());
      } while (this.match(26));
      if (this.match(82)) {
        if (!allowExport) {
          this.unexpected();
        }
        if (!this.decoratorsEnabledBeforeExport()) {
          this.raise(Errors.DecoratorExportClass, this.state.startLoc);
        }
      } else if (!this.canHaveLeadingDecorator()) {
        throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
      }
      return decorators2;
    }
    parseDecorator() {
      this.expectOnePlugin(["decorators", "decorators-legacy"]);
      const node2 = this.startNode();
      this.next();
      if (this.hasPlugin("decorators")) {
        const startLoc = this.state.startLoc;
        let expr;
        if (this.match(10)) {
          const startLoc2 = this.state.startLoc;
          this.next();
          expr = this.parseExpression();
          this.expect(11);
          expr = this.wrapParenthesis(startLoc2, expr);
          const paramsStartLoc = this.state.startLoc;
          node2.expression = this.parseMaybeDecoratorArguments(expr);
          if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node2.expression !== expr) {
            this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
          }
        } else {
          expr = this.parseIdentifier(false);
          while (this.eat(16)) {
            const node3 = this.startNodeAt(startLoc);
            node3.object = expr;
            if (this.match(138)) {
              this.classScope.usePrivateName(this.state.value, this.state.startLoc);
              node3.property = this.parsePrivateName();
            } else {
              node3.property = this.parseIdentifier(true);
            }
            node3.computed = false;
            expr = this.finishNode(node3, "MemberExpression");
          }
          node2.expression = this.parseMaybeDecoratorArguments(expr);
        }
      } else {
        node2.expression = this.parseExprSubscripts();
      }
      return this.finishNode(node2, "Decorator");
    }
    parseMaybeDecoratorArguments(expr) {
      if (this.eat(10)) {
        const node2 = this.startNodeAtNode(expr);
        node2.callee = expr;
        node2.arguments = this.parseCallExpressionArguments(11, false);
        this.toReferencedList(node2.arguments);
        return this.finishNode(node2, "CallExpression");
      }
      return expr;
    }
    parseBreakContinueStatement(node2, isBreak) {
      this.next();
      if (this.isLineTerminator()) {
        node2.label = null;
      } else {
        node2.label = this.parseIdentifier();
        this.semicolon();
      }
      this.verifyBreakContinue(node2, isBreak);
      return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
    }
    verifyBreakContinue(node2, isBreak) {
      let i;
      for (i = 0; i < this.state.labels.length; ++i) {
        const lab = this.state.labels[i];
        if (node2.label == null || lab.name === node2.label.name) {
          if (lab.kind != null && (isBreak || lab.kind === 1)) {
            break;
          }
          if (node2.label && isBreak) break;
        }
      }
      if (i === this.state.labels.length) {
        const type = isBreak ? "BreakStatement" : "ContinueStatement";
        this.raise(Errors.IllegalBreakContinue, node2, {
          type
        });
      }
    }
    parseDebuggerStatement(node2) {
      this.next();
      this.semicolon();
      return this.finishNode(node2, "DebuggerStatement");
    }
    parseHeaderExpression() {
      this.expect(10);
      const val = this.parseExpression();
      this.expect(11);
      return val;
    }
    parseDoWhileStatement(node2) {
      this.next();
      this.state.labels.push(loopLabel);
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.state.labels.pop();
      this.expect(92);
      node2.test = this.parseHeaderExpression();
      this.eat(13);
      return this.finishNode(node2, "DoWhileStatement");
    }
    parseForStatement(node2) {
      this.next();
      this.state.labels.push(loopLabel);
      let awaitAt = null;
      if (this.isAwaitAllowed() && this.eatContextual(96)) {
        awaitAt = this.state.lastTokStartLoc;
      }
      this.scope.enter(0);
      this.expect(10);
      if (this.match(13)) {
        if (awaitAt !== null) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node2, null);
      }
      const startsWithLet = this.isContextual(100);
      {
        const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();
        const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();
        const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
        if (this.match(74) || this.match(75) || isLetOrUsing) {
          const initNode = this.startNode();
          let kind;
          if (startsWithAwaitUsing) {
            kind = "await using";
            if (!this.isAwaitAllowed()) {
              this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);
            }
            this.next();
          } else {
            kind = this.state.value;
          }
          this.next();
          this.parseVar(initNode, true, kind);
          const init2 = this.finishNode(initNode, "VariableDeclaration");
          const isForIn = this.match(58);
          if (isForIn && starsWithUsingDeclaration) {
            this.raise(Errors.ForInUsing, init2);
          }
          if ((isForIn || this.isContextual(102)) && init2.declarations.length === 1) {
            return this.parseForIn(node2, init2, awaitAt);
          }
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, init2);
        }
      }
      const startsWithAsync = this.isContextual(95);
      const refExpressionErrors = new ExpressionErrors();
      const init = this.parseExpression(true, refExpressionErrors);
      const isForOf = this.isContextual(102);
      if (isForOf) {
        if (startsWithLet) {
          this.raise(Errors.ForOfLet, init);
        }
        if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
          this.raise(Errors.ForOfAsync, init);
        }
      }
      if (isForOf || this.match(58)) {
        this.checkDestructuringPrivate(refExpressionErrors);
        this.toAssignable(init, true);
        const type = isForOf ? "ForOfStatement" : "ForInStatement";
        this.checkLVal(init, {
          in: {
            type
          }
        });
        return this.parseForIn(node2, init, awaitAt);
      } else {
        this.checkExpressionErrors(refExpressionErrors, true);
      }
      if (awaitAt !== null) {
        this.unexpected(awaitAt);
      }
      return this.parseFor(node2, init);
    }
    parseFunctionStatement(node2, isAsync, isHangingDeclaration) {
      this.next();
      return this.parseFunction(node2, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
    }
    parseIfStatement(node2) {
      this.next();
      node2.test = this.parseHeaderExpression();
      node2.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
      node2.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
      return this.finishNode(node2, "IfStatement");
    }
    parseReturnStatement(node2) {
      if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
        this.raise(Errors.IllegalReturn, this.state.startLoc);
      }
      this.next();
      if (this.isLineTerminator()) {
        node2.argument = null;
      } else {
        node2.argument = this.parseExpression();
        this.semicolon();
      }
      return this.finishNode(node2, "ReturnStatement");
    }
    parseSwitchStatement(node2) {
      this.next();
      node2.discriminant = this.parseHeaderExpression();
      const cases = node2.cases = [];
      this.expect(5);
      this.state.labels.push(switchLabel);
      this.scope.enter(0);
      let cur;
      for (let sawDefault; !this.match(8); ) {
        if (this.match(61) || this.match(65)) {
          const isCase = this.match(61);
          if (cur) this.finishNode(cur, "SwitchCase");
          cases.push(cur = this.startNode());
          cur.consequent = [];
          this.next();
          if (isCase) {
            cur.test = this.parseExpression();
          } else {
            if (sawDefault) {
              this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);
            }
            sawDefault = true;
            cur.test = null;
          }
          this.expect(14);
        } else {
          if (cur) {
            cur.consequent.push(this.parseStatementListItem());
          } else {
            this.unexpected();
          }
        }
      }
      this.scope.exit();
      if (cur) this.finishNode(cur, "SwitchCase");
      this.next();
      this.state.labels.pop();
      return this.finishNode(node2, "SwitchStatement");
    }
    parseThrowStatement(node2) {
      this.next();
      if (this.hasPrecedingLineBreak()) {
        this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);
      }
      node2.argument = this.parseExpression();
      this.semicolon();
      return this.finishNode(node2, "ThrowStatement");
    }
    parseCatchClauseParam() {
      const param = this.parseBindingAtom();
      this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);
      this.checkLVal(param, {
        in: {
          type: "CatchClause"
        },
        binding: 9
      });
      return param;
    }
    parseTryStatement(node2) {
      this.next();
      node2.block = this.parseBlock();
      node2.handler = null;
      if (this.match(62)) {
        const clause = this.startNode();
        this.next();
        if (this.match(10)) {
          this.expect(10);
          clause.param = this.parseCatchClauseParam();
          this.expect(11);
        } else {
          clause.param = null;
          this.scope.enter(0);
        }
        clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
        this.scope.exit();
        node2.handler = this.finishNode(clause, "CatchClause");
      }
      node2.finalizer = this.eat(67) ? this.parseBlock() : null;
      if (!node2.handler && !node2.finalizer) {
        this.raise(Errors.NoCatchOrFinally, node2);
      }
      return this.finishNode(node2, "TryStatement");
    }
    parseVarStatement(node2, kind, allowMissingInitializer = false) {
      this.next();
      this.parseVar(node2, false, kind, allowMissingInitializer);
      this.semicolon();
      return this.finishNode(node2, "VariableDeclaration");
    }
    parseWhileStatement(node2) {
      this.next();
      node2.test = this.parseHeaderExpression();
      this.state.labels.push(loopLabel);
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.state.labels.pop();
      return this.finishNode(node2, "WhileStatement");
    }
    parseWithStatement(node2) {
      if (this.state.strict) {
        this.raise(Errors.StrictWith, this.state.startLoc);
      }
      this.next();
      node2.object = this.parseHeaderExpression();
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      return this.finishNode(node2, "WithStatement");
    }
    parseEmptyStatement(node2) {
      this.next();
      return this.finishNode(node2, "EmptyStatement");
    }
    parseLabeledStatement(node2, maybeName, expr, flags) {
      for (const label of this.state.labels) {
        if (label.name === maybeName) {
          this.raise(Errors.LabelRedeclaration, expr, {
            labelName: maybeName
          });
        }
      }
      const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;
      for (let i = this.state.labels.length - 1; i >= 0; i--) {
        const label = this.state.labels[i];
        if (label.statementStart === node2.start) {
          label.statementStart = this.state.start;
          label.kind = kind;
        } else {
          break;
        }
      }
      this.state.labels.push({
        name: maybeName,
        kind,
        statementStart: this.state.start
      });
      node2.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
      this.state.labels.pop();
      node2.label = expr;
      return this.finishNode(node2, "LabeledStatement");
    }
    parseExpressionStatement(node2, expr, decorators2) {
      node2.expression = expr;
      this.semicolon();
      return this.finishNode(node2, "ExpressionStatement");
    }
    parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
      const node2 = this.startNode();
      if (allowDirectives) {
        this.state.strictErrors.clear();
      }
      this.expect(5);
      if (createNewLexicalScope) {
        this.scope.enter(0);
      }
      this.parseBlockBody(node2, allowDirectives, false, 8, afterBlockParse);
      if (createNewLexicalScope) {
        this.scope.exit();
      }
      return this.finishNode(node2, "BlockStatement");
    }
    isValidDirective(stmt) {
      return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
    }
    parseBlockBody(node2, allowDirectives, topLevel, end, afterBlockParse) {
      const body = node2.body = [];
      const directives = node2.directives = [];
      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
    }
    parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
      const oldStrict = this.state.strict;
      let hasStrictModeDirective = false;
      let parsedNonDirective = false;
      while (!this.match(end)) {
        const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
        if (directives && !parsedNonDirective) {
          if (this.isValidDirective(stmt)) {
            const directive = this.stmtToDirective(stmt);
            directives.push(directive);
            if (!hasStrictModeDirective && directive.value.value === "use strict") {
              hasStrictModeDirective = true;
              this.setStrict(true);
            }
            continue;
          }
          parsedNonDirective = true;
          this.state.strictErrors.clear();
        }
        body.push(stmt);
      }
      afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);
      if (!oldStrict) {
        this.setStrict(false);
      }
      this.next();
    }
    parseFor(node2, init) {
      node2.init = init;
      this.semicolon(false);
      node2.test = this.match(13) ? null : this.parseExpression();
      this.semicolon(false);
      node2.update = this.match(11) ? null : this.parseExpression();
      this.expect(11);
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.scope.exit();
      this.state.labels.pop();
      return this.finishNode(node2, "ForStatement");
    }
    parseForIn(node2, init, awaitAt) {
      const isForIn = this.match(58);
      this.next();
      if (isForIn) {
        if (awaitAt !== null) this.unexpected(awaitAt);
      } else {
        node2.await = awaitAt !== null;
      }
      if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
        this.raise(Errors.ForInOfLoopInitializer, init, {
          type: isForIn ? "ForInStatement" : "ForOfStatement"
        });
      }
      if (init.type === "AssignmentPattern") {
        this.raise(Errors.InvalidLhs, init, {
          ancestor: {
            type: "ForStatement"
          }
        });
      }
      node2.left = init;
      node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
      this.expect(11);
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.scope.exit();
      this.state.labels.pop();
      return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
    }
    parseVar(node2, isFor, kind, allowMissingInitializer = false) {
      const declarations = node2.declarations = [];
      node2.kind = kind;
      for (; ; ) {
        const decl = this.startNode();
        this.parseVarId(decl, kind);
        decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
        if (decl.init === null && !allowMissingInitializer) {
          if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(102)))) {
            this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
              kind: "destructuring"
            });
          } else if ((kind === "const" || kind === "using" || kind === "await using") && !(this.match(58) || this.isContextual(102))) {
            this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
              kind
            });
          }
        }
        declarations.push(this.finishNode(decl, "VariableDeclarator"));
        if (!this.eat(12)) break;
      }
      return node2;
    }
    parseVarId(decl, kind) {
      const id = this.parseBindingAtom();
      this.checkLVal(id, {
        in: {
          type: "VariableDeclarator"
        },
        binding: kind === "var" ? 5 : 8201
      });
      decl.id = id;
    }
    parseAsyncFunctionExpression(node2) {
      return this.parseFunction(node2, 8);
    }
    parseFunction(node2, flags = 0) {
      const hangingDeclaration = flags & 2;
      const isDeclaration = !!(flags & 1);
      const requireId = isDeclaration && !(flags & 4);
      const isAsync = !!(flags & 8);
      this.initFunction(node2, isAsync);
      if (this.match(55)) {
        if (hangingDeclaration) {
          this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);
        }
        this.next();
        node2.generator = true;
      }
      if (isDeclaration) {
        node2.id = this.parseFunctionId(requireId);
      }
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      this.state.maybeInArrowParameters = false;
      this.scope.enter(2);
      this.prodParam.enter(functionFlags(isAsync, node2.generator));
      if (!isDeclaration) {
        node2.id = this.parseFunctionId();
      }
      this.parseFunctionParams(node2, false);
      this.withSmartMixTopicForbiddingContext(() => {
        this.parseFunctionBodyAndFinish(node2, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
      });
      this.prodParam.exit();
      this.scope.exit();
      if (isDeclaration && !hangingDeclaration) {
        this.registerFunctionStatementId(node2);
      }
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return node2;
    }
    parseFunctionId(requireId) {
      return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
    }
    parseFunctionParams(node2, isConstructor) {
      this.expect(10);
      this.expressionScope.enter(newParameterDeclarationScope());
      node2.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
      this.expressionScope.exit();
    }
    registerFunctionStatementId(node2) {
      if (!node2.id) return;
      this.scope.declareName(node2.id.name, !this.options.annexB || this.state.strict || node2.generator || node2.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node2.id.loc.start);
    }
    parseClass(node2, isStatement, optionalId) {
      this.next();
      const oldStrict = this.state.strict;
      this.state.strict = true;
      this.parseClassId(node2, isStatement, optionalId);
      this.parseClassSuper(node2);
      node2.body = this.parseClassBody(!!node2.superClass, oldStrict);
      return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
    }
    isClassProperty() {
      return this.match(29) || this.match(13) || this.match(8);
    }
    isClassMethod() {
      return this.match(10);
    }
    isNonstaticConstructor(method) {
      return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
    }
    parseClassBody(hadSuperClass, oldStrict) {
      this.classScope.enter();
      const state2 = {
        hadConstructor: false,
        hadSuperClass
      };
      let decorators2 = [];
      const classBody = this.startNode();
      classBody.body = [];
      this.expect(5);
      this.withSmartMixTopicForbiddingContext(() => {
        while (!this.match(8)) {
          if (this.eat(13)) {
            if (decorators2.length > 0) {
              throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
            }
            continue;
          }
          if (this.match(26)) {
            decorators2.push(this.parseDecorator());
            continue;
          }
          const member = this.startNode();
          if (decorators2.length) {
            member.decorators = decorators2;
            this.resetStartLocationFromNode(member, decorators2[0]);
            decorators2 = [];
          }
          this.parseClassMember(classBody, member, state2);
          if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
            this.raise(Errors.DecoratorConstructor, member);
          }
        }
      });
      this.state.strict = oldStrict;
      this.next();
      if (decorators2.length) {
        throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
      }
      this.classScope.exit();
      return this.finishNode(classBody, "ClassBody");
    }
    parseClassMemberFromModifier(classBody, member) {
      const key2 = this.parseIdentifier(true);
      if (this.isClassMethod()) {
        const method = member;
        method.kind = "method";
        method.computed = false;
        method.key = key2;
        method.static = false;
        this.pushClassMethod(classBody, method, false, false, false, false);
        return true;
      } else if (this.isClassProperty()) {
        const prop = member;
        prop.computed = false;
        prop.key = key2;
        prop.static = false;
        classBody.body.push(this.parseClassProperty(prop));
        return true;
      }
      this.resetPreviousNodeTrailingComments(key2);
      return false;
    }
    parseClassMember(classBody, member, state2) {
      const isStatic = this.isContextual(106);
      if (isStatic) {
        if (this.parseClassMemberFromModifier(classBody, member)) {
          return;
        }
        if (this.eat(5)) {
          this.parseClassStaticBlock(classBody, member);
          return;
        }
      }
      this.parseClassMemberWithIsStatic(classBody, member, state2, isStatic);
    }
    parseClassMemberWithIsStatic(classBody, member, state2, isStatic) {
      const publicMethod = member;
      const privateMethod = member;
      const publicProp = member;
      const privateProp = member;
      const accessorProp = member;
      const method = publicMethod;
      const publicMember = publicMethod;
      member.static = isStatic;
      this.parsePropertyNamePrefixOperator(member);
      if (this.eat(55)) {
        method.kind = "method";
        const isPrivateName = this.match(138);
        this.parseClassElementName(method);
        if (isPrivateName) {
          this.pushClassPrivateMethod(classBody, privateMethod, true, false);
          return;
        }
        if (this.isNonstaticConstructor(publicMethod)) {
          this.raise(Errors.ConstructorIsGenerator, publicMethod.key);
        }
        this.pushClassMethod(classBody, publicMethod, true, false, false, false);
        return;
      }
      const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
      const isPrivate = this.match(138);
      const key2 = this.parseClassElementName(member);
      const maybeQuestionTokenStartLoc = this.state.startLoc;
      this.parsePostMemberNameModifiers(publicMember);
      if (this.isClassMethod()) {
        method.kind = "method";
        if (isPrivate) {
          this.pushClassPrivateMethod(classBody, privateMethod, false, false);
          return;
        }
        const isConstructor = this.isNonstaticConstructor(publicMethod);
        let allowsDirectSuper = false;
        if (isConstructor) {
          publicMethod.kind = "constructor";
          if (state2.hadConstructor && !this.hasPlugin("typescript")) {
            this.raise(Errors.DuplicateConstructor, key2);
          }
          if (isConstructor && this.hasPlugin("typescript") && member.override) {
            this.raise(Errors.OverrideOnConstructor, key2);
          }
          state2.hadConstructor = true;
          allowsDirectSuper = state2.hadSuperClass;
        }
        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
      } else if (this.isClassProperty()) {
        if (isPrivate) {
          this.pushClassPrivateProperty(classBody, privateProp);
        } else {
          this.pushClassProperty(classBody, publicProp);
        }
      } else if (isContextual && key2.name === "async" && !this.isLineTerminator()) {
        this.resetPreviousNodeTrailingComments(key2);
        const isGenerator = this.eat(55);
        if (publicMember.optional) {
          this.unexpected(maybeQuestionTokenStartLoc);
        }
        method.kind = "method";
        const isPrivate2 = this.match(138);
        this.parseClassElementName(method);
        this.parsePostMemberNameModifiers(publicMember);
        if (isPrivate2) {
          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
        } else {
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(Errors.ConstructorIsAsync, publicMethod.key);
          }
          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
        }
      } else if (isContextual && (key2.name === "get" || key2.name === "set") && !(this.match(55) && this.isLineTerminator())) {
        this.resetPreviousNodeTrailingComments(key2);
        method.kind = key2.name;
        const isPrivate2 = this.match(138);
        this.parseClassElementName(publicMethod);
        if (isPrivate2) {
          this.pushClassPrivateMethod(classBody, privateMethod, false, false);
        } else {
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(Errors.ConstructorIsAccessor, publicMethod.key);
          }
          this.pushClassMethod(classBody, publicMethod, false, false, false, false);
        }
        this.checkGetterSetterParams(publicMethod);
      } else if (isContextual && key2.name === "accessor" && !this.isLineTerminator()) {
        this.expectPlugin("decoratorAutoAccessors");
        this.resetPreviousNodeTrailingComments(key2);
        const isPrivate2 = this.match(138);
        this.parseClassElementName(publicProp);
        this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
      } else if (this.isLineTerminator()) {
        if (isPrivate) {
          this.pushClassPrivateProperty(classBody, privateProp);
        } else {
          this.pushClassProperty(classBody, publicProp);
        }
      } else {
        this.unexpected();
      }
    }
    parseClassElementName(member) {
      const {
        type,
        value: value2
      } = this.state;
      if ((type === 132 || type === 133) && member.static && value2 === "prototype") {
        this.raise(Errors.StaticPrototype, this.state.startLoc);
      }
      if (type === 138) {
        if (value2 === "constructor") {
          this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
        }
        const key2 = this.parsePrivateName();
        member.key = key2;
        return key2;
      }
      return this.parsePropertyName(member);
    }
    parseClassStaticBlock(classBody, member) {
      var _member$decorators;
      this.scope.enter(64 | 128 | 16);
      const oldLabels = this.state.labels;
      this.state.labels = [];
      this.prodParam.enter(0);
      const body = member.body = [];
      this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
      this.prodParam.exit();
      this.scope.exit();
      this.state.labels = oldLabels;
      classBody.body.push(this.finishNode(member, "StaticBlock"));
      if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
        this.raise(Errors.DecoratorStaticBlock, member);
      }
    }
    pushClassProperty(classBody, prop) {
      if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
        this.raise(Errors.ConstructorClassField, prop.key);
      }
      classBody.body.push(this.parseClassProperty(prop));
    }
    pushClassPrivateProperty(classBody, prop) {
      const node2 = this.parseClassPrivateProperty(prop);
      classBody.body.push(node2);
      this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), 0, node2.key.loc.start);
    }
    pushClassAccessorProperty(classBody, prop, isPrivate) {
      if (!isPrivate && !prop.computed) {
        const key2 = prop.key;
        if (key2.name === "constructor" || key2.value === "constructor") {
          this.raise(Errors.ConstructorClassField, key2);
        }
      }
      const node2 = this.parseClassAccessorProperty(prop);
      classBody.body.push(node2);
      if (isPrivate) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), 0, node2.key.loc.start);
      }
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      const node2 = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
      classBody.body.push(node2);
      const kind = node2.kind === "get" ? node2.static ? 6 : 2 : node2.kind === "set" ? node2.static ? 5 : 1 : 0;
      this.declareClassPrivateMethodInScope(node2, kind);
    }
    declareClassPrivateMethodInScope(node2, kind) {
      this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), kind, node2.key.loc.start);
    }
    parsePostMemberNameModifiers(methodOrProp) {
    }
    parseClassPrivateProperty(node2) {
      this.parseInitializer(node2);
      this.semicolon();
      return this.finishNode(node2, "ClassPrivateProperty");
    }
    parseClassProperty(node2) {
      this.parseInitializer(node2);
      this.semicolon();
      return this.finishNode(node2, "ClassProperty");
    }
    parseClassAccessorProperty(node2) {
      this.parseInitializer(node2);
      this.semicolon();
      return this.finishNode(node2, "ClassAccessorProperty");
    }
    parseInitializer(node2) {
      this.scope.enter(64 | 16);
      this.expressionScope.enter(newExpressionScope());
      this.prodParam.enter(0);
      node2.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
      this.expressionScope.exit();
      this.prodParam.exit();
      this.scope.exit();
    }
    parseClassId(node2, isStatement, optionalId, bindingType = 8331) {
      if (tokenIsIdentifier(this.state.type)) {
        node2.id = this.parseIdentifier();
        if (isStatement) {
          this.declareNameFromIdentifier(node2.id, bindingType);
        }
      } else {
        if (optionalId || !isStatement) {
          node2.id = null;
        } else {
          throw this.raise(Errors.MissingClassName, this.state.startLoc);
        }
      }
    }
    parseClassSuper(node2) {
      node2.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
    }
    parseExport(node2, decorators2) {
      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node2, true);
      const hasDefault = this.maybeParseExportDefaultSpecifier(node2, maybeDefaultIdentifier);
      const parseAfterDefault = !hasDefault || this.eat(12);
      const hasStar = parseAfterDefault && this.eatExportStar(node2);
      const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node2);
      const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
      const isFromRequired = hasDefault || hasStar;
      if (hasStar && !hasNamespace) {
        if (hasDefault) this.unexpected();
        if (decorators2) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node2);
        }
        this.parseExportFrom(node2, true);
        return this.finishNode(node2, "ExportAllDeclaration");
      }
      const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node2);
      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {
        this.unexpected(null, 5);
      }
      if (hasNamespace && parseAfterNamespace) {
        this.unexpected(null, 98);
      }
      let hasDeclaration;
      if (isFromRequired || hasSpecifiers) {
        hasDeclaration = false;
        if (decorators2) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node2);
        }
        this.parseExportFrom(node2, isFromRequired);
      } else {
        hasDeclaration = this.maybeParseExportDeclaration(node2);
      }
      if (isFromRequired || hasSpecifiers || hasDeclaration) {
        var _node2$declaration;
        const node22 = node2;
        this.checkExport(node22, true, false, !!node22.source);
        if (((_node2$declaration = node22.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
          this.maybeTakeDecorators(decorators2, node22.declaration, node22);
        } else if (decorators2) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node2);
        }
        return this.finishNode(node22, "ExportNamedDeclaration");
      }
      if (this.eat(65)) {
        const node22 = node2;
        const decl = this.parseExportDefaultExpression();
        node22.declaration = decl;
        if (decl.type === "ClassDeclaration") {
          this.maybeTakeDecorators(decorators2, decl, node22);
        } else if (decorators2) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node2);
        }
        this.checkExport(node22, true, true);
        return this.finishNode(node22, "ExportDefaultDeclaration");
      }
      this.unexpected(null, 5);
    }
    eatExportStar(node2) {
      return this.eat(55);
    }
    maybeParseExportDefaultSpecifier(node2, maybeDefaultIdentifier) {
      if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
        this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
        const id = maybeDefaultIdentifier || this.parseIdentifier(true);
        const specifier = this.startNodeAtNode(id);
        specifier.exported = id;
        node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
        return true;
      }
      return false;
    }
    maybeParseExportNamespaceSpecifier(node2) {
      if (this.isContextual(93)) {
        if (!node2.specifiers) node2.specifiers = [];
        const specifier = this.startNodeAt(this.state.lastTokStartLoc);
        this.next();
        specifier.exported = this.parseModuleExportName();
        node2.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
        return true;
      }
      return false;
    }
    maybeParseExportNamedSpecifiers(node2) {
      if (this.match(5)) {
        if (!node2.specifiers) node2.specifiers = [];
        const isTypeExport = node2.exportKind === "type";
        node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
        node2.source = null;
        node2.declaration = null;
        if (this.hasPlugin("importAssertions")) {
          node2.assertions = [];
        }
        return true;
      }
      return false;
    }
    maybeParseExportDeclaration(node2) {
      if (this.shouldParseExportDeclaration()) {
        node2.specifiers = [];
        node2.source = null;
        if (this.hasPlugin("importAssertions")) {
          node2.assertions = [];
        }
        node2.declaration = this.parseExportDeclaration(node2);
        return true;
      }
      return false;
    }
    isAsyncFunction() {
      if (!this.isContextual(95)) return false;
      const next = this.nextTokenInLineStart();
      return this.isUnparsedContextual(next, "function");
    }
    parseExportDefaultExpression() {
      const expr = this.startNode();
      if (this.match(68)) {
        this.next();
        return this.parseFunction(expr, 1 | 4);
      } else if (this.isAsyncFunction()) {
        this.next();
        this.next();
        return this.parseFunction(expr, 1 | 4 | 8);
      }
      if (this.match(80)) {
        return this.parseClass(expr, true, true);
      }
      if (this.match(26)) {
        if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
        }
        return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
      }
      if (this.match(75) || this.match(74) || this.isLet()) {
        throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
      }
      const res = this.parseMaybeAssignAllowIn();
      this.semicolon();
      return res;
    }
    parseExportDeclaration(node2) {
      if (this.match(80)) {
        const node3 = this.parseClass(this.startNode(), true, false);
        return node3;
      }
      return this.parseStatementListItem();
    }
    isExportDefaultSpecifier() {
      const {
        type
      } = this.state;
      if (tokenIsIdentifier(type)) {
        if (type === 95 && !this.state.containsEsc || type === 100) {
          return false;
        }
        if ((type === 130 || type === 129) && !this.state.containsEsc) {
          const {
            type: nextType
          } = this.lookahead();
          if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {
            this.expectOnePlugin(["flow", "typescript"]);
            return false;
          }
        }
      } else if (!this.match(65)) {
        return false;
      }
      const next = this.nextTokenStart();
      const hasFrom = this.isUnparsedContextual(next, "from");
      if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
        return true;
      }
      if (this.match(65) && hasFrom) {
        const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
        return nextAfterFrom === 34 || nextAfterFrom === 39;
      }
      return false;
    }
    parseExportFrom(node2, expect2) {
      if (this.eatContextual(98)) {
        node2.source = this.parseImportSource();
        this.checkExport(node2);
        this.maybeParseImportAttributes(node2);
        this.checkJSONModuleImport(node2);
      } else if (expect2) {
        this.unexpected();
      }
      this.semicolon();
    }
    shouldParseExportDeclaration() {
      const {
        type
      } = this.state;
      if (type === 26) {
        this.expectOnePlugin(["decorators", "decorators-legacy"]);
        if (this.hasPlugin("decorators")) {
          if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
            this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
          }
          return true;
        }
      }
      return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
    }
    checkExport(node2, checkNames, isDefault, isFrom) {
      if (checkNames) {
        var _node$specifiers;
        if (isDefault) {
          this.checkDuplicateExports(node2, "default");
          if (this.hasPlugin("exportDefaultFrom")) {
            var _declaration$extra;
            const declaration = node2.declaration;
            if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
              this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
            }
          }
        } else if ((_node$specifiers = node2.specifiers) != null && _node$specifiers.length) {
          for (const specifier of node2.specifiers) {
            const {
              exported
            } = specifier;
            const exportName = exported.type === "Identifier" ? exported.name : exported.value;
            this.checkDuplicateExports(specifier, exportName);
            if (!isFrom && specifier.local) {
              const {
                local
              } = specifier;
              if (local.type !== "Identifier") {
                this.raise(Errors.ExportBindingIsString, specifier, {
                  localName: local.value,
                  exportName
                });
              } else {
                this.checkReservedWord(local.name, local.loc.start, true, false);
                this.scope.checkLocalExport(local);
              }
            }
          }
        } else if (node2.declaration) {
          if (node2.declaration.type === "FunctionDeclaration" || node2.declaration.type === "ClassDeclaration") {
            const id = node2.declaration.id;
            if (!id) throw new Error("Assertion failure");
            this.checkDuplicateExports(node2, id.name);
          } else if (node2.declaration.type === "VariableDeclaration") {
            for (const declaration of node2.declaration.declarations) {
              this.checkDeclaration(declaration.id);
            }
          }
        }
      }
    }
    checkDeclaration(node2) {
      if (node2.type === "Identifier") {
        this.checkDuplicateExports(node2, node2.name);
      } else if (node2.type === "ObjectPattern") {
        for (const prop of node2.properties) {
          this.checkDeclaration(prop);
        }
      } else if (node2.type === "ArrayPattern") {
        for (const elem of node2.elements) {
          if (elem) {
            this.checkDeclaration(elem);
          }
        }
      } else if (node2.type === "ObjectProperty") {
        this.checkDeclaration(node2.value);
      } else if (node2.type === "RestElement") {
        this.checkDeclaration(node2.argument);
      } else if (node2.type === "AssignmentPattern") {
        this.checkDeclaration(node2.left);
      }
    }
    checkDuplicateExports(node2, exportName) {
      if (this.exportedIdentifiers.has(exportName)) {
        if (exportName === "default") {
          this.raise(Errors.DuplicateDefaultExport, node2);
        } else {
          this.raise(Errors.DuplicateExport, node2, {
            exportName
          });
        }
      }
      this.exportedIdentifiers.add(exportName);
    }
    parseExportSpecifiers(isInTypeExport) {
      const nodes = [];
      let first = true;
      this.expect(5);
      while (!this.eat(8)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.eat(8)) break;
        }
        const isMaybeTypeOnly = this.isContextual(130);
        const isString2 = this.match(133);
        const node2 = this.startNode();
        node2.local = this.parseModuleExportName();
        nodes.push(this.parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly));
      }
      return nodes;
    }
    parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly) {
      if (this.eatContextual(93)) {
        node2.exported = this.parseModuleExportName();
      } else if (isString2) {
        node2.exported = cloneStringLiteral(node2.local);
      } else if (!node2.exported) {
        node2.exported = cloneIdentifier(node2.local);
      }
      return this.finishNode(node2, "ExportSpecifier");
    }
    parseModuleExportName() {
      if (this.match(133)) {
        const result = this.parseStringLiteral(this.state.value);
        const surrogate = result.value.match(loneSurrogate);
        if (surrogate) {
          this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {
            surrogateCharCode: surrogate[0].charCodeAt(0)
          });
        }
        return result;
      }
      return this.parseIdentifier(true);
    }
    isJSONModuleImport(node2) {
      if (node2.assertions != null) {
        return node2.assertions.some(({
          key: key2,
          value: value2
        }) => {
          return value2.value === "json" && (key2.type === "Identifier" ? key2.name === "type" : key2.value === "type");
        });
      }
      return false;
    }
    checkImportReflection(node2) {
      const {
        specifiers
      } = node2;
      const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
      if (node2.phase === "source") {
        if (singleBindingType !== "ImportDefaultSpecifier") {
          this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
        }
      } else if (node2.phase === "defer") {
        if (singleBindingType !== "ImportNamespaceSpecifier") {
          this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
        }
      } else if (node2.module) {
        var _node$assertions;
        if (singleBindingType !== "ImportDefaultSpecifier") {
          this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);
        }
        if (((_node$assertions = node2.assertions) == null ? void 0 : _node$assertions.length) > 0) {
          this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
        }
      }
    }
    checkJSONModuleImport(node2) {
      if (this.isJSONModuleImport(node2) && node2.type !== "ExportAllDeclaration") {
        const {
          specifiers
        } = node2;
        if (specifiers != null) {
          const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
            let imported;
            if (specifier.type === "ExportSpecifier") {
              imported = specifier.local;
            } else if (specifier.type === "ImportSpecifier") {
              imported = specifier.imported;
            }
            if (imported !== void 0) {
              return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
            }
          });
          if (nonDefaultNamedSpecifier !== void 0) {
            this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
          }
        }
      }
    }
    isPotentialImportPhase(isExport) {
      if (isExport) return false;
      return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
    }
    applyImportPhase(node2, isExport, phase, loc) {
      if (isExport) {
        return;
      }
      if (phase === "module") {
        this.expectPlugin("importReflection", loc);
        node2.module = true;
      } else if (this.hasPlugin("importReflection")) {
        node2.module = false;
      }
      if (phase === "source") {
        this.expectPlugin("sourcePhaseImports", loc);
        node2.phase = "source";
      } else if (phase === "defer") {
        this.expectPlugin("deferredImportEvaluation", loc);
        node2.phase = "defer";
      } else if (this.hasPlugin("sourcePhaseImports")) {
        node2.phase = null;
      }
    }
    parseMaybeImportPhase(node2, isExport) {
      if (!this.isPotentialImportPhase(isExport)) {
        this.applyImportPhase(node2, isExport, null);
        return null;
      }
      const phaseIdentifier = this.parseIdentifier(true);
      const {
        type
      } = this.state;
      const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
      if (isImportPhase) {
        this.resetPreviousIdentifierLeadingComments(phaseIdentifier);
        this.applyImportPhase(node2, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);
        return null;
      } else {
        this.applyImportPhase(node2, isExport, null);
        return phaseIdentifier;
      }
    }
    isPrecedingIdImportPhase(phase) {
      const {
        type
      } = this.state;
      return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
    }
    parseImport(node2) {
      if (this.match(133)) {
        return this.parseImportSourceAndAttributes(node2);
      }
      return this.parseImportSpecifiersAndAfter(node2, this.parseMaybeImportPhase(node2, false));
    }
    parseImportSpecifiersAndAfter(node2, maybeDefaultIdentifier) {
      node2.specifiers = [];
      const hasDefault = this.maybeParseDefaultImportSpecifier(node2, maybeDefaultIdentifier);
      const parseNext = !hasDefault || this.eat(12);
      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node2);
      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node2);
      this.expectContextual(98);
      return this.parseImportSourceAndAttributes(node2);
    }
    parseImportSourceAndAttributes(node2) {
      var _node$specifiers2;
      (_node$specifiers2 = node2.specifiers) != null ? _node$specifiers2 : node2.specifiers = [];
      node2.source = this.parseImportSource();
      this.maybeParseImportAttributes(node2);
      this.checkImportReflection(node2);
      this.checkJSONModuleImport(node2);
      this.semicolon();
      return this.finishNode(node2, "ImportDeclaration");
    }
    parseImportSource() {
      if (!this.match(133)) this.unexpected();
      return this.parseExprAtom();
    }
    parseImportSpecifierLocal(node2, specifier, type) {
      specifier.local = this.parseIdentifier();
      node2.specifiers.push(this.finishImportSpecifier(specifier, type));
    }
    finishImportSpecifier(specifier, type, bindingType = 8201) {
      this.checkLVal(specifier.local, {
        in: {
          type
        },
        binding: bindingType
      });
      return this.finishNode(specifier, type);
    }
    parseImportAttributes() {
      this.expect(5);
      const attrs = [];
      const attrNames = /* @__PURE__ */ new Set();
      do {
        if (this.match(8)) {
          break;
        }
        const node2 = this.startNode();
        const keyName = this.state.value;
        if (attrNames.has(keyName)) {
          this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {
            key: keyName
          });
        }
        attrNames.add(keyName);
        if (this.match(133)) {
          node2.key = this.parseStringLiteral(keyName);
        } else {
          node2.key = this.parseIdentifier(true);
        }
        this.expect(14);
        if (!this.match(133)) {
          throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
        }
        node2.value = this.parseStringLiteral(this.state.value);
        attrs.push(this.finishNode(node2, "ImportAttribute"));
      } while (this.eat(12));
      this.expect(8);
      return attrs;
    }
    parseModuleAttributes() {
      const attrs = [];
      const attributes = /* @__PURE__ */ new Set();
      do {
        const node2 = this.startNode();
        node2.key = this.parseIdentifier(true);
        if (node2.key.name !== "type") {
          this.raise(Errors.ModuleAttributeDifferentFromType, node2.key);
        }
        if (attributes.has(node2.key.name)) {
          this.raise(Errors.ModuleAttributesWithDuplicateKeys, node2.key, {
            key: node2.key.name
          });
        }
        attributes.add(node2.key.name);
        this.expect(14);
        if (!this.match(133)) {
          throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
        }
        node2.value = this.parseStringLiteral(this.state.value);
        attrs.push(this.finishNode(node2, "ImportAttribute"));
      } while (this.eat(12));
      return attrs;
    }
    maybeParseImportAttributes(node2) {
      let attributes;
      let useWith = false;
      if (this.match(76)) {
        if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {
          return;
        }
        this.next();
        {
          if (this.hasPlugin("moduleAttributes")) {
            attributes = this.parseModuleAttributes();
          } else {
            this.expectImportAttributesPlugin();
            attributes = this.parseImportAttributes();
          }
        }
        useWith = true;
      } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
        if (this.hasPlugin("importAttributes")) {
          if (this.getPluginOption("importAttributes", "deprecatedAssertSyntax") !== true) {
            this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);
          }
          this.addExtra(node2, "deprecatedAssertSyntax", true);
        } else {
          this.expectOnePlugin(["importAttributes", "importAssertions"]);
        }
        this.next();
        attributes = this.parseImportAttributes();
      } else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
        attributes = [];
      } else {
        if (this.hasPlugin("moduleAttributes")) {
          attributes = [];
        } else return;
      }
      if (!useWith && this.hasPlugin("importAssertions")) {
        node2.assertions = attributes;
      } else {
        node2.attributes = attributes;
      }
    }
    maybeParseDefaultImportSpecifier(node2, maybeDefaultIdentifier) {
      if (maybeDefaultIdentifier) {
        const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
        specifier.local = maybeDefaultIdentifier;
        node2.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
        return true;
      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
        this.parseImportSpecifierLocal(node2, this.startNode(), "ImportDefaultSpecifier");
        return true;
      }
      return false;
    }
    maybeParseStarImportSpecifier(node2) {
      if (this.match(55)) {
        const specifier = this.startNode();
        this.next();
        this.expectContextual(93);
        this.parseImportSpecifierLocal(node2, specifier, "ImportNamespaceSpecifier");
        return true;
      }
      return false;
    }
    parseNamedImportSpecifiers(node2) {
      let first = true;
      this.expect(5);
      while (!this.eat(8)) {
        if (first) {
          first = false;
        } else {
          if (this.eat(14)) {
            throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
          }
          this.expect(12);
          if (this.eat(8)) break;
        }
        const specifier = this.startNode();
        const importedIsString = this.match(133);
        const isMaybeTypeOnly = this.isContextual(130);
        specifier.imported = this.parseModuleExportName();
        const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node2.importKind === "type" || node2.importKind === "typeof", isMaybeTypeOnly, void 0);
        node2.specifiers.push(importSpecifier);
      }
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      if (this.eatContextual(93)) {
        specifier.local = this.parseIdentifier();
      } else {
        const {
          imported
        } = specifier;
        if (importedIsString) {
          throw this.raise(Errors.ImportBindingIsString, specifier, {
            importName: imported.value
          });
        }
        this.checkReservedWord(imported.name, specifier.loc.start, true, true);
        if (!specifier.local) {
          specifier.local = cloneIdentifier(imported);
        }
      }
      return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
    }
    isThisParam(param) {
      return param.type === "Identifier" && param.name === "this";
    }
  }
  class Parser extends StatementParser {
    constructor(options2, input2) {
      options2 = getOptions(options2);
      super(options2, input2);
      this.options = options2;
      this.initializeScopes();
      this.plugins = pluginsMap(this.options.plugins);
      this.filename = options2.sourceFilename;
    }
    getScopeHandler() {
      return ScopeHandler;
    }
    parse() {
      this.enterInitialScopes();
      const file2 = this.startNode();
      const program = this.startNode();
      this.nextToken();
      file2.errors = null;
      this.parseTopLevel(file2, program);
      file2.errors = this.state.errors;
      file2.comments.length = this.state.commentsLen;
      return file2;
    }
  }
  function pluginsMap(plugins2) {
    const pluginMap = /* @__PURE__ */ new Map();
    for (const plugin2 of plugins2) {
      const [name, options2] = Array.isArray(plugin2) ? plugin2 : [plugin2, {}];
      if (!pluginMap.has(name)) pluginMap.set(name, options2 || {});
    }
    return pluginMap;
  }
  function parse3(input2, options2) {
    var _options;
    if (((_options = options2) == null ? void 0 : _options.sourceType) === "unambiguous") {
      options2 = Object.assign({}, options2);
      try {
        options2.sourceType = "module";
        const parser2 = getParser(options2, input2);
        const ast = parser2.parse();
        if (parser2.sawUnambiguousESM) {
          return ast;
        }
        if (parser2.ambiguousScriptDifferentAst) {
          try {
            options2.sourceType = "script";
            return getParser(options2, input2).parse();
          } catch (_unused) {
          }
        } else {
          ast.program.sourceType = "script";
        }
        return ast;
      } catch (moduleError) {
        try {
          options2.sourceType = "script";
          return getParser(options2, input2).parse();
        } catch (_unused2) {
        }
        throw moduleError;
      }
    } else {
      return getParser(options2, input2).parse();
    }
  }
  function parseExpression(input2, options2) {
    const parser2 = getParser(options2, input2);
    if (parser2.options.strictMode) {
      parser2.state.strict = true;
    }
    return parser2.getExpression();
  }
  function generateExportedTokenTypes(internalTokenTypes) {
    const tokenTypes2 = {};
    for (const typeName of Object.keys(internalTokenTypes)) {
      tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
    }
    return tokenTypes2;
  }
  const tokTypes = generateExportedTokenTypes(tt);
  function getParser(options2, input2) {
    let cls = Parser;
    if (options2 != null && options2.plugins) {
      validatePlugins(options2.plugins);
      cls = getParserClass(options2.plugins);
    }
    return new cls(options2, input2);
  }
  const parserClassCache = {};
  function getParserClass(pluginsFromOptions) {
    const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name));
    const key2 = pluginList.join("/");
    let cls = parserClassCache[key2];
    if (!cls) {
      cls = Parser;
      for (const plugin2 of pluginList) {
        cls = mixinPlugins[plugin2](cls);
      }
      parserClassCache[key2] = cls;
    }
    return cls;
  }
  lib$F.parse = parse3;
  lib$F.parseExpression = parseExpression;
  lib$F.tokTypes = tokTypes;
  return lib$F;
}
var lib$E = {};
var hasRequiredLib$H;
function requireLib$H() {
  if (hasRequiredLib$H) return lib$E;
  hasRequiredLib$H = 1;
  Object.defineProperty(lib$E, "__esModule", {
    value: true
  });
  lib$E.default = hoistVariables;
  var _t = requireLib$O();
  const {
    assignmentExpression,
    expressionStatement,
    identifier: identifier2
  } = _t;
  const visitor = {
    Scope(path2, state2) {
      if (state2.kind === "let") path2.skip();
    },
    FunctionParent(path2) {
      path2.skip();
    },
    VariableDeclaration(path2, state2) {
      if (state2.kind && path2.node.kind !== state2.kind) return;
      const nodes = [];
      const declarations = path2.get("declarations");
      let firstId;
      for (const declar of declarations) {
        firstId = declar.node.id;
        if (declar.node.init) {
          nodes.push(expressionStatement(assignmentExpression("=", declar.node.id, declar.node.init)));
        }
        for (const name of Object.keys(declar.getBindingIdentifiers())) {
          state2.emit(identifier2(name), name, declar.node.init !== null);
        }
      }
      if (path2.parentPath.isFor({
        left: path2.node
      })) {
        path2.replaceWith(firstId);
      } else {
        path2.replaceWithMultiple(nodes);
      }
    }
  };
  function hoistVariables(path2, emit, kind = "var") {
    path2.traverse(visitor, {
      kind,
      emit
    });
  }
  return lib$E;
}
var hasRequiredReplacement;
function requireReplacement() {
  if (hasRequiredReplacement) return replacement;
  hasRequiredReplacement = 1;
  Object.defineProperty(replacement, "__esModule", {
    value: true
  });
  replacement._replaceWith = _replaceWith;
  replacement.replaceExpressionWithStatements = replaceExpressionWithStatements;
  replacement.replaceInline = replaceInline;
  replacement.replaceWith = replaceWith;
  replacement.replaceWithMultiple = replaceWithMultiple;
  replacement.replaceWithSourceString = replaceWithSourceString;
  var _codeFrame2 = requireLib$J();
  var _index = requireLib$E();
  var _index2 = requirePath();
  var _cache = requireCache();
  var _parser = requireLib$I();
  var _t = requireLib$O();
  var _helperHoistVariables = requireLib$H();
  const {
    FUNCTION_TYPES,
    arrowFunctionExpression,
    assignmentExpression,
    awaitExpression,
    blockStatement,
    buildUndefinedNode,
    callExpression,
    cloneNode: cloneNode2,
    conditionalExpression,
    expressionStatement,
    getBindingIdentifiers: getBindingIdentifiers2,
    identifier: identifier2,
    inheritLeadingComments: inheritLeadingComments2,
    inheritTrailingComments: inheritTrailingComments2,
    inheritsComments: inheritsComments2,
    isBlockStatement,
    isEmptyStatement,
    isExpression,
    isExpressionStatement,
    isIfStatement,
    isProgram,
    isStatement,
    isVariableDeclaration,
    removeComments: removeComments2,
    returnStatement,
    sequenceExpression,
    validate: validate2,
    yieldExpression
  } = _t;
  function replaceWithMultiple(nodes) {
    var _getCachedPaths;
    this.resync();
    nodes = this._verifyNodeList(nodes);
    inheritLeadingComments2(nodes[0], this.node);
    inheritTrailingComments2(nodes[nodes.length - 1], this.node);
    (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths.delete(this.node);
    this.node = this.container[this.key] = null;
    const paths = this.insertAfter(nodes);
    if (this.node) {
      this.requeue();
    } else {
      this.remove();
    }
    return paths;
  }
  function replaceWithSourceString(replacement2) {
    this.resync();
    let ast;
    try {
      replacement2 = `(${replacement2})`;
      ast = (0, _parser.parse)(replacement2);
    } catch (err) {
      const loc = err.loc;
      if (loc) {
        err.message += " - make sure this is an expression.\n" + (0, _codeFrame2.codeFrameColumns)(replacement2, {
          start: {
            line: loc.line,
            column: loc.column + 1
          }
        });
        err.code = "BABEL_REPLACE_SOURCE_ERROR";
      }
      throw err;
    }
    const expressionAST = ast.program.body[0].expression;
    _index.default.removeProperties(expressionAST);
    return this.replaceWith(expressionAST);
  }
  function replaceWith(replacementPath) {
    this.resync();
    if (this.removed) {
      throw new Error("You can't replace this node, we've already removed it");
    }
    let replacement2 = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
    if (!replacement2) {
      throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
    }
    if (this.node === replacement2) {
      return [this];
    }
    if (this.isProgram() && !isProgram(replacement2)) {
      throw new Error("You can only replace a Program root node with another Program node");
    }
    if (Array.isArray(replacement2)) {
      throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
    }
    if (typeof replacement2 === "string") {
      throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
    }
    let nodePath = "";
    if (this.isNodeType("Statement") && isExpression(replacement2)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement2) && !this.parentPath.isExportDefaultDeclaration()) {
        replacement2 = expressionStatement(replacement2);
        nodePath = "expression";
      }
    }
    if (this.isNodeType("Expression") && isStatement(replacement2)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement2)) {
        return this.replaceExpressionWithStatements([replacement2]);
      }
    }
    const oldNode = this.node;
    if (oldNode) {
      inheritsComments2(replacement2, oldNode);
      removeComments2(oldNode);
    }
    this._replaceWith(replacement2);
    this.type = replacement2.type;
    this.setScope();
    this.requeue();
    return [nodePath ? this.get(nodePath) : this];
  }
  function _replaceWith(node2) {
    var _getCachedPaths2;
    if (!this.container) {
      throw new ReferenceError("Container is falsy");
    }
    if (this.inList) {
      validate2(this.parent, this.key, [node2]);
    } else {
      validate2(this.parent, this.key, node2);
    }
    this.debug(`Replace with ${node2 == null ? void 0 : node2.type}`);
    (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths2.set(node2, this).delete(this.node);
    this.node = this.container[this.key] = node2;
  }
  function replaceExpressionWithStatements(nodes) {
    this.resync();
    const declars = [];
    const nodesAsSingleExpression = gatherSequenceExpressions2(nodes, declars);
    if (nodesAsSingleExpression) {
      for (const id of declars) this.scope.push({
        id
      });
      return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
    }
    const functionParent = this.getFunctionParent();
    const isParentAsync = functionParent == null ? void 0 : functionParent.is("async");
    const isParentGenerator = functionParent == null ? void 0 : functionParent.is("generator");
    const container = arrowFunctionExpression([], blockStatement(nodes));
    this.replaceWith(callExpression(container, []));
    const callee = this.get("callee");
    (0, _helperHoistVariables.default)(callee.get("body"), (id) => {
      this.scope.push({
        id
      });
    }, "var");
    const completionRecords = this.get("callee").getCompletionRecords();
    for (const path2 of completionRecords) {
      if (!path2.isExpressionStatement()) continue;
      const loop = path2.findParent((path3) => path3.isLoop());
      if (loop) {
        let uid = loop.getData("expressionReplacementReturnUid");
        if (!uid) {
          uid = callee.scope.generateDeclaredUidIdentifier("ret");
          callee.get("body").pushContainer("body", returnStatement(cloneNode2(uid)));
          loop.setData("expressionReplacementReturnUid", uid);
        } else {
          uid = identifier2(uid.name);
        }
        path2.get("expression").replaceWith(assignmentExpression("=", cloneNode2(uid), path2.node.expression));
      } else {
        path2.replaceWith(returnStatement(path2.node.expression));
      }
    }
    callee.arrowFunctionToExpression();
    const newCallee = callee;
    const needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES);
    const needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
    if (needToAwaitFunction) {
      newCallee.set("async", true);
      if (!needToYieldFunction) {
        this.replaceWith(awaitExpression(this.node));
      }
    }
    if (needToYieldFunction) {
      newCallee.set("generator", true);
      this.replaceWith(yieldExpression(this.node, true));
    }
    return newCallee.get("body.body");
  }
  function gatherSequenceExpressions2(nodes, declars) {
    const exprs = [];
    let ensureLastUndefined = true;
    for (const node2 of nodes) {
      if (!isEmptyStatement(node2)) {
        ensureLastUndefined = false;
      }
      if (isExpression(node2)) {
        exprs.push(node2);
      } else if (isExpressionStatement(node2)) {
        exprs.push(node2.expression);
      } else if (isVariableDeclaration(node2)) {
        if (node2.kind !== "var") return;
        for (const declar of node2.declarations) {
          const bindings = getBindingIdentifiers2(declar);
          for (const key2 of Object.keys(bindings)) {
            declars.push(cloneNode2(bindings[key2]));
          }
          if (declar.init) {
            exprs.push(assignmentExpression("=", declar.id, declar.init));
          }
        }
        ensureLastUndefined = true;
      } else if (isIfStatement(node2)) {
        const consequent = node2.consequent ? gatherSequenceExpressions2([node2.consequent], declars) : buildUndefinedNode();
        const alternate = node2.alternate ? gatherSequenceExpressions2([node2.alternate], declars) : buildUndefinedNode();
        if (!consequent || !alternate) return;
        exprs.push(conditionalExpression(node2.test, consequent, alternate));
      } else if (isBlockStatement(node2)) {
        const body = gatherSequenceExpressions2(node2.body, declars);
        if (!body) return;
        exprs.push(body);
      } else if (isEmptyStatement(node2)) {
        if (nodes.indexOf(node2) === 0) {
          ensureLastUndefined = true;
        }
      } else {
        return;
      }
    }
    if (ensureLastUndefined) exprs.push(buildUndefinedNode());
    if (exprs.length === 1) {
      return exprs[0];
    } else {
      return sequenceExpression(exprs);
    }
  }
  function replaceInline(nodes) {
    this.resync();
    if (Array.isArray(nodes)) {
      if (Array.isArray(this.container)) {
        nodes = this._verifyNodeList(nodes);
        const paths = this._containerInsertAfter(nodes);
        this.remove();
        return paths;
      } else {
        return this.replaceWithMultiple(nodes);
      }
    } else {
      return this.replaceWith(nodes);
    }
  }
  return replacement;
}
var evaluation = {};
var hasRequiredEvaluation;
function requireEvaluation() {
  if (hasRequiredEvaluation) return evaluation;
  hasRequiredEvaluation = 1;
  Object.defineProperty(evaluation, "__esModule", {
    value: true
  });
  evaluation.evaluate = evaluate;
  evaluation.evaluateTruthy = evaluateTruthy;
  const VALID_OBJECT_CALLEES = ["Number", "String", "Math"];
  const VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null];
  const INVALID_METHODS = ["random"];
  function isValidObjectCallee(val) {
    return VALID_OBJECT_CALLEES.includes(val);
  }
  function isValidIdentifierCallee(val) {
    return VALID_IDENTIFIER_CALLEES.includes(val);
  }
  function isInvalidMethod(val) {
    return INVALID_METHODS.includes(val);
  }
  function evaluateTruthy() {
    const res = this.evaluate();
    if (res.confident) return !!res.value;
  }
  function deopt(path2, state2) {
    if (!state2.confident) return;
    state2.deoptPath = path2;
    state2.confident = false;
  }
  const Globals = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", Infinity], ["NaN", NaN]]);
  function evaluateCached(path2, state2) {
    const {
      node: node2
    } = path2;
    const {
      seen
    } = state2;
    if (seen.has(node2)) {
      const existing = seen.get(node2);
      if (existing.resolved) {
        return existing.value;
      } else {
        deopt(path2, state2);
        return;
      }
    } else {
      const item2 = {
        resolved: false
      };
      seen.set(node2, item2);
      const val = _evaluate(path2, state2);
      if (state2.confident) {
        item2.resolved = true;
        item2.value = val;
      }
      return val;
    }
  }
  function _evaluate(path2, state2) {
    if (!state2.confident) return;
    if (path2.isSequenceExpression()) {
      const exprs = path2.get("expressions");
      return evaluateCached(exprs[exprs.length - 1], state2);
    }
    if (path2.isStringLiteral() || path2.isNumericLiteral() || path2.isBooleanLiteral()) {
      return path2.node.value;
    }
    if (path2.isNullLiteral()) {
      return null;
    }
    if (path2.isTemplateLiteral()) {
      return evaluateQuasis(path2, path2.node.quasis, state2);
    }
    if (path2.isTaggedTemplateExpression() && path2.get("tag").isMemberExpression()) {
      const object = path2.get("tag.object");
      const {
        node: {
          name
        }
      } = object;
      const property = path2.get("tag.property");
      if (object.isIdentifier() && name === "String" && !path2.scope.getBinding(name) && property.isIdentifier() && property.node.name === "raw") {
        return evaluateQuasis(path2, path2.node.quasi.quasis, state2, true);
      }
    }
    if (path2.isConditionalExpression()) {
      const testResult = evaluateCached(path2.get("test"), state2);
      if (!state2.confident) return;
      if (testResult) {
        return evaluateCached(path2.get("consequent"), state2);
      } else {
        return evaluateCached(path2.get("alternate"), state2);
      }
    }
    if (path2.isExpressionWrapper()) {
      return evaluateCached(path2.get("expression"), state2);
    }
    if (path2.isMemberExpression() && !path2.parentPath.isCallExpression({
      callee: path2.node
    })) {
      const property = path2.get("property");
      const object = path2.get("object");
      if (object.isLiteral()) {
        const value2 = object.node.value;
        const type = typeof value2;
        let key2 = null;
        if (path2.node.computed) {
          key2 = evaluateCached(property, state2);
          if (!state2.confident) return;
        } else if (property.isIdentifier()) {
          key2 = property.node.name;
        }
        if ((type === "number" || type === "string") && key2 != null && (typeof key2 === "number" || typeof key2 === "string")) {
          return value2[key2];
        }
      }
    }
    if (path2.isReferencedIdentifier()) {
      const binding2 = path2.scope.getBinding(path2.node.name);
      if (binding2) {
        if (binding2.constantViolations.length > 0 || path2.node.start < binding2.path.node.end) {
          deopt(binding2.path, state2);
          return;
        }
        if (binding2.hasValue) {
          return binding2.value;
        }
      }
      const name = path2.node.name;
      if (Globals.has(name)) {
        if (!binding2) {
          return Globals.get(name);
        }
        deopt(binding2.path, state2);
        return;
      }
      const resolved = path2.resolve();
      if (resolved === path2) {
        deopt(path2, state2);
        return;
      } else {
        return evaluateCached(resolved, state2);
      }
    }
    if (path2.isUnaryExpression({
      prefix: true
    })) {
      if (path2.node.operator === "void") {
        return void 0;
      }
      const argument = path2.get("argument");
      if (path2.node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
        return "function";
      }
      const arg = evaluateCached(argument, state2);
      if (!state2.confident) return;
      switch (path2.node.operator) {
        case "!":
          return !arg;
        case "+":
          return +arg;
        case "-":
          return -arg;
        case "~":
          return ~arg;
        case "typeof":
          return typeof arg;
      }
    }
    if (path2.isArrayExpression()) {
      const arr = [];
      const elems = path2.get("elements");
      for (const elem of elems) {
        const elemValue = elem.evaluate();
        if (elemValue.confident) {
          arr.push(elemValue.value);
        } else {
          deopt(elemValue.deopt, state2);
          return;
        }
      }
      return arr;
    }
    if (path2.isObjectExpression()) {
      const obj = {};
      const props = path2.get("properties");
      for (const prop of props) {
        if (prop.isObjectMethod() || prop.isSpreadElement()) {
          deopt(prop, state2);
          return;
        }
        const keyPath = prop.get("key");
        let key2;
        if (prop.node.computed) {
          key2 = keyPath.evaluate();
          if (!key2.confident) {
            deopt(key2.deopt, state2);
            return;
          }
          key2 = key2.value;
        } else if (keyPath.isIdentifier()) {
          key2 = keyPath.node.name;
        } else {
          key2 = keyPath.node.value;
        }
        const valuePath = prop.get("value");
        let value2 = valuePath.evaluate();
        if (!value2.confident) {
          deopt(value2.deopt, state2);
          return;
        }
        value2 = value2.value;
        obj[key2] = value2;
      }
      return obj;
    }
    if (path2.isLogicalExpression()) {
      const wasConfident = state2.confident;
      const left = evaluateCached(path2.get("left"), state2);
      const leftConfident = state2.confident;
      state2.confident = wasConfident;
      const right = evaluateCached(path2.get("right"), state2);
      const rightConfident = state2.confident;
      switch (path2.node.operator) {
        case "||":
          state2.confident = leftConfident && (!!left || rightConfident);
          if (!state2.confident) return;
          return left || right;
        case "&&":
          state2.confident = leftConfident && (!left || rightConfident);
          if (!state2.confident) return;
          return left && right;
        case "??":
          state2.confident = leftConfident && (left != null || rightConfident);
          if (!state2.confident) return;
          return left != null ? left : right;
      }
    }
    if (path2.isBinaryExpression()) {
      const left = evaluateCached(path2.get("left"), state2);
      if (!state2.confident) return;
      const right = evaluateCached(path2.get("right"), state2);
      if (!state2.confident) return;
      switch (path2.node.operator) {
        case "-":
          return left - right;
        case "+":
          return left + right;
        case "/":
          return left / right;
        case "*":
          return left * right;
        case "%":
          return left % right;
        case "**":
          return Math.pow(left, right);
        case "<":
          return left < right;
        case ">":
          return left > right;
        case "<=":
          return left <= right;
        case ">=":
          return left >= right;
        case "==":
          return left == right;
        case "!=":
          return left != right;
        case "===":
          return left === right;
        case "!==":
          return left !== right;
        case "|":
          return left | right;
        case "&":
          return left & right;
        case "^":
          return left ^ right;
        case "<<":
          return left << right;
        case ">>":
          return left >> right;
        case ">>>":
          return left >>> right;
      }
    }
    if (path2.isCallExpression()) {
      const callee = path2.get("callee");
      let context2;
      let func;
      if (callee.isIdentifier() && !path2.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || isValidIdentifierCallee(callee.node.name))) {
        func = commonjsGlobal[callee.node.name];
      }
      if (callee.isMemberExpression()) {
        const object = callee.get("object");
        const property = callee.get("property");
        if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !isInvalidMethod(property.node.name)) {
          context2 = commonjsGlobal[object.node.name];
          const key2 = property.node.name;
          if (hasOwnProperty.call(context2, key2)) {
            func = context2[key2];
          }
        }
        if (object.isLiteral() && property.isIdentifier()) {
          const type = typeof object.node.value;
          if (type === "string" || type === "number") {
            context2 = object.node.value;
            func = context2[property.node.name];
          }
        }
      }
      if (func) {
        const args = path2.get("arguments").map((arg) => evaluateCached(arg, state2));
        if (!state2.confident) return;
        return func.apply(context2, args);
      }
    }
    deopt(path2, state2);
  }
  function evaluateQuasis(path2, quasis, state2, raw = false) {
    let str = "";
    let i = 0;
    const exprs = path2.isTemplateLiteral() ? path2.get("expressions") : path2.get("quasi.expressions");
    for (const elem of quasis) {
      if (!state2.confident) break;
      str += raw ? elem.value.raw : elem.value.cooked;
      const expr = exprs[i++];
      if (expr) str += String(evaluateCached(expr, state2));
    }
    if (!state2.confident) return;
    return str;
  }
  function evaluate() {
    const state2 = {
      confident: true,
      deoptPath: null,
      seen: /* @__PURE__ */ new Map()
    };
    let value2 = evaluateCached(this, state2);
    if (!state2.confident) value2 = void 0;
    return {
      confident: state2.confident,
      deopt: state2.deoptPath,
      value: value2
    };
  }
  return evaluation;
}
var conversion = {};
var lib$D = {};
var lib$C = {};
var formatters = {};
var hasRequiredFormatters;
function requireFormatters() {
  if (hasRequiredFormatters) return formatters;
  hasRequiredFormatters = 1;
  Object.defineProperty(formatters, "__esModule", {
    value: true
  });
  formatters.statements = formatters.statement = formatters.smart = formatters.program = formatters.expression = void 0;
  var _t = requireLib$O();
  const {
    assertExpressionStatement
  } = _t;
  function makeStatementFormatter(fn2) {
    return {
      code: (str) => `/* @babel/template */;
${str}`,
      validate: () => {
      },
      unwrap: (ast) => {
        return fn2(ast.program.body.slice(1));
      }
    };
  }
  formatters.smart = makeStatementFormatter((body) => {
    if (body.length > 1) {
      return body;
    } else {
      return body[0];
    }
  });
  formatters.statements = makeStatementFormatter((body) => body);
  formatters.statement = makeStatementFormatter((body) => {
    if (body.length === 0) {
      throw new Error("Found nothing to return.");
    }
    if (body.length > 1) {
      throw new Error("Found multiple statements but wanted one");
    }
    return body[0];
  });
  const expression = formatters.expression = {
    code: (str) => `(
${str}
)`,
    validate: (ast) => {
      if (ast.program.body.length > 1) {
        throw new Error("Found multiple statements but wanted one");
      }
      if (expression.unwrap(ast).start === 0) {
        throw new Error("Parse result included parens.");
      }
    },
    unwrap: ({
      program
    }) => {
      const [stmt] = program.body;
      assertExpressionStatement(stmt);
      return stmt.expression;
    }
  };
  formatters.program = {
    code: (str) => str,
    validate: () => {
    },
    unwrap: (ast) => ast.program
  };
  return formatters;
}
var builder = {};
var options$2 = {};
var hasRequiredOptions$2;
function requireOptions$2() {
  if (hasRequiredOptions$2) return options$2;
  hasRequiredOptions$2 = 1;
  Object.defineProperty(options$2, "__esModule", {
    value: true
  });
  options$2.merge = merge;
  options$2.normalizeReplacements = normalizeReplacements;
  options$2.validate = validate2;
  const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
  function _objectWithoutPropertiesLoose(source2, excluded) {
    if (source2 == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key2, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key2 = sourceKeys[i];
      if (excluded.indexOf(key2) >= 0) continue;
      target[key2] = source2[key2];
    }
    return target;
  }
  function merge(a, b) {
    const {
      placeholderWhitelist = a.placeholderWhitelist,
      placeholderPattern = a.placeholderPattern,
      preserveComments = a.preserveComments,
      syntacticPlaceholders = a.syntacticPlaceholders
    } = b;
    return {
      parser: Object.assign({}, a.parser, b.parser),
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
    };
  }
  function validate2(opts) {
    if (opts != null && typeof opts !== "object") {
      throw new Error("Unknown template options.");
    }
    const _ref = opts || {}, {
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
    } = _ref, parser2 = _objectWithoutPropertiesLoose(_ref, _excluded);
    if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {
      throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
    }
    if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) {
      throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
    }
    if (preserveComments != null && typeof preserveComments !== "boolean") {
      throw new Error("'.preserveComments' must be a boolean, null, or undefined");
    }
    if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== "boolean") {
      throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
    }
    if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) {
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    }
    return {
      parser: parser2,
      placeholderWhitelist: placeholderWhitelist || void 0,
      placeholderPattern: placeholderPattern == null ? void 0 : placeholderPattern,
      preserveComments: preserveComments == null ? void 0 : preserveComments,
      syntacticPlaceholders: syntacticPlaceholders == null ? void 0 : syntacticPlaceholders
    };
  }
  function normalizeReplacements(replacements) {
    if (Array.isArray(replacements)) {
      return replacements.reduce((acc, replacement2, i) => {
        acc["$" + i] = replacement2;
        return acc;
      }, {});
    } else if (typeof replacements === "object" || replacements == null) {
      return replacements || void 0;
    }
    throw new Error("Template replacements must be an array, object, null, or undefined");
  }
  return options$2;
}
var string$1 = {};
var parse$3 = {};
var hasRequiredParse$2;
function requireParse$2() {
  if (hasRequiredParse$2) return parse$3;
  hasRequiredParse$2 = 1;
  Object.defineProperty(parse$3, "__esModule", {
    value: true
  });
  parse$3.default = parseAndBuildMetadata;
  var _t = requireLib$O();
  var _parser = requireLib$I();
  var _codeFrame2 = requireLib$J();
  const {
    isCallExpression,
    isExpressionStatement,
    isFunction,
    isIdentifier,
    isJSXIdentifier,
    isNewExpression,
    isPlaceholder,
    isStatement,
    isStringLiteral,
    removePropertiesDeep: removePropertiesDeep2,
    traverse: traverse2
  } = _t;
  const PATTERN = /^[_$A-Z0-9]+$/;
  function parseAndBuildMetadata(formatter, code, opts) {
    const {
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
    } = opts;
    const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);
    removePropertiesDeep2(ast, {
      preserveComments
    });
    formatter.validate(ast);
    const state2 = {
      syntactic: {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      },
      legacy: {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      },
      placeholderWhitelist,
      placeholderPattern,
      syntacticPlaceholders
    };
    traverse2(ast, placeholderVisitorHandler, state2);
    return Object.assign({
      ast
    }, state2.syntactic.placeholders.length ? state2.syntactic : state2.legacy);
  }
  function placeholderVisitorHandler(node2, ancestors, state2) {
    var _state$placeholderWhi;
    let name;
    let hasSyntacticPlaceholders = state2.syntactic.placeholders.length > 0;
    if (isPlaceholder(node2)) {
      if (state2.syntacticPlaceholders === false) {
        throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
      }
      name = node2.name.name;
      hasSyntacticPlaceholders = true;
    } else if (hasSyntacticPlaceholders || state2.syntacticPlaceholders) {
      return;
    } else if (isIdentifier(node2) || isJSXIdentifier(node2)) {
      name = node2.name;
    } else if (isStringLiteral(node2)) {
      name = node2.value;
    } else {
      return;
    }
    if (hasSyntacticPlaceholders && (state2.placeholderPattern != null || state2.placeholderWhitelist != null)) {
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    }
    if (!hasSyntacticPlaceholders && (state2.placeholderPattern === false || !(state2.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state2.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) {
      return;
    }
    ancestors = ancestors.slice();
    const {
      node: parent,
      key: key2
    } = ancestors[ancestors.length - 1];
    let type;
    if (isStringLiteral(node2) || isPlaceholder(node2, {
      expectedNode: "StringLiteral"
    })) {
      type = "string";
    } else if (isNewExpression(parent) && key2 === "arguments" || isCallExpression(parent) && key2 === "arguments" || isFunction(parent) && key2 === "params") {
      type = "param";
    } else if (isExpressionStatement(parent) && !isPlaceholder(node2)) {
      type = "statement";
      ancestors = ancestors.slice(0, -1);
    } else if (isStatement(node2) && isPlaceholder(node2)) {
      type = "statement";
    } else {
      type = "other";
    }
    const {
      placeholders: placeholders2,
      placeholderNames
    } = !hasSyntacticPlaceholders ? state2.legacy : state2.syntactic;
    placeholders2.push({
      name,
      type,
      resolve: (ast) => resolveAncestors(ast, ancestors),
      isDuplicate: placeholderNames.has(name)
    });
    placeholderNames.add(name);
  }
  function resolveAncestors(ast, ancestors) {
    let parent = ast;
    for (let i = 0; i < ancestors.length - 1; i++) {
      const {
        key: key3,
        index: index3
      } = ancestors[i];
      if (index3 === void 0) {
        parent = parent[key3];
      } else {
        parent = parent[key3][index3];
      }
    }
    const {
      key: key2,
      index: index2
    } = ancestors[ancestors.length - 1];
    return {
      parent,
      key: key2,
      index: index2
    };
  }
  function parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {
    const plugins2 = (parserOpts.plugins || []).slice();
    if (syntacticPlaceholders !== false) {
      plugins2.push("placeholders");
    }
    parserOpts = Object.assign({
      allowReturnOutsideFunction: true,
      allowSuperOutsideMethod: true,
      sourceType: "module"
    }, parserOpts, {
      plugins: plugins2
    });
    try {
      return (0, _parser.parse)(code, parserOpts);
    } catch (err) {
      const loc = err.loc;
      if (loc) {
        err.message += "\n" + (0, _codeFrame2.codeFrameColumns)(code, {
          start: loc
        });
        err.code = "BABEL_TEMPLATE_PARSE_ERROR";
      }
      throw err;
    }
  }
  return parse$3;
}
var populate = {};
var hasRequiredPopulate;
function requirePopulate() {
  if (hasRequiredPopulate) return populate;
  hasRequiredPopulate = 1;
  Object.defineProperty(populate, "__esModule", {
    value: true
  });
  populate.default = populatePlaceholders;
  var _t = requireLib$O();
  const {
    blockStatement,
    cloneNode: cloneNode2,
    emptyStatement,
    expressionStatement,
    identifier: identifier2,
    isStatement,
    isStringLiteral,
    stringLiteral,
    validate: validate2
  } = _t;
  function populatePlaceholders(metadata, replacements) {
    const ast = cloneNode2(metadata.ast);
    if (replacements) {
      metadata.placeholders.forEach((placeholder2) => {
        if (!hasOwnProperty.call(replacements, placeholder2.name)) {
          const placeholderName = placeholder2.name;
          throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
        }
      });
      Object.keys(replacements).forEach((key2) => {
        if (!metadata.placeholderNames.has(key2)) {
          throw new Error(`Unknown substitution "${key2}" given`);
        }
      });
    }
    metadata.placeholders.slice().reverse().forEach((placeholder2) => {
      try {
        applyReplacement(placeholder2, ast, replacements && replacements[placeholder2.name] || null);
      } catch (e) {
        e.message = `@babel/template placeholder "${placeholder2.name}": ${e.message}`;
        throw e;
      }
    });
    return ast;
  }
  function applyReplacement(placeholder2, ast, replacement2) {
    if (placeholder2.isDuplicate) {
      if (Array.isArray(replacement2)) {
        replacement2 = replacement2.map((node2) => cloneNode2(node2));
      } else if (typeof replacement2 === "object") {
        replacement2 = cloneNode2(replacement2);
      }
    }
    const {
      parent,
      key: key2,
      index: index2
    } = placeholder2.resolve(ast);
    if (placeholder2.type === "string") {
      if (typeof replacement2 === "string") {
        replacement2 = stringLiteral(replacement2);
      }
      if (!replacement2 || !isStringLiteral(replacement2)) {
        throw new Error("Expected string substitution");
      }
    } else if (placeholder2.type === "statement") {
      if (index2 === void 0) {
        if (!replacement2) {
          replacement2 = emptyStatement();
        } else if (Array.isArray(replacement2)) {
          replacement2 = blockStatement(replacement2);
        } else if (typeof replacement2 === "string") {
          replacement2 = expressionStatement(identifier2(replacement2));
        } else if (!isStatement(replacement2)) {
          replacement2 = expressionStatement(replacement2);
        }
      } else {
        if (replacement2 && !Array.isArray(replacement2)) {
          if (typeof replacement2 === "string") {
            replacement2 = identifier2(replacement2);
          }
          if (!isStatement(replacement2)) {
            replacement2 = expressionStatement(replacement2);
          }
        }
      }
    } else if (placeholder2.type === "param") {
      if (typeof replacement2 === "string") {
        replacement2 = identifier2(replacement2);
      }
      if (index2 === void 0) throw new Error("Assertion failure.");
    } else {
      if (typeof replacement2 === "string") {
        replacement2 = identifier2(replacement2);
      }
      if (Array.isArray(replacement2)) {
        throw new Error("Cannot replace single expression with an array.");
      }
    }
    if (index2 === void 0) {
      validate2(parent, key2, replacement2);
      parent[key2] = replacement2;
    } else {
      const items = parent[key2].slice();
      if (placeholder2.type === "statement" || placeholder2.type === "param") {
        if (replacement2 == null) {
          items.splice(index2, 1);
        } else if (Array.isArray(replacement2)) {
          items.splice(index2, 1, ...replacement2);
        } else {
          items[index2] = replacement2;
        }
      } else {
        items[index2] = replacement2;
      }
      validate2(parent, key2, items);
      parent[key2] = items;
    }
  }
  return populate;
}
var hasRequiredString$1;
function requireString$1() {
  if (hasRequiredString$1) return string$1;
  hasRequiredString$1 = 1;
  Object.defineProperty(string$1, "__esModule", {
    value: true
  });
  string$1.default = stringTemplate;
  var _options = requireOptions$2();
  var _parse = requireParse$2();
  var _populate = requirePopulate();
  function stringTemplate(formatter, code, opts) {
    code = formatter.code(code);
    let metadata;
    return (arg) => {
      const replacements = (0, _options.normalizeReplacements)(arg);
      if (!metadata) metadata = (0, _parse.default)(formatter, code, opts);
      return formatter.unwrap((0, _populate.default)(metadata, replacements));
    };
  }
  return string$1;
}
var literal$1 = {};
var hasRequiredLiteral;
function requireLiteral() {
  if (hasRequiredLiteral) return literal$1;
  hasRequiredLiteral = 1;
  Object.defineProperty(literal$1, "__esModule", {
    value: true
  });
  literal$1.default = literalTemplate;
  var _options = requireOptions$2();
  var _parse = requireParse$2();
  var _populate = requirePopulate();
  function literalTemplate(formatter, tpl, opts) {
    const {
      metadata,
      names
    } = buildLiteralData(formatter, tpl, opts);
    return (arg) => {
      const defaultReplacements = {};
      arg.forEach((replacement2, i) => {
        defaultReplacements[names[i]] = replacement2;
      });
      return (arg2) => {
        const replacements = (0, _options.normalizeReplacements)(arg2);
        if (replacements) {
          Object.keys(replacements).forEach((key2) => {
            if (hasOwnProperty.call(defaultReplacements, key2)) {
              throw new Error("Unexpected replacement overlap.");
            }
          });
        }
        return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
      };
    };
  }
  function buildLiteralData(formatter, tpl, opts) {
    let prefix = "BABEL_TPL$";
    const raw = tpl.join("");
    do {
      prefix = "$$" + prefix;
    } while (raw.includes(prefix));
    const {
      names,
      code
    } = buildTemplateCode(tpl, prefix);
    const metadata = (0, _parse.default)(formatter, formatter.code(code), {
      parser: opts.parser,
      placeholderWhitelist: new Set(names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),
      placeholderPattern: opts.placeholderPattern,
      preserveComments: opts.preserveComments,
      syntacticPlaceholders: opts.syntacticPlaceholders
    });
    return {
      metadata,
      names
    };
  }
  function buildTemplateCode(tpl, prefix) {
    const names = [];
    let code = tpl[0];
    for (let i = 1; i < tpl.length; i++) {
      const value2 = `${prefix}${i - 1}`;
      names.push(value2);
      code += value2 + tpl[i];
    }
    return {
      names,
      code
    };
  }
  return literal$1;
}
var hasRequiredBuilder;
function requireBuilder() {
  if (hasRequiredBuilder) return builder;
  hasRequiredBuilder = 1;
  Object.defineProperty(builder, "__esModule", {
    value: true
  });
  builder.default = createTemplateBuilder;
  var _options = requireOptions$2();
  var _string = requireString$1();
  var _literal = requireLiteral();
  const NO_PLACEHOLDER = (0, _options.validate)({
    placeholderPattern: false
  });
  function createTemplateBuilder(formatter, defaultOpts) {
    const templateFnCache = /* @__PURE__ */ new WeakMap();
    const templateAstCache = /* @__PURE__ */ new WeakMap();
    const cachedOpts = defaultOpts || (0, _options.validate)(null);
    return Object.assign((tpl, ...args) => {
      if (typeof tpl === "string") {
        if (args.length > 1) throw new Error("Unexpected extra params.");
        return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
      } else if (Array.isArray(tpl)) {
        let builder2 = templateFnCache.get(tpl);
        if (!builder2) {
          builder2 = (0, _literal.default)(formatter, tpl, cachedOpts);
          templateFnCache.set(tpl, builder2);
        }
        return extendedTrace(builder2(args));
      } else if (typeof tpl === "object" && tpl) {
        if (args.length > 0) throw new Error("Unexpected extra params.");
        return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
      }
      throw new Error(`Unexpected template param ${typeof tpl}`);
    }, {
      ast: (tpl, ...args) => {
        if (typeof tpl === "string") {
          if (args.length > 1) throw new Error("Unexpected extra params.");
          return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
        } else if (Array.isArray(tpl)) {
          let builder2 = templateAstCache.get(tpl);
          if (!builder2) {
            builder2 = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER));
            templateAstCache.set(tpl, builder2);
          }
          return builder2(args)();
        }
        throw new Error(`Unexpected template param ${typeof tpl}`);
      }
    });
  }
  function extendedTrace(fn2) {
    let rootStack = "";
    try {
      throw new Error();
    } catch (error2) {
      if (error2.stack) {
        rootStack = error2.stack.split("\n").slice(3).join("\n");
      }
    }
    return (arg) => {
      try {
        return fn2(arg);
      } catch (err) {
        err.stack += `
    =============
${rootStack}`;
        throw err;
      }
    };
  }
  return builder;
}
var hasRequiredLib$G;
function requireLib$G() {
  if (hasRequiredLib$G) return lib$C;
  hasRequiredLib$G = 1;
  Object.defineProperty(lib$C, "__esModule", {
    value: true
  });
  lib$C.statements = lib$C.statement = lib$C.smart = lib$C.program = lib$C.expression = lib$C.default = void 0;
  var formatters2 = requireFormatters();
  var _builder = requireBuilder();
  const smart = lib$C.smart = (0, _builder.default)(formatters2.smart);
  const statement = lib$C.statement = (0, _builder.default)(formatters2.statement);
  const statements2 = lib$C.statements = (0, _builder.default)(formatters2.statements);
  const expression = lib$C.expression = (0, _builder.default)(formatters2.expression);
  const program = lib$C.program = (0, _builder.default)(formatters2.program);
  lib$C.default = Object.assign(smart.bind(void 0), {
    smart,
    statement,
    statements: statements2,
    expression,
    program,
    ast: smart.ast
  });
  return lib$C;
}
var hasRequiredLib$F;
function requireLib$F() {
  if (hasRequiredLib$F) return lib$D;
  hasRequiredLib$F = 1;
  Object.defineProperty(lib$D, "__esModule", {
    value: true
  });
  lib$D.default = _default2;
  var _template = requireLib$G();
  var _t = requireLib$O();
  const {
    NOT_LOCAL_BINDING,
    cloneNode: cloneNode2,
    identifier: identifier2,
    isAssignmentExpression,
    isAssignmentPattern,
    isFunction,
    isIdentifier,
    isLiteral,
    isNullLiteral,
    isObjectMethod,
    isObjectProperty,
    isRegExpLiteral,
    isRestElement,
    isTemplateLiteral,
    isVariableDeclarator,
    toBindingIdentifierName: toBindingIdentifierName2
  } = _t;
  function getFunctionArity(node2) {
    const count = node2.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
    return count === -1 ? node2.params.length : count;
  }
  const buildPropertyMethodAssignmentWrapper = _template.default.statement(`
  (function (FUNCTION_KEY) {
    function FUNCTION_ID() {
      return FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    }

    return FUNCTION_ID;
  })(FUNCTION)
`);
  const buildGeneratorPropertyMethodAssignmentWrapper = _template.default.statement(`
  (function (FUNCTION_KEY) {
    function* FUNCTION_ID() {
      return yield* FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    };

    return FUNCTION_ID;
  })(FUNCTION)
`);
  const visitor = {
    "ReferencedIdentifier|BindingIdentifier"(path2, state2) {
      if (path2.node.name !== state2.name) return;
      const localDeclar = path2.scope.getBindingIdentifier(state2.name);
      if (localDeclar !== state2.outerDeclar) return;
      state2.selfReference = true;
      path2.stop();
    }
  };
  function getNameFromLiteralId(id) {
    if (isNullLiteral(id)) {
      return "null";
    }
    if (isRegExpLiteral(id)) {
      return `_${id.pattern}_${id.flags}`;
    }
    if (isTemplateLiteral(id)) {
      return id.quasis.map((quasi) => quasi.value.raw).join("");
    }
    if (id.value !== void 0) {
      return id.value + "";
    }
    return "";
  }
  function wrap(state2, method, id, scope2) {
    if (state2.selfReference) {
      if (scope2.hasBinding(id.name) && !scope2.hasGlobal(id.name)) {
        scope2.rename(id.name);
      } else {
        if (!isFunction(method)) return;
        let build2 = buildPropertyMethodAssignmentWrapper;
        if (method.generator) {
          build2 = buildGeneratorPropertyMethodAssignmentWrapper;
        }
        const template2 = build2({
          FUNCTION: method,
          FUNCTION_ID: id,
          FUNCTION_KEY: scope2.generateUidIdentifier(id.name)
        }).expression;
        const params = template2.callee.body.body[0].params;
        for (let i = 0, len = getFunctionArity(method); i < len; i++) {
          params.push(scope2.generateUidIdentifier("x"));
        }
        return template2;
      }
    }
    method.id = id;
    scope2.getProgramParent().references[id.name] = true;
  }
  function visit(node2, name, scope2) {
    const state2 = {
      selfAssignment: false,
      selfReference: false,
      outerDeclar: scope2.getBindingIdentifier(name),
      name
    };
    const binding2 = scope2.getOwnBinding(name);
    if (binding2) {
      if (binding2.kind === "param") {
        state2.selfReference = true;
      }
    } else if (state2.outerDeclar || scope2.hasGlobal(name)) {
      scope2.traverse(node2, visitor, state2);
    }
    return state2;
  }
  function _default2({
    node: node2,
    parent,
    scope: scope2,
    id
  }, localBinding = false, supportUnicodeId = false) {
    if (node2.id) return;
    if ((isObjectProperty(parent) || isObjectMethod(parent, {
      kind: "method"
    })) && (!parent.computed || isLiteral(parent.key))) {
      id = parent.key;
    } else if (isVariableDeclarator(parent)) {
      id = parent.id;
      if (isIdentifier(id) && !localBinding) {
        const binding2 = scope2.parent.getBinding(id.name);
        if (binding2 && binding2.constant && scope2.getBinding(id.name) === binding2) {
          node2.id = cloneNode2(id);
          node2.id[NOT_LOCAL_BINDING] = true;
          return;
        }
      }
    } else if (isAssignmentExpression(parent, {
      operator: "="
    })) {
      id = parent.left;
    } else if (!id) {
      return;
    }
    let name;
    if (id && isLiteral(id)) {
      name = getNameFromLiteralId(id);
    } else if (id && isIdentifier(id)) {
      name = id.name;
    }
    if (name === void 0) {
      return;
    }
    if (!supportUnicodeId && isFunction(node2) && /[\uD800-\uDFFF]/.test(name)) {
      return;
    }
    name = toBindingIdentifierName2(name);
    const newId = identifier2(name);
    newId[NOT_LOCAL_BINDING] = true;
    const state2 = visit(node2, name, scope2);
    return wrap(state2, node2, newId, scope2) || node2;
  }
  return lib$D;
}
var hasRequiredConversion;
function requireConversion() {
  if (hasRequiredConversion) return conversion;
  hasRequiredConversion = 1;
  Object.defineProperty(conversion, "__esModule", {
    value: true
  });
  conversion.arrowFunctionToExpression = arrowFunctionToExpression;
  conversion.ensureBlock = ensureBlock2;
  conversion.toComputedKey = toComputedKey2;
  conversion.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
  var _t = requireLib$O();
  var _helperEnvironmentVisitor = requireLib$M();
  var _helperFunctionName = requireLib$F();
  var _visitors = requireVisitors();
  const {
    arrowFunctionExpression,
    assignmentExpression,
    binaryExpression,
    blockStatement,
    callExpression,
    conditionalExpression,
    expressionStatement,
    identifier: identifier2,
    isIdentifier,
    jsxIdentifier,
    logicalExpression,
    LOGICAL_OPERATORS,
    memberExpression,
    metaProperty,
    numericLiteral,
    objectExpression,
    restElement,
    returnStatement,
    sequenceExpression,
    spreadElement,
    stringLiteral,
    super: _super,
    thisExpression,
    toExpression: toExpression2,
    unaryExpression
  } = _t;
  function toComputedKey2() {
    let key2;
    if (this.isMemberExpression()) {
      key2 = this.node.property;
    } else if (this.isProperty() || this.isMethod()) {
      key2 = this.node.key;
    } else {
      throw new ReferenceError("todo");
    }
    if (!this.node.computed) {
      if (isIdentifier(key2)) key2 = stringLiteral(key2.name);
    }
    return key2;
  }
  function ensureBlock2() {
    const body = this.get("body");
    const bodyNode = body.node;
    if (Array.isArray(body)) {
      throw new Error("Can't convert array path to a block statement");
    }
    if (!bodyNode) {
      throw new Error("Can't convert node without a body");
    }
    if (body.isBlockStatement()) {
      return bodyNode;
    }
    const statements2 = [];
    let stringPath = "body";
    let key2;
    let listKey;
    if (body.isStatement()) {
      listKey = "body";
      key2 = 0;
      statements2.push(body.node);
    } else {
      stringPath += ".body.0";
      if (this.isFunction()) {
        key2 = "argument";
        statements2.push(returnStatement(body.node));
      } else {
        key2 = "expression";
        statements2.push(expressionStatement(body.node));
      }
    }
    this.node.body = blockStatement(statements2);
    const parentPath = this.get(stringPath);
    body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key2);
    return this.node;
  }
  {
    conversion.arrowFunctionToShadowed = function() {
      if (!this.isArrowFunctionExpression()) return;
      this.arrowFunctionToExpression();
    };
  }
  function unwrapFunctionEnvironment() {
    if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {
      throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
    }
    hoistFunctionEnvironment(this);
  }
  function setType(path2, type) {
    path2.node.type = type;
  }
  function arrowFunctionToExpression({
    allowInsertArrow = true,
    allowInsertArrowWithRest = allowInsertArrow,
    noNewArrows = !((_arguments$) => (_arguments$ = arguments[0]) == null ? void 0 : _arguments$.specCompliant)()
  } = {}) {
    if (!this.isArrowFunctionExpression()) {
      throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
    }
    const {
      thisBinding,
      fnPath: fn2
    } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
    fn2.ensureBlock();
    setType(fn2, "FunctionExpression");
    if (!noNewArrows) {
      const checkBinding = thisBinding ? null : fn2.scope.generateUidIdentifier("arrowCheckId");
      if (checkBinding) {
        fn2.parentPath.scope.push({
          id: checkBinding,
          init: objectExpression([])
        });
      }
      fn2.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), checkBinding ? identifier2(checkBinding.name) : identifier2(thisBinding)])));
      fn2.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn2.node, identifier2("bind")), [checkBinding ? identifier2(checkBinding.name) : thisExpression()]));
      return fn2.get("callee.object");
    }
    return fn2;
  }
  const getSuperCallsVisitor = (0, _visitors.merge)([{
    CallExpression(child, {
      allSuperCalls
    }) {
      if (!child.get("callee").isSuper()) return;
      allSuperCalls.push(child);
    }
  }, _helperEnvironmentVisitor.default]);
  function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
    let arrowParent;
    let thisEnvFn = fnPath.findParent((p) => {
      if (p.isArrowFunctionExpression()) {
        var _arrowParent;
        (_arrowParent = arrowParent) != null ? _arrowParent : arrowParent = p;
        return false;
      }
      return p.isFunction() || p.isProgram() || p.isClassProperty({
        static: false
      }) || p.isClassPrivateProperty({
        static: false
      });
    });
    const inConstructor = thisEnvFn.isClassMethod({
      kind: "constructor"
    });
    if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {
      if (arrowParent) {
        thisEnvFn = arrowParent;
      } else if (allowInsertArrow) {
        fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression2(fnPath.node)), []));
        thisEnvFn = fnPath.get("callee");
        fnPath = thisEnvFn.get("body");
      } else {
        throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
      }
    }
    const {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    } = getScopeInformation(fnPath);
    if (inConstructor && superCalls.length > 0) {
      if (!allowInsertArrow) {
        throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      if (!allowInsertArrowWithRest) {
        throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      const allSuperCalls = [];
      thisEnvFn.traverse(getSuperCallsVisitor, {
        allSuperCalls
      });
      const superBinding = getSuperBinding(thisEnvFn);
      allSuperCalls.forEach((superCall) => {
        const callee = identifier2(superBinding);
        callee.loc = superCall.node.callee.loc;
        superCall.get("callee").replaceWith(callee);
      });
    }
    if (argumentsPaths.length > 0) {
      const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
        const args = () => identifier2("arguments");
        if (thisEnvFn.scope.path.isProgram()) {
          return conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args());
        } else {
          return args();
        }
      });
      argumentsPaths.forEach((argumentsChild) => {
        const argsRef = identifier2(argumentsBinding);
        argsRef.loc = argumentsChild.node.loc;
        argumentsChild.replaceWith(argsRef);
      });
    }
    if (newTargetPaths.length > 0) {
      const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier2("new"), identifier2("target")));
      newTargetPaths.forEach((targetChild) => {
        const targetRef = identifier2(newTargetBinding);
        targetRef.loc = targetChild.node.loc;
        targetChild.replaceWith(targetRef);
      });
    }
    if (superProps.length > 0) {
      if (!allowInsertArrow) {
        throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);
      flatSuperProps.forEach((superProp) => {
        const key2 = superProp.node.computed ? "" : superProp.get("property").node.name;
        const superParentPath = superProp.parentPath;
        const isAssignment = superParentPath.isAssignmentExpression({
          left: superProp.node
        });
        const isCall = superParentPath.isCallExpression({
          callee: superProp.node
        });
        const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({
          tag: superProp.node
        });
        const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key2);
        const args = [];
        if (superProp.node.computed) {
          args.push(superProp.get("property").node);
        }
        if (isAssignment) {
          const value2 = superParentPath.node.right;
          args.push(value2);
        }
        const call = callExpression(identifier2(superBinding), args);
        if (isCall) {
          superParentPath.unshiftContainer("arguments", thisExpression());
          superProp.replaceWith(memberExpression(call, identifier2("call")));
          thisPaths.push(superParentPath.get("arguments.0"));
        } else if (isAssignment) {
          superParentPath.replaceWith(call);
        } else if (isTaggedTemplate) {
          superProp.replaceWith(callExpression(memberExpression(call, identifier2("bind"), false), [thisExpression()]));
          thisPaths.push(superProp.get("arguments.0"));
        } else {
          superProp.replaceWith(call);
        }
      });
    }
    let thisBinding;
    if (thisPaths.length > 0 || !noNewArrows) {
      thisBinding = getThisBinding(thisEnvFn, inConstructor);
      if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {
        thisPaths.forEach((thisChild) => {
          const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier2(thisBinding);
          thisRef.loc = thisChild.node.loc;
          thisChild.replaceWith(thisRef);
        });
        if (!noNewArrows) thisBinding = null;
      }
    }
    return {
      thisBinding,
      fnPath
    };
  }
  function isLogicalOp(op) {
    return LOGICAL_OPERATORS.includes(op);
  }
  function standardizeSuperProperty(superProp) {
    if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== "=") {
      const assignmentPath = superProp.parentPath;
      const op = assignmentPath.node.operator.slice(0, -1);
      const value2 = assignmentPath.node.right;
      const isLogicalAssignment = isLogicalOp(op);
      if (superProp.node.computed) {
        const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
        const object = superProp.node.object;
        const property = superProp.node.property;
        assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true));
        assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier2(tmp.name), true), value2));
      } else {
        const object = superProp.node.object;
        const property = superProp.node.property;
        assignmentPath.get("left").replaceWith(memberExpression(object, property));
        assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier2(property.name)), value2));
      }
      if (isLogicalAssignment) {
        assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right));
      } else {
        assignmentPath.node.operator = "=";
      }
      return [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
    } else if (superProp.parentPath.isUpdateExpression()) {
      const updateExpr = superProp.parentPath;
      const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
      const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier("prop") : null;
      const parts = [assignmentExpression("=", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression("=", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression("=", memberExpression(superProp.node.object, computedKey ? identifier2(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(superProp.parentPath.node.operator[0], identifier2(tmp.name), numericLiteral(1)))];
      if (!superProp.parentPath.node.prefix) {
        parts.push(identifier2(tmp.name));
      }
      updateExpr.replaceWith(sequenceExpression(parts));
      const left = updateExpr.get("expressions.0.right");
      const right = updateExpr.get("expressions.1.left");
      return [left, right];
    }
    return [superProp];
    function rightExpression(op, left, right) {
      if (op === "=") {
        return assignmentExpression("=", left, right);
      } else {
        return binaryExpression(op, left, right);
      }
    }
  }
  function hasSuperClass(thisEnvFn) {
    return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
  }
  const assignSuperThisVisitor = (0, _visitors.merge)([{
    CallExpression(child, {
      supers,
      thisBinding
    }) {
      if (!child.get("callee").isSuper()) return;
      if (supers.has(child.node)) return;
      supers.add(child.node);
      child.replaceWithMultiple([child.node, assignmentExpression("=", identifier2(thisBinding), identifier2("this"))]);
    }
  }, _helperEnvironmentVisitor.default]);
  function getThisBinding(thisEnvFn, inConstructor) {
    return getBinding(thisEnvFn, "this", (thisBinding) => {
      if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();
      thisEnvFn.traverse(assignSuperThisVisitor, {
        supers: /* @__PURE__ */ new WeakSet(),
        thisBinding
      });
    });
  }
  function getSuperBinding(thisEnvFn) {
    return getBinding(thisEnvFn, "supercall", () => {
      const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
      return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier2(argsBinding.name))]));
    });
  }
  function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
    const op = isAssignment ? "set" : "get";
    return getBinding(thisEnvFn, `superprop_${op}:${propName || ""}`, () => {
      const argsList = [];
      let fnBody;
      if (propName) {
        fnBody = memberExpression(_super(), identifier2(propName));
      } else {
        const method = thisEnvFn.scope.generateUidIdentifier("prop");
        argsList.unshift(method);
        fnBody = memberExpression(_super(), identifier2(method.name), true);
      }
      if (isAssignment) {
        const valueIdent = thisEnvFn.scope.generateUidIdentifier("value");
        argsList.push(valueIdent);
        fnBody = assignmentExpression("=", fnBody, identifier2(valueIdent.name));
      }
      return arrowFunctionExpression(argsList, fnBody);
    });
  }
  function getBinding(thisEnvFn, key2, init) {
    const cacheKey = "binding:" + key2;
    let data = thisEnvFn.getData(cacheKey);
    if (!data) {
      const id = thisEnvFn.scope.generateUidIdentifier(key2);
      data = id.name;
      thisEnvFn.setData(cacheKey, data);
      thisEnvFn.scope.push({
        id,
        init: init(data)
      });
    }
    return data;
  }
  const getScopeInformationVisitor = (0, _visitors.merge)([{
    ThisExpression(child, {
      thisPaths
    }) {
      thisPaths.push(child);
    },
    JSXIdentifier(child, {
      thisPaths
    }) {
      if (child.node.name !== "this") return;
      if (!child.parentPath.isJSXMemberExpression({
        object: child.node
      }) && !child.parentPath.isJSXOpeningElement({
        name: child.node
      })) {
        return;
      }
      thisPaths.push(child);
    },
    CallExpression(child, {
      superCalls
    }) {
      if (child.get("callee").isSuper()) superCalls.push(child);
    },
    MemberExpression(child, {
      superProps
    }) {
      if (child.get("object").isSuper()) superProps.push(child);
    },
    Identifier(child, {
      argumentsPaths
    }) {
      if (!child.isReferencedIdentifier({
        name: "arguments"
      })) return;
      let curr = child.scope;
      do {
        if (curr.hasOwnBinding("arguments")) {
          curr.rename("arguments");
          return;
        }
        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {
          break;
        }
      } while (curr = curr.parent);
      argumentsPaths.push(child);
    },
    MetaProperty(child, {
      newTargetPaths
    }) {
      if (!child.get("meta").isIdentifier({
        name: "new"
      })) return;
      if (!child.get("property").isIdentifier({
        name: "target"
      })) return;
      newTargetPaths.push(child);
    }
  }, _helperEnvironmentVisitor.default]);
  function getScopeInformation(fnPath) {
    const thisPaths = [];
    const argumentsPaths = [];
    const newTargetPaths = [];
    const superProps = [];
    const superCalls = [];
    fnPath.traverse(getScopeInformationVisitor, {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    });
    return {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    };
  }
  return conversion;
}
var introspection = {};
var hasRequiredIntrospection;
function requireIntrospection() {
  if (hasRequiredIntrospection) return introspection;
  hasRequiredIntrospection = 1;
  Object.defineProperty(introspection, "__esModule", {
    value: true
  });
  introspection._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
  introspection._resolve = _resolve;
  introspection.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
  introspection.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
  introspection.equals = equals2;
  introspection.getSource = getSource;
  introspection.has = has2;
  introspection.is = void 0;
  introspection.isCompletionRecord = isCompletionRecord;
  introspection.isConstantExpression = isConstantExpression;
  introspection.isInStrictMode = isInStrictMode;
  introspection.isNodeType = isNodeType;
  introspection.isStatementOrBlock = isStatementOrBlock;
  introspection.isStatic = isStatic;
  introspection.isnt = isnt;
  introspection.matchesPattern = matchesPattern2;
  introspection.referencesImport = referencesImport;
  introspection.resolve = resolve;
  introspection.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
  var _t = requireLib$O();
  const {
    STATEMENT_OR_BLOCK_KEYS,
    VISITOR_KEYS,
    isBlockStatement,
    isExpression,
    isIdentifier,
    isLiteral,
    isStringLiteral,
    isType: isType2,
    matchesPattern: _matchesPattern
  } = _t;
  function matchesPattern2(pattern, allowPartial) {
    return _matchesPattern(this.node, pattern, allowPartial);
  }
  function has2(key2) {
    const val = this.node && this.node[key2];
    if (val && Array.isArray(val)) {
      return !!val.length;
    } else {
      return !!val;
    }
  }
  function isStatic() {
    return this.scope.isStatic(this.node);
  }
  introspection.is = has2;
  function isnt(key2) {
    return !this.has(key2);
  }
  function equals2(key2, value2) {
    return this.node[key2] === value2;
  }
  function isNodeType(type) {
    return isType2(this.type, type);
  }
  function canHaveVariableDeclarationOrExpression() {
    return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
  }
  function canSwapBetweenExpressionAndStatement(replacement2) {
    if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
      return false;
    }
    if (this.isExpression()) {
      return isBlockStatement(replacement2);
    } else if (this.isBlockStatement()) {
      return isExpression(replacement2);
    }
    return false;
  }
  function isCompletionRecord(allowInsideFunction) {
    let path2 = this;
    let first = true;
    do {
      const {
        type,
        container
      } = path2;
      if (!first && (path2.isFunction() || type === "StaticBlock")) {
        return !!allowInsideFunction;
      }
      first = false;
      if (Array.isArray(container) && path2.key !== container.length - 1) {
        return false;
      }
    } while ((path2 = path2.parentPath) && !path2.isProgram() && !path2.isDoExpression());
    return true;
  }
  function isStatementOrBlock() {
    if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {
      return false;
    } else {
      return STATEMENT_OR_BLOCK_KEYS.includes(this.key);
    }
  }
  function referencesImport(moduleSource, importName) {
    if (!this.isReferencedIdentifier()) {
      if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {
        value: importName
      }) : this.node.property.name === importName)) {
        const object = this.get("object");
        return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
      }
      return false;
    }
    const binding2 = this.scope.getBinding(this.node.name);
    if (!binding2 || binding2.kind !== "module") return false;
    const path2 = binding2.path;
    const parent = path2.parentPath;
    if (!parent.isImportDeclaration()) return false;
    if (parent.node.source.value === moduleSource) {
      if (!importName) return true;
    } else {
      return false;
    }
    if (path2.isImportDefaultSpecifier() && importName === "default") {
      return true;
    }
    if (path2.isImportNamespaceSpecifier() && importName === "*") {
      return true;
    }
    if (path2.isImportSpecifier() && isIdentifier(path2.node.imported, {
      name: importName
    })) {
      return true;
    }
    return false;
  }
  function getSource() {
    const node2 = this.node;
    if (node2.end) {
      const code = this.hub.getCode();
      if (code) return code.slice(node2.start, node2.end);
    }
    return "";
  }
  function willIMaybeExecuteBefore(target) {
    return this._guessExecutionStatusRelativeTo(target) !== "after";
  }
  function getOuterFunction(path2) {
    return path2.isProgram() ? path2 : (path2.parentPath.scope.getFunctionParent() || path2.parentPath.scope.getProgramParent()).path;
  }
  function isExecutionUncertain(type, key2) {
    switch (type) {
      case "LogicalExpression":
        return key2 === "right";
      case "ConditionalExpression":
      case "IfStatement":
        return key2 === "consequent" || key2 === "alternate";
      case "WhileStatement":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForOfStatement":
        return key2 === "body";
      case "ForStatement":
        return key2 === "body" || key2 === "update";
      case "SwitchStatement":
        return key2 === "cases";
      case "TryStatement":
        return key2 === "handler";
      case "AssignmentPattern":
        return key2 === "right";
      case "OptionalMemberExpression":
        return key2 === "property";
      case "OptionalCallExpression":
        return key2 === "arguments";
      default:
        return false;
    }
  }
  function isExecutionUncertainInList(paths, maxIndex) {
    for (let i = 0; i < maxIndex; i++) {
      const path2 = paths[i];
      if (isExecutionUncertain(path2.parent.type, path2.parentKey)) {
        return true;
      }
    }
    return false;
  }
  const SYMBOL_CHECKING = Symbol();
  function _guessExecutionStatusRelativeTo(target) {
    return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
  }
  function _guessExecutionStatusRelativeToCached(base2, target, cache2) {
    const funcParent = {
      this: getOuterFunction(base2),
      target: getOuterFunction(target)
    };
    if (funcParent.target.node !== funcParent.this.node) {
      return _guessExecutionStatusRelativeToDifferentFunctionsCached(base2, funcParent.target, cache2);
    }
    const paths = {
      target: target.getAncestry(),
      this: base2.getAncestry()
    };
    if (paths.target.indexOf(base2) >= 0) return "after";
    if (paths.this.indexOf(target) >= 0) return "before";
    let commonPath;
    const commonIndex = {
      target: 0,
      this: 0
    };
    while (!commonPath && commonIndex.this < paths.this.length) {
      const path2 = paths.this[commonIndex.this];
      commonIndex.target = paths.target.indexOf(path2);
      if (commonIndex.target >= 0) {
        commonPath = path2;
      } else {
        commonIndex.this++;
      }
    }
    if (!commonPath) {
      throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
    }
    if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {
      return "unknown";
    }
    const divergence = {
      this: paths.this[commonIndex.this - 1],
      target: paths.target[commonIndex.target - 1]
    };
    if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {
      return divergence.target.key > divergence.this.key ? "before" : "after";
    }
    const keys2 = VISITOR_KEYS[commonPath.type];
    const keyPosition = {
      this: keys2.indexOf(divergence.this.parentKey),
      target: keys2.indexOf(divergence.target.parentKey)
    };
    return keyPosition.target > keyPosition.this ? "before" : "after";
  }
  function _guessExecutionStatusRelativeToDifferentFunctionsInternal(base2, target, cache2) {
    if (!target.isFunctionDeclaration()) {
      if (_guessExecutionStatusRelativeToCached(base2, target, cache2) === "before") {
        return "before";
      }
      return "unknown";
    } else if (target.parentPath.isExportDeclaration()) {
      return "unknown";
    }
    const binding2 = target.scope.getBinding(target.node.id.name);
    if (!binding2.references) return "before";
    const referencePaths = binding2.referencePaths;
    let allStatus;
    for (const path2 of referencePaths) {
      const childOfFunction = !!path2.find((path3) => path3.node === target.node);
      if (childOfFunction) continue;
      if (path2.key !== "callee" || !path2.parentPath.isCallExpression()) {
        return "unknown";
      }
      const status = _guessExecutionStatusRelativeToCached(base2, path2, cache2);
      if (allStatus && allStatus !== status) {
        return "unknown";
      } else {
        allStatus = status;
      }
    }
    return allStatus;
  }
  function _guessExecutionStatusRelativeToDifferentFunctionsCached(base2, target, cache2) {
    let nodeMap = cache2.get(base2.node);
    let cached;
    if (!nodeMap) {
      cache2.set(base2.node, nodeMap = /* @__PURE__ */ new Map());
    } else if (cached = nodeMap.get(target.node)) {
      if (cached === SYMBOL_CHECKING) {
        return "unknown";
      }
      return cached;
    }
    nodeMap.set(target.node, SYMBOL_CHECKING);
    const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(base2, target, cache2);
    nodeMap.set(target.node, result);
    return result;
  }
  function resolve(dangerous, resolved) {
    return this._resolve(dangerous, resolved) || this;
  }
  function _resolve(dangerous, resolved) {
    if (resolved && resolved.indexOf(this) >= 0) return;
    resolved = resolved || [];
    resolved.push(this);
    if (this.isVariableDeclarator()) {
      if (this.get("id").isIdentifier()) {
        return this.get("init").resolve(dangerous, resolved);
      }
    } else if (this.isReferencedIdentifier()) {
      const binding2 = this.scope.getBinding(this.node.name);
      if (!binding2) return;
      if (!binding2.constant) return;
      if (binding2.kind === "module") return;
      if (binding2.path !== this) {
        const ret = binding2.path.resolve(dangerous, resolved);
        if (this.find((parent) => parent.node === ret.node)) return;
        return ret;
      }
    } else if (this.isTypeCastExpression()) {
      return this.get("expression").resolve(dangerous, resolved);
    } else if (dangerous && this.isMemberExpression()) {
      const targetKey = this.toComputedKey();
      if (!isLiteral(targetKey)) return;
      const targetName = targetKey.value;
      const target = this.get("object").resolve(dangerous, resolved);
      if (target.isObjectExpression()) {
        const props = target.get("properties");
        for (const prop of props) {
          if (!prop.isProperty()) continue;
          const key2 = prop.get("key");
          let match = prop.isnt("computed") && key2.isIdentifier({
            name: targetName
          });
          match = match || key2.isLiteral({
            value: targetName
          });
          if (match) return prop.get("value").resolve(dangerous, resolved);
        }
      } else if (target.isArrayExpression() && !isNaN(+targetName)) {
        const elems = target.get("elements");
        const elem = elems[targetName];
        if (elem) return elem.resolve(dangerous, resolved);
      }
    }
  }
  function isConstantExpression() {
    if (this.isIdentifier()) {
      const binding2 = this.scope.getBinding(this.node.name);
      if (!binding2) return false;
      return binding2.constant;
    }
    if (this.isLiteral()) {
      if (this.isRegExpLiteral()) {
        return false;
      }
      if (this.isTemplateLiteral()) {
        return this.get("expressions").every((expression) => expression.isConstantExpression());
      }
      return true;
    }
    if (this.isUnaryExpression()) {
      if (this.node.operator !== "void") {
        return false;
      }
      return this.get("argument").isConstantExpression();
    }
    if (this.isBinaryExpression()) {
      const {
        operator
      } = this.node;
      return operator !== "in" && operator !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
    }
    if (this.isMemberExpression()) {
      return !this.node.computed && this.get("object").isIdentifier({
        name: "Symbol"
      }) && !this.scope.hasBinding("Symbol", {
        noGlobals: true
      });
    }
    if (this.isCallExpression()) {
      return this.node.arguments.length === 1 && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", {
        noGlobals: true
      }) && this.get("arguments")[0].isStringLiteral();
    }
    return false;
  }
  function isInStrictMode() {
    const start = this.isProgram() ? this : this.parentPath;
    const strictParent = start.find((path2) => {
      if (path2.isProgram({
        sourceType: "module"
      })) return true;
      if (path2.isClass()) return true;
      if (path2.isArrowFunctionExpression() && !path2.get("body").isBlockStatement()) {
        return false;
      }
      let body;
      if (path2.isFunction()) {
        body = path2.node.body;
      } else if (path2.isProgram()) {
        body = path2.node;
      } else {
        return false;
      }
      for (const directive of body.directives) {
        if (directive.value.value === "use strict") {
          return true;
        }
      }
    });
    return !!strictParent;
  }
  return introspection;
}
var context = {};
var hasRequiredContext$1;
function requireContext$1() {
  if (hasRequiredContext$1) return context;
  hasRequiredContext$1 = 1;
  Object.defineProperty(context, "__esModule", {
    value: true
  });
  context._call = _call;
  context._getQueueContexts = _getQueueContexts;
  context._resyncKey = _resyncKey;
  context._resyncList = _resyncList;
  context._resyncParent = _resyncParent;
  context._resyncRemoved = _resyncRemoved;
  context.call = call;
  context.isBlacklisted = context.isDenylisted = isDenylisted;
  context.popContext = popContext;
  context.pushContext = pushContext;
  context.requeue = requeue;
  context.resync = resync;
  context.setContext = setContext;
  context.setKey = setKey;
  context.setScope = setScope;
  context.setup = setup;
  context.skip = skip;
  context.skipKey = skipKey;
  context.stop = stop;
  context.visit = visit;
  var _traverseNode = requireTraverseNode();
  var _index = requirePath();
  function call(key2) {
    const opts = this.opts;
    this.debug(key2);
    if (this.node) {
      if (this._call(opts[key2])) return true;
    }
    if (this.node) {
      var _opts$this$node$type;
      return this._call((_opts$this$node$type = opts[this.node.type]) == null ? void 0 : _opts$this$node$type[key2]);
    }
    return false;
  }
  function _call(fns) {
    if (!fns) return false;
    for (const fn2 of fns) {
      if (!fn2) continue;
      const node2 = this.node;
      if (!node2) return true;
      const ret = fn2.call(this.state, this, this.state);
      if (ret && typeof ret === "object" && typeof ret.then === "function") {
        throw new Error(`You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
      }
      if (ret) {
        throw new Error(`Unexpected return value from visitor method ${fn2}`);
      }
      if (this.node !== node2) return true;
      if (this._traverseFlags > 0) return true;
    }
    return false;
  }
  function isDenylisted() {
    var _this$opts$denylist;
    const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;
    return denylist && denylist.indexOf(this.node.type) > -1;
  }
  function restoreContext(path2, context2) {
    if (path2.context !== context2) {
      path2.context = context2;
      path2.state = context2.state;
      path2.opts = context2.opts;
    }
  }
  function visit() {
    var _this$opts$shouldSkip, _this$opts;
    if (!this.node) {
      return false;
    }
    if (this.isDenylisted()) {
      return false;
    }
    if ((_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) != null && _this$opts$shouldSkip.call(_this$opts, this)) {
      return false;
    }
    const currentContext = this.context;
    if (this.shouldSkip || this.call("enter")) {
      this.debug("Skip...");
      return this.shouldStop;
    }
    restoreContext(this, currentContext);
    this.debug("Recursing into...");
    this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
    restoreContext(this, currentContext);
    this.call("exit");
    return this.shouldStop;
  }
  function skip() {
    this.shouldSkip = true;
  }
  function skipKey(key2) {
    if (this.skipKeys == null) {
      this.skipKeys = {};
    }
    this.skipKeys[key2] = true;
  }
  function stop() {
    this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
  }
  function setScope() {
    var _this$opts2, _this$scope;
    if ((_this$opts2 = this.opts) != null && _this$opts2.noScope) return;
    let path2 = this.parentPath;
    if ((this.key === "key" || this.listKey === "decorators") && path2.isMethod() || this.key === "discriminant" && path2.isSwitchStatement()) {
      path2 = path2.parentPath;
    }
    let target;
    while (path2 && !target) {
      var _path$opts;
      if ((_path$opts = path2.opts) != null && _path$opts.noScope) return;
      target = path2.scope;
      path2 = path2.parentPath;
    }
    this.scope = this.getScope(target);
    (_this$scope = this.scope) == null || _this$scope.init();
  }
  function setContext(context2) {
    if (this.skipKeys != null) {
      this.skipKeys = {};
    }
    this._traverseFlags = 0;
    if (context2) {
      this.context = context2;
      this.state = context2.state;
      this.opts = context2.opts;
    }
    this.setScope();
    return this;
  }
  function resync() {
    if (this.removed) return;
    this._resyncParent();
    this._resyncList();
    this._resyncKey();
  }
  function _resyncParent() {
    if (this.parentPath) {
      this.parent = this.parentPath.node;
    }
  }
  function _resyncKey() {
    if (!this.container) return;
    if (this.node === this.container[this.key]) {
      return;
    }
    if (Array.isArray(this.container)) {
      for (let i = 0; i < this.container.length; i++) {
        if (this.container[i] === this.node) {
          this.setKey(i);
          return;
        }
      }
    } else {
      for (const key2 of Object.keys(this.container)) {
        if (this.container[key2] === this.node) {
          this.setKey(key2);
          return;
        }
      }
    }
    this.key = null;
  }
  function _resyncList() {
    if (!this.parent || !this.inList) return;
    const newContainer = this.parent[this.listKey];
    if (this.container === newContainer) return;
    this.container = newContainer || null;
  }
  function _resyncRemoved() {
    if (this.key == null || !this.container || this.container[this.key] !== this.node) {
      this._markRemoved();
    }
  }
  function popContext() {
    this.contexts.pop();
    if (this.contexts.length > 0) {
      this.setContext(this.contexts[this.contexts.length - 1]);
    } else {
      this.setContext(void 0);
    }
  }
  function pushContext(context2) {
    this.contexts.push(context2);
    this.setContext(context2);
  }
  function setup(parentPath, container, listKey, key2) {
    this.listKey = listKey;
    this.container = container;
    this.parentPath = parentPath || this.parentPath;
    this.setKey(key2);
  }
  function setKey(key2) {
    var _this$node;
    this.key = key2;
    this.node = this.container[this.key];
    this.type = (_this$node = this.node) == null ? void 0 : _this$node.type;
  }
  function requeue(pathToQueue = this) {
    if (pathToQueue.removed) return;
    const contexts = this.contexts;
    for (const context2 of contexts) {
      context2.maybeQueue(pathToQueue);
    }
  }
  function _getQueueContexts() {
    let path2 = this;
    let contexts = this.contexts;
    while (!contexts.length) {
      path2 = path2.parentPath;
      if (!path2) break;
      contexts = path2.contexts;
    }
    return contexts;
  }
  return context;
}
var removal = {};
var removalHooks = {};
var hasRequiredRemovalHooks;
function requireRemovalHooks() {
  if (hasRequiredRemovalHooks) return removalHooks;
  hasRequiredRemovalHooks = 1;
  Object.defineProperty(removalHooks, "__esModule", {
    value: true
  });
  removalHooks.hooks = void 0;
  removalHooks.hooks = [function(self, parent) {
    const removeParent = self.key === "test" && (parent.isWhile() || parent.isSwitchCase()) || self.key === "declaration" && parent.isExportDeclaration() || self.key === "body" && parent.isLabeledStatement() || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self.key === "expression" && parent.isExpressionStatement();
    if (removeParent) {
      parent.remove();
      return true;
    }
  }, function(self, parent) {
    if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
      parent.replaceWith(parent.node.expressions[0]);
      return true;
    }
  }, function(self, parent) {
    if (parent.isBinary()) {
      if (self.key === "left") {
        parent.replaceWith(parent.node.right);
      } else {
        parent.replaceWith(parent.node.left);
      }
      return true;
    }
  }, function(self, parent) {
    if (parent.isIfStatement() && self.key === "consequent" || self.key === "body" && (parent.isLoop() || parent.isArrowFunctionExpression())) {
      self.replaceWith({
        type: "BlockStatement",
        body: []
      });
      return true;
    }
  }];
  return removalHooks;
}
var hasRequiredRemoval;
function requireRemoval() {
  if (hasRequiredRemoval) return removal;
  hasRequiredRemoval = 1;
  Object.defineProperty(removal, "__esModule", {
    value: true
  });
  removal._assertUnremoved = _assertUnremoved;
  removal._callRemovalHooks = _callRemovalHooks;
  removal._markRemoved = _markRemoved;
  removal._remove = _remove;
  removal._removeFromScope = _removeFromScope;
  removal.remove = remove;
  var _removalHooks = requireRemovalHooks();
  var _cache = requireCache();
  var _index = requirePath();
  var _t = requireLib$O();
  const {
    getBindingIdentifiers: getBindingIdentifiers2
  } = _t;
  function remove() {
    var _this$opts;
    this._assertUnremoved();
    this.resync();
    if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {
      this._removeFromScope();
    }
    if (this._callRemovalHooks()) {
      this._markRemoved();
      return;
    }
    this.shareCommentsWithSiblings();
    this._remove();
    this._markRemoved();
  }
  function _removeFromScope() {
    const bindings = getBindingIdentifiers2(this.node, false, false, true);
    Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
  }
  function _callRemovalHooks() {
    if (this.parentPath) {
      for (const fn2 of _removalHooks.hooks) {
        if (fn2(this, this.parentPath)) return true;
      }
    }
  }
  function _remove() {
    if (Array.isArray(this.container)) {
      this.container.splice(this.key, 1);
      this.updateSiblingKeys(this.key, -1);
    } else {
      this._replaceWith(null);
    }
  }
  function _markRemoved() {
    this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;
    if (this.parent) {
      (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node);
    }
    this.node = null;
  }
  function _assertUnremoved() {
    if (this.removed) {
      throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
    }
  }
  return removal;
}
var modification = {};
var hoister = {};
var hasRequiredHoister;
function requireHoister() {
  if (hasRequiredHoister) return hoister;
  hasRequiredHoister = 1;
  Object.defineProperty(hoister, "__esModule", {
    value: true
  });
  hoister.default = void 0;
  var _t = requireLib$O();
  var _t2 = _t;
  const {
    react
  } = _t;
  const {
    cloneNode: cloneNode2,
    jsxExpressionContainer,
    variableDeclaration,
    variableDeclarator
  } = _t2;
  const referenceVisitor = {
    ReferencedIdentifier(path2, state2) {
      if (path2.isJSXIdentifier() && react.isCompatTag(path2.node.name) && !path2.parentPath.isJSXMemberExpression()) {
        return;
      }
      if (path2.node.name === "this") {
        let scope2 = path2.scope;
        do {
          if (scope2.path.isFunction() && !scope2.path.isArrowFunctionExpression()) {
            break;
          }
        } while (scope2 = scope2.parent);
        if (scope2) state2.breakOnScopePaths.push(scope2.path);
      }
      const binding2 = path2.scope.getBinding(path2.node.name);
      if (!binding2) return;
      for (const violation of binding2.constantViolations) {
        if (violation.scope !== binding2.path.scope) {
          state2.mutableBinding = true;
          path2.stop();
          return;
        }
      }
      if (binding2 !== state2.scope.getBinding(path2.node.name)) return;
      state2.bindings[path2.node.name] = binding2;
    }
  };
  class PathHoister {
    constructor(path2, scope2) {
      this.breakOnScopePaths = void 0;
      this.bindings = void 0;
      this.mutableBinding = void 0;
      this.scopes = void 0;
      this.scope = void 0;
      this.path = void 0;
      this.attachAfter = void 0;
      this.breakOnScopePaths = [];
      this.bindings = {};
      this.mutableBinding = false;
      this.scopes = [];
      this.scope = scope2;
      this.path = path2;
      this.attachAfter = false;
    }
    isCompatibleScope(scope2) {
      for (const key2 of Object.keys(this.bindings)) {
        const binding2 = this.bindings[key2];
        if (!scope2.bindingIdentifierEquals(key2, binding2.identifier)) {
          return false;
        }
      }
      return true;
    }
    getCompatibleScopes() {
      let scope2 = this.path.scope;
      do {
        if (this.isCompatibleScope(scope2)) {
          this.scopes.push(scope2);
        } else {
          break;
        }
        if (this.breakOnScopePaths.indexOf(scope2.path) >= 0) {
          break;
        }
      } while (scope2 = scope2.parent);
    }
    getAttachmentPath() {
      let path2 = this._getAttachmentPath();
      if (!path2) return;
      let targetScope = path2.scope;
      if (targetScope.path === path2) {
        targetScope = path2.scope.parent;
      }
      if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
        for (const name of Object.keys(this.bindings)) {
          if (!targetScope.hasOwnBinding(name)) continue;
          const binding2 = this.bindings[name];
          if (binding2.kind === "param" || binding2.path.parentKey === "params") {
            continue;
          }
          const bindingParentPath = this.getAttachmentParentForPath(binding2.path);
          if (bindingParentPath.key >= path2.key) {
            this.attachAfter = true;
            path2 = binding2.path;
            for (const violationPath of binding2.constantViolations) {
              if (this.getAttachmentParentForPath(violationPath).key > path2.key) {
                path2 = violationPath;
              }
            }
          }
        }
      }
      return path2;
    }
    _getAttachmentPath() {
      const scopes = this.scopes;
      const scope2 = scopes.pop();
      if (!scope2) return;
      if (scope2.path.isFunction()) {
        if (this.hasOwnParamBindings(scope2)) {
          if (this.scope === scope2) return;
          const bodies = scope2.path.get("body").get("body");
          for (let i = 0; i < bodies.length; i++) {
            if (bodies[i].node._blockHoist) continue;
            return bodies[i];
          }
        } else {
          return this.getNextScopeAttachmentParent();
        }
      } else if (scope2.path.isProgram()) {
        return this.getNextScopeAttachmentParent();
      }
    }
    getNextScopeAttachmentParent() {
      const scope2 = this.scopes.pop();
      if (scope2) return this.getAttachmentParentForPath(scope2.path);
    }
    getAttachmentParentForPath(path2) {
      do {
        if (!path2.parentPath || Array.isArray(path2.container) && path2.isStatement()) {
          return path2;
        }
      } while (path2 = path2.parentPath);
    }
    hasOwnParamBindings(scope2) {
      for (const name of Object.keys(this.bindings)) {
        if (!scope2.hasOwnBinding(name)) continue;
        const binding2 = this.bindings[name];
        if (binding2.kind === "param" && binding2.constant) return true;
      }
      return false;
    }
    run() {
      this.path.traverse(referenceVisitor, this);
      if (this.mutableBinding) return;
      this.getCompatibleScopes();
      const attachTo = this.getAttachmentPath();
      if (!attachTo) return;
      if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
      let uid = attachTo.scope.generateUidIdentifier("ref");
      const declarator = variableDeclarator(uid, this.path.node);
      const insertFn = this.attachAfter ? "insertAfter" : "insertBefore";
      const [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]);
      const parent = this.path.parentPath;
      if (parent.isJSXElement() && this.path.container === parent.node.children) {
        uid = jsxExpressionContainer(uid);
      }
      this.path.replaceWith(cloneNode2(uid));
      return attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
    }
  }
  hoister.default = PathHoister;
  return hoister;
}
var hasRequiredModification;
function requireModification() {
  if (hasRequiredModification) return modification;
  hasRequiredModification = 1;
  Object.defineProperty(modification, "__esModule", {
    value: true
  });
  modification._containerInsert = _containerInsert;
  modification._containerInsertAfter = _containerInsertAfter;
  modification._containerInsertBefore = _containerInsertBefore;
  modification._verifyNodeList = _verifyNodeList;
  modification.hoist = hoist;
  modification.insertAfter = insertAfter;
  modification.insertBefore = insertBefore;
  modification.pushContainer = pushContainer;
  modification.unshiftContainer = unshiftContainer;
  modification.updateSiblingKeys = updateSiblingKeys;
  var _cache = requireCache();
  var _hoister = requireHoister();
  var _index = requirePath();
  var _t = requireLib$O();
  const {
    arrowFunctionExpression,
    assertExpression,
    assignmentExpression,
    blockStatement,
    callExpression,
    cloneNode: cloneNode2,
    expressionStatement,
    isAssignmentExpression,
    isCallExpression,
    isExportNamedDeclaration,
    isExpression,
    isIdentifier,
    isSequenceExpression,
    isSuper,
    thisExpression
  } = _t;
  function insertBefore(nodes_) {
    this._assertUnremoved();
    const nodes = this._verifyNodeList(nodes_);
    const {
      parentPath,
      parent
    } = this;
    if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
      return parentPath.insertBefore(nodes);
    } else if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
      if (this.node) nodes.push(this.node);
      return this.replaceExpressionWithStatements(nodes);
    } else if (Array.isArray(this.container)) {
      return this._containerInsertBefore(nodes);
    } else if (this.isStatementOrBlock()) {
      const node2 = this.node;
      const shouldInsertCurrentNode = node2 && (!this.isExpressionStatement() || node2.expression != null);
      this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node2] : []));
      return this.unshiftContainer("body", nodes);
    } else {
      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
    }
  }
  function _containerInsert(from, nodes) {
    this.updateSiblingKeys(from, nodes.length);
    const paths = [];
    this.container.splice(from, 0, ...nodes);
    for (let i = 0; i < nodes.length; i++) {
      var _this$context;
      const to = from + i;
      const path2 = this.getSibling(to);
      paths.push(path2);
      if ((_this$context = this.context) != null && _this$context.queue) {
        path2.pushContext(this.context);
      }
    }
    const contexts = this._getQueueContexts();
    for (const path2 of paths) {
      path2.setScope();
      path2.debug("Inserted.");
      for (const context2 of contexts) {
        context2.maybeQueue(path2, true);
      }
    }
    return paths;
  }
  function _containerInsertBefore(nodes) {
    return this._containerInsert(this.key, nodes);
  }
  function _containerInsertAfter(nodes) {
    return this._containerInsert(this.key + 1, nodes);
  }
  const last = (arr) => arr[arr.length - 1];
  function isHiddenInSequenceExpression(path2) {
    return isSequenceExpression(path2.parent) && (last(path2.parent.expressions) !== path2.node || isHiddenInSequenceExpression(path2.parentPath));
  }
  function isAlmostConstantAssignment(node2, scope2) {
    if (!isAssignmentExpression(node2) || !isIdentifier(node2.left)) {
      return false;
    }
    const blockScope = scope2.getBlockParent();
    return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
  }
  function insertAfter(nodes_) {
    this._assertUnremoved();
    if (this.isSequenceExpression()) {
      return last(this.get("expressions")).insertAfter(nodes_);
    }
    const nodes = this._verifyNodeList(nodes_);
    const {
      parentPath,
      parent
    } = this;
    if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
      return parentPath.insertAfter(nodes.map((node2) => {
        return isExpression(node2) ? expressionStatement(node2) : node2;
      }));
    } else if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
      if (this.node) {
        const node2 = this.node;
        let {
          scope: scope2
        } = this;
        if (scope2.path.isPattern()) {
          assertExpression(node2);
          this.replaceWith(callExpression(arrowFunctionExpression([], node2), []));
          this.get("callee.body").insertAfter(nodes);
          return [this];
        }
        if (isHiddenInSequenceExpression(this)) {
          nodes.unshift(node2);
        } else if (isCallExpression(node2) && isSuper(node2.callee)) {
          nodes.unshift(node2);
          nodes.push(thisExpression());
        } else if (isAlmostConstantAssignment(node2, scope2)) {
          nodes.unshift(node2);
          nodes.push(cloneNode2(node2.left));
        } else if (scope2.isPure(node2, true)) {
          nodes.push(node2);
        } else {
          if (parentPath.isMethod({
            computed: true,
            key: node2
          })) {
            scope2 = scope2.parent;
          }
          const temp = scope2.generateDeclaredUidIdentifier();
          nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode2(temp), node2)));
          nodes.push(expressionStatement(cloneNode2(temp)));
        }
      }
      return this.replaceExpressionWithStatements(nodes);
    } else if (Array.isArray(this.container)) {
      return this._containerInsertAfter(nodes);
    } else if (this.isStatementOrBlock()) {
      const node2 = this.node;
      const shouldInsertCurrentNode = node2 && (!this.isExpressionStatement() || node2.expression != null);
      this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node2] : []));
      return this.pushContainer("body", nodes);
    } else {
      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
    }
  }
  function updateSiblingKeys(fromIndex, incrementBy) {
    if (!this.parent) return;
    const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];
    for (const [, path2] of paths) {
      if (typeof path2.key === "number" && path2.key >= fromIndex) {
        path2.key += incrementBy;
      }
    }
  }
  function _verifyNodeList(nodes) {
    if (!nodes) {
      return [];
    }
    if (!Array.isArray(nodes)) {
      nodes = [nodes];
    }
    for (let i = 0; i < nodes.length; i++) {
      const node2 = nodes[i];
      let msg;
      if (!node2) {
        msg = "has falsy node";
      } else if (typeof node2 !== "object") {
        msg = "contains a non-object node";
      } else if (!node2.type) {
        msg = "without a type";
      } else if (node2 instanceof _index.default) {
        msg = "has a NodePath when it expected a raw object";
      }
      if (msg) {
        const type = Array.isArray(node2) ? "array" : typeof node2;
        throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
      }
    }
    return nodes;
  }
  function unshiftContainer(listKey, nodes) {
    this._assertUnremoved();
    nodes = this._verifyNodeList(nodes);
    const path2 = _index.default.get({
      parentPath: this,
      parent: this.node,
      container: this.node[listKey],
      listKey,
      key: 0
    }).setContext(this.context);
    return path2._containerInsertBefore(nodes);
  }
  function pushContainer(listKey, nodes) {
    this._assertUnremoved();
    const verifiedNodes = this._verifyNodeList(nodes);
    const container = this.node[listKey];
    const path2 = _index.default.get({
      parentPath: this,
      parent: this.node,
      container,
      listKey,
      key: container.length
    }).setContext(this.context);
    return path2.replaceWithMultiple(verifiedNodes);
  }
  function hoist(scope2 = this.scope) {
    const hoister2 = new _hoister.default(this, scope2);
    return hoister2.run();
  }
  return modification;
}
var family = {};
var hasRequiredFamily;
function requireFamily() {
  if (hasRequiredFamily) return family;
  hasRequiredFamily = 1;
  Object.defineProperty(family, "__esModule", {
    value: true
  });
  family._getKey = _getKey;
  family._getPattern = _getPattern;
  family.get = get;
  family.getAllNextSiblings = getAllNextSiblings;
  family.getAllPrevSiblings = getAllPrevSiblings;
  family.getBindingIdentifierPaths = getBindingIdentifierPaths;
  family.getBindingIdentifiers = getBindingIdentifiers2;
  family.getCompletionRecords = getCompletionRecords;
  family.getNextSibling = getNextSibling;
  family.getOpposite = getOpposite;
  family.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;
  family.getOuterBindingIdentifiers = getOuterBindingIdentifiers2;
  family.getPrevSibling = getPrevSibling;
  family.getSibling = getSibling;
  var _index = requirePath();
  var _t = requireLib$O();
  const {
    getBindingIdentifiers: _getBindingIdentifiers,
    getOuterBindingIdentifiers: _getOuterBindingIdentifiers,
    isDeclaration,
    numericLiteral,
    unaryExpression
  } = _t;
  const NORMAL_COMPLETION = 0;
  const BREAK_COMPLETION = 1;
  function NormalCompletion(path2) {
    return {
      type: NORMAL_COMPLETION,
      path: path2
    };
  }
  function BreakCompletion(path2) {
    return {
      type: BREAK_COMPLETION,
      path: path2
    };
  }
  function getOpposite() {
    if (this.key === "left") {
      return this.getSibling("right");
    } else if (this.key === "right") {
      return this.getSibling("left");
    }
    return null;
  }
  function addCompletionRecords(path2, records, context2) {
    if (path2) {
      records.push(..._getCompletionRecords(path2, context2));
    }
    return records;
  }
  function completionRecordForSwitch(cases, records, context2) {
    let lastNormalCompletions = [];
    for (let i = 0; i < cases.length; i++) {
      const casePath = cases[i];
      const caseCompletions = _getCompletionRecords(casePath, context2);
      const normalCompletions = [];
      const breakCompletions = [];
      for (const c2 of caseCompletions) {
        if (c2.type === NORMAL_COMPLETION) {
          normalCompletions.push(c2);
        }
        if (c2.type === BREAK_COMPLETION) {
          breakCompletions.push(c2);
        }
      }
      if (normalCompletions.length) {
        lastNormalCompletions = normalCompletions;
      }
      records.push(...breakCompletions);
    }
    records.push(...lastNormalCompletions);
    return records;
  }
  function normalCompletionToBreak(completions) {
    completions.forEach((c2) => {
      c2.type = BREAK_COMPLETION;
    });
  }
  function replaceBreakStatementInBreakCompletion(completions, reachable) {
    completions.forEach((c2) => {
      if (c2.path.isBreakStatement({
        label: null
      })) {
        if (reachable) {
          c2.path.replaceWith(unaryExpression("void", numericLiteral(0)));
        } else {
          c2.path.remove();
        }
      }
    });
  }
  function getStatementListCompletion(paths, context2) {
    const completions = [];
    if (context2.canHaveBreak) {
      let lastNormalCompletions = [];
      for (let i = 0; i < paths.length; i++) {
        const path2 = paths[i];
        const newContext = Object.assign({}, context2, {
          inCaseClause: false
        });
        if (path2.isBlockStatement() && (context2.inCaseClause || context2.shouldPopulateBreak)) {
          newContext.shouldPopulateBreak = true;
        } else {
          newContext.shouldPopulateBreak = false;
        }
        const statementCompletions = _getCompletionRecords(path2, newContext);
        if (statementCompletions.length > 0 && statementCompletions.every((c2) => c2.type === BREAK_COMPLETION)) {
          if (lastNormalCompletions.length > 0 && statementCompletions.every((c2) => c2.path.isBreakStatement({
            label: null
          }))) {
            normalCompletionToBreak(lastNormalCompletions);
            completions.push(...lastNormalCompletions);
            if (lastNormalCompletions.some((c2) => c2.path.isDeclaration())) {
              completions.push(...statementCompletions);
              replaceBreakStatementInBreakCompletion(statementCompletions, true);
            }
            replaceBreakStatementInBreakCompletion(statementCompletions, false);
          } else {
            completions.push(...statementCompletions);
            if (!context2.shouldPopulateBreak) {
              replaceBreakStatementInBreakCompletion(statementCompletions, true);
            }
          }
          break;
        }
        if (i === paths.length - 1) {
          completions.push(...statementCompletions);
        } else {
          lastNormalCompletions = [];
          for (let i2 = 0; i2 < statementCompletions.length; i2++) {
            const c2 = statementCompletions[i2];
            if (c2.type === BREAK_COMPLETION) {
              completions.push(c2);
            }
            if (c2.type === NORMAL_COMPLETION) {
              lastNormalCompletions.push(c2);
            }
          }
        }
      }
    } else if (paths.length) {
      for (let i = paths.length - 1; i >= 0; i--) {
        const pathCompletions = _getCompletionRecords(paths[i], context2);
        if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {
          completions.push(...pathCompletions);
          break;
        }
      }
    }
    return completions;
  }
  function _getCompletionRecords(path2, context2) {
    let records = [];
    if (path2.isIfStatement()) {
      records = addCompletionRecords(path2.get("consequent"), records, context2);
      records = addCompletionRecords(path2.get("alternate"), records, context2);
    } else if (path2.isDoExpression() || path2.isFor() || path2.isWhile() || path2.isLabeledStatement()) {
      return addCompletionRecords(path2.get("body"), records, context2);
    } else if (path2.isProgram() || path2.isBlockStatement()) {
      return getStatementListCompletion(path2.get("body"), context2);
    } else if (path2.isFunction()) {
      return _getCompletionRecords(path2.get("body"), context2);
    } else if (path2.isTryStatement()) {
      records = addCompletionRecords(path2.get("block"), records, context2);
      records = addCompletionRecords(path2.get("handler"), records, context2);
    } else if (path2.isCatchClause()) {
      return addCompletionRecords(path2.get("body"), records, context2);
    } else if (path2.isSwitchStatement()) {
      return completionRecordForSwitch(path2.get("cases"), records, context2);
    } else if (path2.isSwitchCase()) {
      return getStatementListCompletion(path2.get("consequent"), {
        canHaveBreak: true,
        shouldPopulateBreak: false,
        inCaseClause: true
      });
    } else if (path2.isBreakStatement()) {
      records.push(BreakCompletion(path2));
    } else {
      records.push(NormalCompletion(path2));
    }
    return records;
  }
  function getCompletionRecords() {
    const records = _getCompletionRecords(this, {
      canHaveBreak: false,
      shouldPopulateBreak: false,
      inCaseClause: false
    });
    return records.map((r) => r.path);
  }
  function getSibling(key2) {
    return _index.default.get({
      parentPath: this.parentPath,
      parent: this.parent,
      container: this.container,
      listKey: this.listKey,
      key: key2
    }).setContext(this.context);
  }
  function getPrevSibling() {
    return this.getSibling(this.key - 1);
  }
  function getNextSibling() {
    return this.getSibling(this.key + 1);
  }
  function getAllNextSiblings() {
    let _key = this.key;
    let sibling = this.getSibling(++_key);
    const siblings = [];
    while (sibling.node) {
      siblings.push(sibling);
      sibling = this.getSibling(++_key);
    }
    return siblings;
  }
  function getAllPrevSiblings() {
    let _key = this.key;
    let sibling = this.getSibling(--_key);
    const siblings = [];
    while (sibling.node) {
      siblings.push(sibling);
      sibling = this.getSibling(--_key);
    }
    return siblings;
  }
  function get(key2, context2 = true) {
    if (context2 === true) context2 = this.context;
    const parts = key2.split(".");
    if (parts.length === 1) {
      return this._getKey(key2, context2);
    } else {
      return this._getPattern(parts, context2);
    }
  }
  function _getKey(key2, context2) {
    const node2 = this.node;
    const container = node2[key2];
    if (Array.isArray(container)) {
      return container.map((_2, i) => {
        return _index.default.get({
          listKey: key2,
          parentPath: this,
          parent: node2,
          container,
          key: i
        }).setContext(context2);
      });
    } else {
      return _index.default.get({
        parentPath: this,
        parent: node2,
        container: node2,
        key: key2
      }).setContext(context2);
    }
  }
  function _getPattern(parts, context2) {
    let path2 = this;
    for (const part of parts) {
      if (part === ".") {
        path2 = path2.parentPath;
      } else {
        if (Array.isArray(path2)) {
          path2 = path2[part];
        } else {
          path2 = path2.get(part, context2);
        }
      }
    }
    return path2;
  }
  function getBindingIdentifiers2(duplicates) {
    return _getBindingIdentifiers(this.node, duplicates);
  }
  function getOuterBindingIdentifiers2(duplicates) {
    return _getOuterBindingIdentifiers(this.node, duplicates);
  }
  function getBindingIdentifierPaths(duplicates = false, outerOnly = false) {
    const path2 = this;
    const search = [path2];
    const ids = /* @__PURE__ */ Object.create(null);
    while (search.length) {
      const id = search.shift();
      if (!id) continue;
      if (!id.node) continue;
      const keys2 = _getBindingIdentifiers.keys[id.node.type];
      if (id.isIdentifier()) {
        if (duplicates) {
          const _ids = ids[id.node.name] = ids[id.node.name] || [];
          _ids.push(id);
        } else {
          ids[id.node.name] = id;
        }
        continue;
      }
      if (id.isExportDeclaration()) {
        const declaration = id.get("declaration");
        if (isDeclaration(declaration)) {
          search.push(declaration);
        }
        continue;
      }
      if (outerOnly) {
        if (id.isFunctionDeclaration()) {
          search.push(id.get("id"));
          continue;
        }
        if (id.isFunctionExpression()) {
          continue;
        }
      }
      if (keys2) {
        for (let i = 0; i < keys2.length; i++) {
          const key2 = keys2[i];
          const child = id.get(key2);
          if (Array.isArray(child)) {
            search.push(...child);
          } else if (child.node) {
            search.push(child);
          }
        }
      }
    }
    return ids;
  }
  function getOuterBindingIdentifierPaths(duplicates = false) {
    return this.getBindingIdentifierPaths(duplicates, true);
  }
  return family;
}
var comments = {};
var hasRequiredComments;
function requireComments() {
  if (hasRequiredComments) return comments;
  hasRequiredComments = 1;
  Object.defineProperty(comments, "__esModule", {
    value: true
  });
  comments.addComment = addComment2;
  comments.addComments = addComments2;
  comments.shareCommentsWithSiblings = shareCommentsWithSiblings;
  var _t = requireLib$O();
  const {
    addComment: _addComment,
    addComments: _addComments
  } = _t;
  function shareCommentsWithSiblings() {
    if (typeof this.key === "string") return;
    const node2 = this.node;
    if (!node2) return;
    const trailing = node2.trailingComments;
    const leading = node2.leadingComments;
    if (!trailing && !leading) return;
    const prev = this.getSibling(this.key - 1);
    const next = this.getSibling(this.key + 1);
    const hasPrev = Boolean(prev.node);
    const hasNext = Boolean(next.node);
    if (hasPrev) {
      if (leading) {
        prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments));
      }
      if (trailing && !hasNext) prev.addComments("trailing", trailing);
    }
    if (hasNext) {
      if (trailing) {
        next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments));
      }
      if (leading && !hasPrev) next.addComments("leading", leading);
    }
  }
  function removeIfExisting(list2, toRemove) {
    if (!(toRemove != null && toRemove.length)) return list2;
    const set = new Set(toRemove);
    return list2.filter((el) => {
      return !set.has(el);
    });
  }
  function addComment2(type, content, line2) {
    _addComment(this.node, type, content, line2);
  }
  function addComments2(type, comments2) {
    _addComments(this.node, type, comments2);
  }
  return comments;
}
var hasRequiredPath;
function requirePath() {
  if (hasRequiredPath) return path;
  hasRequiredPath = 1;
  Object.defineProperty(path, "__esModule", {
    value: true
  });
  path.default = path.SHOULD_STOP = path.SHOULD_SKIP = path.REMOVED = void 0;
  var virtualTypes2 = requireVirtualTypes();
  var _debug = browserExports$1;
  var _index = requireLib$E();
  var _index2 = requireScope();
  var _t = requireLib$O();
  var t = _t;
  var cache2 = requireCache();
  var _generator = requireLib$L();
  var NodePath_ancestry = requireAncestry();
  var NodePath_inference = requireInference();
  var NodePath_replacement = requireReplacement();
  var NodePath_evaluation = requireEvaluation();
  var NodePath_conversion = requireConversion();
  var NodePath_introspection = requireIntrospection();
  var NodePath_context = requireContext$1();
  var NodePath_removal = requireRemoval();
  var NodePath_modification = requireModification();
  var NodePath_family = requireFamily();
  var NodePath_comments = requireComments();
  var NodePath_virtual_types_validator = requireVirtualTypesValidator();
  const {
    validate: validate2
  } = _t;
  const debug2 = _debug("babel");
  const REMOVED = path.REMOVED = 1 << 0;
  const SHOULD_STOP = path.SHOULD_STOP = 1 << 1;
  const SHOULD_SKIP = path.SHOULD_SKIP = 1 << 2;
  class NodePath {
    constructor(hub2, parent) {
      this.contexts = [];
      this.state = null;
      this.opts = null;
      this._traverseFlags = 0;
      this.skipKeys = null;
      this.parentPath = null;
      this.container = null;
      this.listKey = null;
      this.key = null;
      this.node = null;
      this.type = null;
      this.parent = parent;
      this.hub = hub2;
      this.data = null;
      this.context = null;
      this.scope = null;
    }
    static get({
      hub: hub2,
      parentPath,
      parent,
      container,
      listKey,
      key: key2
    }) {
      if (!hub2 && parentPath) {
        hub2 = parentPath.hub;
      }
      if (!parent) {
        throw new Error("To get a node path the parent needs to exist");
      }
      const targetNode = container[key2];
      const paths = cache2.getOrCreateCachedPaths(hub2, parent);
      let path2 = paths.get(targetNode);
      if (!path2) {
        path2 = new NodePath(hub2, parent);
        if (targetNode) paths.set(targetNode, path2);
      }
      path2.setup(parentPath, container, listKey, key2);
      return path2;
    }
    getScope(scope2) {
      return this.isScope() ? new _index2.default(this) : scope2;
    }
    setData(key2, val) {
      if (this.data == null) {
        this.data = /* @__PURE__ */ Object.create(null);
      }
      return this.data[key2] = val;
    }
    getData(key2, def) {
      if (this.data == null) {
        this.data = /* @__PURE__ */ Object.create(null);
      }
      let val = this.data[key2];
      if (val === void 0 && def !== void 0) val = this.data[key2] = def;
      return val;
    }
    hasNode() {
      return this.node != null;
    }
    buildCodeFrameError(msg, Error2 = SyntaxError) {
      return this.hub.buildError(this.node, msg, Error2);
    }
    traverse(visitor, state2) {
      (0, _index.default)(this.node, visitor, this.scope, state2, this);
    }
    set(key2, node2) {
      validate2(this.node, key2, node2);
      this.node[key2] = node2;
    }
    getPathLocation() {
      const parts = [];
      let path2 = this;
      do {
        let key2 = path2.key;
        if (path2.inList) key2 = `${path2.listKey}[${key2}]`;
        parts.unshift(key2);
      } while (path2 = path2.parentPath);
      return parts.join(".");
    }
    debug(message) {
      if (!debug2.enabled) return;
      debug2(`${this.getPathLocation()} ${this.type}: ${message}`);
    }
    toString() {
      return (0, _generator.default)(this.node).code;
    }
    get inList() {
      return !!this.listKey;
    }
    set inList(inList) {
      if (!inList) {
        this.listKey = null;
      }
    }
    get parentKey() {
      return this.listKey || this.key;
    }
    get shouldSkip() {
      return !!(this._traverseFlags & SHOULD_SKIP);
    }
    set shouldSkip(v) {
      if (v) {
        this._traverseFlags |= SHOULD_SKIP;
      } else {
        this._traverseFlags &= ~SHOULD_SKIP;
      }
    }
    get shouldStop() {
      return !!(this._traverseFlags & SHOULD_STOP);
    }
    set shouldStop(v) {
      if (v) {
        this._traverseFlags |= SHOULD_STOP;
      } else {
        this._traverseFlags &= ~SHOULD_STOP;
      }
    }
    get removed() {
      return !!(this._traverseFlags & REMOVED);
    }
    set removed(v) {
      if (v) {
        this._traverseFlags |= REMOVED;
      } else {
        this._traverseFlags &= ~REMOVED;
      }
    }
  }
  Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments);
  {
    NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
  }
  for (const type of t.TYPES) {
    const typeKey = `is${type}`;
    const fn2 = t[typeKey];
    NodePath.prototype[typeKey] = function(opts) {
      return fn2(this.node, opts);
    };
    NodePath.prototype[`assert${type}`] = function(opts) {
      if (!fn2(this.node, opts)) {
        throw new TypeError(`Expected node path of type ${type}`);
      }
    };
  }
  Object.assign(NodePath.prototype, NodePath_virtual_types_validator);
  for (const type of Object.keys(virtualTypes2)) {
    if (type[0] === "_") continue;
    if (!t.TYPES.includes(type)) t.TYPES.push(type);
  }
  path.default = NodePath;
  return path;
}
var hasRequiredContext;
function requireContext() {
  if (hasRequiredContext) return context$1;
  hasRequiredContext = 1;
  Object.defineProperty(context$1, "__esModule", {
    value: true
  });
  context$1.default = void 0;
  var _index = requirePath();
  var _t = requireLib$O();
  const {
    VISITOR_KEYS
  } = _t;
  class TraversalContext {
    constructor(scope2, opts, state2, parentPath) {
      this.queue = null;
      this.priorityQueue = null;
      this.parentPath = parentPath;
      this.scope = scope2;
      this.state = state2;
      this.opts = opts;
    }
    shouldVisit(node2) {
      const opts = this.opts;
      if (opts.enter || opts.exit) return true;
      if (opts[node2.type]) return true;
      const keys2 = VISITOR_KEYS[node2.type];
      if (!(keys2 != null && keys2.length)) return false;
      for (const key2 of keys2) {
        if (node2[key2]) {
          return true;
        }
      }
      return false;
    }
    create(node2, container, key2, listKey) {
      return _index.default.get({
        parentPath: this.parentPath,
        parent: node2,
        container,
        key: key2,
        listKey
      });
    }
    maybeQueue(path2, notPriority) {
      if (this.queue) {
        if (notPriority) {
          this.queue.push(path2);
        } else {
          this.priorityQueue.push(path2);
        }
      }
    }
    visitMultiple(container, parent, listKey) {
      if (container.length === 0) return false;
      const queue = [];
      for (let key2 = 0; key2 < container.length; key2++) {
        const node2 = container[key2];
        if (node2 && this.shouldVisit(node2)) {
          queue.push(this.create(parent, container, key2, listKey));
        }
      }
      return this.visitQueue(queue);
    }
    visitSingle(node2, key2) {
      if (this.shouldVisit(node2[key2])) {
        return this.visitQueue([this.create(node2, node2, key2)]);
      } else {
        return false;
      }
    }
    visitQueue(queue) {
      this.queue = queue;
      this.priorityQueue = [];
      const visited = /* @__PURE__ */ new WeakSet();
      let stop = false;
      let visitIndex = 0;
      for (; visitIndex < queue.length; ) {
        const path2 = queue[visitIndex];
        visitIndex++;
        path2.resync();
        if (path2.contexts.length === 0 || path2.contexts[path2.contexts.length - 1] !== this) {
          path2.pushContext(this);
        }
        if (path2.key === null) continue;
        const {
          node: node2
        } = path2;
        if (visited.has(node2)) continue;
        if (node2) visited.add(node2);
        if (path2.visit()) {
          stop = true;
          break;
        }
        if (this.priorityQueue.length) {
          stop = this.visitQueue(this.priorityQueue);
          this.priorityQueue = [];
          this.queue = queue;
          if (stop) break;
        }
      }
      for (let i = 0; i < visitIndex; i++) {
        queue[i].popContext();
      }
      this.queue = null;
      return stop;
    }
    visit(node2, key2) {
      const nodes = node2[key2];
      if (!nodes) return false;
      if (Array.isArray(nodes)) {
        return this.visitMultiple(nodes, node2, key2);
      } else {
        return this.visitSingle(node2, key2);
      }
    }
  }
  context$1.default = TraversalContext;
  return context$1;
}
var hasRequiredTraverseNode;
function requireTraverseNode() {
  if (hasRequiredTraverseNode) return traverseNode;
  hasRequiredTraverseNode = 1;
  Object.defineProperty(traverseNode, "__esModule", {
    value: true
  });
  traverseNode.traverseNode = traverseNode$1;
  var _context = requireContext();
  var _t = requireLib$O();
  const {
    VISITOR_KEYS
  } = _t;
  function traverseNode$1(node2, opts, scope2, state2, path2, skipKeys, visitSelf) {
    const keys2 = VISITOR_KEYS[node2.type];
    if (!keys2) return false;
    const context2 = new _context.default(scope2, opts, state2, path2);
    if (visitSelf) {
      if (skipKeys != null && skipKeys[path2.parentKey]) return false;
      return context2.visitQueue([path2]);
    }
    for (const key2 of keys2) {
      if (skipKeys != null && skipKeys[key2]) continue;
      if (context2.visit(node2, key2)) {
        return true;
      }
    }
    return false;
  }
  return traverseNode;
}
var hub = {};
var hasRequiredHub;
function requireHub() {
  if (hasRequiredHub) return hub;
  hasRequiredHub = 1;
  Object.defineProperty(hub, "__esModule", {
    value: true
  });
  hub.default = void 0;
  class Hub {
    getCode() {
    }
    getScope() {
    }
    addHelper() {
      throw new Error("Helpers are not supported by the default hub.");
    }
    buildError(node2, msg, Error2 = TypeError) {
      return new Error2(msg);
    }
  }
  hub.default = Hub;
  return hub;
}
var hasRequiredLib$E;
function requireLib$E() {
  if (hasRequiredLib$E) return lib$O;
  hasRequiredLib$E = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Hub", {
      enumerable: true,
      get: function() {
        return _hub.default;
      }
    });
    Object.defineProperty(exports, "NodePath", {
      enumerable: true,
      get: function() {
        return _index.default;
      }
    });
    Object.defineProperty(exports, "Scope", {
      enumerable: true,
      get: function() {
        return _index2.default;
      }
    });
    exports.visitors = exports.default = void 0;
    var visitors2 = requireVisitors();
    exports.visitors = visitors2;
    var _t = requireLib$O();
    var cache2 = requireCache();
    var _traverseNode = requireTraverseNode();
    var _index = requirePath();
    var _index2 = requireScope();
    var _hub = requireHub();
    const {
      VISITOR_KEYS,
      removeProperties: removeProperties2,
      traverseFast: traverseFast2
    } = _t;
    function traverse2(parent, opts = {}, scope2, state2, parentPath, visitSelf) {
      if (!parent) return;
      if (!opts.noScope && !scope2) {
        if (parent.type !== "Program" && parent.type !== "File") {
          throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
        }
      }
      if (!parentPath && visitSelf) {
        throw new Error("visitSelf can only be used when providing a NodePath.");
      }
      if (!VISITOR_KEYS[parent.type]) {
        return;
      }
      visitors2.explode(opts);
      (0, _traverseNode.traverseNode)(parent, opts, scope2, state2, parentPath, null, visitSelf);
    }
    exports.default = traverse2;
    traverse2.visitors = visitors2;
    traverse2.verify = visitors2.verify;
    traverse2.explode = visitors2.explode;
    traverse2.cheap = function(node2, enter) {
      traverseFast2(node2, enter);
      return;
    };
    traverse2.node = function(node2, opts, scope2, state2, path2, skipKeys) {
      (0, _traverseNode.traverseNode)(node2, opts, scope2, state2, path2, skipKeys);
    };
    traverse2.clearNode = function(node2, opts) {
      removeProperties2(node2, opts);
    };
    traverse2.removeProperties = function(tree, opts) {
      traverseFast2(tree, traverse2.clearNode, opts);
      return tree;
    };
    function hasDenylistedType(path2, state2) {
      if (path2.node.type === state2.type) {
        state2.has = true;
        path2.stop();
      }
    }
    traverse2.hasType = function(tree, type, denylistTypes) {
      if (denylistTypes != null && denylistTypes.includes(tree.type)) return false;
      if (tree.type === type) return true;
      const state2 = {
        has: false,
        type
      };
      traverse2(tree, {
        noScope: true,
        denylist: denylistTypes,
        enter: hasDenylistedType
      }, null, state2);
      return state2.has;
    };
    traverse2.cache = cache2;
  })(lib$O);
  return lib$O;
}
var helpers = {};
var helpersGenerated = {};
var hasRequiredHelpersGenerated;
function requireHelpersGenerated() {
  if (hasRequiredHelpersGenerated) return helpersGenerated;
  hasRequiredHelpersGenerated = 1;
  Object.defineProperty(helpersGenerated, "__esModule", {
    value: true
  });
  helpersGenerated.default = void 0;
  var _template = requireLib$G();
  function helper(minVersion, source2) {
    return Object.freeze({
      minVersion,
      ast: () => _template.default.program.ast(source2, {
        preserveComments: true
      })
    });
  }
  helpersGenerated.default = Object.freeze({
    AsyncGenerator: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i="return"===r?"return":"next";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?"return":"normal",t)}),(function(e){resume("throw",e)}))}catch(e){settle("throw",e)}}function settle(e,n){switch(e){case"return":r.resolve({value:n,done:!0});break;case"throw":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},"function"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke("next",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke("throw",e)},AsyncGenerator.prototype.return=function(e){return this._invoke("return",e)};'),
    OverloadYield: helper("7.18.14", "export default function _OverloadYield(t,e){this.v=t,this.k=e}"),
    applyDecs: helper("7.17.8", 'import setFunctionName from"setFunctionName";import toPropertyKey from"toPropertyKey";function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,"getMetadata"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,"constructor"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,"setMetadata"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for("Symbol.metadata")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for("Symbol.metadata")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,"addInitializer"),old_assertCallable(a,"An initializer"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var d,u,f={kind:c,name:l?"#"+t:toPropertyKey(t),isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error("attempted to call "+t+" after decoration was finished")}function old_assertMetadataKey(e){if("symbol"!=typeof e)throw new TypeError("Metadata keys must be symbols, received: "+e)}function old_assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if("object"!==a||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&old_assertCallable(t.get,"accessor.get"),void 0!==t.set&&old_assertCallable(t.set,"accessor.set"),void 0!==t.init&&old_assertCallable(t.init,"accessor.init"),void 0!==t.initializer&&old_assertCallable(t.initializer,"accessor.initializer")}else if("function"!==a)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&void 0!==console&&console.warn(".initializer has been renamed to .init as of March 2022"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u="get"):3===o?(c={get:a[3]},u="get"):4===o?(c={set:a[3]},u="set"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],"#"+r,"set"),setFunctionName(a[3],"#"+r,u))):0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),"function"==typeof h)void 0!==(p=old_memberDec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:"function"==typeof d?d=[d,b]:d.push(b)))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.value=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:"class",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}export default function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}'),
    applyDecs2203: helper("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:"class",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;export default function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}'),
    applyDecs2203R: helper("7.20.0", 'import setFunctionName from"setFunctionName";import toPropertyKey from"toPropertyKey";function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:o?"#"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o?(0===a||1===a?(c={get:r[3],set:r[4]},u="get"):3===a?(c={get:r[3]},u="get"):4===a?(c={set:r[3]},u="set"):c={value:r[3]},0!==a&&(1===a&&setFunctionName(r[4],"#"+n,"set"),setFunctionName(r[3],"#"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),"function"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(void 0===l?l=y:"function"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}export default function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}'),
    applyDecs2301: helper("7.21.0", 'import checkInRHS from"checkInRHS";import setFunctionName from"setFunctionName";import toPropertyKey from"toPropertyKey";function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u="accessor";break;case 2:u="method";break;case 3:u="getter";break;case 4:u="setter";break;default:u="field"}var l,f,p={kind:u,name:s?"#"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f="get"):3===a?(u={get:r[3]},f="get"):4===a?(u={set:r[3]},f="set"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,"#"+n,"set"),setFunctionName(u[f||"value"],"#"+n,f))):0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),"function"==typeof g)void 0!==(h=memberDec(g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:"function"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.set=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}export default function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}'),
    applyDecs2305: helper("7.21.0", 'import checkInRHS from"checkInRHS";import setFunctionName from"setFunctionName";import toPropertyKey from"toPropertyKey";export default function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}function c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if("function"!=typeof e&&(n||void 0!==e))throw new TypeError(t+" must "+(r||"be")+" a function"+(n?"":" or undefined"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))throw new TypeError("Attempted to access private element on non-instance")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var w={},S=[],A=3===o?"get":4===o||d?"set":"value";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,"get"),set:function(e){t[4](this,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?"":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var D=v[j],E=r?v[j-1]:void 0,I={},O={kind:["field","accessor","method","getter","setter","class"][o],name:n,metadata:a,addInitializer:function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished");s(t,"An initializer","be",!0),c.push(t)}.bind(null,I)};try{if(b)(y=s(D.call(E,P,O),"class decorators","return"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),w.value}:(o<4&&(k=i(w,"get",m)),3!==o&&(F=i(w,"set",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if("object"==typeof P&&P)(y=s(P.get,"accessor.get"))&&(w.get=y),(y=s(P.set,"accessor.set"))&&(w.set=y),(y=s(P.init,"accessor.init"))&&S.push(y);else if(void 0!==P)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0")}else s(P,(p?"field":"method")+" decorators","return")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].call(e,t);return t})),p||b||(f?d?u.push(i(w,"get"),i(w,"set")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for("Symbol.metadata"),{configurable:!0,enumerable:!0,value:t})}if(arguments.length>=6)var l=a[Symbol.metadata||Symbol.for("Symbol.metadata")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=function(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+"/"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?"#"+h:toPropertyKey(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.length&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}'),
    applyDecs2311: helper("7.24.0", 'import checkInRHS from"checkInRHS";import setFunctionName from"setFunctionName";import toPropertyKey from"toPropertyKey";export default function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for("Symbol.metadata"),m=Object.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if("function"!=typeof e&&(r||void 0!==e))throw new TypeError(t+" must "+(n||"be")+" a function"+(r?"":" or undefined"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError("Attempted to access private element on non-instance")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){return function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?"get":j||D?"set":"value";if(f?(l||D?P={get:setFunctionName((function(){return v(this)}),r,"get"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?"":F)):l||(P=Object.getOwnPropertyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error("Decorating two elements with the same name ("+P[F].name+") is not supported yet");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var z=b(h[O],"A decorator","be",!0),A=n?h[O-1]:void 0,H={},K={kind:["field","accessor","method","getter","setter","class"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished");b(t,"An initializer","be",!0),i.push(t)}.bind(null,H)};if(w)c=z.call(A,N,K),H.v=1,b(c,"class decorators","return")&&(N=c);else if(K.static=s,K.private=f,c=K.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?function(e){return d(e),P.value}:I("get",0,d):function(e){return e[r]}),E||S||(c.set=f?I("set",0,d):function(e,t){e[r]=t}),N=z.call(A,D?{get:P.get,set:P.set}:P[F],K),H.v=1,D){if("object"==typeof N&&N)(c=b(N.get,"accessor.get"))&&(P.get=c),(c=b(N.set,"accessor.set"))&&(P.set=c),(c=b(N.init,"accessor.init"))&&k.unshift(c);else if(void 0!==N)throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined")}else b(N,(l?"field":"method")+" decorators","return")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s,0)),l||w||(f?D?u.splice(-1,0,I("get",s),I("set",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?"#"+p:toPropertyKey(p),l,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}'),
    assertClassBrand: helper("7.24.0", 'export default function _assertClassBrand(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}'),
    asyncGeneratorDelegate: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump("next",t)},"function"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump("throw",t)}),"function"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump("return",t)}),e}'),
    asyncIterator: helper("7.15.9", 'export default function _asyncIterator(r){var n,t,o,e=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t="@@asyncIterator",o="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}'),
    awaitAsyncGenerator: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}'),
    callSuper: helper("7.23.8", 'import getPrototypeOf from"getPrototypeOf";import isNativeReflectConstruct from"isNativeReflectConstruct";import possibleConstructorReturn from"possibleConstructorReturn";export default function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Reflect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}'),
    checkInRHS: helper("7.20.5", `export default function _checkInRHS(e){if(Object(e)!==e)throw TypeError("right-hand side of 'in' should be an object, got "+(null!==e?typeof e:"null"));return e}`),
    classPrivateFieldGet2: helper("7.24.0", 'import assertClassBrand from"assertClassBrand";export default function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}'),
    classPrivateFieldSet2: helper("7.24.0", 'import assertClassBrand from"assertClassBrand";export default function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}'),
    classPrivateGetter: helper("7.24.0", 'import assertClassBrand from"assertClassBrand";export default function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}'),
    classPrivateSetter: helper("7.24.0", 'import assertClassBrand from"assertClassBrand";export default function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}'),
    construct: helper("7.0.0-beta.0", 'import setPrototypeOf from"setPrototypeOf";import isNativeReflectConstruct from"isNativeReflectConstruct";export default function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);var o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}'),
    defineAccessor: helper("7.20.7", "export default function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}"),
    dispose: helper("7.22.0", 'function dispose_SuppressedError(r,e){return"undefined"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}export default function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}'),
    importDeferProxy: helper("7.23.0", "export default function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}"),
    interopRequireWildcard: helper("7.14.0", 'function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}export default function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}'),
    isNativeReflectConstruct: helper("7.9.0", "export default function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}"),
    iterableToArrayLimit: helper("7.0.0-beta.0", 'export default function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}'),
    iterableToArrayLimitLoose: helper("7.0.0-beta.0", 'export default function _iterableToArrayLimitLoose(e,r){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var o,l=[];for(t=t.call(e);e.length<r&&!(o=t.next()).done;)l.push(o.value);return l}}'),
    jsx: helper("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;export default function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:""+E,ref:null,props:r,_owner:null}}'),
    objectSpread2: helper("7.5.0", 'import defineProperty from"defineProperty";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}export default function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}'),
    regeneratorRuntime: helper("7.18.0", `export default function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(typeof e+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}`),
    setFunctionName: helper("7.23.6", 'export default function setFunctionName(e,t,n){"symbol"==typeof t&&(t=(t=t.description)?"["+t+"]":"");try{Object.defineProperty(e,"name",{configurable:!0,value:n?n+" "+t:t})}catch(e){}return e}'),
    toPrimitive: helper("7.1.5", 'export default function toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}'),
    toPropertyKey: helper("7.1.5", 'import toPrimitive from"toPrimitive";export default function toPropertyKey(t){var i=toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}'),
    toSetter: helper("7.24.0", 'export default function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},"_",{set:function(o){e[r]=o,t.apply(n,e)}})}'),
    typeof: helper("7.0.0-beta.0", 'export default function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}'),
    using: helper("7.22.0", 'export default function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(e)var r=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==r&&(r=n[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof r)throw new TypeError("Property [Symbol.dispose] is not a function.");return o.push({v:n,d:r,a:e}),n}'),
    usingCtx: helper("7.23.9", 'export default function _usingCtx(){var r="function"==typeof SuppressedError?SuppressedError:function(r,n){var e=Error();return e.name="SuppressedError",e.suppressed=n,e.error=r,e},n={},e=[];function using(r,n){if(null!=n){if(Object(n)!==n)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(r)var o=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==o&&(o=n[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof o)throw new TypeError("Property [Symbol.dispose] is not a function.");e.push({v:n,d:o,a:r})}return n}return{e:n,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o=this.e;function next(){for(;r=e.pop();)try{var r,t=r.d.call(r.v);if(r.a)return Promise.resolve(t).then(next,err)}catch(r){return err(r)}if(o!==n)throw o}function err(e){return o=o!==n?new r(o,e):e,next()}return next()}}}'),
    wrapRegExp: helper("7.19.0", 'import setPrototypeOf from"setPrototypeOf";import inherits from"inherits";export default function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if("number"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if("string"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/g,(function(e,r){var t=o[r];return"$"+(Array.isArray(t)?t.join("$"):t)})))}if("function"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}')
  });
  return helpersGenerated;
}
var hasRequiredHelpers;
function requireHelpers() {
  if (hasRequiredHelpers) return helpers;
  hasRequiredHelpers = 1;
  Object.defineProperty(helpers, "__esModule", {
    value: true
  });
  helpers.default = void 0;
  var _template = requireLib$G();
  var _helpersGenerated = requireHelpersGenerated();
  const helpers$1 = Object.assign({
    __proto__: null
  }, _helpersGenerated.default);
  helpers.default = helpers$1;
  const helper = (minVersion) => (tpl) => ({
    minVersion,
    ast: () => _template.default.program.ast(tpl)
  });
  {
    helpers$1.AwaitValue = helper("7.0.0-beta.0")`
    export default function _AwaitValue(value) {
      this.wrapped = value;
    }
  `;
  }
  helpers$1.wrapAsyncGenerator = helper("7.0.0-beta.0")`
  import AsyncGenerator from "AsyncGenerator";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
`;
  helpers$1.asyncToGenerator = helper("7.0.0-beta.0")`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }
`;
  helpers$1.classCallCheck = helper("7.0.0-beta.0")`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
`;
  helpers$1.createClass = helper("7.0.0-beta.0")`
  import toPropertyKey from "toPropertyKey";
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
`;
  {
    helpers$1.defineEnumerableProperties = helper("7.0.0-beta.0")`
    export default function _defineEnumerableProperties(obj, descs) {
      for (var key in descs) {
        var desc = descs[key];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, key, desc);
      }

      // Symbols are not enumerated over by for-in loops. If native
      // Symbols are available, fetch all of the descs object's own
      // symbol properties and define them on our target object too.
      if (Object.getOwnPropertySymbols) {
        var objectSymbols = Object.getOwnPropertySymbols(descs);
        for (var i = 0; i < objectSymbols.length; i++) {
          var sym = objectSymbols[i];
          var desc = descs[sym];
          desc.configurable = desc.enumerable = true;
          if ("value" in desc) desc.writable = true;
          Object.defineProperty(obj, sym, desc);
        }
      }
      return obj;
    }
`;
  }
  helpers$1.defaults = helper("7.0.0-beta.0")`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
`;
  helpers$1.defineProperty = helper("7.0.0-beta.0")`
  import toPropertyKey from "toPropertyKey";
  export default function _defineProperty(obj, key, value) {
    key = toPropertyKey(key);
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
`;
  helpers$1.extends = helper("7.0.0-beta.0")`
  export default function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
`;
  {
    helpers$1.objectSpread = helper("7.0.0-beta.0")`
    import defineProperty from "defineProperty";

    export default function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = (arguments[i] != null) ? Object(arguments[i]) : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
          ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
  `;
  }
  helpers$1.inherits = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    // We can't use defineProperty to set the prototype in a single step because it
    // doesn't work in Chrome <= 36. https://github.com/babel/babel/issues/14056
    // V8 bug: https://bugs.chromium.org/p/v8/issues/detail?id=3334
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
`;
  helpers$1.inheritsLoose = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  }
`;
  helpers$1.getPrototypeOf = helper("7.0.0-beta.0")`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
`;
  helpers$1.setPrototypeOf = helper("7.0.0-beta.0")`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };
    return _setPrototypeOf(o, p);
  }
`;
  helpers$1.isNativeFunction = helper("7.0.0-beta.0")`
  export default function _isNativeFunction(fn) {
    // Note: This function returns "true" for core-js functions.
    try {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    } catch (e) {
      // Firefox 31 throws when "toString" is applied to an HTMLElement
      return typeof fn === "function";
    }
  }
`;
  helpers$1.wrapNativeSuper = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import setPrototypeOf from "setPrototypeOf";
  import isNativeFunction from "isNativeFunction";
  import construct from "construct";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
`;
  helpers$1.instanceof = helper("7.0.0-beta.0")`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return !!right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
`;
  helpers$1.interopRequireDefault = helper("7.0.0-beta.0")`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
`;
  helpers$1.newArrowCheck = helper("7.0.0-beta.0")`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }
`;
  helpers$1.objectDestructuringEmpty = helper("7.0.0-beta.0")`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure " + obj);
  }
`;
  helpers$1.objectWithoutPropertiesLoose = helper("7.0.0-beta.0")`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
`;
  helpers$1.objectWithoutProperties = helper("7.0.0-beta.0")`
  import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
`;
  helpers$1.assertThisInitialized = helper("7.0.0-beta.0")`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
`;
  helpers$1.possibleConstructorReturn = helper("7.0.0-beta.0")`
  import assertThisInitialized from "assertThisInitialized";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return assertThisInitialized(self);
  }
`;
  {
    helpers$1.createSuper = helper("7.9.0")`
    import getPrototypeOf from "getPrototypeOf";
    import isNativeReflectConstruct from "isNativeReflectConstruct";
    import possibleConstructorReturn from "possibleConstructorReturn";

    export default function _createSuper(Derived) {
      var hasNativeReflectConstruct = isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          // NOTE: This doesn't work if this.__proto__.constructor has been modified.
          var NewTarget = getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn(this, result);
      }
    }
`;
  }
  helpers$1.superPropBase = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
`;
  helpers$1.get = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";

  export default function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get.bind();
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          // STEP 3. If receiver is not present, then set receiver to target.
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }
    return _get.apply(this, arguments);
  }
`;
  helpers$1.set = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";
  import defineProperty from "defineProperty";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // "define on receiver" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new TypeError('failed to set property');
    }

    return value;
  }
`;
  helpers$1.taggedTemplateLiteral = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
`;
  helpers$1.taggedTemplateLiteralLoose = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
`;
  helpers$1.readOnlyError = helper("7.0.0-beta.0")`
  export default function _readOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is read-only");
  }
`;
  helpers$1.writeOnlyError = helper("7.12.13")`
  export default function _writeOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is write-only");
  }
`;
  helpers$1.classNameTDZError = helper("7.0.0-beta.0")`
  export default function _classNameTDZError(name) {
    throw new ReferenceError("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
  }
`;
  helpers$1.temporalUndefined = helper("7.0.0-beta.0")`
  // This function isn't mean to be called, but to be used as a reference.
  // We can't use a normal object because it isn't hoisted.
  export default function _temporalUndefined() {}
`;
  helpers$1.tdz = helper("7.5.5")`
  export default function _tdzError(name) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  }
`;
  helpers$1.temporalRef = helper("7.0.0-beta.0")`
  import undef from "temporalUndefined";
  import err from "tdz";

  export default function _temporalRef(val, name) {
    return val === undef ? err(name) : val;
  }
`;
  helpers$1.slicedToArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimit from "iterableToArrayLimit";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArray(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimit(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`;
  helpers$1.slicedToArrayLoose = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArrayLoose(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimitLoose(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`;
  helpers$1.toArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _toArray(arr) {
    return (
      arrayWithHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableRest()
    );
  }
`;
  helpers$1.toConsumableArray = helper("7.0.0-beta.0")`
  import arrayWithoutHoles from "arrayWithoutHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableSpread from "nonIterableSpread";

  export default function _toConsumableArray(arr) {
    return (
      arrayWithoutHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableSpread()
    );
  }
`;
  helpers$1.arrayWithoutHoles = helper("7.0.0-beta.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }
`;
  helpers$1.arrayWithHoles = helper("7.0.0-beta.0")`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
`;
  helpers$1.maybeArrayLike = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _maybeArrayLike(next, arr, i) {
    if (arr && !Array.isArray(arr) && typeof arr.length === "number") {
      var len = arr.length;
      return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
    }
    return next(arr, i);
  }
`;
  helpers$1.iterableToArray = helper("7.0.0-beta.0")`
  export default function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
`;
  helpers$1.unsupportedIterableToArray = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  }
`;
  helpers$1.arrayLikeToArray = helper("7.9.0")`
  export default function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
`;
  helpers$1.nonIterableSpread = helper("7.0.0-beta.0")`
  export default function _nonIterableSpread() {
    throw new TypeError(
      "Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`;
  helpers$1.nonIterableRest = helper("7.0.0-beta.0")`
  export default function _nonIterableRest() {
    throw new TypeError(
      "Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`;
  helpers$1.createForOfIteratorHelper = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  // s: start (create the iterator)
  // n: next
  // e: error (called whenever something throws)
  // f: finish (always called at the end)

  export default function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === "number")
      ) {
        if (it) o = it;
        var i = 0;
        var F = function(){};
        return {
          s: F,
          n: function() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          },
          e: function(e) { throw e; },
          f: F,
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true, didErr = false, err;

    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
`;
  helpers$1.createForOfIteratorHelperLoose = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (it) return (it = it.call(o)).next.bind(it);

    // Fallback for engines without symbol support
    if (
      Array.isArray(o) ||
      (it = unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      }
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
`;
  helpers$1.skipFirstGeneratorNext = helper("7.0.0-beta.0")`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
`;
  helpers$1.initializerWarningHelper = helper("7.0.0-beta.0")`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'transform-class-properties is enabled and runs after the decorators transform.'
        );
    }
`;
  helpers$1.initializerDefineProperty = helper("7.0.0-beta.0")`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
`;
  helpers$1.applyDecoratedDescriptor = helper("7.0.0-beta.0")`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object.keys(descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            Object.defineProperty(target, property, desc);
            desc = null;
        }

        return desc;
    }
`;
  helpers$1.classPrivateFieldLooseKey = helper("7.0.0-beta.0")`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return "__private_" + (id++) + "_" + name;
  }
`;
  helpers$1.classPrivateFieldLooseBase = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
`;
  helpers$1.classPrivateFieldGet = helper("7.0.0-beta.0")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classPrivateFieldGet2 from "classPrivateFieldGet2";
  export default function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = classPrivateFieldGet2(privateMap, receiver);
    return classApplyDescriptorGet(receiver, descriptor);
  }
`;
  helpers$1.classPrivateFieldSet = helper("7.0.0-beta.0")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classPrivateFieldGet2 from "classPrivateFieldGet2";
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = classPrivateFieldGet2(privateMap, receiver);
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`;
  helpers$1.classPrivateFieldDestructureSet = helper("7.4.4")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classPrivateFieldGet2 from "classPrivateFieldGet2";
  export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
    var descriptor = classPrivateFieldGet2(privateMap, receiver);
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`;
  helpers$1.classExtractFieldDescriptor = helper("7.13.10")`
  import classPrivateFieldGet2 from "classPrivateFieldGet2";

  export default function _classExtractFieldDescriptor(receiver, privateMap) {
    return classPrivateFieldGet2(privateMap, receiver);
  }
`;
  helpers$1.classStaticPrivateFieldSpecGet = helper("7.0.2")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import assertClassBrand from "assertClassBrand";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    assertClassBrand(classConstructor, receiver);
    classCheckPrivateStaticFieldDescriptor(descriptor, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`;
  helpers$1.classStaticPrivateFieldSpecSet = helper("7.0.2")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import assertClassBrand from "assertClassBrand";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    assertClassBrand(classConstructor, receiver);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`;
  helpers$1.classStaticPrivateMethodGet = helper("7.3.2")`
  import assertClassBrand from "assertClassBrand";
  export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
    assertClassBrand(classConstructor, receiver);
    return method;
  }
`;
  helpers$1.classStaticPrivateMethodSet = helper("7.3.2")`
  export default function _classStaticPrivateMethodSet() {
    throw new TypeError("attempted to set read only static private field");
  }
`;
  helpers$1.classApplyDescriptorGet = helper("7.13.10")`
  export default function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
`;
  helpers$1.classApplyDescriptorSet = helper("7.13.10")`
  export default function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }
`;
  helpers$1.classApplyDescriptorDestructureSet = helper("7.13.10")`
  export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
    if (descriptor.set) {
      if (!("__destrObj" in descriptor)) {
        descriptor.__destrObj = {
          set value(v) {
            descriptor.set.call(receiver, v)
          },
        };
      }
      return descriptor.__destrObj;
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }

      return descriptor;
    }
  }
`;
  helpers$1.classStaticPrivateFieldDestructureSet = helper("7.13.10")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import assertClassBrand from "assertClassBrand";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
    assertClassBrand(classConstructor, receiver);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`;
  helpers$1.classCheckPrivateStaticAccess = helper("7.13.10")`
  import assertClassBrand from "assertClassBrand";
  export default function _classCheckPrivateStaticAccess(receiver, classConstructor, returnValue) {
    return assertClassBrand(classConstructor, receiver, returnValue);
  }
`;
  helpers$1.classCheckPrivateStaticFieldDescriptor = helper("7.13.10")`
  export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
    if (descriptor === undefined) {
      throw new TypeError("attempted to " + action + " private static field before its declaration");
    }
  }
`;
  helpers$1.decorate = helper("7.1.5")`
  import toArray from "toArray";
  import toPropertyKey from "toPropertyKey";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = "static" | "prototype" | "own";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: "method",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: "field",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: "Descriptor",
    kind: "class",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: "method",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: "field",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
    mixins /*: ?Array<Function> */,
  ) /*: Class<*> */ {
    var api = _getDecoratorsApi();
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        api = mixins[i](api);
      }
    }

    var r = factory(function initialize(O) {
      api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    api.initializeClassElements(r.F, decorated.elements);

    return api.runClassFinishers(r.F, decorated.finishers);
  }

  function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
      return api;
    };

    var api = {
      elementsDefinitionOrder: [["method"], ["field"]],

      // InitializeInstanceElements
      initializeInstanceElements: function(
        /*::<C>*/ O /*: C */,
        elements /*: ElementDescriptor[] */,
      ) {
        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (element.kind === kind && element.placement === "own") {
              this.defineClassElement(O, element);
            }
          }, this);
        }, this);
      },

      // InitializeClassElements
      initializeClassElements: function(
        /*::<C>*/ F /*: Class<C> */,
        elements /*: ElementDescriptor[] */,
      ) {
        var proto = F.prototype;

        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            var placement = element.placement;
            if (
              element.kind === kind &&
              (placement === "static" || placement === "prototype")
            ) {
              var receiver = placement === "static" ? F : proto;
              this.defineClassElement(receiver, element);
            }
          }, this);
        }, this);
      },

      // DefineClassElement
      defineClassElement: function(
        /*::<C>*/ receiver /*: C | Class<C> */,
        element /*: ElementDescriptor */,
      ) {
        var descriptor /*: PropertyDescriptor */ = element.descriptor;
        if (element.kind === "field") {
          var initializer = element.initializer;
          descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver),
          };
        }
        Object.defineProperty(receiver, element.key, descriptor);
      },

      // DecorateClass
      decorateClass: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var newElements /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];
        var placements /*: Placements */ = {
          static: [],
          prototype: [],
          own: [],
        };

        elements.forEach(function(element /*: ElementDescriptor */) {
          this.addElementPlacement(element, placements);
        }, this);

        elements.forEach(function(element /*: ElementDescriptor */) {
          if (!_hasDecorators(element)) return newElements.push(element);

          var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
            element,
            placements,
          );
          newElements.push(elementFinishersExtras.element);
          newElements.push.apply(newElements, elementFinishersExtras.extras);
          finishers.push.apply(finishers, elementFinishersExtras.finishers);
        }, this);

        if (!decorators) {
          return { elements: newElements, finishers: finishers };
        }

        var result /*: ElementsFinishers */ = this.decorateConstructor(
          newElements,
          decorators,
        );
        finishers.push.apply(finishers, result.finishers);
        result.finishers = finishers;

        return result;
      },

      // AddElementPlacement
      addElementPlacement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
        silent /*: boolean */,
      ) {
        var keys = placements[element.placement];
        if (!silent && keys.indexOf(element.key) !== -1) {
          throw new TypeError("Duplicated element (" + element.key + ")");
        }
        keys.push(element.key);
      },

      // DecorateElement
      decorateElement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
      ) /*: ElementFinishersExtras */ {
        var extras /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];

        for (
          var decorators = element.decorators, i = decorators.length - 1;
          i >= 0;
          i--
        ) {
          // (inlined) RemoveElementPlacement
          var keys = placements[element.placement];
          keys.splice(keys.indexOf(element.key), 1);

          var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
            element,
          );
          var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
            (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
              elementObject,
          );

          element = elementFinisherExtras.element;
          this.addElementPlacement(element, placements);

          if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
          }

          var newExtras /*: ElementDescriptor[] | void */ =
            elementFinisherExtras.extras;
          if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
              this.addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
          }
        }

        return { element: element, finishers: finishers, extras: extras };
      },

      // DecorateConstructor
      decorateConstructor: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var finishers /*: ClassFinisher[] */ = [];

        for (var i = decorators.length - 1; i >= 0; i--) {
          var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
          var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
            (0, decorators[i])(obj) /*: ClassObject */ || obj,
          );

          if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
          }

          if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;

            for (var j = 0; j < elements.length - 1; j++) {
              for (var k = j + 1; k < elements.length; k++) {
                if (
                  elements[j].key === elements[k].key &&
                  elements[j].placement === elements[k].placement
                ) {
                  throw new TypeError(
                    "Duplicated element (" + elements[j].key + ")",
                  );
                }
              }
            }
          }
        }

        return { elements: elements, finishers: finishers };
      },

      // FromElementDescriptor
      fromElementDescriptor: function(
        element /*: ElementDescriptor */,
      ) /*: ElementObject */ {
        var obj /*: ElementObject */ = {
          kind: element.kind,
          key: element.key,
          placement: element.placement,
          descriptor: element.descriptor,
        };

        var desc = {
          value: "Descriptor",
          configurable: true,
        };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        if (element.kind === "field") obj.initializer = element.initializer;

        return obj;
      },

      // ToElementDescriptors
      toElementDescriptors: function(
        elementObjects /*: ElementObject[] */,
      ) /*: ElementDescriptor[] */ {
        if (elementObjects === undefined) return;
        return toArray(elementObjects).map(function(elementObject) {
          var element = this.toElementDescriptor(elementObject);
          this.disallowProperty(elementObject, "finisher", "An element descriptor");
          this.disallowProperty(elementObject, "extras", "An element descriptor");
          return element;
        }, this);
      },

      // ToElementDescriptor
      toElementDescriptor: function(
        elementObject /*: ElementObject */,
      ) /*: ElementDescriptor */ {
        var kind = String(elementObject.kind);
        if (kind !== "method" && kind !== "field") {
          throw new TypeError(
            'An element descriptor\\'s .kind property must be either "method" or' +
              ' "field", but a decorator created an element descriptor with' +
              ' .kind "' +
              kind +
              '"',
          );
        }

        var key = toPropertyKey(elementObject.key);

        var placement = String(elementObject.placement);
        if (
          placement !== "static" &&
          placement !== "prototype" &&
          placement !== "own"
        ) {
          throw new TypeError(
            'An element descriptor\\'s .placement property must be one of "static",' +
              ' "prototype" or "own", but a decorator created an element descriptor' +
              ' with .placement "' +
              placement +
              '"',
          );
        }

        var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

        this.disallowProperty(elementObject, "elements", "An element descriptor");

        var element /*: ElementDescriptor */ = {
          kind: kind,
          key: key,
          placement: placement,
          descriptor: Object.assign({}, descriptor),
        };

        if (kind !== "field") {
          this.disallowProperty(elementObject, "initializer", "A method descriptor");
        } else {
          this.disallowProperty(
            descriptor,
            "get",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "set",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "value",
            "The property descriptor of a field descriptor",
          );

          element.initializer = elementObject.initializer;
        }

        return element;
      },

      toElementFinisherExtras: function(
        elementObject /*: ElementObject */,
      ) /*: ElementFinisherExtras */ {
        var element /*: ElementDescriptor */ = this.toElementDescriptor(
          elementObject,
        );
        var finisher /*: ClassFinisher */ = _optionalCallableProperty(
          elementObject,
          "finisher",
        );
        var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
          elementObject.extras,
        );

        return { element: element, finisher: finisher, extras: extras };
      },

      // FromClassDescriptor
      fromClassDescriptor: function(
        elements /*: ElementDescriptor[] */,
      ) /*: ClassObject */ {
        var obj = {
          kind: "class",
          elements: elements.map(this.fromElementDescriptor, this),
        };

        var desc = { value: "Descriptor", configurable: true };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        return obj;
      },

      // ToClassDescriptor
      toClassDescriptor: function(
        obj /*: ClassObject */,
      ) /*: ElementsFinisher */ {
        var kind = String(obj.kind);
        if (kind !== "class") {
          throw new TypeError(
            'A class descriptor\\'s .kind property must be "class", but a decorator' +
              ' created a class descriptor with .kind "' +
              kind +
              '"',
          );
        }

        this.disallowProperty(obj, "key", "A class descriptor");
        this.disallowProperty(obj, "placement", "A class descriptor");
        this.disallowProperty(obj, "descriptor", "A class descriptor");
        this.disallowProperty(obj, "initializer", "A class descriptor");
        this.disallowProperty(obj, "extras", "A class descriptor");

        var finisher = _optionalCallableProperty(obj, "finisher");
        var elements = this.toElementDescriptors(obj.elements);

        return { elements: elements, finisher: finisher };
      },

      // RunClassFinishers
      runClassFinishers: function(
        constructor /*: Class<*> */,
        finishers /*: ClassFinisher[] */,
      ) /*: Class<*> */ {
        for (var i = 0; i < finishers.length; i++) {
          var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
          if (newConstructor !== undefined) {
            // NOTE: This should check if IsConstructor(newConstructor) is false.
            if (typeof newConstructor !== "function") {
              throw new TypeError("Finishers must return a constructor.");
            }
            constructor = newConstructor;
          }
        }
        return constructor;
      },

      disallowProperty: function(obj, name, objectType) {
        if (obj[name] !== undefined) {
          throw new TypeError(objectType + " can't have a ." + name + " property.");
        }
      }
    };

    return api;
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
    } else if (def.kind === "get") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "set") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "field") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static
        ? "static"
        : def.kind === "field"
        ? "own"
        : "prototype",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(
      other /*: ElementDescriptor */,
    ) /*: boolean */ {
      return (
        other.kind === "method" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === "method" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              "Duplicated methods (" + element.key + ") can't be decorated.",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                "Decorators can't be placed on different accessors with for " +
                  "the same property (" +
                  element.key +
                  ").",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
  }

`;
  helpers$1.classPrivateMethodGet = helper("7.1.6")`
  import assertClassBrand from "assertClassBrand";
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    assertClassBrand(privateSet, receiver);
    return fn;
  }
`;
  helpers$1.checkPrivateRedeclaration = helper("7.14.1")`
  export default function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
`;
  helpers$1.classPrivateFieldInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateFieldInitSpec(obj, privateMap, value) {
    checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
`;
  helpers$1.classPrivateMethodInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateMethodInitSpec(obj, privateSet) {
    checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }
`;
  {
    helpers$1.classPrivateMethodSet = helper("7.1.6")`
    export default function _classPrivateMethodSet() {
      throw new TypeError("attempted to reassign private method");
    }
  `;
  }
  helpers$1.identity = helper("7.17.0")`
  export default function _identity(x) {
    return x;
  }
`;
  helpers$1.nullishReceiverError = helper("7.22.6")`
  export default function _nullishReceiverError(r) {
    throw new TypeError("Cannot set property of null or undefined.");
  }
`;
  return helpers;
}
var hasRequiredLib$D;
function requireLib$D() {
  if (hasRequiredLib$D) return lib$P;
  hasRequiredLib$D = 1;
  Object.defineProperty(lib$P, "__esModule", {
    value: true
  });
  lib$P.default = void 0;
  lib$P.ensure = ensure;
  lib$P.get = get;
  lib$P.getDependencies = getDependencies;
  lib$P.list = void 0;
  lib$P.minVersion = minVersion;
  var _traverse = requireLib$E();
  var _t = requireLib$O();
  var _helpers = requireHelpers();
  const {
    assignmentExpression,
    cloneNode: cloneNode2,
    expressionStatement,
    file: file2,
    identifier: identifier2
  } = _t;
  function makePath(path2) {
    const parts = [];
    for (; path2.parentPath; path2 = path2.parentPath) {
      parts.push(path2.key);
      if (path2.inList) parts.push(path2.listKey);
    }
    return parts.reverse().join(".");
  }
  let FileClass = void 0;
  function getHelperMetadata(file3) {
    const globals2 = /* @__PURE__ */ new Set();
    const localBindingNames = /* @__PURE__ */ new Set();
    const dependencies = /* @__PURE__ */ new Map();
    let exportName;
    let exportPath;
    const exportBindingAssignments = [];
    const importPaths = [];
    const importBindingsReferences = [];
    const dependencyVisitor = {
      ImportDeclaration(child) {
        const name = child.node.source.value;
        if (!_helpers.default[name]) {
          throw child.buildCodeFrameError(`Unknown helper ${name}`);
        }
        if (child.get("specifiers").length !== 1 || !child.get("specifiers.0").isImportDefaultSpecifier()) {
          throw child.buildCodeFrameError("Helpers can only import a default value");
        }
        const bindingIdentifier = child.node.specifiers[0].local;
        dependencies.set(bindingIdentifier, name);
        importPaths.push(makePath(child));
      },
      ExportDefaultDeclaration(child) {
        const decl = child.get("declaration");
        if (!decl.isFunctionDeclaration() || !decl.node.id) {
          throw decl.buildCodeFrameError("Helpers can only export named function declarations");
        }
        exportName = decl.node.id.name;
        exportPath = makePath(child);
      },
      ExportAllDeclaration(child) {
        throw child.buildCodeFrameError("Helpers can only export default");
      },
      ExportNamedDeclaration(child) {
        throw child.buildCodeFrameError("Helpers can only export default");
      },
      Statement(child) {
        if (child.isImportDeclaration() || child.isExportDeclaration()) return;
        child.skip();
      }
    };
    const referenceVisitor = {
      Program(path2) {
        const bindings = path2.scope.getAllBindings();
        Object.keys(bindings).forEach((name) => {
          if (name === exportName) return;
          if (dependencies.has(bindings[name].identifier)) return;
          localBindingNames.add(name);
        });
      },
      ReferencedIdentifier(child) {
        const name = child.node.name;
        const binding2 = child.scope.getBinding(name);
        if (!binding2) {
          if (name !== "arguments" || child.scope.path.isProgram()) {
            globals2.add(name);
          }
        } else if (dependencies.has(binding2.identifier)) {
          importBindingsReferences.push(makePath(child));
        }
      },
      AssignmentExpression(child) {
        const left = child.get("left");
        if (!(exportName in left.getBindingIdentifiers())) return;
        if (!left.isIdentifier()) {
          throw left.buildCodeFrameError("Only simple assignments to exports are allowed in helpers");
        }
        const binding2 = child.scope.getBinding(exportName);
        if (binding2 != null && binding2.scope.path.isProgram()) {
          exportBindingAssignments.push(makePath(child));
        }
      }
    };
    (0, _traverse.default)(file3.ast, dependencyVisitor, file3.scope);
    (0, _traverse.default)(file3.ast, referenceVisitor, file3.scope);
    if (!exportPath) throw new Error("Helpers must have a default export.");
    exportBindingAssignments.reverse();
    return {
      globals: Array.from(globals2),
      localBindingNames: Array.from(localBindingNames),
      dependencies,
      exportBindingAssignments,
      exportPath,
      exportName,
      importBindingsReferences,
      importPaths
    };
  }
  function permuteHelperAST(file3, metadata, id, localBindings, getDependency) {
    if (localBindings && !id) {
      throw new Error("Unexpected local bindings for module-based helpers.");
    }
    if (!id) return;
    const {
      localBindingNames,
      dependencies,
      exportBindingAssignments,
      exportPath,
      exportName,
      importBindingsReferences,
      importPaths
    } = metadata;
    const dependenciesRefs = {};
    dependencies.forEach((name, id2) => {
      dependenciesRefs[id2.name] = typeof getDependency === "function" && getDependency(name) || id2;
    });
    const toRename = {};
    const bindings = new Set(localBindings || []);
    if (id.type === "Identifier") bindings.add(id.name);
    localBindingNames.forEach((name) => {
      let newName = name;
      while (bindings.has(newName)) newName = "_" + newName;
      if (newName !== name) toRename[name] = newName;
    });
    if (id.type === "Identifier" && exportName !== id.name) {
      toRename[exportName] = id.name;
    }
    const {
      path: path2
    } = file3;
    const exp2 = path2.get(exportPath);
    const imps = importPaths.map((p) => path2.get(p));
    const impsBindingRefs = importBindingsReferences.map((p) => path2.get(p));
    const decl = exp2.get("declaration");
    if (id.type === "Identifier") {
      exp2.replaceWith(decl);
    } else if (id.type === "MemberExpression") {
      exportBindingAssignments.forEach((assignPath) => {
        const assign = path2.get(assignPath);
        assign.replaceWith(assignmentExpression("=", id, assign.node));
      });
      exp2.replaceWith(decl);
      path2.pushContainer("body", expressionStatement(assignmentExpression("=", id, identifier2(exportName))));
    } else {
      throw new Error("Unexpected helper format.");
    }
    Object.keys(toRename).forEach((name) => {
      path2.scope.rename(name, toRename[name]);
    });
    for (const path3 of imps) path3.remove();
    for (const path3 of impsBindingRefs) {
      const node2 = cloneNode2(dependenciesRefs[path3.node.name]);
      path3.replaceWith(node2);
    }
  }
  const helperData = /* @__PURE__ */ Object.create(null);
  function loadHelper(name) {
    if (!helperData[name]) {
      const helper = _helpers.default[name];
      if (!helper) {
        throw Object.assign(new ReferenceError(`Unknown helper ${name}`), {
          code: "BABEL_HELPER_UNKNOWN",
          helper: name
        });
      }
      const fn2 = () => {
        {
          if (!FileClass) {
            const fakeFile = {
              ast: file2(helper.ast()),
              path: null
            };
            (0, _traverse.default)(fakeFile.ast, {
              Program: (path2) => (fakeFile.path = path2).stop()
            });
            return fakeFile;
          }
        }
        return new FileClass({
          filename: `babel-helper://${name}`
        }, {
          ast: file2(helper.ast()),
          code: "[internal Babel helper code]",
          inputMap: null
        });
      };
      let metadata = null;
      helperData[name] = {
        minVersion: helper.minVersion,
        build(getDependency, id, localBindings) {
          const file3 = fn2();
          metadata || (metadata = getHelperMetadata(file3));
          permuteHelperAST(file3, metadata, id, localBindings, getDependency);
          return {
            nodes: file3.ast.program.body,
            globals: metadata.globals
          };
        },
        getDependencies() {
          metadata || (metadata = getHelperMetadata(fn2()));
          return Array.from(metadata.dependencies.values());
        }
      };
    }
    return helperData[name];
  }
  function get(name, getDependency, id, localBindings) {
    return loadHelper(name).build(getDependency, id, localBindings);
  }
  function minVersion(name) {
    return loadHelper(name).minVersion;
  }
  function getDependencies(name) {
    return loadHelper(name).getDependencies();
  }
  function ensure(name, newFileClass) {
    FileClass || (FileClass = newFileClass);
    loadHelper(name);
  }
  lib$P.list = Object.keys(_helpers.default).map((name) => name.replace(/^_/, ""));
  lib$P.default = get;
  return lib$P;
}
var lib$B = {};
var lib$A = {};
var importInjector = {};
var importBuilder = {};
var hasRequiredImportBuilder;
function requireImportBuilder() {
  if (hasRequiredImportBuilder) return importBuilder;
  hasRequiredImportBuilder = 1;
  Object.defineProperty(importBuilder, "__esModule", {
    value: true
  });
  importBuilder.default = void 0;
  var _assert = requireAssert();
  var _t = requireLib$O();
  const {
    callExpression,
    cloneNode: cloneNode2,
    expressionStatement,
    identifier: identifier2,
    importDeclaration,
    importDefaultSpecifier,
    importNamespaceSpecifier,
    importSpecifier,
    memberExpression,
    stringLiteral,
    variableDeclaration,
    variableDeclarator
  } = _t;
  class ImportBuilder {
    constructor(importedSource, scope2, hub2) {
      this._statements = [];
      this._resultName = null;
      this._importedSource = void 0;
      this._scope = scope2;
      this._hub = hub2;
      this._importedSource = importedSource;
    }
    done() {
      return {
        statements: this._statements,
        resultName: this._resultName
      };
    }
    import() {
      this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));
      return this;
    }
    require() {
      this._statements.push(expressionStatement(callExpression(identifier2("require"), [stringLiteral(this._importedSource)])));
      return this;
    }
    namespace(name = "namespace") {
      const local = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importNamespaceSpecifier(local)];
      this._resultName = cloneNode2(local);
      return this;
    }
    default(name) {
      const id = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importDefaultSpecifier(id)];
      this._resultName = cloneNode2(id);
      return this;
    }
    named(name, importName) {
      if (importName === "default") return this.default(name);
      const id = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importSpecifier(id, identifier2(importName))];
      this._resultName = cloneNode2(id);
      return this;
    }
    var(name) {
      const id = this._scope.generateUidIdentifier(name);
      let statement = this._statements[this._statements.length - 1];
      if (statement.type !== "ExpressionStatement") {
        _assert(this._resultName);
        statement = expressionStatement(this._resultName);
        this._statements.push(statement);
      }
      this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]);
      this._resultName = cloneNode2(id);
      return this;
    }
    defaultInterop() {
      return this._interop(this._hub.addHelper("interopRequireDefault"));
    }
    wildcardInterop() {
      return this._interop(this._hub.addHelper("interopRequireWildcard"));
    }
    _interop(callee) {
      const statement = this._statements[this._statements.length - 1];
      if (statement.type === "ExpressionStatement") {
        statement.expression = callExpression(callee, [statement.expression]);
      } else if (statement.type === "VariableDeclaration") {
        _assert(statement.declarations.length === 1);
        statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);
      } else {
        _assert.fail("Unexpected type.");
      }
      return this;
    }
    prop(name) {
      const statement = this._statements[this._statements.length - 1];
      if (statement.type === "ExpressionStatement") {
        statement.expression = memberExpression(statement.expression, identifier2(name));
      } else if (statement.type === "VariableDeclaration") {
        _assert(statement.declarations.length === 1);
        statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier2(name));
      } else {
        _assert.fail("Unexpected type:" + statement.type);
      }
      return this;
    }
    read(name) {
      this._resultName = memberExpression(this._resultName, identifier2(name));
    }
  }
  importBuilder.default = ImportBuilder;
  return importBuilder;
}
var isModule = {};
var hasRequiredIsModule;
function requireIsModule() {
  if (hasRequiredIsModule) return isModule;
  hasRequiredIsModule = 1;
  Object.defineProperty(isModule, "__esModule", {
    value: true
  });
  isModule.default = isModule$1;
  function isModule$1(path2) {
    return path2.node.sourceType === "module";
  }
  return isModule;
}
var hasRequiredImportInjector;
function requireImportInjector() {
  if (hasRequiredImportInjector) return importInjector;
  hasRequiredImportInjector = 1;
  Object.defineProperty(importInjector, "__esModule", {
    value: true
  });
  importInjector.default = void 0;
  var _assert = requireAssert();
  var _t = requireLib$O();
  var _importBuilder = requireImportBuilder();
  var _isModule = requireIsModule();
  const {
    numericLiteral,
    sequenceExpression
  } = _t;
  class ImportInjector {
    constructor(path2, importedSource, opts) {
      this._defaultOpts = {
        importedSource: null,
        importedType: "commonjs",
        importedInterop: "babel",
        importingInterop: "babel",
        ensureLiveReference: false,
        ensureNoContext: false,
        importPosition: "before"
      };
      const programPath = path2.find((p) => p.isProgram());
      this._programPath = programPath;
      this._programScope = programPath.scope;
      this._hub = programPath.hub;
      this._defaultOpts = this._applyDefaults(importedSource, opts, true);
    }
    addDefault(importedSourceIn, opts) {
      return this.addNamed("default", importedSourceIn, opts);
    }
    addNamed(importName, importedSourceIn, opts) {
      _assert(typeof importName === "string");
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
    }
    addNamespace(importedSourceIn, opts) {
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
    }
    addSideEffect(importedSourceIn, opts) {
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
    }
    _applyDefaults(importedSource, opts, isInit = false) {
      let newOpts;
      if (typeof importedSource === "string") {
        newOpts = Object.assign({}, this._defaultOpts, {
          importedSource
        }, opts);
      } else {
        _assert(!opts, "Unexpected secondary arguments.");
        newOpts = Object.assign({}, this._defaultOpts, importedSource);
      }
      if (!isInit && opts) {
        if (opts.nameHint !== void 0) newOpts.nameHint = opts.nameHint;
        if (opts.blockHoist !== void 0) newOpts.blockHoist = opts.blockHoist;
      }
      return newOpts;
    }
    _generateImport(opts, importName) {
      const isDefault = importName === "default";
      const isNamed = !!importName && !isDefault;
      const isNamespace = importName === null;
      const {
        importedSource,
        importedType,
        importedInterop,
        importingInterop,
        ensureLiveReference,
        ensureNoContext,
        nameHint,
        importPosition,
        blockHoist
      } = opts;
      let name = nameHint || importName;
      const isMod = (0, _isModule.default)(this._programPath);
      const isModuleForNode = isMod && importingInterop === "node";
      const isModuleForBabel = isMod && importingInterop === "babel";
      if (importPosition === "after" && !isMod) {
        throw new Error(`"importPosition": "after" is only supported in modules`);
      }
      const builder2 = new _importBuilder.default(importedSource, this._programScope, this._hub);
      if (importedType === "es6") {
        if (!isModuleForNode && !isModuleForBabel) {
          throw new Error("Cannot import an ES6 module from CommonJS");
        }
        builder2.import();
        if (isNamespace) {
          builder2.namespace(nameHint || importedSource);
        } else if (isDefault || isNamed) {
          builder2.named(name, importName);
        }
      } else if (importedType !== "commonjs") {
        throw new Error(`Unexpected interopType "${importedType}"`);
      } else if (importedInterop === "babel") {
        if (isModuleForNode) {
          name = name !== "default" ? name : importedSource;
          const es6Default = `${importedSource}$es6Default`;
          builder2.import();
          if (isNamespace) {
            builder2.default(es6Default).var(name || importedSource).wildcardInterop();
          } else if (isDefault) {
            if (ensureLiveReference) {
              builder2.default(es6Default).var(name || importedSource).defaultInterop().read("default");
            } else {
              builder2.default(es6Default).var(name).defaultInterop().prop(importName);
            }
          } else if (isNamed) {
            builder2.default(es6Default).read(importName);
          }
        } else if (isModuleForBabel) {
          builder2.import();
          if (isNamespace) {
            builder2.namespace(name || importedSource);
          } else if (isDefault || isNamed) {
            builder2.named(name, importName);
          }
        } else {
          builder2.require();
          if (isNamespace) {
            builder2.var(name || importedSource).wildcardInterop();
          } else if ((isDefault || isNamed) && ensureLiveReference) {
            if (isDefault) {
              name = name !== "default" ? name : importedSource;
              builder2.var(name).read(importName);
              builder2.defaultInterop();
            } else {
              builder2.var(importedSource).read(importName);
            }
          } else if (isDefault) {
            builder2.var(name).defaultInterop().prop(importName);
          } else if (isNamed) {
            builder2.var(name).prop(importName);
          }
        }
      } else if (importedInterop === "compiled") {
        if (isModuleForNode) {
          builder2.import();
          if (isNamespace) {
            builder2.default(name || importedSource);
          } else if (isDefault || isNamed) {
            builder2.default(importedSource).read(name);
          }
        } else if (isModuleForBabel) {
          builder2.import();
          if (isNamespace) {
            builder2.namespace(name || importedSource);
          } else if (isDefault || isNamed) {
            builder2.named(name, importName);
          }
        } else {
          builder2.require();
          if (isNamespace) {
            builder2.var(name || importedSource);
          } else if (isDefault || isNamed) {
            if (ensureLiveReference) {
              builder2.var(importedSource).read(name);
            } else {
              builder2.prop(importName).var(name);
            }
          }
        }
      } else if (importedInterop === "uncompiled") {
        if (isDefault && ensureLiveReference) {
          throw new Error("No live reference for commonjs default");
        }
        if (isModuleForNode) {
          builder2.import();
          if (isNamespace) {
            builder2.default(name || importedSource);
          } else if (isDefault) {
            builder2.default(name);
          } else if (isNamed) {
            builder2.default(importedSource).read(name);
          }
        } else if (isModuleForBabel) {
          builder2.import();
          if (isNamespace) {
            builder2.default(name || importedSource);
          } else if (isDefault) {
            builder2.default(name);
          } else if (isNamed) {
            builder2.named(name, importName);
          }
        } else {
          builder2.require();
          if (isNamespace) {
            builder2.var(name || importedSource);
          } else if (isDefault) {
            builder2.var(name);
          } else if (isNamed) {
            if (ensureLiveReference) {
              builder2.var(importedSource).read(name);
            } else {
              builder2.var(name).prop(importName);
            }
          }
        }
      } else {
        throw new Error(`Unknown importedInterop "${importedInterop}".`);
      }
      const {
        statements: statements2,
        resultName
      } = builder2.done();
      this._insertStatements(statements2, importPosition, blockHoist);
      if ((isDefault || isNamed) && ensureNoContext && resultName.type !== "Identifier") {
        return sequenceExpression([numericLiteral(0), resultName]);
      }
      return resultName;
    }
    _insertStatements(statements2, importPosition = "before", blockHoist = 3) {
      const body = this._programPath.get("body");
      if (importPosition === "after") {
        for (let i = body.length - 1; i >= 0; i--) {
          if (body[i].isImportDeclaration()) {
            body[i].insertAfter(statements2);
            return;
          }
        }
      } else {
        statements2.forEach((node2) => {
          node2._blockHoist = blockHoist;
        });
        const targetPath = body.find((p) => {
          const val = p.node._blockHoist;
          return Number.isFinite(val) && val < 4;
        });
        if (targetPath) {
          targetPath.insertBefore(statements2);
          return;
        }
      }
      this._programPath.unshiftContainer("body", statements2);
    }
  }
  importInjector.default = ImportInjector;
  return importInjector;
}
var hasRequiredLib$C;
function requireLib$C() {
  if (hasRequiredLib$C) return lib$A;
  hasRequiredLib$C = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "ImportInjector", {
      enumerable: true,
      get: function() {
        return _importInjector.default;
      }
    });
    exports.addDefault = addDefault;
    exports.addNamed = addNamed;
    exports.addNamespace = addNamespace;
    exports.addSideEffect = addSideEffect;
    Object.defineProperty(exports, "isModule", {
      enumerable: true,
      get: function() {
        return _isModule.default;
      }
    });
    var _importInjector = requireImportInjector();
    var _isModule = requireIsModule();
    function addDefault(path2, importedSource, opts) {
      return new _importInjector.default(path2).addDefault(importedSource, opts);
    }
    function addNamed(path2, name, importedSource, opts) {
      return new _importInjector.default(path2).addNamed(name, importedSource, opts);
    }
    function addNamespace(path2, importedSource, opts) {
      return new _importInjector.default(path2).addNamespace(importedSource, opts);
    }
    function addSideEffect(path2, importedSource, opts) {
      return new _importInjector.default(path2).addSideEffect(importedSource, opts);
    }
  })(lib$A);
  return lib$A;
}
var rewriteThis = {};
var hasRequiredRewriteThis;
function requireRewriteThis() {
  if (hasRequiredRewriteThis) return rewriteThis;
  hasRequiredRewriteThis = 1;
  Object.defineProperty(rewriteThis, "__esModule", {
    value: true
  });
  rewriteThis.default = rewriteThis$1;
  var _helperEnvironmentVisitor = requireLib$M();
  var _core = requireLib$x();
  const {
    numericLiteral,
    unaryExpression
  } = _core.types;
  const rewriteThisVisitor = _core.traverse.visitors.merge([_helperEnvironmentVisitor.default, {
    ThisExpression(path2) {
      path2.replaceWith(unaryExpression("void", numericLiteral(0), true));
    }
  }]);
  function rewriteThis$1(programPath) {
    (0, _core.traverse)(programPath.node, Object.assign({}, rewriteThisVisitor, {
      noScope: true
    }));
  }
  return rewriteThis;
}
var rewriteLiveReferences = {};
var lib$z = {};
var hasRequiredLib$B;
function requireLib$B() {
  if (hasRequiredLib$B) return lib$z;
  hasRequiredLib$B = 1;
  Object.defineProperty(lib$z, "__esModule", {
    value: true
  });
  lib$z.default = simplifyAccess;
  var _t = requireLib$O();
  const {
    LOGICAL_OPERATORS,
    assignmentExpression,
    binaryExpression,
    cloneNode: cloneNode2,
    identifier: identifier2,
    logicalExpression,
    numericLiteral,
    sequenceExpression,
    unaryExpression
  } = _t;
  const simpleAssignmentVisitor = {
    AssignmentExpression: {
      exit(path2) {
        const {
          scope: scope2,
          seen,
          bindingNames
        } = this;
        if (path2.node.operator === "=") return;
        if (seen.has(path2.node)) return;
        seen.add(path2.node);
        const left = path2.get("left");
        if (!left.isIdentifier()) return;
        const localName = left.node.name;
        if (!bindingNames.has(localName)) return;
        if (scope2.getBinding(localName) !== path2.scope.getBinding(localName)) {
          return;
        }
        const operator = path2.node.operator.slice(0, -1);
        if (LOGICAL_OPERATORS.includes(operator)) {
          path2.replaceWith(logicalExpression(operator, path2.node.left, assignmentExpression("=", cloneNode2(path2.node.left), path2.node.right)));
        } else {
          path2.node.right = binaryExpression(operator, cloneNode2(path2.node.left), path2.node.right);
          path2.node.operator = "=";
        }
      }
    }
  };
  {
    simpleAssignmentVisitor.UpdateExpression = {
      exit(path2) {
        if (!this.includeUpdateExpression) return;
        const {
          scope: scope2,
          bindingNames
        } = this;
        const arg = path2.get("argument");
        if (!arg.isIdentifier()) return;
        const localName = arg.node.name;
        if (!bindingNames.has(localName)) return;
        if (scope2.getBinding(localName) !== path2.scope.getBinding(localName)) {
          return;
        }
        if (path2.parentPath.isExpressionStatement() && !path2.isCompletionRecord()) {
          const operator = path2.node.operator == "++" ? "+=" : "-=";
          path2.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
        } else if (path2.node.prefix) {
          path2.replaceWith(assignmentExpression("=", identifier2(localName), binaryExpression(path2.node.operator[0], unaryExpression("+", arg.node), numericLiteral(1))));
        } else {
          const old = path2.scope.generateUidIdentifierBasedOnNode(arg.node, "old");
          const varName = old.name;
          path2.scope.push({
            id: old
          });
          const binary = binaryExpression(path2.node.operator[0], identifier2(varName), numericLiteral(1));
          path2.replaceWith(sequenceExpression([assignmentExpression("=", identifier2(varName), unaryExpression("+", arg.node)), assignmentExpression("=", cloneNode2(arg.node), binary), identifier2(varName)]));
        }
      }
    };
  }
  function simplifyAccess(path2, bindingNames) {
    {
      var _arguments$;
      path2.traverse(simpleAssignmentVisitor, {
        scope: path2.scope,
        bindingNames,
        seen: /* @__PURE__ */ new WeakSet(),
        includeUpdateExpression: (_arguments$ = arguments[2]) != null ? _arguments$ : true
      });
    }
  }
  return lib$z;
}
var hasRequiredRewriteLiveReferences;
function requireRewriteLiveReferences() {
  if (hasRequiredRewriteLiveReferences) return rewriteLiveReferences;
  hasRequiredRewriteLiveReferences = 1;
  Object.defineProperty(rewriteLiveReferences, "__esModule", {
    value: true
  });
  rewriteLiveReferences.default = rewriteLiveReferences$1;
  var _assert = requireAssert();
  var _core = requireLib$x();
  var _helperSimpleAccess = requireLib$B();
  const {
    assignmentExpression,
    cloneNode: cloneNode2,
    expressionStatement,
    getOuterBindingIdentifiers: getOuterBindingIdentifiers2,
    identifier: identifier2,
    isArrowFunctionExpression,
    isClassExpression,
    isFunctionExpression,
    isIdentifier,
    isMemberExpression,
    isVariableDeclaration,
    jsxIdentifier,
    jsxMemberExpression,
    memberExpression,
    numericLiteral,
    sequenceExpression,
    stringLiteral,
    variableDeclaration,
    variableDeclarator
  } = _core.types;
  function isInType(path2) {
    do {
      switch (path2.parent.type) {
        case "TSTypeAnnotation":
        case "TSTypeAliasDeclaration":
        case "TSTypeReference":
        case "TypeAnnotation":
        case "TypeAlias":
          return true;
        case "ExportSpecifier":
          return path2.parentPath.parent.exportKind === "type";
        default:
          if (path2.parentPath.isStatement() || path2.parentPath.isExpression()) {
            return false;
          }
      }
    } while (path2 = path2.parentPath);
  }
  function rewriteLiveReferences$1(programPath, metadata, wrapReference) {
    const imported = /* @__PURE__ */ new Map();
    const exported = /* @__PURE__ */ new Map();
    const requeueInParent = (path2) => {
      programPath.requeue(path2);
    };
    for (const [source2, data] of metadata.source) {
      for (const [localName, importName] of data.imports) {
        imported.set(localName, [source2, importName, null]);
      }
      for (const localName of data.importsNamespace) {
        imported.set(localName, [source2, null, localName]);
      }
    }
    for (const [local, data] of metadata.local) {
      let exportMeta = exported.get(local);
      if (!exportMeta) {
        exportMeta = [];
        exported.set(local, exportMeta);
      }
      exportMeta.push(...data.names);
    }
    const rewriteBindingInitVisitorState = {
      metadata,
      requeueInParent,
      scope: programPath.scope,
      exported
    };
    programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
    const bindingNames = /* @__PURE__ */ new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]);
    {
      (0, _helperSimpleAccess.default)(programPath, bindingNames, false);
    }
    const rewriteReferencesVisitorState = {
      seen: /* @__PURE__ */ new WeakSet(),
      metadata,
      requeueInParent,
      scope: programPath.scope,
      imported,
      exported,
      buildImportReference([source2, importName, localName], identNode) {
        const meta = metadata.source.get(source2);
        meta.referenced = true;
        if (localName) {
          if (meta.wrap) {
            var _wrapReference;
            identNode = (_wrapReference = wrapReference(identNode, meta.wrap)) != null ? _wrapReference : identNode;
          }
          return identNode;
        }
        let namespace2 = identifier2(meta.name);
        if (meta.wrap) {
          var _wrapReference2;
          namespace2 = (_wrapReference2 = wrapReference(namespace2, meta.wrap)) != null ? _wrapReference2 : namespace2;
        }
        if (importName === "default" && meta.interop === "node-default") {
          return namespace2;
        }
        const computed = metadata.stringSpecifiers.has(importName);
        return memberExpression(namespace2, computed ? stringLiteral(importName) : identifier2(importName), computed);
      }
    };
    programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
  }
  const rewriteBindingInitVisitor = {
    Scope(path2) {
      path2.skip();
    },
    ClassDeclaration(path2) {
      const {
        requeueInParent,
        exported,
        metadata
      } = this;
      const {
        id
      } = path2.node;
      if (!id) throw new Error("Expected class to have a name");
      const localName = id.name;
      const exportNames = exported.get(localName) || [];
      if (exportNames.length > 0) {
        const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier2(localName), path2.scope));
        statement._blockHoist = path2.node._blockHoist;
        requeueInParent(path2.insertAfter(statement)[0]);
      }
    },
    VariableDeclaration(path2) {
      const {
        requeueInParent,
        exported,
        metadata
      } = this;
      const isVar2 = path2.node.kind === "var";
      for (const decl of path2.get("declarations")) {
        const {
          id
        } = decl.node;
        let {
          init
        } = decl.node;
        if (isIdentifier(id) && exported.has(id.name) && !isArrowFunctionExpression(init) && (!isFunctionExpression(init) || init.id) && (!isClassExpression(init) || init.id)) {
          if (!init) {
            if (isVar2) {
              continue;
            } else {
              init = path2.scope.buildUndefinedNode();
            }
          }
          decl.node.init = buildBindingExportAssignmentExpression(metadata, exported.get(id.name), init, path2.scope);
          requeueInParent(decl.get("init"));
        } else {
          for (const localName of Object.keys(decl.getOuterBindingIdentifiers())) {
            if (exported.has(localName)) {
              const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exported.get(localName), identifier2(localName), path2.scope));
              statement._blockHoist = path2.node._blockHoist;
              requeueInParent(path2.insertAfter(statement)[0]);
            }
          }
        }
      }
    }
  };
  const buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope2) => {
    const exportsObjectName = metadata.exportName;
    for (let currentScope = scope2; currentScope != null; currentScope = currentScope.parent) {
      if (currentScope.hasOwnBinding(exportsObjectName)) {
        currentScope.rename(exportsObjectName);
      }
    }
    return (exportNames || []).reduce((expr, exportName) => {
      const {
        stringSpecifiers
      } = metadata;
      const computed = stringSpecifiers.has(exportName);
      return assignmentExpression("=", memberExpression(identifier2(exportsObjectName), computed ? stringLiteral(exportName) : identifier2(exportName), computed), expr);
    }, localExpr);
  };
  const buildImportThrow = (localName) => {
    return _core.template.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `;
  };
  const rewriteReferencesVisitor = {
    ReferencedIdentifier(path2) {
      const {
        seen,
        buildImportReference,
        scope: scope2,
        imported,
        requeueInParent
      } = this;
      if (seen.has(path2.node)) return;
      seen.add(path2.node);
      const localName = path2.node.name;
      const importData = imported.get(localName);
      if (importData) {
        if (isInType(path2)) {
          throw path2.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
        }
        const localBinding = path2.scope.getBinding(localName);
        const rootBinding = scope2.getBinding(localName);
        if (rootBinding !== localBinding) return;
        const ref = buildImportReference(importData, path2.node);
        ref.loc = path2.node.loc;
        if ((path2.parentPath.isCallExpression({
          callee: path2.node
        }) || path2.parentPath.isOptionalCallExpression({
          callee: path2.node
        }) || path2.parentPath.isTaggedTemplateExpression({
          tag: path2.node
        })) && isMemberExpression(ref)) {
          path2.replaceWith(sequenceExpression([numericLiteral(0), ref]));
        } else if (path2.isJSXIdentifier() && isMemberExpression(ref)) {
          const {
            object,
            property
          } = ref;
          path2.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));
        } else {
          path2.replaceWith(ref);
        }
        requeueInParent(path2);
        path2.skip();
      }
    },
    UpdateExpression(path2) {
      const {
        scope: scope2,
        seen,
        imported,
        exported,
        requeueInParent,
        buildImportReference
      } = this;
      if (seen.has(path2.node)) return;
      seen.add(path2.node);
      const arg = path2.get("argument");
      if (arg.isMemberExpression()) return;
      const update = path2.node;
      if (arg.isIdentifier()) {
        const localName = arg.node.name;
        if (scope2.getBinding(localName) !== path2.scope.getBinding(localName)) {
          return;
        }
        const exportedNames = exported.get(localName);
        const importData = imported.get(localName);
        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {
          if (importData) {
            path2.replaceWith(assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
          } else if (update.prefix) {
            path2.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, cloneNode2(update), path2.scope));
          } else {
            const ref = scope2.generateDeclaredUidIdentifier(localName);
            path2.replaceWith(sequenceExpression([assignmentExpression("=", cloneNode2(ref), cloneNode2(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier2(localName), path2.scope), cloneNode2(ref)]));
          }
        }
      }
      requeueInParent(path2);
      path2.skip();
    },
    AssignmentExpression: {
      exit(path2) {
        const {
          scope: scope2,
          seen,
          imported,
          exported,
          requeueInParent,
          buildImportReference
        } = this;
        if (seen.has(path2.node)) return;
        seen.add(path2.node);
        const left = path2.get("left");
        if (left.isMemberExpression()) return;
        if (left.isIdentifier()) {
          const localName = left.node.name;
          if (scope2.getBinding(localName) !== path2.scope.getBinding(localName)) {
            return;
          }
          const exportedNames = exported.get(localName);
          const importData = imported.get(localName);
          if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {
            _assert(path2.node.operator === "=", "Path was not simplified");
            const assignment = path2.node;
            if (importData) {
              assignment.left = buildImportReference(importData, left.node);
              assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)]);
            }
            path2.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment, path2.scope));
            requeueInParent(path2);
          }
        } else {
          const ids = left.getOuterBindingIdentifiers();
          const programScopeIds = Object.keys(ids).filter((localName) => scope2.getBinding(localName) === path2.scope.getBinding(localName));
          const id = programScopeIds.find((localName) => imported.has(localName));
          if (id) {
            path2.node.right = sequenceExpression([path2.node.right, buildImportThrow(id)]);
          }
          const items = [];
          programScopeIds.forEach((localName) => {
            const exportedNames = exported.get(localName) || [];
            if (exportedNames.length > 0) {
              items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier2(localName), path2.scope));
            }
          });
          if (items.length > 0) {
            let node2 = sequenceExpression(items);
            if (path2.parentPath.isExpressionStatement()) {
              node2 = expressionStatement(node2);
              node2._blockHoist = path2.parentPath.node._blockHoist;
            }
            const statement = path2.insertAfter(node2)[0];
            requeueInParent(statement);
          }
        }
      }
    },
    "ForOfStatement|ForInStatement"(path2) {
      const {
        scope: scope2,
        node: node2
      } = path2;
      const {
        left
      } = node2;
      const {
        exported,
        imported,
        scope: programScope
      } = this;
      if (!isVariableDeclaration(left)) {
        let didTransformExport = false, importConstViolationName;
        const loopBodyScope = path2.get("body").scope;
        for (const name of Object.keys(getOuterBindingIdentifiers2(left))) {
          if (programScope.getBinding(name) === scope2.getBinding(name)) {
            if (exported.has(name)) {
              didTransformExport = true;
              if (loopBodyScope.hasOwnBinding(name)) {
                loopBodyScope.rename(name);
              }
            }
            if (imported.has(name) && !importConstViolationName) {
              importConstViolationName = name;
            }
          }
        }
        if (!didTransformExport && !importConstViolationName) {
          return;
        }
        path2.ensureBlock();
        const bodyPath = path2.get("body");
        const newLoopId = scope2.generateUidIdentifierBasedOnNode(left);
        path2.get("left").replaceWith(variableDeclaration("let", [variableDeclarator(cloneNode2(newLoopId))]));
        scope2.registerDeclaration(path2.get("left"));
        if (didTransformExport) {
          bodyPath.unshiftContainer("body", expressionStatement(assignmentExpression("=", left, newLoopId)));
        }
        if (importConstViolationName) {
          bodyPath.unshiftContainer("body", expressionStatement(buildImportThrow(importConstViolationName)));
        }
      }
    }
  };
  return rewriteLiveReferences;
}
var normalizeAndLoadMetadata = {};
var hasRequiredNormalizeAndLoadMetadata;
function requireNormalizeAndLoadMetadata() {
  if (hasRequiredNormalizeAndLoadMetadata) return normalizeAndLoadMetadata;
  hasRequiredNormalizeAndLoadMetadata = 1;
  Object.defineProperty(normalizeAndLoadMetadata, "__esModule", {
    value: true
  });
  normalizeAndLoadMetadata.default = normalizeModuleAndLoadMetadata;
  normalizeAndLoadMetadata.hasExports = hasExports;
  normalizeAndLoadMetadata.isSideEffectImport = isSideEffectImport;
  normalizeAndLoadMetadata.validateImportInteropOption = validateImportInteropOption;
  var _path = pathExports;
  var _helperValidatorIdentifier2 = requireLib$Q();
  var _helperSplitExportDeclaration = requireLib$N();
  function hasExports(metadata) {
    return metadata.hasExports;
  }
  function isSideEffectImport(source2) {
    return source2.imports.size === 0 && source2.importsNamespace.size === 0 && source2.reexports.size === 0 && source2.reexportNamespace.size === 0 && !source2.reexportAll;
  }
  function validateImportInteropOption(importInterop) {
    if (typeof importInterop !== "function" && importInterop !== "none" && importInterop !== "babel" && importInterop !== "node") {
      throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
    }
    return importInterop;
  }
  function resolveImportInterop(importInterop, source2, filename) {
    if (typeof importInterop === "function") {
      return validateImportInteropOption(importInterop(source2, filename));
    }
    return importInterop;
  }
  function normalizeModuleAndLoadMetadata(programPath, exportName, {
    importInterop,
    initializeReexports = false,
    getWrapperPayload,
    esNamespaceOnly = false,
    filename
  }) {
    if (!exportName) {
      exportName = programPath.scope.generateUidIdentifier("exports").name;
    }
    const stringSpecifiers = /* @__PURE__ */ new Set();
    nameAnonymousExports(programPath);
    const {
      local,
      sources,
      hasExports: hasExports2
    } = getModuleMetadata(programPath, {
      initializeReexports,
      getWrapperPayload
    }, stringSpecifiers);
    removeImportExportDeclarations(programPath);
    for (const [source2, metadata] of sources) {
      const {
        importsNamespace,
        imports
      } = metadata;
      if (importsNamespace.size > 0 && imports.size === 0) {
        const [nameOfnamespace] = importsNamespace;
        metadata.name = nameOfnamespace;
      }
      const resolvedInterop = resolveImportInterop(importInterop, source2, filename);
      if (resolvedInterop === "none") {
        metadata.interop = "none";
      } else if (resolvedInterop === "node" && metadata.interop === "namespace") {
        metadata.interop = "node-namespace";
      } else if (resolvedInterop === "node" && metadata.interop === "default") {
        metadata.interop = "node-default";
      } else if (esNamespaceOnly && metadata.interop === "namespace") {
        metadata.interop = "default";
      }
    }
    return {
      exportName,
      exportNameListName: null,
      hasExports: hasExports2,
      local,
      source: sources,
      stringSpecifiers
    };
  }
  function getExportSpecifierName(path2, stringSpecifiers) {
    if (path2.isIdentifier()) {
      return path2.node.name;
    } else if (path2.isStringLiteral()) {
      const stringValue = path2.node.value;
      if (!(0, _helperValidatorIdentifier2.isIdentifierName)(stringValue)) {
        stringSpecifiers.add(stringValue);
      }
      return stringValue;
    } else {
      throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path2.node.type}`);
    }
  }
  function assertExportSpecifier(path2) {
    if (path2.isExportSpecifier()) {
      return;
    } else if (path2.isExportNamespaceSpecifier()) {
      throw path2.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.");
    } else {
      throw path2.buildCodeFrameError("Unexpected export specifier type");
    }
  }
  function getModuleMetadata(programPath, {
    getWrapperPayload,
    initializeReexports
  }, stringSpecifiers) {
    const localData = getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers);
    const importNodes = /* @__PURE__ */ new Map();
    const sourceData = /* @__PURE__ */ new Map();
    const getData = (sourceNode2, node2) => {
      const source2 = sourceNode2.value;
      let data = sourceData.get(source2);
      if (!data) {
        data = {
          name: programPath.scope.generateUidIdentifier((0, _path.basename)(source2, (0, _path.extname)(source2))).name,
          interop: "none",
          loc: null,
          imports: /* @__PURE__ */ new Map(),
          importsNamespace: /* @__PURE__ */ new Set(),
          reexports: /* @__PURE__ */ new Map(),
          reexportNamespace: /* @__PURE__ */ new Set(),
          reexportAll: null,
          wrap: null,
          get lazy() {
            return this.wrap === "lazy";
          },
          referenced: false
        };
        sourceData.set(source2, data);
        importNodes.set(source2, [node2]);
      } else {
        importNodes.get(source2).push(node2);
      }
      return data;
    };
    let hasExports2 = false;
    programPath.get("body").forEach((child) => {
      if (child.isImportDeclaration()) {
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        child.get("specifiers").forEach((spec) => {
          if (spec.isImportDefaultSpecifier()) {
            const localName = spec.get("local").node.name;
            data.imports.set(localName, "default");
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach((name) => {
                data.reexports.set(name, "default");
              });
              data.referenced = true;
            }
          } else if (spec.isImportNamespaceSpecifier()) {
            const localName = spec.get("local").node.name;
            data.importsNamespace.add(localName);
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach((name) => {
                data.reexportNamespace.add(name);
              });
              data.referenced = true;
            }
          } else if (spec.isImportSpecifier()) {
            const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers);
            const localName = spec.get("local").node.name;
            data.imports.set(localName, importName);
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach((name) => {
                data.reexports.set(name, importName);
              });
              data.referenced = true;
            }
          }
        });
      } else if (child.isExportAllDeclaration()) {
        hasExports2 = true;
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        data.reexportAll = {
          loc: child.node.loc
        };
        data.referenced = true;
      } else if (child.isExportNamedDeclaration() && child.node.source) {
        hasExports2 = true;
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        child.get("specifiers").forEach((spec) => {
          assertExportSpecifier(spec);
          const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers);
          const exportName = getExportSpecifierName(spec.get("exported"), stringSpecifiers);
          data.reexports.set(exportName, importName);
          data.referenced = true;
          if (exportName === "__esModule") {
            throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
          }
        });
      } else if (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) {
        hasExports2 = true;
      }
    });
    for (const metadata of sourceData.values()) {
      let needsDefault = false;
      let needsNamed = false;
      if (metadata.importsNamespace.size > 0) {
        needsDefault = true;
        needsNamed = true;
      }
      if (metadata.reexportAll) {
        needsNamed = true;
      }
      for (const importName of metadata.imports.values()) {
        if (importName === "default") needsDefault = true;
        else needsNamed = true;
      }
      for (const importName of metadata.reexports.values()) {
        if (importName === "default") needsDefault = true;
        else needsNamed = true;
      }
      if (needsDefault && needsNamed) {
        metadata.interop = "namespace";
      } else if (needsDefault) {
        metadata.interop = "default";
      }
    }
    if (getWrapperPayload) {
      for (const [source2, metadata] of sourceData) {
        metadata.wrap = getWrapperPayload(source2, metadata, importNodes.get(source2));
      }
    }
    return {
      hasExports: hasExports2,
      local: localData,
      sources: sourceData
    };
  }
  function getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers) {
    const bindingKindLookup = /* @__PURE__ */ new Map();
    programPath.get("body").forEach((child) => {
      let kind;
      if (child.isImportDeclaration()) {
        kind = "import";
      } else {
        if (child.isExportDefaultDeclaration()) {
          child = child.get("declaration");
        }
        if (child.isExportNamedDeclaration()) {
          if (child.node.declaration) {
            child = child.get("declaration");
          } else if (initializeReexports && child.node.source && child.get("source").isStringLiteral()) {
            child.get("specifiers").forEach((spec) => {
              assertExportSpecifier(spec);
              bindingKindLookup.set(spec.get("local").node.name, "block");
            });
            return;
          }
        }
        if (child.isFunctionDeclaration()) {
          kind = "hoisted";
        } else if (child.isClassDeclaration()) {
          kind = "block";
        } else if (child.isVariableDeclaration({
          kind: "var"
        })) {
          kind = "var";
        } else if (child.isVariableDeclaration()) {
          kind = "block";
        } else {
          return;
        }
      }
      Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
        bindingKindLookup.set(name, kind);
      });
    });
    const localMetadata = /* @__PURE__ */ new Map();
    const getLocalMetadata = (idPath) => {
      const localName = idPath.node.name;
      let metadata = localMetadata.get(localName);
      if (!metadata) {
        const kind = bindingKindLookup.get(localName);
        if (kind === void 0) {
          throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
        }
        metadata = {
          names: [],
          kind
        };
        localMetadata.set(localName, metadata);
      }
      return metadata;
    };
    programPath.get("body").forEach((child) => {
      if (child.isExportNamedDeclaration() && (initializeReexports || !child.node.source)) {
        if (child.node.declaration) {
          const declaration = child.get("declaration");
          const ids = declaration.getOuterBindingIdentifierPaths();
          Object.keys(ids).forEach((name) => {
            if (name === "__esModule") {
              throw declaration.buildCodeFrameError('Illegal export "__esModule".');
            }
            getLocalMetadata(ids[name]).names.push(name);
          });
        } else {
          child.get("specifiers").forEach((spec) => {
            const local = spec.get("local");
            const exported = spec.get("exported");
            const localMetadata2 = getLocalMetadata(local);
            const exportName = getExportSpecifierName(exported, stringSpecifiers);
            if (exportName === "__esModule") {
              throw exported.buildCodeFrameError('Illegal export "__esModule".');
            }
            localMetadata2.names.push(exportName);
          });
        }
      } else if (child.isExportDefaultDeclaration()) {
        const declaration = child.get("declaration");
        if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
          getLocalMetadata(declaration.get("id")).names.push("default");
        } else {
          throw declaration.buildCodeFrameError("Unexpected default expression export.");
        }
      }
    });
    return localMetadata;
  }
  function nameAnonymousExports(programPath) {
    programPath.get("body").forEach((child) => {
      if (!child.isExportDefaultDeclaration()) return;
      (0, _helperSplitExportDeclaration.default)(child);
    });
  }
  function removeImportExportDeclarations(programPath) {
    programPath.get("body").forEach((child) => {
      if (child.isImportDeclaration()) {
        child.remove();
      } else if (child.isExportNamedDeclaration()) {
        if (child.node.declaration) {
          child.node.declaration._blockHoist = child.node._blockHoist;
          child.replaceWith(child.node.declaration);
        } else {
          child.remove();
        }
      } else if (child.isExportDefaultDeclaration()) {
        const declaration = child.get("declaration");
        if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
          declaration._blockHoist = child.node._blockHoist;
          child.replaceWith(declaration);
        } else {
          throw declaration.buildCodeFrameError("Unexpected default expression export.");
        }
      } else if (child.isExportAllDeclaration()) {
        child.remove();
      }
    });
  }
  return normalizeAndLoadMetadata;
}
var lazyModules = {};
var hasRequiredLazyModules;
function requireLazyModules() {
  if (hasRequiredLazyModules) return lazyModules;
  hasRequiredLazyModules = 1;
  Object.defineProperty(lazyModules, "__esModule", {
    value: true
  });
  lazyModules.toGetWrapperPayload = toGetWrapperPayload;
  lazyModules.wrapReference = wrapReference;
  var _core = requireLib$x();
  var _normalizeAndLoadMetadata = requireNormalizeAndLoadMetadata();
  function toGetWrapperPayload(lazy2) {
    return (source2, metadata) => {
      if (lazy2 === false) return null;
      if ((0, _normalizeAndLoadMetadata.isSideEffectImport)(metadata) || metadata.reexportAll) return null;
      if (lazy2 === true) {
        return /\./.test(source2) ? null : "lazy";
      }
      if (Array.isArray(lazy2)) {
        return lazy2.indexOf(source2) === -1 ? null : "lazy";
      }
      if (typeof lazy2 === "function") {
        return lazy2(source2) ? "lazy" : null;
      }
      throw new Error(`.lazy must be a boolean, string array, or function`);
    };
  }
  function wrapReference(ref, payload) {
    if (payload === "lazy") return _core.types.callExpression(ref, []);
    return null;
  }
  return lazyModules;
}
var dynamicImport$1 = {};
var hasRequiredDynamicImport$1;
function requireDynamicImport$1() {
  if (hasRequiredDynamicImport$1) return dynamicImport$1;
  hasRequiredDynamicImport$1 = 1;
  Object.defineProperty(dynamicImport$1, "__esModule", {
    value: true
  });
  dynamicImport$1.buildDynamicImport = buildDynamicImport;
  var _core = requireLib$x();
  {
    dynamicImport$1.getDynamicImportSource = function getDynamicImportSource(node2) {
      const [source2] = node2.arguments;
      return _core.types.isStringLiteral(source2) || _core.types.isTemplateLiteral(source2) ? source2 : _core.template.expression.ast`\`\${${source2}}\``;
    };
  }
  function buildDynamicImport(node2, deferToThen, wrapWithPromise, builder2) {
    const specifier = _core.types.isCallExpression(node2) ? node2.arguments[0] : node2.source;
    if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && specifier.quasis.length === 0) {
      if (deferToThen) {
        return _core.template.expression.ast`
        Promise.resolve().then(() => ${builder2(specifier)})
      `;
      } else return builder2(specifier);
    }
    const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({
      raw: ""
    }), _core.types.templateElement({
      raw: ""
    })], [_core.types.identifier("specifier")]);
    if (deferToThen) {
      return _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder2(_core.types.identifier("s"))})
      )(${specifier})
    `;
    } else if (wrapWithPromise) {
      return _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${builder2(specifierToString)}))
      )(${specifier})
    `;
    } else {
      return _core.template.expression.ast`
      (specifier => ${builder2(specifierToString)})(${specifier})
    `;
    }
  }
  return dynamicImport$1;
}
var getModuleName = {};
var hasRequiredGetModuleName;
function requireGetModuleName() {
  if (hasRequiredGetModuleName) return getModuleName;
  hasRequiredGetModuleName = 1;
  Object.defineProperty(getModuleName, "__esModule", {
    value: true
  });
  getModuleName.default = getModuleName$1;
  {
    const originalGetModuleName = getModuleName$1;
    getModuleName.default = getModuleName$1 = function getModuleName2(rootOpts, pluginOpts) {
      var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
      return originalGetModuleName(rootOpts, {
        moduleId: (_pluginOpts$moduleId = pluginOpts.moduleId) != null ? _pluginOpts$moduleId : rootOpts.moduleId,
        moduleIds: (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null ? _pluginOpts$moduleIds : rootOpts.moduleIds,
        getModuleId: (_pluginOpts$getModule = pluginOpts.getModuleId) != null ? _pluginOpts$getModule : rootOpts.getModuleId,
        moduleRoot: (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null ? _pluginOpts$moduleRoo : rootOpts.moduleRoot
      });
    };
  }
  function getModuleName$1(rootOpts, pluginOpts) {
    const {
      filename,
      filenameRelative = filename,
      sourceRoot = pluginOpts.moduleRoot
    } = rootOpts;
    const {
      moduleId,
      moduleIds = !!moduleId,
      getModuleId,
      moduleRoot = sourceRoot
    } = pluginOpts;
    if (!moduleIds) return null;
    if (moduleId != null && !getModuleId) {
      return moduleId;
    }
    let moduleName = moduleRoot != null ? moduleRoot + "/" : "";
    if (filenameRelative) {
      const sourceRootReplacer = sourceRoot != null ? new RegExp("^" + sourceRoot + "/?") : "";
      moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.(\w*?)$/, "");
    }
    moduleName = moduleName.replace(/\\/g, "/");
    if (getModuleId) {
      return getModuleId(moduleName) || moduleName;
    } else {
      return moduleName;
    }
  }
  return getModuleName;
}
var hasRequiredLib$A;
function requireLib$A() {
  if (hasRequiredLib$A) return lib$B;
  hasRequiredLib$A = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "buildDynamicImport", {
      enumerable: true,
      get: function() {
        return _dynamicImport.buildDynamicImport;
      }
    });
    exports.buildNamespaceInitStatements = buildNamespaceInitStatements;
    exports.ensureStatementsHoisted = ensureStatementsHoisted;
    Object.defineProperty(exports, "getModuleName", {
      enumerable: true,
      get: function() {
        return _getModuleName.default;
      }
    });
    Object.defineProperty(exports, "hasExports", {
      enumerable: true,
      get: function() {
        return _normalizeAndLoadMetadata.hasExports;
      }
    });
    Object.defineProperty(exports, "isModule", {
      enumerable: true,
      get: function() {
        return _helperModuleImports.isModule;
      }
    });
    Object.defineProperty(exports, "isSideEffectImport", {
      enumerable: true,
      get: function() {
        return _normalizeAndLoadMetadata.isSideEffectImport;
      }
    });
    exports.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;
    Object.defineProperty(exports, "rewriteThis", {
      enumerable: true,
      get: function() {
        return _rewriteThis.default;
      }
    });
    exports.wrapInterop = wrapInterop;
    var _assert = requireAssert();
    var _core = requireLib$x();
    var _helperModuleImports = requireLib$C();
    var _rewriteThis = requireRewriteThis();
    var _rewriteLiveReferences = requireRewriteLiveReferences();
    var _normalizeAndLoadMetadata = requireNormalizeAndLoadMetadata();
    var Lazy = requireLazyModules();
    var _dynamicImport = requireDynamicImport$1();
    var _getModuleName = requireGetModuleName();
    const {
      booleanLiteral,
      callExpression,
      cloneNode: cloneNode2,
      directive,
      directiveLiteral,
      expressionStatement,
      identifier: identifier2,
      isIdentifier,
      memberExpression,
      stringLiteral,
      valueToNode: valueToNode2,
      variableDeclaration,
      variableDeclarator
    } = _core.types;
    {
      exports.getDynamicImportSource = requireDynamicImport$1().getDynamicImportSource;
    }
    function rewriteModuleStatementsAndPrepareHeader(path2, {
      exportName,
      strict,
      allowTopLevelThis,
      strictMode,
      noInterop,
      importInterop = noInterop ? "none" : "babel",
      lazy: lazy2,
      getWrapperPayload = Lazy.toGetWrapperPayload(lazy2 != null ? lazy2 : false),
      wrapReference = Lazy.wrapReference,
      esNamespaceOnly,
      filename,
      constantReexports = arguments[1].loose,
      enumerableModuleMeta = arguments[1].loose,
      noIncompleteNsImportDetection
    }) {
      (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop);
      _assert((0, _helperModuleImports.isModule)(path2), "Cannot process module statements in a script");
      path2.node.sourceType = "script";
      const meta = (0, _normalizeAndLoadMetadata.default)(path2, exportName, {
        importInterop,
        initializeReexports: constantReexports,
        getWrapperPayload,
        esNamespaceOnly,
        filename
      });
      if (!allowTopLevelThis) {
        (0, _rewriteThis.default)(path2);
      }
      (0, _rewriteLiveReferences.default)(path2, meta, wrapReference);
      if (strictMode !== false) {
        const hasStrict = path2.node.directives.some((directive2) => {
          return directive2.value.value === "use strict";
        });
        if (!hasStrict) {
          path2.unshiftContainer("directives", directive(directiveLiteral("use strict")));
        }
      }
      const headers = [];
      if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {
        headers.push(buildESModuleHeader(meta, enumerableModuleMeta));
      }
      const nameList = buildExportNameListDeclaration(path2, meta);
      if (nameList) {
        meta.exportNameListName = nameList.name;
        headers.push(nameList.statement);
      }
      headers.push(...buildExportInitializationStatements(path2, meta, wrapReference, constantReexports, noIncompleteNsImportDetection));
      return {
        meta,
        headers
      };
    }
    function ensureStatementsHoisted(statements2) {
      statements2.forEach((header) => {
        header._blockHoist = 3;
      });
    }
    function wrapInterop(programPath, expr, type) {
      if (type === "none") {
        return null;
      }
      if (type === "node-namespace") {
        return callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, booleanLiteral(true)]);
      } else if (type === "node-default") {
        return null;
      }
      let helper;
      if (type === "default") {
        helper = "interopRequireDefault";
      } else if (type === "namespace") {
        helper = "interopRequireWildcard";
      } else {
        throw new Error(`Unknown interop: ${type}`);
      }
      return callExpression(programPath.hub.addHelper(helper), [expr]);
    }
    function buildNamespaceInitStatements(metadata, sourceMetadata, constantReexports = false, wrapReference = Lazy.wrapReference) {
      var _wrapReference;
      const statements2 = [];
      const srcNamespaceId = identifier2(sourceMetadata.name);
      for (const localName of sourceMetadata.importsNamespace) {
        if (localName === sourceMetadata.name) continue;
        statements2.push(_core.template.statement`var NAME = SOURCE;`({
          NAME: localName,
          SOURCE: cloneNode2(srcNamespaceId)
        }));
      }
      const srcNamespace = (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) != null ? _wrapReference : srcNamespaceId;
      if (constantReexports) {
        statements2.push(...buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference));
      }
      for (const exportName of sourceMetadata.reexportNamespace) {
        statements2.push((!_core.types.isIdentifier(srcNamespace) ? _core.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          ` : _core.template.statement`EXPORTS.NAME = NAMESPACE;`)({
          EXPORTS: metadata.exportName,
          NAME: exportName,
          NAMESPACE: cloneNode2(srcNamespace)
        }));
      }
      if (sourceMetadata.reexportAll) {
        const statement = buildNamespaceReexport(metadata, cloneNode2(srcNamespace), constantReexports);
        statement.loc = sourceMetadata.reexportAll.loc;
        statements2.push(statement);
      }
      return statements2;
    }
    const ReexportTemplate = {
      constant: _core.template.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`,
      constantComputed: _core.template.statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`,
      spec: _core.template.statement`
    Object.defineProperty(EXPORTS, "EXPORT_NAME", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    `
    };
    function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
      var _wrapReference2;
      let namespace2 = identifier2(metadata.name);
      namespace2 = (_wrapReference2 = wrapReference(namespace2, metadata.wrap)) != null ? _wrapReference2 : namespace2;
      const {
        stringSpecifiers
      } = meta;
      return Array.from(metadata.reexports, ([exportName, importName]) => {
        let NAMESPACE_IMPORT = cloneNode2(namespace2);
        if (importName === "default" && metadata.interop === "node-default") ;
        else if (stringSpecifiers.has(importName)) {
          NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, stringLiteral(importName), true);
        } else {
          NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, identifier2(importName));
        }
        const astNodes = {
          EXPORTS: meta.exportName,
          EXPORT_NAME: exportName,
          NAMESPACE_IMPORT
        };
        if (constantReexports || isIdentifier(NAMESPACE_IMPORT)) {
          if (stringSpecifiers.has(exportName)) {
            return ReexportTemplate.constantComputed(astNodes);
          } else {
            return ReexportTemplate.constant(astNodes);
          }
        } else {
          return ReexportTemplate.spec(astNodes);
        }
      });
    }
    function buildESModuleHeader(metadata, enumerableModuleMeta = false) {
      return (enumerableModuleMeta ? _core.template.statement`
        EXPORTS.__esModule = true;
      ` : _core.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({
        EXPORTS: metadata.exportName
      });
    }
    function buildNamespaceReexport(metadata, namespace2, constantReexports) {
      return (constantReexports ? _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({
        NAMESPACE: namespace2,
        EXPORTS: metadata.exportName,
        VERIFY_NAME_LIST: metadata.exportNameListName ? (0, _core.template)`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({
          EXPORTS_LIST: metadata.exportNameListName
        }) : null
      });
    }
    function buildExportNameListDeclaration(programPath, metadata) {
      const exportedVars = /* @__PURE__ */ Object.create(null);
      for (const data of metadata.local.values()) {
        for (const name2 of data.names) {
          exportedVars[name2] = true;
        }
      }
      let hasReexport = false;
      for (const data of metadata.source.values()) {
        for (const exportName of data.reexports.keys()) {
          exportedVars[exportName] = true;
        }
        for (const exportName of data.reexportNamespace) {
          exportedVars[exportName] = true;
        }
        hasReexport = hasReexport || !!data.reexportAll;
      }
      if (!hasReexport || Object.keys(exportedVars).length === 0) return null;
      const name = programPath.scope.generateUidIdentifier("exportNames");
      delete exportedVars.default;
      return {
        name: name.name,
        statement: variableDeclaration("var", [variableDeclarator(name, valueToNode2(exportedVars))])
      };
    }
    function buildExportInitializationStatements(programPath, metadata, wrapReference, constantReexports = false, noIncompleteNsImportDetection = false) {
      const initStatements = [];
      for (const [localName, data] of metadata.local) {
        if (data.kind === "import") ;
        else if (data.kind === "hoisted") {
          initStatements.push([data.names[0], buildInitStatement(metadata, data.names, identifier2(localName))]);
        } else if (!noIncompleteNsImportDetection) {
          for (const exportName of data.names) {
            initStatements.push([exportName, null]);
          }
        }
      }
      for (const data of metadata.source.values()) {
        if (!constantReexports) {
          const reexportsStatements = buildReexportsFromMeta(metadata, data, false, wrapReference);
          const reexports = [...data.reexports.keys()];
          for (let i = 0; i < reexportsStatements.length; i++) {
            initStatements.push([reexports[i], reexportsStatements[i]]);
          }
        }
        if (!noIncompleteNsImportDetection) {
          for (const exportName of data.reexportNamespace) {
            initStatements.push([exportName, null]);
          }
        }
      }
      initStatements.sort(([a], [b]) => {
        if (a < b) return -1;
        if (b < a) return 1;
        return 0;
      });
      const results = [];
      if (noIncompleteNsImportDetection) {
        for (const [, initStatement] of initStatements) {
          results.push(initStatement);
        }
      } else {
        const chunkSize = 100;
        for (let i = 0; i < initStatements.length; i += chunkSize) {
          let uninitializedExportNames = [];
          for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
            const [exportName, initStatement] = initStatements[i + j];
            if (initStatement !== null) {
              if (uninitializedExportNames.length > 0) {
                results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
                uninitializedExportNames = [];
              }
              results.push(initStatement);
            } else {
              uninitializedExportNames.push(exportName);
            }
          }
          if (uninitializedExportNames.length > 0) {
            results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
          }
        }
      }
      return results;
    }
    const InitTemplate = {
      computed: _core.template.expression`EXPORTS["NAME"] = VALUE`,
      default: _core.template.expression`EXPORTS.NAME = VALUE`,
      define: _core.template.expression`Object.defineProperty(EXPORTS, "NAME", { enumerable:true, value: void 0, writable: true })["NAME"] = VALUE`
    };
    function buildInitStatement(metadata, exportNames, initExpr) {
      const {
        stringSpecifiers,
        exportName: EXPORTS
      } = metadata;
      return expressionStatement(exportNames.reduce((acc, exportName) => {
        const params = {
          EXPORTS,
          NAME: exportName,
          VALUE: acc
        };
        if (exportName === "__proto__") {
          return InitTemplate.define(params);
        }
        if (stringSpecifiers.has(exportName)) {
          return InitTemplate.computed(params);
        }
        return InitTemplate.default(params);
      }, initExpr));
    }
  })(lib$B);
  return lib$B;
}
var semver = { exports: {} };
var hasRequiredSemver;
function requireSemver() {
  if (hasRequiredSemver) return semver.exports;
  hasRequiredSemver = 1;
  (function(module, exports) {
    exports = module.exports = SemVer;
    var debug2;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug2 = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER");
        console.log.apply(console, args);
      };
    } else {
      debug2 = function() {
      };
    }
    exports.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH2 = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH2 - 6;
    var re2 = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var t = exports.tokens = {};
    var R = 0;
    function tok(n) {
      t[n] = R++;
    }
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH2],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    function makeSafeRe(value2) {
      for (var i2 = 0; i2 < safeRegexReplacements.length; i2++) {
        var token2 = safeRegexReplacements[i2][0];
        var max = safeRegexReplacements[i2][1];
        value2 = value2.split(token2 + "*").join(token2 + "{0," + max + "}").split(token2 + "+").join(token2 + "{1," + max + "}");
      }
      return value2;
    }
    tok("NUMERICIDENTIFIER");
    src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    tok("NUMERICIDENTIFIERLOOSE");
    src[t.NUMERICIDENTIFIERLOOSE] = "\\d+";
    tok("NONNUMERICIDENTIFIER");
    src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-]" + LETTERDASHNUMBER + "*";
    tok("MAINVERSION");
    src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")";
    tok("MAINVERSIONLOOSE");
    src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")";
    tok("PRERELEASEIDENTIFIER");
    src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASEIDENTIFIERLOOSE");
    src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASE");
    src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))";
    tok("PRERELEASELOOSE");
    src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))";
    tok("BUILDIDENTIFIER");
    src[t.BUILDIDENTIFIER] = LETTERDASHNUMBER + "+";
    tok("BUILD");
    src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))";
    tok("FULL");
    tok("FULLPLAIN");
    src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?";
    src[t.FULL] = "^" + src[t.FULLPLAIN] + "$";
    tok("LOOSEPLAIN");
    src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?";
    tok("LOOSE");
    src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$";
    tok("GTLT");
    src[t.GTLT] = "((?:<|>)?=?)";
    tok("XRANGEIDENTIFIERLOOSE");
    src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    tok("XRANGEIDENTIFIER");
    src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*";
    tok("XRANGEPLAIN");
    src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGEPLAINLOOSE");
    src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGE");
    src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$";
    tok("XRANGELOOSE");
    src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COERCE");
    src[t.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    tok("COERCERTL");
    re2[t.COERCERTL] = new RegExp(src[t.COERCE], "g");
    safeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), "g");
    tok("LONETILDE");
    src[t.LONETILDE] = "(?:~>?)";
    tok("TILDETRIM");
    src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+";
    re2[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
    safeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), "g");
    var tildeTrimReplace = "$1~";
    tok("TILDE");
    src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$";
    tok("TILDELOOSE");
    src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("LONECARET");
    src[t.LONECARET] = "(?:\\^)";
    tok("CARETTRIM");
    src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+";
    re2[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
    safeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), "g");
    var caretTrimReplace = "$1^";
    tok("CARET");
    src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$";
    tok("CARETLOOSE");
    src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COMPARATORLOOSE");
    src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$";
    tok("COMPARATOR");
    src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$";
    tok("COMPARATORTRIM");
    src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")";
    re2[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
    safeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), "g");
    var comparatorTrimReplace = "$1$2$3";
    tok("HYPHENRANGE");
    src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$";
    tok("HYPHENRANGELOOSE");
    src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$";
    tok("STAR");
    src[t.STAR] = "(<|>)?=?\\s*\\*";
    for (var i = 0; i < R; i++) {
      debug2(i, src[i]);
      if (!re2[i]) {
        re2[i] = new RegExp(src[i]);
        safeRe[i] = new RegExp(makeSafeRe(src[i]));
      }
    }
    exports.parse = parse3;
    function parse3(version2, options2) {
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 !== "string") {
        return null;
      }
      if (version2.length > MAX_LENGTH2) {
        return null;
      }
      var r = options2.loose ? safeRe[t.LOOSE] : safeRe[t.FULL];
      if (!r.test(version2)) {
        return null;
      }
      try {
        return new SemVer(version2, options2);
      } catch (er) {
        return null;
      }
    }
    exports.valid = valid;
    function valid(version2, options2) {
      var v = parse3(version2, options2);
      return v ? v.version : null;
    }
    exports.clean = clean;
    function clean(version2, options2) {
      var s = parse3(version2.trim().replace(/^[=v]+/, ""), options2);
      return s ? s.version : null;
    }
    exports.SemVer = SemVer;
    function SemVer(version2, options2) {
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      if (version2 instanceof SemVer) {
        if (version2.loose === options2.loose) {
          return version2;
        } else {
          version2 = version2.version;
        }
      } else if (typeof version2 !== "string") {
        throw new TypeError("Invalid Version: " + version2);
      }
      if (version2.length > MAX_LENGTH2) {
        throw new TypeError("version is longer than " + MAX_LENGTH2 + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version2, options2);
      }
      debug2("SemVer", version2, options2);
      this.options = options2;
      this.loose = !!options2.loose;
      var m = version2.trim().match(options2.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]);
      if (!m) {
        throw new TypeError("Invalid Version: " + version2);
      }
      this.raw = version2;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug2("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug2("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.compareBuild = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      var i2 = 0;
      do {
        var a = this.build[i2];
        var b = other.build[i2];
        debug2("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier2) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier2);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier2);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier2);
          this.inc("pre", identifier2);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier2);
          }
          this.inc("pre", identifier2);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier2) {
            if (this.prerelease[0] === identifier2) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier2, 0];
              }
            } else {
              this.prerelease = [identifier2, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports.inc = inc;
    function inc(version2, release, loose, identifier2) {
      if (typeof loose === "string") {
        identifier2 = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version2, loose).inc(release, identifier2).version;
      } catch (er) {
        return null;
      }
    }
    exports.diff = diff2;
    function diff2(version1, version2) {
      if (eq2(version1, version2)) {
        return null;
      } else {
        var v1 = parse3(version1);
        var v2 = parse3(version2);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key2 in v1) {
          if (key2 === "major" || key2 === "minor" || key2 === "patch") {
            if (v1[key2] !== v2[key2]) {
              return prefix + key2;
            }
          }
        }
        return defaultResult;
      }
    }
    exports.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports.compare = compare2;
    function compare2(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare2(a, b, true);
    }
    exports.compareBuild = compareBuild;
    function compareBuild(a, b, loose) {
      var versionA = new SemVer(a, loose);
      var versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    }
    exports.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare2(b, a, loose);
    }
    exports.sort = sort2;
    function sort2(list2, loose) {
      return list2.sort(function(a, b) {
        return exports.compareBuild(a, b, loose);
      });
    }
    exports.rsort = rsort;
    function rsort(list2, loose) {
      return list2.sort(function(a, b) {
        return exports.compareBuild(b, a, loose);
      });
    }
    exports.gt = gt;
    function gt(a, b, loose) {
      return compare2(a, b, loose) > 0;
    }
    exports.lt = lt;
    function lt(a, b, loose) {
      return compare2(a, b, loose) < 0;
    }
    exports.eq = eq2;
    function eq2(a, b, loose) {
      return compare2(a, b, loose) === 0;
    }
    exports.neq = neq;
    function neq(a, b, loose) {
      return compare2(a, b, loose) !== 0;
    }
    exports.gte = gte;
    function gte(a, b, loose) {
      return compare2(a, b, loose) >= 0;
    }
    exports.lte = lte;
    function lte(a, b, loose) {
      return compare2(a, b, loose) <= 0;
    }
    exports.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq2(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports.Comparator = Comparator;
    function Comparator(comp, options2) {
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options2.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options2);
      }
      comp = comp.trim().split(/\s+/).join(" ");
      debug2("comparator", comp, options2);
      this.options = options2;
      this.loose = !!options2.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug2("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR];
      var m = comp.match(r);
      if (!m) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m[1] !== void 0 ? m[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version2) {
      debug2("Comparator.test", version2, this.options.loose);
      if (this.semver === ANY || version2 === ANY) {
        return true;
      }
      if (typeof version2 === "string") {
        try {
          version2 = new SemVer(version2, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp(version2, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options2) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        rangeTmp = new Range(comp.value, options2);
        return satisfies(this.value, rangeTmp, options2);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        rangeTmp = new Range(this.value, options2);
        return satisfies(comp.semver, rangeTmp, options2);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options2) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options2) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports.Range = Range;
    function Range(range, options2) {
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options2.loose && range.includePrerelease === !!options2.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options2);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options2);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options2);
      }
      this.options = options2;
      this.loose = !!options2.loose;
      this.includePrerelease = !!options2.includePrerelease;
      this.raw = range.trim().split(/\s+/).join(" ");
      this.set = this.raw.split("||").map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c2) {
        return c2.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + this.raw);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      var hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug2("hyphen replace", range);
      range = range.replace(safeRe[t.COMPARATORTRIM], comparatorTrimReplace);
      debug2("comparator trim", range, safeRe[t.COMPARATORTRIM]);
      range = range.replace(safeRe[t.TILDETRIM], tildeTrimReplace);
      range = range.replace(safeRe[t.CARETTRIM], caretTrimReplace);
      range = range.split(/\s+/).join(" ");
      var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options2) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return isSatisfiable(thisComparators, options2) && range.set.some(function(rangeComparators) {
          return isSatisfiable(rangeComparators, options2) && thisComparators.every(function(thisComparator) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options2);
            });
          });
        });
      });
    };
    function isSatisfiable(comparators, options2) {
      var result = true;
      var remainingComparators = comparators.slice();
      var testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every(function(otherComparator) {
          return testComparator.intersects(otherComparator, options2);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    }
    exports.toComparators = toComparators;
    function toComparators(range, options2) {
      return new Range(range, options2).set.map(function(comp) {
        return comp.map(function(c2) {
          return c2.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options2) {
      debug2("comp", comp, options2);
      comp = replaceCarets(comp, options2);
      debug2("caret", comp);
      comp = replaceTildes(comp, options2);
      debug2("tildes", comp);
      comp = replaceXRanges(comp, options2);
      debug2("xrange", comp);
      comp = replaceStars(comp, options2);
      debug2("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options2) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options2);
      }).join(" ");
    }
    function replaceTilde(comp, options2) {
      var r = options2.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE];
      return comp.replace(r, function(_2, M, m, p, pr) {
        debug2("tilde", comp, _2, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else if (pr) {
          debug2("replaceTilde pr", pr);
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
        }
        debug2("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options2) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options2);
      }).join(" ");
    }
    function replaceCaret(comp, options2) {
      debug2("caret", comp, options2);
      var r = options2.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET];
      return comp.replace(r, function(_2, M, m, p, pr) {
        debug2("caret", comp, _2, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug2("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug2("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug2("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options2) {
      debug2("replaceXRanges", comp, options2);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options2);
      }).join(" ");
    }
    function replaceXRange(comp, options2) {
      comp = comp.trim();
      var r = options2.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
        debug2("xRange", comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options2.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M + "." + m + "." + p + pr;
        } else if (xm) {
          ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr;
        } else if (xp) {
          ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr;
        }
        debug2("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options2) {
      debug2("replaceStars", comp, options2);
      return comp.trim().replace(safeRe[t.STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version2) {
      if (!version2) {
        return false;
      }
      if (typeof version2 === "string") {
        try {
          version2 = new SemVer(version2, this.options);
        } catch (er) {
          return false;
        }
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version2, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version2, options2) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options2.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug2(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports.satisfies = satisfies;
    function satisfies(version2, range, options2) {
      try {
        range = new Range(range, options2);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    }
    exports.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions2, range, options2) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options2);
      } catch (er) {
        return null;
      }
      versions2.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options2);
          }
        }
      });
      return max;
    }
    exports.minSatisfying = minSatisfying;
    function minSatisfying(versions2, range, options2) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options2);
      } catch (er) {
        return null;
      }
      versions2.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options2);
          }
        }
      });
      return min;
    }
    exports.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports.validRange = validRange;
    function validRange(range, options2) {
      try {
        return new Range(range, options2).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports.ltr = ltr;
    function ltr(version2, range, options2) {
      return outside(version2, range, "<", options2);
    }
    exports.gtr = gtr;
    function gtr(version2, range, options2) {
      return outside(version2, range, ">", options2);
    }
    exports.outside = outside;
    function outside(version2, range, hilo, options2) {
      version2 = new SemVer(version2, options2);
      range = new Range(range, options2);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options2)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options2)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options2)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports.prerelease = prerelease;
    function prerelease(version2, options2) {
      var parsed = parse3(version2, options2);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports.intersects = intersects;
    function intersects(r1, r2, options2) {
      r1 = new Range(r1, options2);
      r2 = new Range(r2, options2);
      return r1.intersects(r2);
    }
    exports.coerce = coerce;
    function coerce(version2, options2) {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options2 = options2 || {};
      var match = null;
      if (!options2.rtl) {
        match = version2.match(safeRe[t.COERCE]);
      } else {
        var next;
        while ((next = safeRe[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        safeRe[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse3(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options2);
    }
  })(semver, semver.exports);
  return semver.exports;
}
var hasRequiredFile;
function requireFile() {
  if (hasRequiredFile) return file;
  hasRequiredFile = 1;
  Object.defineProperty(file, "__esModule", {
    value: true
  });
  file.default = void 0;
  function helpers2() {
    const data = requireLib$D();
    helpers2 = function() {
      return data;
    };
    return data;
  }
  function _traverse() {
    const data = requireLib$E();
    _traverse = function() {
      return data;
    };
    return data;
  }
  function _codeFrame2() {
    const data = requireLib$J();
    _codeFrame2 = function() {
      return data;
    };
    return data;
  }
  function _t() {
    const data = requireLib$O();
    _t = function() {
      return data;
    };
    return data;
  }
  function _helperModuleTransforms() {
    const data = requireLib$A();
    _helperModuleTransforms = function() {
      return data;
    };
    return data;
  }
  function _semver() {
    const data = requireSemver();
    _semver = function() {
      return data;
    };
    return data;
  }
  const {
    cloneNode: cloneNode2,
    interpreterDirective
  } = _t();
  const errorVisitor = {
    enter(path2, state2) {
      const loc = path2.node.loc;
      if (loc) {
        state2.loc = loc;
        path2.stop();
      }
    }
  };
  class File {
    constructor(options2, {
      code,
      ast,
      inputMap
    }) {
      this._map = /* @__PURE__ */ new Map();
      this.opts = void 0;
      this.declarations = {};
      this.path = void 0;
      this.ast = void 0;
      this.scope = void 0;
      this.metadata = {};
      this.code = "";
      this.inputMap = void 0;
      this.hub = {
        file: this,
        getCode: () => this.code,
        getScope: () => this.scope,
        addHelper: this.addHelper.bind(this),
        buildError: this.buildCodeFrameError.bind(this)
      };
      this.opts = options2;
      this.code = code;
      this.ast = ast;
      this.inputMap = inputMap;
      this.path = _traverse().NodePath.get({
        hub: this.hub,
        parentPath: null,
        parent: this.ast,
        container: this.ast,
        key: "program"
      }).setContext();
      this.scope = this.path.scope;
    }
    get shebang() {
      const {
        interpreter
      } = this.path.node;
      return interpreter ? interpreter.value : "";
    }
    set shebang(value2) {
      if (value2) {
        this.path.get("interpreter").replaceWith(interpreterDirective(value2));
      } else {
        this.path.get("interpreter").remove();
      }
    }
    set(key2, val) {
      {
        if (key2 === "helpersNamespace") {
          throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
        }
      }
      this._map.set(key2, val);
    }
    get(key2) {
      return this._map.get(key2);
    }
    has(key2) {
      return this._map.has(key2);
    }
    getModuleName() {
      return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);
    }
    availableHelper(name, versionRange) {
      let minVersion;
      try {
        minVersion = helpers2().minVersion(name);
      } catch (err) {
        if (err.code !== "BABEL_HELPER_UNKNOWN") throw err;
        return false;
      }
      if (typeof versionRange !== "string") return true;
      if (_semver().valid(versionRange)) versionRange = `^${versionRange}`;
      {
        return !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(`>=8.0.0`, versionRange);
      }
    }
    addHelper(name) {
      const declar = this.declarations[name];
      if (declar) return cloneNode2(declar);
      const generator = this.get("helperGenerator");
      if (generator) {
        const res = generator(name);
        if (res) return res;
      }
      helpers2().ensure(name, File);
      const uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
      const dependencies = {};
      for (const dep of helpers2().getDependencies(name)) {
        dependencies[dep] = this.addHelper(dep);
      }
      const {
        nodes,
        globals: globals2
      } = helpers2().get(name, (dep) => dependencies[dep], uid, Object.keys(this.scope.getAllBindings()));
      globals2.forEach((name2) => {
        if (this.path.scope.hasBinding(name2, true)) {
          this.path.scope.rename(name2);
        }
      });
      nodes.forEach((node2) => {
        node2._compact = true;
      });
      const added = this.path.unshiftContainer("body", nodes);
      for (const path2 of added) {
        if (path2.isVariableDeclaration()) this.scope.registerDeclaration(path2);
      }
      return uid;
    }
    buildCodeFrameError(node2, msg, _Error = SyntaxError) {
      let loc = node2 == null ? void 0 : node2.loc;
      if (!loc && node2) {
        const state2 = {
          loc: null
        };
        (0, _traverse().default)(node2, errorVisitor, this.scope, state2);
        loc = state2.loc;
        let txt = "This is an error on an internal node. Probably an internal error.";
        if (loc) txt += " Location has been estimated.";
        msg += ` (${txt})`;
      }
      if (loc) {
        const {
          highlightCode = true
        } = this.opts;
        msg += "\n" + (0, _codeFrame2().codeFrameColumns)(this.code, {
          start: {
            line: loc.start.line,
            column: loc.start.column + 1
          },
          end: loc.end && loc.start.line === loc.end.line ? {
            line: loc.end.line,
            column: loc.end.column + 1
          } : void 0
        }, {
          highlightCode
        });
      }
      return new _Error(msg);
    }
  }
  file.default = File;
  {
    File.prototype.addImport = function addImport() {
      throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
    };
    File.prototype.addTemplateObject = function addTemplateObject() {
      throw new Error("This function has been moved into the template literal transform itself.");
    };
  }
  return file;
}
var buildExternalHelpers = {};
var hasRequiredBuildExternalHelpers;
function requireBuildExternalHelpers() {
  if (hasRequiredBuildExternalHelpers) return buildExternalHelpers;
  hasRequiredBuildExternalHelpers = 1;
  Object.defineProperty(buildExternalHelpers, "__esModule", {
    value: true
  });
  buildExternalHelpers.default = _default2;
  function helpers2() {
    const data = requireLib$D();
    helpers2 = function() {
      return data;
    };
    return data;
  }
  function _generator() {
    const data = requireLib$L();
    _generator = function() {
      return data;
    };
    return data;
  }
  function _template() {
    const data = requireLib$G();
    _template = function() {
      return data;
    };
    return data;
  }
  function _t() {
    const data = requireLib$O();
    _t = function() {
      return data;
    };
    return data;
  }
  var _file = requireFile();
  const {
    arrayExpression,
    assignmentExpression,
    binaryExpression,
    blockStatement,
    callExpression,
    cloneNode: cloneNode2,
    conditionalExpression,
    exportNamedDeclaration,
    exportSpecifier,
    expressionStatement,
    functionExpression,
    identifier: identifier2,
    memberExpression,
    objectExpression,
    program,
    stringLiteral,
    unaryExpression,
    variableDeclaration,
    variableDeclarator
  } = _t();
  const buildUmdWrapper = (replacements) => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);
  function buildGlobal(allowlist) {
    const namespace2 = identifier2("babelHelpers");
    const body = [];
    const container = functionExpression(null, [identifier2("global")], blockStatement(body));
    const tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier2("global")), stringLiteral("undefined")), identifier2("self"), identifier2("global"))]))]);
    body.push(variableDeclaration("var", [variableDeclarator(namespace2, assignmentExpression("=", memberExpression(identifier2("global"), namespace2), objectExpression([])))]));
    buildHelpers(body, namespace2, allowlist);
    return tree;
  }
  function buildModule(allowlist) {
    const body = [];
    const refs = buildHelpers(body, null, allowlist);
    body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => {
      return exportSpecifier(cloneNode2(refs[name]), identifier2(name));
    })));
    return program(body, [], "module");
  }
  function buildUmd(allowlist) {
    const namespace2 = identifier2("babelHelpers");
    const body = [];
    body.push(variableDeclaration("var", [variableDeclarator(namespace2, identifier2("global"))]));
    buildHelpers(body, namespace2, allowlist);
    return program([buildUmdWrapper({
      FACTORY_PARAMETERS: identifier2("global"),
      BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier2("root"), namespace2), objectExpression([])),
      COMMON_ARGUMENTS: identifier2("exports"),
      AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]),
      FACTORY_BODY: body,
      UMD_ROOT: identifier2("this")
    })]);
  }
  function buildVar(allowlist) {
    const namespace2 = identifier2("babelHelpers");
    const body = [];
    body.push(variableDeclaration("var", [variableDeclarator(namespace2, objectExpression([]))]));
    const tree = program(body);
    buildHelpers(body, namespace2, allowlist);
    body.push(expressionStatement(namespace2));
    return tree;
  }
  function buildHelpers(body, namespace2, allowlist) {
    const getHelperReference = (name) => {
      return namespace2 ? memberExpression(namespace2, identifier2(name)) : identifier2(`_${name}`);
    };
    const refs = {};
    helpers2().list.forEach(function(name) {
      if (allowlist && allowlist.indexOf(name) < 0) return;
      const ref = refs[name] = getHelperReference(name);
      helpers2().ensure(name, _file.default);
      const {
        nodes
      } = helpers2().get(name, getHelperReference, ref);
      body.push(...nodes);
    });
    return refs;
  }
  function _default2(allowlist, outputType = "global") {
    let tree;
    const build2 = {
      global: buildGlobal,
      module: buildModule,
      umd: buildUmd,
      var: buildVar
    }[outputType];
    if (build2) {
      tree = build2(allowlist);
    } else {
      throw new Error(`Unsupported output type ${outputType}`);
    }
    return (0, _generator().default)(tree).code;
  }
  return buildExternalHelpers;
}
var indexBrowser = {};
var hasRequiredIndexBrowser;
function requireIndexBrowser() {
  if (hasRequiredIndexBrowser) return indexBrowser;
  hasRequiredIndexBrowser = 1;
  Object.defineProperty(indexBrowser, "__esModule", {
    value: true
  });
  indexBrowser.ROOT_CONFIG_FILENAMES = void 0;
  indexBrowser.findConfigUpwards = findConfigUpwards;
  indexBrowser.findPackageData = findPackageData;
  indexBrowser.findRelativeConfig = findRelativeConfig;
  indexBrowser.findRootConfig = findRootConfig;
  indexBrowser.loadConfig = loadConfig;
  indexBrowser.loadPlugin = loadPlugin;
  indexBrowser.loadPreset = loadPreset;
  indexBrowser.resolvePlugin = resolvePlugin;
  indexBrowser.resolvePreset = resolvePreset;
  indexBrowser.resolveShowConfigPath = resolveShowConfigPath;
  function findConfigUpwards(rootDir) {
    return null;
  }
  function* findPackageData(filepath) {
    return {
      filepath,
      directories: [],
      pkg: null,
      isPackage: false
    };
  }
  function* findRelativeConfig(pkgData, envName, caller) {
    return {
      config: null,
      ignore: null
    };
  }
  function* findRootConfig(dirname, envName, caller) {
    return null;
  }
  function* loadConfig(name, dirname, envName, caller) {
    throw new Error(`Cannot load ${name} relative to ${dirname} in a browser`);
  }
  function* resolveShowConfigPath(dirname) {
    return null;
  }
  indexBrowser.ROOT_CONFIG_FILENAMES = [];
  function resolvePlugin(name, dirname) {
    return null;
  }
  function resolvePreset(name, dirname) {
    return null;
  }
  function loadPlugin(name, dirname) {
    throw new Error(`Cannot load plugin ${name} relative to ${dirname} in a browser`);
  }
  function loadPreset(name, dirname) {
    throw new Error(`Cannot load preset ${name} relative to ${dirname} in a browser`);
  }
  return indexBrowser;
}
var environment = {};
var hasRequiredEnvironment;
function requireEnvironment() {
  if (hasRequiredEnvironment) return environment;
  hasRequiredEnvironment = 1;
  Object.defineProperty(environment, "__esModule", {
    value: true
  });
  environment.getEnv = getEnv;
  function getEnv(defaultValue = "development") {
    return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;
  }
  return environment;
}
var config = {};
var gensync;
var hasRequiredGensync;
function requireGensync() {
  if (hasRequiredGensync) return gensync;
  hasRequiredGensync = 1;
  const GENSYNC_START = Symbol.for("gensync:v1:start");
  const GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
  const GENSYNC_EXPECTED_START = "GENSYNC_EXPECTED_START";
  const GENSYNC_EXPECTED_SUSPEND = "GENSYNC_EXPECTED_SUSPEND";
  const GENSYNC_OPTIONS_ERROR = "GENSYNC_OPTIONS_ERROR";
  const GENSYNC_RACE_NONEMPTY = "GENSYNC_RACE_NONEMPTY";
  const GENSYNC_ERRBACK_NO_CALLBACK = "GENSYNC_ERRBACK_NO_CALLBACK";
  gensync = Object.assign(
    function gensync2(optsOrFn) {
      let genFn = optsOrFn;
      if (typeof optsOrFn !== "function") {
        genFn = newGenerator(optsOrFn);
      } else {
        genFn = wrapGenerator(optsOrFn);
      }
      return Object.assign(genFn, makeFunctionAPI(genFn));
    },
    {
      all: buildOperation({
        name: "all",
        arity: 1,
        sync: function(args) {
          const items = Array.from(args[0]);
          return items.map((item2) => evaluateSync(item2));
        },
        async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            Promise.resolve().then(() => resolve([]));
            return;
          }
          let count = 0;
          const results = items.map(() => void 0);
          items.forEach((item2, i) => {
            evaluateAsync(
              item2,
              (val) => {
                results[i] = val;
                count += 1;
                if (count === results.length) resolve(results);
              },
              reject
            );
          });
        }
      }),
      race: buildOperation({
        name: "race",
        arity: 1,
        sync: function(args) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
          }
          return evaluateSync(items[0]);
        },
        async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
          }
          for (const item2 of items) {
            evaluateAsync(item2, resolve, reject);
          }
        }
      })
    }
  );
  function makeFunctionAPI(genFn) {
    const fns = {
      sync: function(...args) {
        return evaluateSync(genFn.apply(this, args));
      },
      async: function(...args) {
        return new Promise((resolve, reject) => {
          evaluateAsync(genFn.apply(this, args), resolve, reject);
        });
      },
      errback: function(...args) {
        const cb = args.pop();
        if (typeof cb !== "function") {
          throw makeError(
            "Asynchronous function called without callback",
            GENSYNC_ERRBACK_NO_CALLBACK
          );
        }
        let gen;
        try {
          gen = genFn.apply(this, args);
        } catch (err) {
          cb(err);
          return;
        }
        evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
      }
    };
    return fns;
  }
  function assertTypeof(type, name, value2, allowUndefined) {
    if (typeof value2 === type || allowUndefined && typeof value2 === "undefined") {
      return;
    }
    let msg;
    if (allowUndefined) {
      msg = `Expected opts.${name} to be either a ${type}, or undefined.`;
    } else {
      msg = `Expected opts.${name} to be a ${type}.`;
    }
    throw makeError(msg, GENSYNC_OPTIONS_ERROR);
  }
  function makeError(msg, code) {
    return Object.assign(new Error(msg), { code });
  }
  function newGenerator({ name, arity, sync, async: async2, errback }) {
    assertTypeof(
      "string",
      "name",
      name,
      true
      /* allowUndefined */
    );
    assertTypeof(
      "number",
      "arity",
      arity,
      true
      /* allowUndefined */
    );
    assertTypeof("function", "sync", sync);
    assertTypeof(
      "function",
      "async",
      async2,
      true
      /* allowUndefined */
    );
    assertTypeof(
      "function",
      "errback",
      errback,
      true
      /* allowUndefined */
    );
    if (async2 && errback) {
      throw makeError(
        "Expected one of either opts.async or opts.errback, but got _both_.",
        GENSYNC_OPTIONS_ERROR
      );
    }
    if (typeof name !== "string") {
      let fnName;
      if (errback && errback.name && errback.name !== "errback") {
        fnName = errback.name;
      }
      if (async2 && async2.name && async2.name !== "async") {
        fnName = async2.name.replace(/Async$/, "");
      }
      if (sync && sync.name && sync.name !== "sync") {
        fnName = sync.name.replace(/Sync$/, "");
      }
      if (typeof fnName === "string") {
        name = fnName;
      }
    }
    if (typeof arity !== "number") {
      arity = sync.length;
    }
    return buildOperation({
      name,
      arity,
      sync: function(args) {
        return sync.apply(this, args);
      },
      async: function(args, resolve, reject) {
        if (async2) {
          async2.apply(this, args).then(resolve, reject);
        } else if (errback) {
          errback.call(this, ...args, (err, value2) => {
            if (err == null) resolve(value2);
            else reject(err);
          });
        } else {
          resolve(sync.apply(this, args));
        }
      }
    });
  }
  function wrapGenerator(genFn) {
    return setFunctionMetadata(genFn.name, genFn.length, function(...args) {
      return genFn.apply(this, args);
    });
  }
  function buildOperation({ name, arity, sync, async: async2 }) {
    return setFunctionMetadata(name, arity, function* (...args) {
      const resume = yield GENSYNC_START;
      if (!resume) {
        const res = sync.call(this, args);
        return res;
      }
      let result;
      try {
        async2.call(
          this,
          args,
          (value2) => {
            if (result) return;
            result = { value: value2 };
            resume();
          },
          (err) => {
            if (result) return;
            result = { err };
            resume();
          }
        );
      } catch (err) {
        result = { err };
        resume();
      }
      yield GENSYNC_SUSPEND;
      if (result.hasOwnProperty("err")) {
        throw result.err;
      }
      return result.value;
    });
  }
  function evaluateSync(gen) {
    let value2;
    while (!({ value: value2 } = gen.next()).done) {
      assertStart(value2, gen);
    }
    return value2;
  }
  function evaluateAsync(gen, resolve, reject) {
    (function step() {
      try {
        let value2;
        while (!({ value: value2 } = gen.next()).done) {
          assertStart(value2, gen);
          let sync = true;
          let didSyncResume = false;
          const out = gen.next(() => {
            if (sync) {
              didSyncResume = true;
            } else {
              step();
            }
          });
          sync = false;
          assertSuspend(out, gen);
          if (!didSyncResume) {
            return;
          }
        }
        return resolve(value2);
      } catch (err) {
        return reject(err);
      }
    })();
  }
  function assertStart(value2, gen) {
    if (value2 === GENSYNC_START) return;
    throwError(
      gen,
      makeError(
        `Got unexpected yielded value in gensync generator: ${JSON.stringify(
          value2
        )}. Did you perhaps mean to use 'yield*' instead of 'yield'?`,
        GENSYNC_EXPECTED_START
      )
    );
  }
  function assertSuspend({ value: value2, done }, gen) {
    if (!done && value2 === GENSYNC_SUSPEND) return;
    throwError(
      gen,
      makeError(
        done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(
          value2
        )}. If you get this, it is probably a gensync bug.`,
        GENSYNC_EXPECTED_SUSPEND
      )
    );
  }
  function throwError(gen, err) {
    if (gen.throw) gen.throw(err);
    throw err;
  }
  function setFunctionMetadata(name, arity, fn2) {
    if (typeof name === "string") {
      const nameDesc = Object.getOwnPropertyDescriptor(fn2, "name");
      if (!nameDesc || nameDesc.configurable) {
        Object.defineProperty(
          fn2,
          "name",
          Object.assign(nameDesc || {}, {
            configurable: true,
            value: name
          })
        );
      }
    }
    if (typeof arity === "number") {
      const lengthDesc = Object.getOwnPropertyDescriptor(fn2, "length");
      if (!lengthDesc || lengthDesc.configurable) {
        Object.defineProperty(
          fn2,
          "length",
          Object.assign(lengthDesc || {}, {
            configurable: true,
            value: arity
          })
        );
      }
    }
    return fn2;
  }
  return gensync;
}
var full = {};
var async = {};
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async;
  hasRequiredAsync = 1;
  Object.defineProperty(async, "__esModule", {
    value: true
  });
  async.forwardAsync = forwardAsync;
  async.isAsync = void 0;
  async.isThenable = isThenable;
  async.maybeAsync = maybeAsync;
  async.waitFor = async.onFirstPause = void 0;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key2, arg) {
    try {
      var info = gen[key2](arg);
      var value2 = info.value;
    } catch (error2) {
      reject(error2);
      return;
    }
    if (info.done) {
      resolve(value2);
    } else {
      Promise.resolve(value2).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn2) {
    return function() {
      var self = this, args = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn2.apply(self, args);
        function _next(value2) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  const runGenerator = _gensync()(function* (item2) {
    return yield* item2;
  });
  async.isAsync = _gensync()({
    sync: () => false,
    errback: (cb) => cb(null, true)
  });
  function maybeAsync(fn2, message) {
    return _gensync()({
      sync(...args) {
        const result = fn2.apply(this, args);
        if (isThenable(result)) throw new Error(message);
        return result;
      },
      async(...args) {
        return Promise.resolve(fn2.apply(this, args));
      }
    });
  }
  const withKind = _gensync()({
    sync: (cb) => cb("sync"),
    async: function() {
      var _ref = _asyncToGenerator(function* (cb) {
        return cb("async");
      });
      return function async2(_x) {
        return _ref.apply(this, arguments);
      };
    }()
  });
  function forwardAsync(action, cb) {
    const g = _gensync()(action);
    return withKind((kind) => {
      const adapted = g[kind];
      return cb(adapted);
    });
  }
  async.onFirstPause = _gensync()({
    name: "onFirstPause",
    arity: 2,
    sync: function(item2) {
      return runGenerator.sync(item2);
    },
    errback: function(item2, firstPause, cb) {
      let completed = false;
      runGenerator.errback(item2, (err, value2) => {
        completed = true;
        cb(err, value2);
      });
      if (!completed) {
        firstPause();
      }
    }
  });
  async.waitFor = _gensync()({
    sync: (x2) => x2,
    async: function() {
      var _ref2 = _asyncToGenerator(function* (x2) {
        return x2;
      });
      return function async2(_x2) {
        return _ref2.apply(this, arguments);
      };
    }()
  });
  function isThenable(val) {
    return !!val && (typeof val === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
  }
  return async;
}
var util$7 = {};
var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil) return util$7;
  hasRequiredUtil = 1;
  Object.defineProperty(util$7, "__esModule", {
    value: true
  });
  util$7.isIterableIterator = isIterableIterator;
  util$7.mergeOptions = mergeOptions;
  function mergeOptions(target, source2) {
    for (const k of Object.keys(source2)) {
      if ((k === "parserOpts" || k === "generatorOpts" || k === "assumptions") && source2[k]) {
        const parserOpts = source2[k];
        const targetObj = target[k] || (target[k] = {});
        mergeDefaultFields(targetObj, parserOpts);
      } else {
        const val = source2[k];
        if (val !== void 0) target[k] = val;
      }
    }
  }
  function mergeDefaultFields(target, source2) {
    for (const k of Object.keys(source2)) {
      const val = source2[k];
      if (val !== void 0) target[k] = val;
    }
  }
  function isIterableIterator(value2) {
    return !!value2 && typeof value2.next === "function" && typeof value2[Symbol.iterator] === "function";
  }
  return util$7;
}
var plugin = {};
var deepArray = {};
var hasRequiredDeepArray;
function requireDeepArray() {
  if (hasRequiredDeepArray) return deepArray;
  hasRequiredDeepArray = 1;
  Object.defineProperty(deepArray, "__esModule", {
    value: true
  });
  deepArray.finalize = finalize;
  deepArray.flattenToSet = flattenToSet;
  function finalize(deepArr) {
    return Object.freeze(deepArr);
  }
  function flattenToSet(arr) {
    const result = /* @__PURE__ */ new Set();
    const stack2 = [arr];
    while (stack2.length > 0) {
      for (const el of stack2.pop()) {
        if (Array.isArray(el)) stack2.push(el);
        else result.add(el);
      }
    }
    return result;
  }
  return deepArray;
}
var hasRequiredPlugin;
function requirePlugin() {
  if (hasRequiredPlugin) return plugin;
  hasRequiredPlugin = 1;
  Object.defineProperty(plugin, "__esModule", {
    value: true
  });
  plugin.default = void 0;
  var _deepArray = requireDeepArray();
  class Plugin {
    constructor(plugin2, options2, key2, externalDependencies2 = (0, _deepArray.finalize)([])) {
      this.key = void 0;
      this.manipulateOptions = void 0;
      this.post = void 0;
      this.pre = void 0;
      this.visitor = void 0;
      this.parserOverride = void 0;
      this.generatorOverride = void 0;
      this.options = void 0;
      this.externalDependencies = void 0;
      this.key = plugin2.name || key2;
      this.manipulateOptions = plugin2.manipulateOptions;
      this.post = plugin2.post;
      this.pre = plugin2.pre;
      this.visitor = plugin2.visitor || {};
      this.parserOverride = plugin2.parserOverride;
      this.generatorOverride = plugin2.generatorOverride;
      this.options = options2;
      this.externalDependencies = externalDependencies2;
    }
  }
  plugin.default = Plugin;
  return plugin;
}
var item = {};
var configDescriptors = {};
var functional = {};
var hasRequiredFunctional;
function requireFunctional() {
  if (hasRequiredFunctional) return functional;
  hasRequiredFunctional = 1;
  Object.defineProperty(functional, "__esModule", {
    value: true
  });
  functional.once = once;
  var _async = requireAsync();
  function once(fn2) {
    let result;
    let resultP;
    let promiseReferenced = false;
    return function* () {
      if (!result) {
        if (resultP) {
          promiseReferenced = true;
          return yield* (0, _async.waitFor)(resultP);
        }
        if (!(yield* (0, _async.isAsync)())) {
          try {
            result = {
              ok: true,
              value: yield* fn2()
            };
          } catch (error2) {
            result = {
              ok: false,
              value: error2
            };
          }
        } else {
          let resolve, reject;
          resultP = new Promise((res, rej) => {
            resolve = res;
            reject = rej;
          });
          try {
            result = {
              ok: true,
              value: yield* fn2()
            };
            resultP = null;
            if (promiseReferenced) resolve(result.value);
          } catch (error2) {
            result = {
              ok: false,
              value: error2
            };
            resultP = null;
            if (promiseReferenced) reject(error2);
          }
        }
      }
      if (result.ok) return result.value;
      else throw result.value;
    };
  }
  return functional;
}
var caching = {};
var hasRequiredCaching;
function requireCaching() {
  if (hasRequiredCaching) return caching;
  hasRequiredCaching = 1;
  Object.defineProperty(caching, "__esModule", {
    value: true
  });
  caching.assertSimpleType = assertSimpleType;
  caching.makeStrongCache = makeStrongCache;
  caching.makeStrongCacheSync = makeStrongCacheSync;
  caching.makeWeakCache = makeWeakCache;
  caching.makeWeakCacheSync = makeWeakCacheSync;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _async = requireAsync();
  var _util2 = requireUtil();
  const synchronize = (gen) => {
    return _gensync()(gen).sync;
  };
  function* genTrue() {
    return true;
  }
  function makeWeakCache(handler) {
    return makeCachedFunction(WeakMap, handler);
  }
  function makeWeakCacheSync(handler) {
    return synchronize(makeWeakCache(handler));
  }
  function makeStrongCache(handler) {
    return makeCachedFunction(Map, handler);
  }
  function makeStrongCacheSync(handler) {
    return synchronize(makeStrongCache(handler));
  }
  function makeCachedFunction(CallCache, handler) {
    const callCacheSync = new CallCache();
    const callCacheAsync = new CallCache();
    const futureCache = new CallCache();
    return function* cachedFunction(arg, data) {
      const asyncContext = yield* (0, _async.isAsync)();
      const callCache = asyncContext ? callCacheAsync : callCacheSync;
      const cached = yield* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data);
      if (cached.valid) return cached.value;
      const cache2 = new CacheConfigurator(data);
      const handlerResult = handler(arg, cache2);
      let finishLock;
      let value2;
      if ((0, _util2.isIterableIterator)(handlerResult)) {
        value2 = yield* (0, _async.onFirstPause)(handlerResult, () => {
          finishLock = setupAsyncLocks(cache2, futureCache, arg);
        });
      } else {
        value2 = handlerResult;
      }
      updateFunctionCache(callCache, cache2, arg, value2);
      if (finishLock) {
        futureCache.delete(arg);
        finishLock.release(value2);
      }
      return value2;
    };
  }
  function* getCachedValue(cache2, arg, data) {
    const cachedValue = cache2.get(arg);
    if (cachedValue) {
      for (const {
        value: value2,
        valid
      } of cachedValue) {
        if (yield* valid(data)) return {
          valid: true,
          value: value2
        };
      }
    }
    return {
      valid: false,
      value: null
    };
  }
  function* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data) {
    const cached = yield* getCachedValue(callCache, arg, data);
    if (cached.valid) {
      return cached;
    }
    if (asyncContext) {
      const cached2 = yield* getCachedValue(futureCache, arg, data);
      if (cached2.valid) {
        const value2 = yield* (0, _async.waitFor)(cached2.value.promise);
        return {
          valid: true,
          value: value2
        };
      }
    }
    return {
      valid: false,
      value: null
    };
  }
  function setupAsyncLocks(config2, futureCache, arg) {
    const finishLock = new Lock();
    updateFunctionCache(futureCache, config2, arg, finishLock);
    return finishLock;
  }
  function updateFunctionCache(cache2, config2, arg, value2) {
    if (!config2.configured()) config2.forever();
    let cachedValue = cache2.get(arg);
    config2.deactivate();
    switch (config2.mode()) {
      case "forever":
        cachedValue = [{
          value: value2,
          valid: genTrue
        }];
        cache2.set(arg, cachedValue);
        break;
      case "invalidate":
        cachedValue = [{
          value: value2,
          valid: config2.validator()
        }];
        cache2.set(arg, cachedValue);
        break;
      case "valid":
        if (cachedValue) {
          cachedValue.push({
            value: value2,
            valid: config2.validator()
          });
        } else {
          cachedValue = [{
            value: value2,
            valid: config2.validator()
          }];
          cache2.set(arg, cachedValue);
        }
    }
  }
  class CacheConfigurator {
    constructor(data) {
      this._active = true;
      this._never = false;
      this._forever = false;
      this._invalidate = false;
      this._configured = false;
      this._pairs = [];
      this._data = void 0;
      this._data = data;
    }
    simple() {
      return makeSimpleConfigurator(this);
    }
    mode() {
      if (this._never) return "never";
      if (this._forever) return "forever";
      if (this._invalidate) return "invalidate";
      return "valid";
    }
    forever() {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._never) {
        throw new Error("Caching has already been configured with .never()");
      }
      this._forever = true;
      this._configured = true;
    }
    never() {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._forever) {
        throw new Error("Caching has already been configured with .forever()");
      }
      this._never = true;
      this._configured = true;
    }
    using(handler) {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._never || this._forever) {
        throw new Error("Caching has already been configured with .never or .forever()");
      }
      this._configured = true;
      const key2 = handler(this._data);
      const fn2 = (0, _async.maybeAsync)(handler, `You appear to be using an async cache handler, but Babel has been called synchronously`);
      if ((0, _async.isThenable)(key2)) {
        return key2.then((key3) => {
          this._pairs.push([key3, fn2]);
          return key3;
        });
      }
      this._pairs.push([key2, fn2]);
      return key2;
    }
    invalidate(handler) {
      this._invalidate = true;
      return this.using(handler);
    }
    validator() {
      const pairs = this._pairs;
      return function* (data) {
        for (const [key2, fn2] of pairs) {
          if (key2 !== (yield* fn2(data))) return false;
        }
        return true;
      };
    }
    deactivate() {
      this._active = false;
    }
    configured() {
      return this._configured;
    }
  }
  function makeSimpleConfigurator(cache2) {
    function cacheFn(val) {
      if (typeof val === "boolean") {
        if (val) cache2.forever();
        else cache2.never();
        return;
      }
      return cache2.using(() => assertSimpleType(val()));
    }
    cacheFn.forever = () => cache2.forever();
    cacheFn.never = () => cache2.never();
    cacheFn.using = (cb) => cache2.using(() => assertSimpleType(cb()));
    cacheFn.invalidate = (cb) => cache2.invalidate(() => assertSimpleType(cb()));
    return cacheFn;
  }
  function assertSimpleType(value2) {
    if ((0, _async.isThenable)(value2)) {
      throw new Error(`You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.`);
    }
    if (value2 != null && typeof value2 !== "string" && typeof value2 !== "boolean" && typeof value2 !== "number") {
      throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
    }
    return value2;
  }
  class Lock {
    constructor() {
      this.released = false;
      this.promise = void 0;
      this._resolve = void 0;
      this.promise = new Promise((resolve) => {
        this._resolve = resolve;
      });
    }
    release(value2) {
      this.released = true;
      this._resolve(value2);
    }
  }
  return caching;
}
var resolveTargetsBrowser = {};
var lib$y = {};
const require$$0$5 = [
  {
    name: "nodejs",
    version: "0.2.0",
    date: "2011-08-26",
    lts: false,
    security: false,
    v8: "2.3.8.0"
  },
  {
    name: "nodejs",
    version: "0.3.0",
    date: "2011-08-26",
    lts: false,
    security: false,
    v8: "2.5.1.0"
  },
  {
    name: "nodejs",
    version: "0.4.0",
    date: "2011-08-26",
    lts: false,
    security: false,
    v8: "3.1.2.0"
  },
  {
    name: "nodejs",
    version: "0.5.0",
    date: "2011-08-26",
    lts: false,
    security: false,
    v8: "3.1.8.25"
  },
  {
    name: "nodejs",
    version: "0.6.0",
    date: "2011-11-04",
    lts: false,
    security: false,
    v8: "3.6.6.6"
  },
  {
    name: "nodejs",
    version: "0.7.0",
    date: "2012-01-17",
    lts: false,
    security: false,
    v8: "3.8.6.0"
  },
  {
    name: "nodejs",
    version: "0.8.0",
    date: "2012-06-22",
    lts: false,
    security: false,
    v8: "3.11.10.10"
  },
  {
    name: "nodejs",
    version: "0.9.0",
    date: "2012-07-20",
    lts: false,
    security: false,
    v8: "3.11.10.15"
  },
  {
    name: "nodejs",
    version: "0.10.0",
    date: "2013-03-11",
    lts: false,
    security: false,
    v8: "3.14.5.8"
  },
  {
    name: "nodejs",
    version: "0.11.0",
    date: "2013-03-28",
    lts: false,
    security: false,
    v8: "3.17.13.0"
  },
  {
    name: "nodejs",
    version: "0.12.0",
    date: "2015-02-06",
    lts: false,
    security: false,
    v8: "3.28.73.0"
  },
  {
    name: "nodejs",
    version: "4.0.0",
    date: "2015-09-08",
    lts: false,
    security: false,
    v8: "4.5.103.30"
  },
  {
    name: "nodejs",
    version: "4.1.0",
    date: "2015-09-17",
    lts: false,
    security: false,
    v8: "4.5.103.33"
  },
  {
    name: "nodejs",
    version: "4.2.0",
    date: "2015-10-12",
    lts: "Argon",
    security: false,
    v8: "4.5.103.35"
  },
  {
    name: "nodejs",
    version: "4.3.0",
    date: "2016-02-09",
    lts: "Argon",
    security: false,
    v8: "4.5.103.35"
  },
  {
    name: "nodejs",
    version: "4.4.0",
    date: "2016-03-08",
    lts: "Argon",
    security: false,
    v8: "4.5.103.35"
  },
  {
    name: "nodejs",
    version: "4.5.0",
    date: "2016-08-16",
    lts: "Argon",
    security: false,
    v8: "4.5.103.37"
  },
  {
    name: "nodejs",
    version: "4.6.0",
    date: "2016-09-27",
    lts: "Argon",
    security: true,
    v8: "4.5.103.37"
  },
  {
    name: "nodejs",
    version: "4.7.0",
    date: "2016-12-06",
    lts: "Argon",
    security: false,
    v8: "4.5.103.43"
  },
  {
    name: "nodejs",
    version: "4.8.0",
    date: "2017-02-21",
    lts: "Argon",
    security: false,
    v8: "4.5.103.45"
  },
  {
    name: "nodejs",
    version: "4.9.0",
    date: "2018-03-28",
    lts: "Argon",
    security: true,
    v8: "4.5.103.53"
  },
  {
    name: "nodejs",
    version: "5.0.0",
    date: "2015-10-29",
    lts: false,
    security: false,
    v8: "4.6.85.28"
  },
  {
    name: "nodejs",
    version: "5.1.0",
    date: "2015-11-17",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.2.0",
    date: "2015-12-09",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.3.0",
    date: "2015-12-15",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.4.0",
    date: "2016-01-06",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.5.0",
    date: "2016-01-21",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.6.0",
    date: "2016-02-09",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.7.0",
    date: "2016-02-23",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.8.0",
    date: "2016-03-09",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.9.0",
    date: "2016-03-16",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.10.0",
    date: "2016-04-01",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.11.0",
    date: "2016-04-21",
    lts: false,
    security: false,
    v8: "4.6.85.31"
  },
  {
    name: "nodejs",
    version: "5.12.0",
    date: "2016-06-23",
    lts: false,
    security: false,
    v8: "4.6.85.32"
  },
  {
    name: "nodejs",
    version: "6.0.0",
    date: "2016-04-26",
    lts: false,
    security: false,
    v8: "5.0.71.35"
  },
  {
    name: "nodejs",
    version: "6.1.0",
    date: "2016-05-05",
    lts: false,
    security: false,
    v8: "5.0.71.35"
  },
  {
    name: "nodejs",
    version: "6.2.0",
    date: "2016-05-17",
    lts: false,
    security: false,
    v8: "5.0.71.47"
  },
  {
    name: "nodejs",
    version: "6.3.0",
    date: "2016-07-06",
    lts: false,
    security: false,
    v8: "5.0.71.52"
  },
  {
    name: "nodejs",
    version: "6.4.0",
    date: "2016-08-12",
    lts: false,
    security: false,
    v8: "5.0.71.60"
  },
  {
    name: "nodejs",
    version: "6.5.0",
    date: "2016-08-26",
    lts: false,
    security: false,
    v8: "5.1.281.81"
  },
  {
    name: "nodejs",
    version: "6.6.0",
    date: "2016-09-14",
    lts: false,
    security: false,
    v8: "5.1.281.83"
  },
  {
    name: "nodejs",
    version: "6.7.0",
    date: "2016-09-27",
    lts: false,
    security: true,
    v8: "5.1.281.83"
  },
  {
    name: "nodejs",
    version: "6.8.0",
    date: "2016-10-12",
    lts: false,
    security: false,
    v8: "5.1.281.84"
  },
  {
    name: "nodejs",
    version: "6.9.0",
    date: "2016-10-18",
    lts: "Boron",
    security: false,
    v8: "5.1.281.84"
  },
  {
    name: "nodejs",
    version: "6.10.0",
    date: "2017-02-21",
    lts: "Boron",
    security: false,
    v8: "5.1.281.93"
  },
  {
    name: "nodejs",
    version: "6.11.0",
    date: "2017-06-06",
    lts: "Boron",
    security: false,
    v8: "5.1.281.102"
  },
  {
    name: "nodejs",
    version: "6.12.0",
    date: "2017-11-06",
    lts: "Boron",
    security: false,
    v8: "5.1.281.108"
  },
  {
    name: "nodejs",
    version: "6.13.0",
    date: "2018-02-10",
    lts: "Boron",
    security: false,
    v8: "5.1.281.111"
  },
  {
    name: "nodejs",
    version: "6.14.0",
    date: "2018-03-28",
    lts: "Boron",
    security: true,
    v8: "5.1.281.111"
  },
  {
    name: "nodejs",
    version: "6.15.0",
    date: "2018-11-27",
    lts: "Boron",
    security: true,
    v8: "5.1.281.111"
  },
  {
    name: "nodejs",
    version: "6.16.0",
    date: "2018-12-26",
    lts: "Boron",
    security: false,
    v8: "5.1.281.111"
  },
  {
    name: "nodejs",
    version: "6.17.0",
    date: "2019-02-28",
    lts: "Boron",
    security: true,
    v8: "5.1.281.111"
  },
  {
    name: "nodejs",
    version: "7.0.0",
    date: "2016-10-25",
    lts: false,
    security: false,
    v8: "5.4.500.36"
  },
  {
    name: "nodejs",
    version: "7.1.0",
    date: "2016-11-08",
    lts: false,
    security: false,
    v8: "5.4.500.36"
  },
  {
    name: "nodejs",
    version: "7.2.0",
    date: "2016-11-22",
    lts: false,
    security: false,
    v8: "5.4.500.43"
  },
  {
    name: "nodejs",
    version: "7.3.0",
    date: "2016-12-20",
    lts: false,
    security: false,
    v8: "5.4.500.45"
  },
  {
    name: "nodejs",
    version: "7.4.0",
    date: "2017-01-04",
    lts: false,
    security: false,
    v8: "5.4.500.45"
  },
  {
    name: "nodejs",
    version: "7.5.0",
    date: "2017-01-31",
    lts: false,
    security: false,
    v8: "5.4.500.48"
  },
  {
    name: "nodejs",
    version: "7.6.0",
    date: "2017-02-21",
    lts: false,
    security: false,
    v8: "5.5.372.40"
  },
  {
    name: "nodejs",
    version: "7.7.0",
    date: "2017-02-28",
    lts: false,
    security: false,
    v8: "5.5.372.41"
  },
  {
    name: "nodejs",
    version: "7.8.0",
    date: "2017-03-29",
    lts: false,
    security: false,
    v8: "5.5.372.43"
  },
  {
    name: "nodejs",
    version: "7.9.0",
    date: "2017-04-11",
    lts: false,
    security: false,
    v8: "5.5.372.43"
  },
  {
    name: "nodejs",
    version: "7.10.0",
    date: "2017-05-02",
    lts: false,
    security: false,
    v8: "5.5.372.43"
  },
  {
    name: "nodejs",
    version: "8.0.0",
    date: "2017-05-30",
    lts: false,
    security: false,
    v8: "5.8.283.41"
  },
  {
    name: "nodejs",
    version: "8.1.0",
    date: "2017-06-08",
    lts: false,
    security: false,
    v8: "5.8.283.41"
  },
  {
    name: "nodejs",
    version: "8.2.0",
    date: "2017-07-19",
    lts: false,
    security: false,
    v8: "5.8.283.41"
  },
  {
    name: "nodejs",
    version: "8.3.0",
    date: "2017-08-08",
    lts: false,
    security: false,
    v8: "6.0.286.52"
  },
  {
    name: "nodejs",
    version: "8.4.0",
    date: "2017-08-15",
    lts: false,
    security: false,
    v8: "6.0.286.52"
  },
  {
    name: "nodejs",
    version: "8.5.0",
    date: "2017-09-12",
    lts: false,
    security: false,
    v8: "6.0.287.53"
  },
  {
    name: "nodejs",
    version: "8.6.0",
    date: "2017-09-26",
    lts: false,
    security: false,
    v8: "6.0.287.53"
  },
  {
    name: "nodejs",
    version: "8.7.0",
    date: "2017-10-11",
    lts: false,
    security: false,
    v8: "6.1.534.42"
  },
  {
    name: "nodejs",
    version: "8.8.0",
    date: "2017-10-24",
    lts: false,
    security: false,
    v8: "6.1.534.42"
  },
  {
    name: "nodejs",
    version: "8.9.0",
    date: "2017-10-31",
    lts: "Carbon",
    security: false,
    v8: "6.1.534.46"
  },
  {
    name: "nodejs",
    version: "8.10.0",
    date: "2018-03-06",
    lts: "Carbon",
    security: false,
    v8: "6.2.414.50"
  },
  {
    name: "nodejs",
    version: "8.11.0",
    date: "2018-03-28",
    lts: "Carbon",
    security: true,
    v8: "6.2.414.50"
  },
  {
    name: "nodejs",
    version: "8.12.0",
    date: "2018-09-10",
    lts: "Carbon",
    security: false,
    v8: "6.2.414.66"
  },
  {
    name: "nodejs",
    version: "8.13.0",
    date: "2018-11-20",
    lts: "Carbon",
    security: false,
    v8: "6.2.414.72"
  },
  {
    name: "nodejs",
    version: "8.14.0",
    date: "2018-11-27",
    lts: "Carbon",
    security: true,
    v8: "6.2.414.72"
  },
  {
    name: "nodejs",
    version: "8.15.0",
    date: "2018-12-26",
    lts: "Carbon",
    security: false,
    v8: "6.2.414.75"
  },
  {
    name: "nodejs",
    version: "8.16.0",
    date: "2019-04-16",
    lts: "Carbon",
    security: false,
    v8: "6.2.414.77"
  },
  {
    name: "nodejs",
    version: "8.17.0",
    date: "2019-12-17",
    lts: "Carbon",
    security: true,
    v8: "6.2.414.78"
  },
  {
    name: "nodejs",
    version: "9.0.0",
    date: "2017-10-31",
    lts: false,
    security: false,
    v8: "6.2.414.32"
  },
  {
    name: "nodejs",
    version: "9.1.0",
    date: "2017-11-07",
    lts: false,
    security: false,
    v8: "6.2.414.32"
  },
  {
    name: "nodejs",
    version: "9.2.0",
    date: "2017-11-14",
    lts: false,
    security: false,
    v8: "6.2.414.44"
  },
  {
    name: "nodejs",
    version: "9.3.0",
    date: "2017-12-12",
    lts: false,
    security: false,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "9.4.0",
    date: "2018-01-10",
    lts: false,
    security: false,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "9.5.0",
    date: "2018-01-31",
    lts: false,
    security: false,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "9.6.0",
    date: "2018-02-21",
    lts: false,
    security: false,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "9.7.0",
    date: "2018-03-01",
    lts: false,
    security: false,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "9.8.0",
    date: "2018-03-07",
    lts: false,
    security: false,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "9.9.0",
    date: "2018-03-21",
    lts: false,
    security: false,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "9.10.0",
    date: "2018-03-28",
    lts: false,
    security: true,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "9.11.0",
    date: "2018-04-04",
    lts: false,
    security: false,
    v8: "6.2.414.46"
  },
  {
    name: "nodejs",
    version: "10.0.0",
    date: "2018-04-24",
    lts: false,
    security: false,
    v8: "6.6.346.24"
  },
  {
    name: "nodejs",
    version: "10.1.0",
    date: "2018-05-08",
    lts: false,
    security: false,
    v8: "6.6.346.27"
  },
  {
    name: "nodejs",
    version: "10.2.0",
    date: "2018-05-23",
    lts: false,
    security: false,
    v8: "6.6.346.32"
  },
  {
    name: "nodejs",
    version: "10.3.0",
    date: "2018-05-29",
    lts: false,
    security: false,
    v8: "6.6.346.32"
  },
  {
    name: "nodejs",
    version: "10.4.0",
    date: "2018-06-06",
    lts: false,
    security: false,
    v8: "6.7.288.43"
  },
  {
    name: "nodejs",
    version: "10.5.0",
    date: "2018-06-20",
    lts: false,
    security: false,
    v8: "6.7.288.46"
  },
  {
    name: "nodejs",
    version: "10.6.0",
    date: "2018-07-04",
    lts: false,
    security: false,
    v8: "6.7.288.46"
  },
  {
    name: "nodejs",
    version: "10.7.0",
    date: "2018-07-18",
    lts: false,
    security: false,
    v8: "6.7.288.49"
  },
  {
    name: "nodejs",
    version: "10.8.0",
    date: "2018-08-01",
    lts: false,
    security: false,
    v8: "6.7.288.49"
  },
  {
    name: "nodejs",
    version: "10.9.0",
    date: "2018-08-15",
    lts: false,
    security: false,
    v8: "6.8.275.24"
  },
  {
    name: "nodejs",
    version: "10.10.0",
    date: "2018-09-06",
    lts: false,
    security: false,
    v8: "6.8.275.30"
  },
  {
    name: "nodejs",
    version: "10.11.0",
    date: "2018-09-19",
    lts: false,
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.12.0",
    date: "2018-10-10",
    lts: false,
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.13.0",
    date: "2018-10-30",
    lts: "Dubnium",
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.14.0",
    date: "2018-11-27",
    lts: "Dubnium",
    security: true,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.15.0",
    date: "2018-12-26",
    lts: "Dubnium",
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.16.0",
    date: "2019-05-28",
    lts: "Dubnium",
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.17.0",
    date: "2019-10-22",
    lts: "Dubnium",
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.18.0",
    date: "2019-12-17",
    lts: "Dubnium",
    security: true,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.19.0",
    date: "2020-02-05",
    lts: "Dubnium",
    security: true,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.20.0",
    date: "2020-03-26",
    lts: "Dubnium",
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.21.0",
    date: "2020-06-02",
    lts: "Dubnium",
    security: true,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.22.0",
    date: "2020-07-21",
    lts: "Dubnium",
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.23.0",
    date: "2020-10-27",
    lts: "Dubnium",
    security: false,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "10.24.0",
    date: "2021-02-23",
    lts: "Dubnium",
    security: true,
    v8: "6.8.275.32"
  },
  {
    name: "nodejs",
    version: "11.0.0",
    date: "2018-10-23",
    lts: false,
    security: false,
    v8: "7.0.276.28"
  },
  {
    name: "nodejs",
    version: "11.1.0",
    date: "2018-10-30",
    lts: false,
    security: false,
    v8: "7.0.276.32"
  },
  {
    name: "nodejs",
    version: "11.2.0",
    date: "2018-11-15",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.3.0",
    date: "2018-11-27",
    lts: false,
    security: true,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.4.0",
    date: "2018-12-07",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.5.0",
    date: "2018-12-18",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.6.0",
    date: "2018-12-26",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.7.0",
    date: "2019-01-17",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.8.0",
    date: "2019-01-24",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.9.0",
    date: "2019-01-30",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.10.0",
    date: "2019-02-14",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.11.0",
    date: "2019-03-05",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.12.0",
    date: "2019-03-14",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.13.0",
    date: "2019-03-28",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.14.0",
    date: "2019-04-10",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "11.15.0",
    date: "2019-04-30",
    lts: false,
    security: false,
    v8: "7.0.276.38"
  },
  {
    name: "nodejs",
    version: "12.0.0",
    date: "2019-04-23",
    lts: false,
    security: false,
    v8: "7.4.288.21"
  },
  {
    name: "nodejs",
    version: "12.1.0",
    date: "2019-04-29",
    lts: false,
    security: false,
    v8: "7.4.288.21"
  },
  {
    name: "nodejs",
    version: "12.2.0",
    date: "2019-05-07",
    lts: false,
    security: false,
    v8: "7.4.288.21"
  },
  {
    name: "nodejs",
    version: "12.3.0",
    date: "2019-05-21",
    lts: false,
    security: false,
    v8: "7.4.288.27"
  },
  {
    name: "nodejs",
    version: "12.4.0",
    date: "2019-06-04",
    lts: false,
    security: false,
    v8: "7.4.288.27"
  },
  {
    name: "nodejs",
    version: "12.5.0",
    date: "2019-06-26",
    lts: false,
    security: false,
    v8: "7.5.288.22"
  },
  {
    name: "nodejs",
    version: "12.6.0",
    date: "2019-07-03",
    lts: false,
    security: false,
    v8: "7.5.288.22"
  },
  {
    name: "nodejs",
    version: "12.7.0",
    date: "2019-07-23",
    lts: false,
    security: false,
    v8: "7.5.288.22"
  },
  {
    name: "nodejs",
    version: "12.8.0",
    date: "2019-08-06",
    lts: false,
    security: false,
    v8: "7.5.288.22"
  },
  {
    name: "nodejs",
    version: "12.9.0",
    date: "2019-08-20",
    lts: false,
    security: false,
    v8: "7.6.303.29"
  },
  {
    name: "nodejs",
    version: "12.10.0",
    date: "2019-09-04",
    lts: false,
    security: false,
    v8: "7.6.303.29"
  },
  {
    name: "nodejs",
    version: "12.11.0",
    date: "2019-09-25",
    lts: false,
    security: false,
    v8: "7.7.299.11"
  },
  {
    name: "nodejs",
    version: "12.12.0",
    date: "2019-10-11",
    lts: false,
    security: false,
    v8: "7.7.299.13"
  },
  {
    name: "nodejs",
    version: "12.13.0",
    date: "2019-10-21",
    lts: "Erbium",
    security: false,
    v8: "7.7.299.13"
  },
  {
    name: "nodejs",
    version: "12.14.0",
    date: "2019-12-17",
    lts: "Erbium",
    security: true,
    v8: "7.7.299.13"
  },
  {
    name: "nodejs",
    version: "12.15.0",
    date: "2020-02-05",
    lts: "Erbium",
    security: true,
    v8: "7.7.299.13"
  },
  {
    name: "nodejs",
    version: "12.16.0",
    date: "2020-02-11",
    lts: "Erbium",
    security: false,
    v8: "7.8.279.23"
  },
  {
    name: "nodejs",
    version: "12.17.0",
    date: "2020-05-26",
    lts: "Erbium",
    security: false,
    v8: "7.8.279.23"
  },
  {
    name: "nodejs",
    version: "12.18.0",
    date: "2020-06-02",
    lts: "Erbium",
    security: true,
    v8: "7.8.279.23"
  },
  {
    name: "nodejs",
    version: "12.19.0",
    date: "2020-10-06",
    lts: "Erbium",
    security: false,
    v8: "7.8.279.23"
  },
  {
    name: "nodejs",
    version: "12.20.0",
    date: "2020-11-24",
    lts: "Erbium",
    security: false,
    v8: "7.8.279.23"
  },
  {
    name: "nodejs",
    version: "12.21.0",
    date: "2021-02-23",
    lts: "Erbium",
    security: true,
    v8: "7.8.279.23"
  },
  {
    name: "nodejs",
    version: "12.22.0",
    date: "2021-03-30",
    lts: "Erbium",
    security: false,
    v8: "7.8.279.23"
  },
  {
    name: "nodejs",
    version: "13.0.0",
    date: "2019-10-22",
    lts: false,
    security: false,
    v8: "7.8.279.17"
  },
  {
    name: "nodejs",
    version: "13.1.0",
    date: "2019-11-05",
    lts: false,
    security: false,
    v8: "7.8.279.17"
  },
  {
    name: "nodejs",
    version: "13.2.0",
    date: "2019-11-21",
    lts: false,
    security: false,
    v8: "7.9.317.23"
  },
  {
    name: "nodejs",
    version: "13.3.0",
    date: "2019-12-03",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.4.0",
    date: "2019-12-17",
    lts: false,
    security: true,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.5.0",
    date: "2019-12-18",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.6.0",
    date: "2020-01-07",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.7.0",
    date: "2020-01-21",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.8.0",
    date: "2020-02-05",
    lts: false,
    security: true,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.9.0",
    date: "2020-02-18",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.10.0",
    date: "2020-03-04",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.11.0",
    date: "2020-03-12",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.12.0",
    date: "2020-03-26",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.13.0",
    date: "2020-04-14",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "13.14.0",
    date: "2020-04-29",
    lts: false,
    security: false,
    v8: "7.9.317.25"
  },
  {
    name: "nodejs",
    version: "14.0.0",
    date: "2020-04-21",
    lts: false,
    security: false,
    v8: "8.1.307.30"
  },
  {
    name: "nodejs",
    version: "14.1.0",
    date: "2020-04-29",
    lts: false,
    security: false,
    v8: "8.1.307.31"
  },
  {
    name: "nodejs",
    version: "14.2.0",
    date: "2020-05-05",
    lts: false,
    security: false,
    v8: "8.1.307.31"
  },
  {
    name: "nodejs",
    version: "14.3.0",
    date: "2020-05-19",
    lts: false,
    security: false,
    v8: "8.1.307.31"
  },
  {
    name: "nodejs",
    version: "14.4.0",
    date: "2020-06-02",
    lts: false,
    security: true,
    v8: "8.1.307.31"
  },
  {
    name: "nodejs",
    version: "14.5.0",
    date: "2020-06-30",
    lts: false,
    security: false,
    v8: "8.3.110.9"
  },
  {
    name: "nodejs",
    version: "14.6.0",
    date: "2020-07-20",
    lts: false,
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.7.0",
    date: "2020-07-29",
    lts: false,
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.8.0",
    date: "2020-08-11",
    lts: false,
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.9.0",
    date: "2020-08-27",
    lts: false,
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.10.0",
    date: "2020-09-08",
    lts: false,
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.11.0",
    date: "2020-09-15",
    lts: false,
    security: true,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.12.0",
    date: "2020-09-22",
    lts: false,
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.13.0",
    date: "2020-09-29",
    lts: false,
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.14.0",
    date: "2020-10-15",
    lts: false,
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.15.0",
    date: "2020-10-27",
    lts: "Fermium",
    security: false,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.16.0",
    date: "2021-02-23",
    lts: "Fermium",
    security: true,
    v8: "8.4.371.19"
  },
  {
    name: "nodejs",
    version: "14.17.0",
    date: "2021-05-11",
    lts: "Fermium",
    security: false,
    v8: "8.4.371.23"
  },
  {
    name: "nodejs",
    version: "14.18.0",
    date: "2021-09-28",
    lts: "Fermium",
    security: false,
    v8: "8.4.371.23"
  },
  {
    name: "nodejs",
    version: "14.19.0",
    date: "2022-02-01",
    lts: "Fermium",
    security: false,
    v8: "8.4.371.23"
  },
  {
    name: "nodejs",
    version: "14.20.0",
    date: "2022-07-07",
    lts: "Fermium",
    security: true,
    v8: "8.4.371.23"
  },
  {
    name: "nodejs",
    version: "14.21.0",
    date: "2022-11-01",
    lts: "Fermium",
    security: false,
    v8: "8.4.371.23"
  },
  {
    name: "nodejs",
    version: "15.0.0",
    date: "2020-10-20",
    lts: false,
    security: false,
    v8: "8.6.395.16"
  },
  {
    name: "nodejs",
    version: "15.1.0",
    date: "2020-11-04",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.2.0",
    date: "2020-11-10",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.3.0",
    date: "2020-11-24",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.4.0",
    date: "2020-12-09",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.5.0",
    date: "2020-12-22",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.6.0",
    date: "2021-01-14",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.7.0",
    date: "2021-01-25",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.8.0",
    date: "2021-02-02",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.9.0",
    date: "2021-02-18",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.10.0",
    date: "2021-02-23",
    lts: false,
    security: true,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.11.0",
    date: "2021-03-03",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.12.0",
    date: "2021-03-17",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.13.0",
    date: "2021-03-31",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "15.14.0",
    date: "2021-04-06",
    lts: false,
    security: false,
    v8: "8.6.395.17"
  },
  {
    name: "nodejs",
    version: "16.0.0",
    date: "2021-04-20",
    lts: false,
    security: false,
    v8: "9.0.257.17"
  },
  {
    name: "nodejs",
    version: "16.1.0",
    date: "2021-05-04",
    lts: false,
    security: false,
    v8: "9.0.257.24"
  },
  {
    name: "nodejs",
    version: "16.2.0",
    date: "2021-05-19",
    lts: false,
    security: false,
    v8: "9.0.257.25"
  },
  {
    name: "nodejs",
    version: "16.3.0",
    date: "2021-06-03",
    lts: false,
    security: false,
    v8: "9.0.257.25"
  },
  {
    name: "nodejs",
    version: "16.4.0",
    date: "2021-06-23",
    lts: false,
    security: false,
    v8: "9.1.269.36"
  },
  {
    name: "nodejs",
    version: "16.5.0",
    date: "2021-07-14",
    lts: false,
    security: false,
    v8: "9.1.269.38"
  },
  {
    name: "nodejs",
    version: "16.6.0",
    date: "2021-07-29",
    lts: false,
    security: true,
    v8: "9.2.230.21"
  },
  {
    name: "nodejs",
    version: "16.7.0",
    date: "2021-08-18",
    lts: false,
    security: false,
    v8: "9.2.230.21"
  },
  {
    name: "nodejs",
    version: "16.8.0",
    date: "2021-08-25",
    lts: false,
    security: false,
    v8: "9.2.230.21"
  },
  {
    name: "nodejs",
    version: "16.9.0",
    date: "2021-09-07",
    lts: false,
    security: false,
    v8: "9.3.345.16"
  },
  {
    name: "nodejs",
    version: "16.10.0",
    date: "2021-09-22",
    lts: false,
    security: false,
    v8: "9.3.345.19"
  },
  {
    name: "nodejs",
    version: "16.11.0",
    date: "2021-10-08",
    lts: false,
    security: false,
    v8: "9.4.146.19"
  },
  {
    name: "nodejs",
    version: "16.12.0",
    date: "2021-10-20",
    lts: false,
    security: false,
    v8: "9.4.146.19"
  },
  {
    name: "nodejs",
    version: "16.13.0",
    date: "2021-10-26",
    lts: "Gallium",
    security: false,
    v8: "9.4.146.19"
  },
  {
    name: "nodejs",
    version: "16.14.0",
    date: "2022-02-08",
    lts: "Gallium",
    security: false,
    v8: "9.4.146.24"
  },
  {
    name: "nodejs",
    version: "16.15.0",
    date: "2022-04-26",
    lts: "Gallium",
    security: false,
    v8: "9.4.146.24"
  },
  {
    name: "nodejs",
    version: "16.16.0",
    date: "2022-07-07",
    lts: "Gallium",
    security: true,
    v8: "9.4.146.24"
  },
  {
    name: "nodejs",
    version: "16.17.0",
    date: "2022-08-16",
    lts: "Gallium",
    security: false,
    v8: "9.4.146.26"
  },
  {
    name: "nodejs",
    version: "16.18.0",
    date: "2022-10-12",
    lts: "Gallium",
    security: false,
    v8: "9.4.146.26"
  },
  {
    name: "nodejs",
    version: "16.19.0",
    date: "2022-12-13",
    lts: "Gallium",
    security: false,
    v8: "9.4.146.26"
  },
  {
    name: "nodejs",
    version: "16.20.0",
    date: "2023-03-28",
    lts: "Gallium",
    security: false,
    v8: "9.4.146.26"
  },
  {
    name: "nodejs",
    version: "17.0.0",
    date: "2021-10-19",
    lts: false,
    security: false,
    v8: "9.5.172.21"
  },
  {
    name: "nodejs",
    version: "17.1.0",
    date: "2021-11-09",
    lts: false,
    security: false,
    v8: "9.5.172.25"
  },
  {
    name: "nodejs",
    version: "17.2.0",
    date: "2021-11-30",
    lts: false,
    security: false,
    v8: "9.6.180.14"
  },
  {
    name: "nodejs",
    version: "17.3.0",
    date: "2021-12-17",
    lts: false,
    security: false,
    v8: "9.6.180.15"
  },
  {
    name: "nodejs",
    version: "17.4.0",
    date: "2022-01-18",
    lts: false,
    security: false,
    v8: "9.6.180.15"
  },
  {
    name: "nodejs",
    version: "17.5.0",
    date: "2022-02-10",
    lts: false,
    security: false,
    v8: "9.6.180.15"
  },
  {
    name: "nodejs",
    version: "17.6.0",
    date: "2022-02-22",
    lts: false,
    security: false,
    v8: "9.6.180.15"
  },
  {
    name: "nodejs",
    version: "17.7.0",
    date: "2022-03-09",
    lts: false,
    security: false,
    v8: "9.6.180.15"
  },
  {
    name: "nodejs",
    version: "17.8.0",
    date: "2022-03-22",
    lts: false,
    security: false,
    v8: "9.6.180.15"
  },
  {
    name: "nodejs",
    version: "17.9.0",
    date: "2022-04-07",
    lts: false,
    security: false,
    v8: "9.6.180.15"
  },
  {
    name: "nodejs",
    version: "18.0.0",
    date: "2022-04-18",
    lts: false,
    security: false,
    v8: "10.1.124.8"
  },
  {
    name: "nodejs",
    version: "18.1.0",
    date: "2022-05-03",
    lts: false,
    security: false,
    v8: "10.1.124.8"
  },
  {
    name: "nodejs",
    version: "18.2.0",
    date: "2022-05-17",
    lts: false,
    security: false,
    v8: "10.1.124.8"
  },
  {
    name: "nodejs",
    version: "18.3.0",
    date: "2022-06-02",
    lts: false,
    security: false,
    v8: "10.2.154.4"
  },
  {
    name: "nodejs",
    version: "18.4.0",
    date: "2022-06-16",
    lts: false,
    security: false,
    v8: "10.2.154.4"
  },
  {
    name: "nodejs",
    version: "18.5.0",
    date: "2022-07-06",
    lts: false,
    security: true,
    v8: "10.2.154.4"
  },
  {
    name: "nodejs",
    version: "18.6.0",
    date: "2022-07-13",
    lts: false,
    security: false,
    v8: "10.2.154.13"
  },
  {
    name: "nodejs",
    version: "18.7.0",
    date: "2022-07-26",
    lts: false,
    security: false,
    v8: "10.2.154.13"
  },
  {
    name: "nodejs",
    version: "18.8.0",
    date: "2022-08-24",
    lts: false,
    security: false,
    v8: "10.2.154.13"
  },
  {
    name: "nodejs",
    version: "18.9.0",
    date: "2022-09-07",
    lts: false,
    security: false,
    v8: "10.2.154.15"
  },
  {
    name: "nodejs",
    version: "18.10.0",
    date: "2022-09-28",
    lts: false,
    security: false,
    v8: "10.2.154.15"
  },
  {
    name: "nodejs",
    version: "18.11.0",
    date: "2022-10-13",
    lts: false,
    security: false,
    v8: "10.2.154.15"
  },
  {
    name: "nodejs",
    version: "18.12.0",
    date: "2022-10-25",
    lts: "Hydrogen",
    security: false,
    v8: "10.2.154.15"
  },
  {
    name: "nodejs",
    version: "18.13.0",
    date: "2023-01-05",
    lts: "Hydrogen",
    security: false,
    v8: "10.2.154.23"
  },
  {
    name: "nodejs",
    version: "18.14.0",
    date: "2023-02-01",
    lts: "Hydrogen",
    security: false,
    v8: "10.2.154.23"
  },
  {
    name: "nodejs",
    version: "18.15.0",
    date: "2023-03-05",
    lts: "Hydrogen",
    security: false,
    v8: "10.2.154.26"
  },
  {
    name: "nodejs",
    version: "18.16.0",
    date: "2023-04-12",
    lts: "Hydrogen",
    security: false,
    v8: "10.2.154.26"
  },
  {
    name: "nodejs",
    version: "18.17.0",
    date: "2023-07-18",
    lts: "Hydrogen",
    security: false,
    v8: "10.2.154.26"
  },
  {
    name: "nodejs",
    version: "18.18.0",
    date: "2023-09-18",
    lts: "Hydrogen",
    security: false,
    v8: "10.2.154.26"
  },
  {
    name: "nodejs",
    version: "18.19.0",
    date: "2023-11-29",
    lts: "Hydrogen",
    security: false,
    v8: "10.2.154.26"
  },
  {
    name: "nodejs",
    version: "19.0.0",
    date: "2022-10-17",
    lts: false,
    security: false,
    v8: "10.7.193.13"
  },
  {
    name: "nodejs",
    version: "19.1.0",
    date: "2022-11-14",
    lts: false,
    security: false,
    v8: "10.7.193.20"
  },
  {
    name: "nodejs",
    version: "19.2.0",
    date: "2022-11-29",
    lts: false,
    security: false,
    v8: "10.8.168.20"
  },
  {
    name: "nodejs",
    version: "19.3.0",
    date: "2022-12-14",
    lts: false,
    security: false,
    v8: "10.8.168.21"
  },
  {
    name: "nodejs",
    version: "19.4.0",
    date: "2023-01-05",
    lts: false,
    security: false,
    v8: "10.8.168.25"
  },
  {
    name: "nodejs",
    version: "19.5.0",
    date: "2023-01-24",
    lts: false,
    security: false,
    v8: "10.8.168.25"
  },
  {
    name: "nodejs",
    version: "19.6.0",
    date: "2023-02-01",
    lts: false,
    security: false,
    v8: "10.8.168.25"
  },
  {
    name: "nodejs",
    version: "19.7.0",
    date: "2023-02-21",
    lts: false,
    security: false,
    v8: "10.8.168.25"
  },
  {
    name: "nodejs",
    version: "19.8.0",
    date: "2023-03-14",
    lts: false,
    security: false,
    v8: "10.8.168.25"
  },
  {
    name: "nodejs",
    version: "19.9.0",
    date: "2023-04-10",
    lts: false,
    security: false,
    v8: "10.8.168.25"
  },
  {
    name: "nodejs",
    version: "20.0.0",
    date: "2023-04-17",
    lts: false,
    security: false,
    v8: "11.3.244.4"
  },
  {
    name: "nodejs",
    version: "20.1.0",
    date: "2023-05-03",
    lts: false,
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.2.0",
    date: "2023-05-16",
    lts: false,
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.3.0",
    date: "2023-06-08",
    lts: false,
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.4.0",
    date: "2023-07-04",
    lts: false,
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.5.0",
    date: "2023-07-19",
    lts: false,
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.6.0",
    date: "2023-08-23",
    lts: false,
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.7.0",
    date: "2023-09-18",
    lts: false,
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.8.0",
    date: "2023-09-28",
    lts: false,
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.9.0",
    date: "2023-10-24",
    lts: "Iron",
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "20.10.0",
    date: "2023-11-22",
    lts: "Iron",
    security: false,
    v8: "11.3.244.8"
  },
  {
    name: "nodejs",
    version: "21.0.0",
    date: "2023-10-17",
    lts: false,
    security: false,
    v8: "11.8.172.13"
  },
  {
    name: "nodejs",
    version: "21.1.0",
    date: "2023-10-24",
    lts: false,
    security: false,
    v8: "11.8.172.15"
  },
  {
    name: "nodejs",
    version: "21.2.0",
    date: "2023-11-14",
    lts: false,
    security: false,
    v8: "11.8.172.17"
  },
  {
    name: "nodejs",
    version: "21.3.0",
    date: "2023-11-30",
    lts: false,
    security: false,
    v8: "11.8.172.17"
  }
];
var agents$1 = {};
var browsers$1 = {};
var browsers;
var hasRequiredBrowsers$1;
function requireBrowsers$1() {
  if (hasRequiredBrowsers$1) return browsers;
  hasRequiredBrowsers$1 = 1;
  browsers = { A: "ie", B: "edge", C: "firefox", D: "chrome", E: "safari", F: "opera", G: "ios_saf", H: "op_mini", I: "android", J: "bb", K: "op_mob", L: "and_chr", M: "and_ff", N: "ie_mob", O: "and_uc", P: "samsung", Q: "and_qq", R: "baidu", S: "kaios" };
  return browsers;
}
var hasRequiredBrowsers;
function requireBrowsers() {
  if (hasRequiredBrowsers) return browsers$1;
  hasRequiredBrowsers = 1;
  browsers$1.browsers = requireBrowsers$1();
  return browsers$1;
}
var browserVersions$1 = {};
var browserVersions;
var hasRequiredBrowserVersions$1;
function requireBrowserVersions$1() {
  if (hasRequiredBrowserVersions$1) return browserVersions;
  hasRequiredBrowserVersions$1 = 1;
  browserVersions = { "0": "111", "1": "112", "2": "113", "3": "114", "4": "115", "5": "116", "6": "117", "7": "118", "8": "121", "9": "5", A: "10", B: "11", C: "12", D: "7", E: "8", F: "9", G: "15", H: "120", I: "4", J: "6", K: "13", L: "14", M: "16", N: "17", O: "18", P: "79", Q: "80", R: "81", S: "83", T: "84", U: "85", V: "86", W: "87", X: "88", Y: "89", Z: "90", a: "91", b: "92", c: "93", d: "94", e: "95", f: "96", g: "97", h: "98", i: "99", j: "100", k: "101", l: "102", m: "103", n: "104", o: "105", p: "106", q: "119", r: "20", s: "21", t: "22", u: "23", v: "73", w: "107", x: "108", y: "109", z: "110", AB: "19", BB: "24", CB: "25", DB: "26", EB: "27", FB: "28", GB: "29", HB: "30", IB: "31", JB: "32", KB: "33", LB: "34", MB: "35", NB: "36", OB: "37", PB: "38", QB: "39", RB: "40", SB: "41", TB: "42", UB: "43", VB: "44", WB: "45", XB: "46", YB: "47", ZB: "48", aB: "49", bB: "50", cB: "51", dB: "52", eB: "53", fB: "54", gB: "55", hB: "56", iB: "57", jB: "58", kB: "60", lB: "62", mB: "63", nB: "64", oB: "65", pB: "66", qB: "67", rB: "68", sB: "69", tB: "70", uB: "71", vB: "72", wB: "74", xB: "75", yB: "76", zB: "77", "0B": "78", "1B": "11.1", "2B": "12.1", "3B": "15.5", "4B": "16.0", "5B": "17.0", "6B": "3", "7B": "59", "8B": "61", "9B": "82", AC: "122", BC: "123", CC: "3.2", DC: "10.1", EC: "13.1", FC: "15.2-15.3", GC: "15.4", HC: "16.1", IC: "16.2", JC: "16.3", KC: "16.4", LC: "16.5", MC: "17.1", NC: "17.2", OC: "17.3", PC: "11.5", QC: "4.2-4.3", RC: "5.5", SC: "2", TC: "124", UC: "3.5", VC: "3.6", WC: "3.1", XC: "5.1", YC: "6.1", ZC: "7.1", aC: "9.1", bC: "14.1", cC: "15.1", dC: "15.6", eC: "16.6", fC: "TP", gC: "9.5-9.6", hC: "10.0-10.1", iC: "10.5", jC: "10.6", kC: "11.6", lC: "4.0-4.1", mC: "5.0-5.1", nC: "6.0-6.1", oC: "7.0-7.1", pC: "8.1-8.4", qC: "9.0-9.2", rC: "9.3", sC: "10.0-10.2", tC: "10.3", uC: "11.0-11.2", vC: "11.3-11.4", wC: "12.0-12.1", xC: "12.2-12.5", yC: "13.0-13.1", zC: "13.2", "0C": "13.3", "1C": "13.4-13.7", "2C": "14.0-14.4", "3C": "14.5-14.8", "4C": "15.0-15.1", "5C": "15.6-15.8", "6C": "16.6-16.7", "7C": "all", "8C": "2.1", "9C": "2.2", AD: "2.3", BD: "4.1", CD: "4.4", DD: "4.4.3-4.4.4", ED: "5.0-5.4", FD: "6.2-6.4", GD: "7.2-7.4", HD: "8.2", ID: "9.2", JD: "11.1-11.2", KD: "12.0", LD: "13.0", MD: "14.0", ND: "15.0", OD: "18.0", PD: "19.0", QD: "13.18", RD: "2.5", SD: "3.0-3.1" };
  return browserVersions;
}
var hasRequiredBrowserVersions;
function requireBrowserVersions() {
  if (hasRequiredBrowserVersions) return browserVersions$1;
  hasRequiredBrowserVersions = 1;
  browserVersions$1.browserVersions = requireBrowserVersions$1();
  return browserVersions$1;
}
var agents;
var hasRequiredAgents$1;
function requireAgents$1() {
  if (hasRequiredAgents$1) return agents;
  hasRequiredAgents$1 = 1;
  agents = { A: { A: { J: 0, D: 0, E: 0.0223482, F: 0.0446964, A: 0, B: 0.424615, RC: 0 }, B: "ms{ RC: 962323200, J: 998870400, D: 1161129600, E: 1237420800, F: 1300060800, A: 1346716800, B: 1381968e3 } }, B: { A: { "0": 0.01209, "1": 806e-5, "2": 0.01209, "3": 0.02015, "4": 0.01209, "5": 0.02015, "6": 0.02821, "7": 0.05239, "8": 0, C: 403e-5, K: 403e-5, L: 403e-5, G: 403e-5, M: 0, N: 806e-5, O: 0.01209, P: 0, Q: 0, R: 0, S: 0, T: 0, U: 0, V: 0, W: 0.31434, X: 0, Y: 0, Z: 0, a: 0, b: 0.01209, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, i: 0.02015, j: 0, k: 0, l: 0, m: 0, n: 0, o: 0, p: 806e-5, w: 0.01612, x: 0.01612, y: 0.07657, z: 0.01612, q: 1.56364, H: 2.5389 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "C", "K", "L", "G", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "q", "H", "8", "", ""], E: "Edge", F: { "0": 1678665600, "1": 1680825600, "2": 1683158400, "3": 1685664e3, "4": 1689897600, "5": 1692576e3, "6": 1694649600, "7": 1697155200, "8": null, C: 1438128e3, K: 1447286400, L: 1470096e3, G: 1491868800, M: 1508198400, N: 1525046400, O: 1542067200, P: 1579046400, Q: 1581033600, R: 1586736e3, S: 1590019200, T: 1594857600, U: 1598486400, V: 1602201600, W: 1605830400, X: 161136e4, Y: 1614816e3, Z: 1618358400, a: 1622073600, b: 1626912e3, c: 1630627200, d: 1632441600, e: 1634774400, f: 1637539200, g: 1641427200, h: 1643932800, i: 1646265600, j: 1649635200, k: 1651190400, l: 1653955200, m: 1655942400, n: 1659657600, o: 1661990400, p: 1664755200, w: 1666915200, x: 1670198400, y: 1673481600, z: 1675900800, q: 1698969600, H: 1701993600 }, D: { C: "ms", K: "ms", L: "ms", G: "ms", M: "ms", N: "ms", O: "ms" } }, C: { A: { "0": 806e-5, "1": 403e-5, "2": 0.01209, "3": 0.01612, "4": 0.43927, "5": 806e-5, "6": 0.01209, "7": 0.10881, "8": 0.41912, "9": 0, SC: 0, "6B": 0, I: 403e-5, J: 0, D: 0, E: 0, F: 0, A: 0, B: 0.0403, C: 0.0403, K: 0, L: 0, G: 0, M: 0, N: 0, O: 0, AB: 0, r: 0, s: 0, t: 0, u: 0, BB: 0, CB: 0, DB: 0, EB: 0, FB: 0, GB: 0, HB: 0, IB: 0, JB: 0, KB: 0, LB: 0, MB: 0, NB: 0, OB: 0, PB: 0, QB: 0, RB: 0, SB: 0, TB: 0, UB: 806e-5, VB: 806e-5, WB: 0, XB: 0, YB: 0, ZB: 806e-5, aB: 0, bB: 806e-5, cB: 0, dB: 0.06448, eB: 806e-5, fB: 806e-5, gB: 806e-5, hB: 0.01612, iB: 0, jB: 0, "7B": 403e-5, kB: 0, "8B": 0, lB: 0, mB: 0, nB: 0, oB: 0, pB: 0, qB: 0, rB: 0, sB: 0, tB: 0, uB: 0, vB: 403e-5, v: 0, wB: 0, xB: 0, yB: 0, zB: 0, "0B": 0.02015, P: 0, Q: 0, R: 0, "9B": 0, S: 0, T: 0, U: 0, V: 0, W: 0, X: 806e-5, Y: 0, Z: 0, a: 0.01612, b: 0, c: 0, d: 806e-5, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0.01209, l: 0.03224, m: 0.02418, n: 0.01209, o: 806e-5, p: 403e-5, w: 806e-5, x: 806e-5, y: 0.01209, z: 806e-5, q: 0.27807, H: 1.24124, AC: 0, BC: 0, TC: 0, UC: 0, VC: 0 }, B: "moz", C: ["SC", "6B", "UC", "VC", "I", "9", "J", "D", "E", "F", "A", "B", "C", "K", "L", "G", "M", "N", "O", "AB", "r", "s", "t", "u", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "7B", "kB", "8B", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "v", "wB", "xB", "yB", "zB", "0B", "P", "Q", "R", "9B", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "q", "H", "8", "AC", "BC", "TC"], E: "Firefox", F: { "0": 1678752e3, "1": 1681171200, "2": 1683590400, "3": 1686009600, "4": 1688428800, "5": 1690848e3, "6": 1693267200, "7": 1695686400, "8": 1702944e3, "9": 1308614400, SC: 1161648e3, "6B": 1213660800, UC: 124632e4, VC: 1264032e3, I: 1300752e3, J: 1313452800, D: 1317081600, E: 1317081600, F: 1320710400, A: 1324339200, B: 1327968e3, C: 1331596800, K: 1335225600, L: 1338854400, G: 1342483200, M: 1346112e3, N: 1349740800, O: 1353628800, AB: 1357603200, r: 1361232e3, s: 1364860800, t: 1368489600, u: 1372118400, BB: 1375747200, CB: 1379376e3, DB: 1386633600, EB: 1391472e3, FB: 1395100800, GB: 1398729600, HB: 1402358400, IB: 1405987200, JB: 1409616e3, KB: 1413244800, LB: 1417392e3, MB: 1421107200, NB: 1424736e3, OB: 1428278400, PB: 1431475200, QB: 1435881600, RB: 1439251200, SB: 144288e4, TB: 1446508800, UB: 1450137600, VB: 1453852800, WB: 1457395200, XB: 1461628800, YB: 1465257600, ZB: 1470096e3, aB: 1474329600, bB: 1479168e3, cB: 1485216e3, dB: 1488844800, eB: 149256e4, fB: 1497312e3, gB: 1502150400, hB: 1506556800, iB: 1510617600, jB: 1516665600, "7B": 1520985600, kB: 1525824e3, "8B": 1529971200, lB: 1536105600, mB: 1540252800, nB: 1544486400, oB: 154872e4, pB: 1552953600, qB: 1558396800, rB: 1562630400, sB: 1567468800, tB: 1571788800, uB: 1575331200, vB: 1578355200, v: 1581379200, wB: 1583798400, xB: 1586304e3, yB: 1588636800, zB: 1591056e3, "0B": 1593475200, P: 1595894400, Q: 1598313600, R: 1600732800, "9B": 1603152e3, S: 1605571200, T: 1607990400, U: 1611619200, V: 1614038400, W: 1616457600, X: 1618790400, Y: 1622505600, Z: 1626134400, a: 1628553600, b: 1630972800, c: 1633392e3, d: 1635811200, e: 1638835200, f: 1641859200, g: 1644364800, h: 1646697600, i: 1649116800, j: 1651536e3, k: 1653955200, l: 1656374400, m: 1658793600, n: 1661212800, o: 1663632e3, p: 1666051200, w: 1668470400, x: 1670889600, y: 1673913600, z: 1676332800, q: 1698105600, H: 1700524800, AC: null, BC: null, TC: null } }, D: { A: { "0": 0.10478, "1": 0.12896, "2": 0.21359, "3": 0.14508, "4": 0.10075, "5": 0.2821, "6": 0.26598, "7": 0.82615, "8": 0.01612, "9": 0, I: 0, J: 0, D: 0, E: 0, F: 0, A: 0, B: 0, C: 0, K: 0, L: 0, G: 0, M: 0, N: 0, O: 0, AB: 0, r: 0, s: 0, t: 0, u: 0, BB: 0, CB: 0, DB: 0, EB: 0, FB: 0, GB: 0, HB: 0, IB: 0, JB: 0, KB: 0, LB: 806e-5, MB: 0, NB: 0, OB: 0, PB: 0.01612, QB: 0, RB: 0, SB: 403e-5, TB: 0, UB: 0, VB: 0, WB: 806e-5, XB: 0, YB: 806e-5, ZB: 0.03627, aB: 0.02821, bB: 0.01209, cB: 0, dB: 0, eB: 806e-5, fB: 806e-5, gB: 403e-5, hB: 0.01612, iB: 806e-5, jB: 403e-5, "7B": 0, kB: 0.03224, "8B": 403e-5, lB: 0, mB: 403e-5, nB: 0, oB: 403e-5, pB: 0.03224, qB: 403e-5, rB: 403e-5, sB: 0.04836, tB: 0.0806, uB: 806e-5, vB: 806e-5, v: 0.01209, wB: 0.01209, xB: 0.01209, yB: 0.02015, zB: 0.01209, "0B": 0.01612, P: 0.13299, Q: 0.02821, R: 0.02821, S: 0.04433, T: 0.01209, U: 0.03627, V: 0.04433, W: 0.06851, X: 0.01612, Y: 0.01612, Z: 0.01612, a: 0.06448, b: 0.03627, c: 0.09672, d: 0.04836, e: 0.02418, f: 0.01612, g: 0.02015, h: 0.07254, i: 0.0403, j: 0.03224, k: 0.04433, l: 0.03627, m: 0.26598, n: 0.06851, o: 0.08463, p: 0.0806, w: 0.0806, x: 0.12896, y: 1.7732, z: 0.10075, q: 8.53554, H: 10.1596, AC: 0.01209, BC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "I", "9", "J", "D", "E", "F", "A", "B", "C", "K", "L", "G", "M", "N", "O", "AB", "r", "s", "t", "u", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "7B", "kB", "8B", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "v", "wB", "xB", "yB", "zB", "0B", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "q", "H", "8", "AC", "BC"], E: "Chrome", F: { "0": 1678147200, "1": 1680566400, "2": 1682985600, "3": 1685404800, "4": 1689724800, "5": 1692057600, "6": 1694476800, "7": 1696896e3, "8": null, "9": 1274745600, I: 1264377600, J: 1283385600, D: 1287619200, E: 1291248e3, F: 1296777600, A: 1299542400, B: 1303862400, C: 1307404800, K: 1312243200, L: 1316131200, G: 1316131200, M: 1319500800, N: 1323734400, O: 1328659200, AB: 1332892800, r: 133704e4, s: 1340668800, t: 1343692800, u: 1348531200, BB: 1352246400, CB: 1357862400, DB: 1361404800, EB: 1364428800, FB: 1369094400, GB: 1374105600, HB: 1376956800, IB: 1384214400, JB: 1389657600, KB: 1392940800, LB: 1397001600, MB: 1400544e3, NB: 1405468800, OB: 1409011200, PB: 141264e4, QB: 1416268800, RB: 1421798400, SB: 1425513600, TB: 1429401600, UB: 143208e4, VB: 1437523200, WB: 1441152e3, XB: 1444780800, YB: 1449014400, ZB: 1453248e3, aB: 1456963200, bB: 1460592e3, cB: 1464134400, dB: 1469059200, eB: 1472601600, fB: 1476230400, gB: 1480550400, hB: 1485302400, iB: 1489017600, jB: 149256e4, "7B": 1496707200, kB: 1500940800, "8B": 1504569600, lB: 1508198400, mB: 1512518400, nB: 1516752e3, oB: 1520294400, pB: 1523923200, qB: 1527552e3, rB: 1532390400, sB: 1536019200, tB: 1539648e3, uB: 1543968e3, vB: 154872e4, v: 1552348800, wB: 1555977600, xB: 1559606400, yB: 1564444800, zB: 1568073600, "0B": 1571702400, P: 1575936e3, Q: 1580860800, R: 1586304e3, S: 1589846400, T: 1594684800, U: 1598313600, V: 1601942400, W: 1605571200, X: 1611014400, Y: 1614556800, Z: 1618272e3, a: 1621987200, b: 1626739200, c: 1630368e3, d: 1632268800, e: 1634601600, f: 1637020800, g: 1641340800, h: 1643673600, i: 1646092800, j: 1648512e3, k: 1650931200, l: 1653350400, m: 1655769600, n: 1659398400, o: 1661817600, p: 1664236800, w: 1666656e3, x: 166968e4, y: 1673308800, z: 1675728e3, q: 1698710400, H: 1701993600, AC: null, BC: null } }, E: { A: { "9": 0, I: 0, J: 0, D: 806e-5, E: 403e-5, F: 403e-5, A: 0, B: 0, C: 0, K: 806e-5, L: 0.05239, G: 806e-5, WC: 0, CC: 0, XC: 806e-5, YC: 0, ZC: 0, aC: 0.01209, DC: 0, "1B": 0.01612, "2B": 0.02015, EC: 0.0806, bC: 0.12493, cC: 0.02821, FC: 0.01612, GC: 0.03224, "3B": 0.04836, dC: 0.3224, "4B": 0.03224, HC: 0.0806, IC: 0.06448, JC: 0.1612, KC: 0.07254, LC: 0.12493, eC: 0.59241, "5B": 0.14911, MC: 1.26139, NC: 0.1612, OC: 403e-5, fC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "WC", "CC", "I", "9", "XC", "J", "YC", "D", "ZC", "E", "F", "aC", "A", "DC", "B", "1B", "C", "2B", "K", "EC", "L", "bC", "G", "cC", "FC", "GC", "3B", "dC", "4B", "HC", "IC", "JC", "KC", "LC", "eC", "5B", "MC", "NC", "OC", "fC", ""], E: "Safari", F: { "9": 1275868800, WC: 1205798400, CC: 1226534400, I: 1244419200, XC: 131112e4, J: 1343174400, YC: 13824e5, D: 13824e5, ZC: 1410998400, E: 1413417600, F: 1443657600, aC: 1458518400, A: 1474329600, DC: 1490572800, B: 1505779200, "1B": 1522281600, C: 1537142400, "2B": 1553472e3, K: 1568851200, EC: 1585008e3, L: 1600214400, bC: 1619395200, G: 1632096e3, cC: 1635292800, FC: 1639353600, GC: 1647216e3, "3B": 1652745600, dC: 1658275200, "4B": 1662940800, HC: 1666569600, IC: 1670889600, JC: 1674432e3, KC: 1679875200, LC: 1684368e3, eC: 1690156800, "5B": 1695686400, MC: 1698192e3, NC: 1702252800, OC: null, fC: null } }, F: { A: { F: 0, B: 0, C: 0, G: 0, M: 0, N: 0, O: 0, AB: 0, r: 0, s: 0, t: 0, u: 0, BB: 0, CB: 0, DB: 0, EB: 0, FB: 0, GB: 0, HB: 0, IB: 0, JB: 0, KB: 0, LB: 0, MB: 0, NB: 0, OB: 0, PB: 0, QB: 0, RB: 0, SB: 0, TB: 0, UB: 0, VB: 0, WB: 0, XB: 0.01612, YB: 0, ZB: 0, aB: 0, bB: 0, cB: 0, dB: 0, eB: 0, fB: 0, gB: 0, hB: 0, iB: 0, jB: 0, kB: 0, lB: 0, mB: 0, nB: 0, oB: 0, pB: 0, qB: 0, rB: 0, sB: 0, tB: 0, uB: 0, vB: 0, v: 0, wB: 0, xB: 0, yB: 0, zB: 0, "0B": 0, P: 0, Q: 0, R: 0, "9B": 0, S: 0, T: 0, U: 0, V: 0, W: 0, X: 0, Y: 0, Z: 0, a: 0, b: 0, c: 0, d: 403e-5, e: 0.05642, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0.02015, m: 0, n: 0.50778, o: 0.78585, p: 0.01612, gC: 0, hC: 0, iC: 0, jC: 0, "1B": 0, PC: 0, kC: 0, "2B": 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "F", "gC", "hC", "iC", "jC", "B", "1B", "PC", "kC", "C", "2B", "G", "M", "N", "O", "AB", "r", "s", "t", "u", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "v", "wB", "xB", "yB", "zB", "0B", "P", "Q", "R", "9B", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "", "", ""], E: "Opera", F: { F: 1150761600, gC: 1223424e3, hC: 1251763200, iC: 1267488e3, jC: 1277942400, B: 1292457600, "1B": 1302566400, PC: 1309219200, kC: 1323129600, C: 1323129600, "2B": 1352073600, G: 1372723200, M: 1377561600, N: 1381104e3, O: 1386288e3, AB: 1390867200, r: 1393891200, s: 1399334400, t: 1401753600, u: 1405987200, BB: 1409616e3, CB: 1413331200, DB: 1417132800, EB: 1422316800, FB: 1425945600, GB: 1430179200, HB: 1433808e3, IB: 1438646400, JB: 1442448e3, KB: 1445904e3, LB: 1449100800, MB: 1454371200, NB: 1457308800, OB: 146232e4, PB: 1465344e3, QB: 1470096e3, RB: 1474329600, SB: 1477267200, TB: 1481587200, UB: 1486425600, VB: 1490054400, WB: 1494374400, XB: 1498003200, YB: 1502236800, ZB: 1506470400, aB: 1510099200, bB: 1515024e3, cB: 1517961600, dB: 1521676800, eB: 1525910400, fB: 1530144e3, gB: 1534982400, hB: 1537833600, iB: 1543363200, jB: 1548201600, kB: 1554768e3, lB: 1561593600, mB: 1566259200, nB: 1570406400, oB: 1573689600, pB: 1578441600, qB: 1583971200, rB: 1587513600, sB: 1592956800, tB: 1595894400, uB: 1600128e3, vB: 1603238400, v: 161352e4, wB: 1612224e3, xB: 1616544e3, yB: 1619568e3, zB: 1623715200, "0B": 1627948800, P: 1631577600, Q: 1633392e3, R: 1635984e3, "9B": 1638403200, S: 1642550400, T: 1644969600, U: 1647993600, V: 1650412800, W: 1652745600, X: 1654646400, Y: 1657152e3, Z: 1660780800, a: 1663113600, b: 1668816e3, c: 1668643200, d: 1671062400, e: 1675209600, f: 1677024e3, g: 1679529600, h: 1681948800, i: 1684195200, j: 1687219200, k: 1690329600, l: 1692748800, m: 1696204800, n: 169992e4, o: 169992e4, p: 1702944e3 }, D: { F: "o", B: "o", C: "o", gC: "o", hC: "o", iC: "o", jC: "o", "1B": "o", PC: "o", kC: "o", "2B": "o" } }, G: { A: { E: 0, CC: 0, lC: 0, QC: 294848e-8, mC: 294848e-8, nC: 589696e-8, oC: 0.0103197, pC: 294848e-8, qC: 0.0103197, rC: 0.0353818, sC: 294848e-8, tC: 0.0545469, uC: 0.0221136, vC: 0.0250621, wC: 0.0132682, xC: 0.27126, yC: 589696e-8, zC: 0.042753, "0C": 0.0147424, "1C": 0.0530726, "2C": 0.106145, "3C": 0.165115, "4C": 0.0707635, FC: 0.0810832, GC: 0.0987741, "3B": 0.126785, "5C": 0.971524, "4B": 0.308116, HC: 0.661934, IC: 0.293374, JC: 0.551366, KC: 0.110568, LC: 0.263889, "6C": 2.32635, "5B": 0.412787, MC: 6.85816, NC: 0.717955, OC: 0.0353818 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "CC", "lC", "QC", "mC", "nC", "oC", "E", "pC", "qC", "rC", "sC", "tC", "uC", "vC", "wC", "xC", "yC", "zC", "0C", "1C", "2C", "3C", "4C", "FC", "GC", "3B", "5C", "4B", "HC", "IC", "JC", "KC", "LC", "6C", "5B", "MC", "NC", "OC", "", ""], E: "Safari on iOS", F: { CC: 1270252800, lC: 1283904e3, QC: 1299628800, mC: 1331078400, nC: 1359331200, oC: 1394409600, E: 1410912e3, pC: 1413763200, qC: 1442361600, rC: 1458518400, sC: 1473724800, tC: 1490572800, uC: 1505779200, vC: 1522281600, wC: 1537142400, xC: 1553472e3, yC: 1568851200, zC: 1572220800, "0C": 1580169600, "1C": 1585008e3, "2C": 1600214400, "3C": 1619395200, "4C": 1632096e3, FC: 1639353600, GC: 1647216e3, "3B": 1652659200, "5C": 1658275200, "4B": 1662940800, HC: 1666569600, IC: 1670889600, JC: 1674432e3, KC: 1679875200, LC: 1684368e3, "6C": 1690156800, "5B": 1694995200, MC: 1698192e3, NC: 1702252800, OC: null } }, H: { A: { "7C": 0.07 }, B: "opera Mini", F: { "7C": 1426464e3 } }, I: { A: { "6B": 0, I: 489622e-10, H: 0.24366, "8C": 0, "9C": 244811e-10, AD: 0, BD: 489622e-10, QC: 171368e-9, CD: 0, DD: 709952e-9 }, B: "webkitndroid Browser", F: { "8C": 1256515200, "9C": 1274313600, AD: 1291593600, "6B": 1298332800, I: 1318896e3, BD: 1341792e3, QC: 1374624e3, CD: 1386547200, DD: 1401667200, H: 1701734400 } }, J: { A: { D: 0, A: 0 }, B: "webkitlackberry Browser", F: { D: 1325376e3, A: 1359504e3 } }, K: { A: { A: 0, B: 0, C: 0, v: 1.27348, "1B": 0, PC: 0, "2B": 0 }, B: "ov", "", "", ""], E: "Opera Mobile", F: { A: 1287100800, B: 1300752e3, "1B": 1314835200, PC: 1318291200, C: 1330300800, "2B": 1349740800, v: 1673827200 }, D: { v: "webkit" } }, L: { A: { H: 40.1948 }, B: "webkithrome for Android", F: { H: 1701734400 } }, M: { A: { q: 0.310492 }, B: "moz", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "q", "", "", ""], E: "Firefox for Android", F: { q: 1698105600 } }, N: { A: { A: 0, B: 0 }, B: "msobile", F: { A: 1340150400, B: 1353456e3 } }, O: { A: { "3B": 0.883708 }, B: "webkitrowser for Android", F: { "3B": 1687132800 }, D: { "3B": "webkit" } }, P: { A: { I: 0.1284, r: 0.0428001, s: 0.0856003, t: 0.1605, u: 2.04371, ED: 0.0107, FD: 0, GD: 0.0535002, HD: 0, ID: 0, DC: 0, JD: 0.0107, KD: 0, LD: 0.0214001, MD: 0, ND: 0, "4B": 0.0214001, "5B": 0.0321001, OD: 0.0214001, PD: 0.0428001 }, B: "webkitr", "s", "t", "u", "", "", ""], E: "Samsung Internet", F: { I: 1461024e3, ED: 1481846400, FD: 1509408e3, GD: 1528329600, HD: 1546128e3, ID: 1554163200, DC: 1567900800, JD: 1582588800, KD: 1593475200, LD: 1605657600, MD: 1618531200, ND: 1629072e3, "4B": 1640736e3, "5B": 1651708800, OD: 1659657600, PD: 1667260800, r: 1677369600, s: 1684454400, t: 1689292800, u: 1697587200 } }, Q: { A: { EC: 0.167188 }, B: "webkitrowser", F: { EC: 1663718400 } }, R: { A: { QD: 0 }, B: "webkitaidu Browser", F: { QD: 1663027200 } }, S: { A: { RD: 0.083594, SD: 0 }, B: "mozaiOS Browser", F: { RD: 1527811200, SD: 1631664e3 } } };
  return agents;
}
var hasRequiredAgents;
function requireAgents() {
  if (hasRequiredAgents) return agents$1;
  hasRequiredAgents = 1;
  const browsers2 = requireBrowsers().browsers;
  const versions2 = requireBrowserVersions().browserVersions;
  const agentsData = requireAgents$1();
  function unpackBrowserVersions(versionsData) {
    return Object.keys(versionsData).reduce((usage, version2) => {
      usage[versions2[version2]] = versionsData[version2];
      return usage;
    }, {});
  }
  agents$1.agents = Object.keys(agentsData).reduce((map, key2) => {
    let versionsData = agentsData[key2];
    map[browsers2[key2]] = Object.keys(versionsData).reduce((data, entry) => {
      if (entry === "A") {
        data.usage_global = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === "C") {
        data.versions = versionsData[entry].reduce((list2, version2) => {
          if (version2 === "") {
            list2.push(null);
          } else {
            list2.push(versions2[version2]);
          }
          return list2;
        }, []);
      } else if (entry === "D") {
        data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === "E") {
        data.browser = versionsData[entry];
      } else if (entry === "F") {
        data.release_date = Object.keys(versionsData[entry]).reduce(
          (map2, key22) => {
            map2[versions2[key22]] = versionsData[entry][key22];
            return map2;
          },
          {}
        );
      } else {
        data.prefix = versionsData[entry];
      }
      return data;
    }, {});
    return map;
  }, {});
  return agents$1;
}
const v4 = {
  start: "2015-09-08",
  lts: "2015-10-12",
  maintenance: "2017-04-01",
  end: "2018-04-30",
  codename: "Argon"
};
const v5 = {
  start: "2015-10-29",
  maintenance: "2016-04-30",
  end: "2016-06-30"
};
const v6 = {
  start: "2016-04-26",
  lts: "2016-10-18",
  maintenance: "2018-04-30",
  end: "2019-04-30",
  codename: "Boron"
};
const v7 = {
  start: "2016-10-25",
  maintenance: "2017-04-30",
  end: "2017-06-30"
};
const v8 = {
  start: "2017-05-30",
  lts: "2017-10-31",
  maintenance: "2019-01-01",
  end: "2019-12-31",
  codename: "Carbon"
};
const v9 = {
  start: "2017-10-01",
  maintenance: "2018-04-01",
  end: "2018-06-30"
};
const v10 = {
  start: "2018-04-24",
  lts: "2018-10-30",
  maintenance: "2020-05-19",
  end: "2021-04-30",
  codename: "Dubnium"
};
const v11 = {
  start: "2018-10-23",
  maintenance: "2019-04-22",
  end: "2019-06-01"
};
const v12 = {
  start: "2019-04-23",
  lts: "2019-10-21",
  maintenance: "2020-11-30",
  end: "2022-04-30",
  codename: "Erbium"
};
const v13 = {
  start: "2019-10-22",
  maintenance: "2020-04-01",
  end: "2020-06-01"
};
const v14 = {
  start: "2020-04-21",
  lts: "2020-10-27",
  maintenance: "2021-10-19",
  end: "2023-04-30",
  codename: "Fermium"
};
const v15 = {
  start: "2020-10-20",
  maintenance: "2021-04-01",
  end: "2021-06-01"
};
const v16 = {
  start: "2021-04-20",
  lts: "2021-10-26",
  maintenance: "2022-10-18",
  end: "2023-09-11",
  codename: "Gallium"
};
const v17 = {
  start: "2021-10-19",
  maintenance: "2022-04-01",
  end: "2022-06-01"
};
const v18 = {
  start: "2022-04-19",
  lts: "2022-10-25",
  maintenance: "2023-10-18",
  end: "2025-04-30",
  codename: "Hydrogen"
};
const v19 = {
  start: "2022-10-18",
  maintenance: "2023-04-01",
  end: "2023-06-01"
};
const v20 = {
  start: "2023-04-18",
  lts: "2023-10-24",
  maintenance: "2024-10-22",
  end: "2026-04-30",
  codename: "Iron"
};
const v21 = {
  start: "2023-10-17",
  maintenance: "2024-04-01",
  end: "2024-06-01"
};
const v22 = {
  start: "2024-04-23",
  lts: "2024-10-29",
  maintenance: "2025-10-21",
  end: "2027-04-30",
  codename: ""
};
const v23 = {
  start: "2024-10-15",
  maintenance: "2025-04-01",
  end: "2025-06-01"
};
const v24 = {
  start: "2025-04-22",
  lts: "2025-10-28",
  maintenance: "2026-10-20",
  end: "2028-04-30",
  codename: ""
};
const require$$2 = {
  "v0.8": {
    start: "2012-06-25",
    end: "2014-07-31"
  },
  "v0.10": {
    start: "2013-03-11",
    end: "2016-10-31"
  },
  "v0.12": {
    start: "2015-02-06",
    end: "2016-12-31"
  },
  v4,
  v5,
  v6,
  v7,
  v8,
  v9,
  v10,
  v11,
  v12,
  v13,
  v14,
  v15,
  v16,
  v17,
  v18,
  v19,
  v20,
  v21,
  v22,
  v23,
  v24
};
var versions;
var hasRequiredVersions;
function requireVersions() {
  if (hasRequiredVersions) return versions;
  hasRequiredVersions = 1;
  versions = {
    "0.20": "39",
    "0.21": "41",
    "0.22": "41",
    "0.23": "41",
    "0.24": "41",
    "0.25": "42",
    "0.26": "42",
    "0.27": "43",
    "0.28": "43",
    "0.29": "43",
    "0.30": "44",
    "0.31": "45",
    "0.32": "45",
    "0.33": "45",
    "0.34": "45",
    "0.35": "45",
    "0.36": "47",
    "0.37": "49",
    "1.0": "49",
    "1.1": "50",
    "1.2": "51",
    "1.3": "52",
    "1.4": "53",
    "1.5": "54",
    "1.6": "56",
    "1.7": "58",
    "1.8": "59",
    "2.0": "61",
    "2.1": "61",
    "3.0": "66",
    "3.1": "66",
    "4.0": "69",
    "4.1": "69",
    "4.2": "69",
    "5.0": "73",
    "6.0": "76",
    "6.1": "76",
    "7.0": "78",
    "7.1": "78",
    "7.2": "78",
    "7.3": "78",
    "8.0": "80",
    "8.1": "80",
    "8.2": "80",
    "8.3": "80",
    "8.4": "80",
    "8.5": "80",
    "9.0": "83",
    "9.1": "83",
    "9.2": "83",
    "9.3": "83",
    "9.4": "83",
    "10.0": "85",
    "10.1": "85",
    "10.2": "85",
    "10.3": "85",
    "10.4": "85",
    "11.0": "87",
    "11.1": "87",
    "11.2": "87",
    "11.3": "87",
    "11.4": "87",
    "11.5": "87",
    "12.0": "89",
    "12.1": "89",
    "12.2": "89",
    "13.0": "91",
    "13.1": "91",
    "13.2": "91",
    "13.3": "91",
    "13.4": "91",
    "13.5": "91",
    "13.6": "91",
    "14.0": "93",
    "14.1": "93",
    "14.2": "93",
    "15.0": "94",
    "15.1": "94",
    "15.2": "94",
    "15.3": "94",
    "15.4": "94",
    "15.5": "94",
    "16.0": "96",
    "16.1": "96",
    "16.2": "96",
    "17.0": "98",
    "17.1": "98",
    "17.2": "98",
    "17.3": "98",
    "17.4": "98",
    "18.0": "100",
    "18.1": "100",
    "18.2": "100",
    "18.3": "100",
    "19.0": "102",
    "19.1": "102",
    "20.0": "104",
    "20.1": "104",
    "20.2": "104",
    "20.3": "104",
    "21.0": "106",
    "21.1": "106",
    "21.2": "106",
    "21.3": "106",
    "21.4": "106",
    "22.0": "108",
    "22.1": "108",
    "22.2": "108",
    "22.3": "108",
    "23.0": "110",
    "23.1": "110",
    "23.2": "110",
    "23.3": "110",
    "24.0": "112",
    "24.1": "112",
    "24.2": "112",
    "24.3": "112",
    "24.4": "112",
    "24.5": "112",
    "24.6": "112",
    "24.7": "112",
    "24.8": "112",
    "25.0": "114",
    "25.1": "114",
    "25.2": "114",
    "25.3": "114",
    "25.4": "114",
    "25.5": "114",
    "25.6": "114",
    "25.7": "114",
    "25.8": "114",
    "25.9": "114",
    "26.0": "116",
    "26.1": "116",
    "26.2": "116",
    "26.3": "116",
    "26.4": "116",
    "26.5": "116",
    "26.6": "116",
    "27.0": "118",
    "27.1": "118",
    "27.2": "118",
    "28.0": "120",
    "28.1": "120",
    "29.0": "122"
  };
  return versions;
}
var error;
var hasRequiredError;
function requireError() {
  if (hasRequiredError) return error;
  hasRequiredError = 1;
  function BrowserslistError(message) {
    this.name = "BrowserslistError";
    this.message = message;
    this.browserslist = true;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, BrowserslistError);
    }
  }
  BrowserslistError.prototype = Error.prototype;
  error = BrowserslistError;
  return error;
}
var parse$2;
var hasRequiredParse$1;
function requireParse$1() {
  if (hasRequiredParse$1) return parse$2;
  hasRequiredParse$1 = 1;
  var AND_REGEXP = /^\s+and\s+(.*)/i;
  var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;
  function flatten(array2) {
    if (!Array.isArray(array2)) return [array2];
    return array2.reduce(function(a, b) {
      return a.concat(flatten(b));
    }, []);
  }
  function find(string2, predicate) {
    for (var n = 1, max = string2.length; n <= max; n++) {
      var parsed = string2.substr(-n, n);
      if (predicate(parsed, n, max)) {
        return string2.slice(0, -n);
      }
    }
    return "";
  }
  function matchQuery(all, query) {
    var node2 = { query };
    if (query.indexOf("not ") === 0) {
      node2.not = true;
      query = query.slice(4);
    }
    for (var name in all) {
      var type = all[name];
      var match = query.match(type.regexp);
      if (match) {
        node2.type = name;
        for (var i = 0; i < type.matches.length; i++) {
          node2[type.matches[i]] = match[i + 1];
        }
        return node2;
      }
    }
    node2.type = "unknown";
    return node2;
  }
  function matchBlock(all, string2, qs) {
    var node2;
    return find(string2, function(parsed, n, max) {
      if (AND_REGEXP.test(parsed)) {
        node2 = matchQuery(all, parsed.match(AND_REGEXP)[1]);
        node2.compose = "and";
        qs.unshift(node2);
        return true;
      } else if (OR_REGEXP.test(parsed)) {
        node2 = matchQuery(all, parsed.match(OR_REGEXP)[1]);
        node2.compose = "or";
        qs.unshift(node2);
        return true;
      } else if (n === max) {
        node2 = matchQuery(all, parsed.trim());
        node2.compose = "or";
        qs.unshift(node2);
        return true;
      }
      return false;
    });
  }
  parse$2 = function parse3(all, queries) {
    if (!Array.isArray(queries)) queries = [queries];
    return flatten(
      queries.map(function(block) {
        var qs = [];
        do {
          block = matchBlock(all, block, qs);
        } while (block);
        return qs;
      })
    );
  };
  return parse$2;
}
var browser;
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser;
  hasRequiredBrowser = 1;
  var BrowserslistError = requireError();
  function noop2() {
  }
  browser = {
    loadQueries: function loadQueries() {
      throw new BrowserslistError(
        "Sharable configs are not supported in client-side build of Browserslist"
      );
    },
    getStat: function getStat(opts) {
      return opts.stats;
    },
    loadConfig: function loadConfig(opts) {
      if (opts.config) {
        throw new BrowserslistError(
          "Browserslist config are not supported in client-side build"
        );
      }
    },
    loadCountry: function loadCountry() {
      throw new BrowserslistError(
        "Country statistics are not supported in client-side build of Browserslist"
      );
    },
    loadFeature: function loadFeature() {
      throw new BrowserslistError(
        "Supports queries are not available in client-side build of Browserslist"
      );
    },
    currentNode: function currentNode(resolve, context2) {
      return resolve(["maintained node versions"], context2)[0];
    },
    parseConfig: noop2,
    readConfig: noop2,
    findConfig: noop2,
    clearCaches: noop2,
    oldDataWarning: noop2,
    env: {}
  };
  return browser;
}
var browserslist_1;
var hasRequiredBrowserslist;
function requireBrowserslist() {
  if (hasRequiredBrowserslist) return browserslist_1;
  hasRequiredBrowserslist = 1;
  var jsReleases = require$$0$5;
  var agents2 = requireAgents().agents;
  var jsEOL = require$$2;
  var path2 = pathExports;
  var e2c = requireVersions();
  var BrowserslistError = requireError();
  var parse3 = requireParse$1();
  var env = requireBrowser();
  var YEAR = 365.259641 * 24 * 60 * 60 * 1e3;
  var ANDROID_EVERGREEN_FIRST = "37";
  var OP_MOB_BLINK_FIRST = 14;
  function isVersionsMatch(versionA, versionB) {
    return (versionA + ".").indexOf(versionB + ".") === 0;
  }
  function isEolReleased(name) {
    var version2 = name.slice(1);
    return browserslist.nodeVersions.some(function(i) {
      return isVersionsMatch(i, version2);
    });
  }
  function normalize(versions2) {
    return versions2.filter(function(version2) {
      return typeof version2 === "string";
    });
  }
  function normalizeElectron(version2) {
    var versionToUse = version2;
    if (version2.split(".").length === 3) {
      versionToUse = version2.split(".").slice(0, -1).join(".");
    }
    return versionToUse;
  }
  function nameMapper(name) {
    return function mapName(version2) {
      return name + " " + version2;
    };
  }
  function getMajor(version2) {
    return parseInt(version2.split(".")[0]);
  }
  function getMajorVersions(released, number2) {
    if (released.length === 0) return [];
    var majorVersions = uniq(released.map(getMajor));
    var minimum = majorVersions[majorVersions.length - number2];
    if (!minimum) {
      return released;
    }
    var selected = [];
    for (var i = released.length - 1; i >= 0; i--) {
      if (minimum > getMajor(released[i])) break;
      selected.unshift(released[i]);
    }
    return selected;
  }
  function uniq(array2) {
    var filtered = [];
    for (var i = 0; i < array2.length; i++) {
      if (filtered.indexOf(array2[i]) === -1) filtered.push(array2[i]);
    }
    return filtered;
  }
  function fillUsage(result, name, data) {
    for (var i in data) {
      result[name + " " + i] = data[i];
    }
  }
  function generateFilter(sign2, version2) {
    version2 = parseFloat(version2);
    if (sign2 === ">") {
      return function(v) {
        return parseFloat(v) > version2;
      };
    } else if (sign2 === ">=") {
      return function(v) {
        return parseFloat(v) >= version2;
      };
    } else if (sign2 === "<") {
      return function(v) {
        return parseFloat(v) < version2;
      };
    } else {
      return function(v) {
        return parseFloat(v) <= version2;
      };
    }
  }
  function generateSemverFilter(sign2, version2) {
    version2 = version2.split(".").map(parseSimpleInt);
    version2[1] = version2[1] || 0;
    version2[2] = version2[2] || 0;
    if (sign2 === ">") {
      return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(v, version2) > 0;
      };
    } else if (sign2 === ">=") {
      return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(v, version2) >= 0;
      };
    } else if (sign2 === "<") {
      return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(version2, v) > 0;
      };
    } else {
      return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(version2, v) >= 0;
      };
    }
  }
  function parseSimpleInt(x2) {
    return parseInt(x2);
  }
  function compare2(a, b) {
    if (a < b) return -1;
    if (a > b) return 1;
    return 0;
  }
  function compareSemver(a, b) {
    return compare2(parseInt(a[0]), parseInt(b[0])) || compare2(parseInt(a[1] || "0"), parseInt(b[1] || "0")) || compare2(parseInt(a[2] || "0"), parseInt(b[2] || "0"));
  }
  function semverFilterLoose(operator, range) {
    range = range.split(".").map(parseSimpleInt);
    if (typeof range[1] === "undefined") {
      range[1] = "x";
    }
    switch (operator) {
      case "<=":
        return function(version2) {
          version2 = version2.split(".").map(parseSimpleInt);
          return compareSemverLoose(version2, range) <= 0;
        };
      case ">=":
      default:
        return function(version2) {
          version2 = version2.split(".").map(parseSimpleInt);
          return compareSemverLoose(version2, range) >= 0;
        };
    }
  }
  function compareSemverLoose(version2, range) {
    if (version2[0] !== range[0]) {
      return version2[0] < range[0] ? -1 : 1;
    }
    if (range[1] === "x") {
      return 0;
    }
    if (version2[1] !== range[1]) {
      return version2[1] < range[1] ? -1 : 1;
    }
    return 0;
  }
  function resolveVersion(data, version2) {
    if (data.versions.indexOf(version2) !== -1) {
      return version2;
    } else if (browserslist.versionAliases[data.name][version2]) {
      return browserslist.versionAliases[data.name][version2];
    } else {
      return false;
    }
  }
  function normalizeVersion(data, version2) {
    var resolved = resolveVersion(data, version2);
    if (resolved) {
      return resolved;
    } else if (data.versions.length === 1) {
      return data.versions[0];
    } else {
      return false;
    }
  }
  function filterByYear(since, context2) {
    since = since / 1e3;
    return Object.keys(agents2).reduce(function(selected, name) {
      var data = byName(name, context2);
      if (!data) return selected;
      var versions2 = Object.keys(data.releaseDate).filter(function(v) {
        var date = data.releaseDate[v];
        return date !== null && date >= since;
      });
      return selected.concat(versions2.map(nameMapper(data.name)));
    }, []);
  }
  function cloneData(data) {
    return {
      name: data.name,
      versions: data.versions,
      released: data.released,
      releaseDate: data.releaseDate
    };
  }
  function byName(name, context2) {
    name = name.toLowerCase();
    name = browserslist.aliases[name] || name;
    if (context2.mobileToDesktop && browserslist.desktopNames[name]) {
      var desktop = browserslist.data[browserslist.desktopNames[name]];
      if (name === "android") {
        return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);
      } else {
        var cloned = cloneData(desktop);
        cloned.name = name;
        return cloned;
      }
    }
    return browserslist.data[name];
  }
  function normalizeAndroidVersions(androidVersions, chromeVersions) {
    var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST);
    return androidVersions.filter(function(version2) {
      return /^(?:[2-4]\.|[34]$)/.test(version2);
    }).concat(chromeVersions.slice(iFirstEvergreen));
  }
  function copyObject(obj) {
    var copy = {};
    for (var key2 in obj) {
      copy[key2] = obj[key2];
    }
    return copy;
  }
  function normalizeAndroidData(android, chrome) {
    android.released = normalizeAndroidVersions(android.released, chrome.released);
    android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
    android.releaseDate = copyObject(android.releaseDate);
    android.released.forEach(function(v) {
      if (android.releaseDate[v] === void 0) {
        android.releaseDate[v] = chrome.releaseDate[v];
      }
    });
    return android;
  }
  function checkName(name, context2) {
    var data = byName(name, context2);
    if (!data) throw new BrowserslistError("Unknown browser " + name);
    return data;
  }
  function unknownQuery(query) {
    return new BrowserslistError(
      "Unknown browser query `" + query + "`. Maybe you are using old Browserslist or made typo in query."
    );
  }
  function filterJumps(list2, name, nVersions, context2) {
    var jump = 1;
    switch (name) {
      case "android":
        if (context2.mobileToDesktop) return list2;
        var released = browserslist.data.chrome.released;
        jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST);
        break;
      case "op_mob":
        var latest = browserslist.data.op_mob.released.slice(-1)[0];
        jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1;
        break;
      default:
        return list2;
    }
    if (nVersions <= jump) {
      return list2.slice(-1);
    }
    return list2.slice(jump - 1 - nVersions);
  }
  function isSupported(flags, withPartial) {
    return typeof flags === "string" && (flags.indexOf("y") >= 0 || withPartial && flags.indexOf("a") >= 0);
  }
  function resolve(queries, context2) {
    return parse3(QUERIES, queries).reduce(function(result, node2, index2) {
      if (node2.not && index2 === 0) {
        throw new BrowserslistError(
          "Write any browsers query (for instance, `defaults`) before `" + node2.query + "`"
        );
      }
      var type = QUERIES[node2.type];
      var array2 = type.select.call(browserslist, context2, node2).map(function(j) {
        var parts = j.split(" ");
        if (parts[1] === "0") {
          return parts[0] + " " + byName(parts[0], context2).versions[0];
        } else {
          return j;
        }
      });
      if (node2.compose === "and") {
        if (node2.not) {
          return result.filter(function(j) {
            return array2.indexOf(j) === -1;
          });
        } else {
          return result.filter(function(j) {
            return array2.indexOf(j) !== -1;
          });
        }
      } else {
        if (node2.not) {
          var filter = {};
          array2.forEach(function(j) {
            filter[j] = true;
          });
          return result.filter(function(j) {
            return !filter[j];
          });
        }
        return result.concat(array2);
      }
    }, []);
  }
  function prepareOpts(opts) {
    if (typeof opts === "undefined") opts = {};
    if (typeof opts.path === "undefined") {
      opts.path = path2.resolve ? path2.resolve(".") : ".";
    }
    return opts;
  }
  function prepareQueries(queries, opts) {
    if (typeof queries === "undefined" || queries === null) {
      var config2 = browserslist.loadConfig(opts);
      if (config2) {
        queries = config2;
      } else {
        queries = browserslist.defaults;
      }
    }
    return queries;
  }
  function checkQueries(queries) {
    if (!(typeof queries === "string" || Array.isArray(queries))) {
      throw new BrowserslistError(
        "Browser queries must be an array or string. Got " + typeof queries + "."
      );
    }
  }
  var cache2 = {};
  function browserslist(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    var context2 = {
      ignoreUnknownVersions: opts.ignoreUnknownVersions,
      dangerousExtend: opts.dangerousExtend,
      mobileToDesktop: opts.mobileToDesktop,
      path: opts.path,
      env: opts.env
    };
    env.oldDataWarning(browserslist.data);
    var stats = env.getStat(opts, browserslist.data);
    if (stats) {
      context2.customUsage = {};
      for (var browser2 in stats) {
        fillUsage(context2.customUsage, browser2, stats[browser2]);
      }
    }
    var cacheKey = JSON.stringify([queries, context2]);
    if (cache2[cacheKey]) return cache2[cacheKey];
    var result = uniq(resolve(queries, context2)).sort(function(name1, name2) {
      name1 = name1.split(" ");
      name2 = name2.split(" ");
      if (name1[0] === name2[0]) {
        var version1 = name1[1].split("-")[0];
        var version2 = name2[1].split("-")[0];
        return compareSemver(version2.split("."), version1.split("."));
      } else {
        return compare2(name1[0], name2[0]);
      }
    });
    if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
      cache2[cacheKey] = result;
    }
    return result;
  }
  browserslist.parse = function(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    return parse3(QUERIES, queries);
  };
  browserslist.cache = {};
  browserslist.data = {};
  browserslist.usage = {
    global: {},
    custom: null
  };
  browserslist.defaults = ["> 0.5%", "last 2 versions", "Firefox ESR", "not dead"];
  browserslist.aliases = {
    fx: "firefox",
    ff: "firefox",
    ios: "ios_saf",
    explorer: "ie",
    blackberry: "bb",
    explorermobile: "ie_mob",
    operamini: "op_mini",
    operamobile: "op_mob",
    chromeandroid: "and_chr",
    firefoxandroid: "and_ff",
    ucandroid: "and_uc",
    qqandroid: "and_qq"
  };
  browserslist.desktopNames = {
    and_chr: "chrome",
    and_ff: "firefox",
    ie_mob: "ie",
    android: "chrome"
    // has extra processing logic
  };
  browserslist.versionAliases = {};
  browserslist.clearCaches = env.clearCaches;
  browserslist.parseConfig = env.parseConfig;
  browserslist.readConfig = env.readConfig;
  browserslist.findConfig = env.findConfig;
  browserslist.loadConfig = env.loadConfig;
  browserslist.coverage = function(browsers2, stats) {
    var data;
    if (typeof stats === "undefined") {
      data = browserslist.usage.global;
    } else if (stats === "my stats") {
      var opts = {};
      opts.path = path2.resolve ? path2.resolve(".") : ".";
      var customStats = env.getStat(opts);
      if (!customStats) {
        throw new BrowserslistError("Custom usage statistics was not provided");
      }
      data = {};
      for (var browser2 in customStats) {
        fillUsage(data, browser2, customStats[browser2]);
      }
    } else if (typeof stats === "string") {
      if (stats.length > 2) {
        stats = stats.toLowerCase();
      } else {
        stats = stats.toUpperCase();
      }
      env.loadCountry(browserslist.usage, stats, browserslist.data);
      data = browserslist.usage[stats];
    } else {
      if ("dataByBrowser" in stats) {
        stats = stats.dataByBrowser;
      }
      data = {};
      for (var name in stats) {
        for (var version2 in stats[name]) {
          data[name + " " + version2] = stats[name][version2];
        }
      }
    }
    return browsers2.reduce(function(all, i) {
      var usage = data[i];
      if (usage === void 0) {
        usage = data[i.replace(/ \S+$/, " 0")];
      }
      return all + (usage || 0);
    }, 0);
  };
  function nodeQuery(context2, node2) {
    var matched = browserslist.nodeVersions.filter(function(i) {
      return isVersionsMatch(i, node2.version);
    });
    if (matched.length === 0) {
      if (context2.ignoreUnknownVersions) {
        return [];
      } else {
        throw new BrowserslistError(
          "Unknown version " + node2.version + " of Node.js"
        );
      }
    }
    return ["node " + matched[matched.length - 1]];
  }
  function sinceQuery(context2, node2) {
    var year = parseInt(node2.year);
    var month = parseInt(node2.month || "01") - 1;
    var day = parseInt(node2.day || "01");
    return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context2);
  }
  function coverQuery(context2, node2) {
    var coverage = parseFloat(node2.coverage);
    var usage = browserslist.usage.global;
    if (node2.place) {
      if (node2.place.match(/^my\s+stats$/i)) {
        if (!context2.customUsage) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        usage = context2.customUsage;
      } else {
        var place;
        if (node2.place.length === 2) {
          place = node2.place.toUpperCase();
        } else {
          place = node2.place.toLowerCase();
        }
        env.loadCountry(browserslist.usage, place, browserslist.data);
        usage = browserslist.usage[place];
      }
    }
    var versions2 = Object.keys(usage).sort(function(a, b) {
      return usage[b] - usage[a];
    });
    var coveraged = 0;
    var result = [];
    var version2;
    for (var i = 0; i < versions2.length; i++) {
      version2 = versions2[i];
      if (usage[version2] === 0) break;
      coveraged += usage[version2];
      result.push(version2);
      if (coveraged >= coverage) break;
    }
    return result;
  }
  var QUERIES = {
    last_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
      select: function(context2, node2) {
        return Object.keys(agents2).reduce(function(selected, name) {
          var data = byName(name, context2);
          if (!data) return selected;
          var list2 = getMajorVersions(data.released, node2.versions);
          list2 = list2.map(nameMapper(data.name));
          list2 = filterJumps(list2, data.name, node2.versions, context2);
          return selected.concat(list2);
        }, []);
      }
    },
    last_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+versions?$/i,
      select: function(context2, node2) {
        return Object.keys(agents2).reduce(function(selected, name) {
          var data = byName(name, context2);
          if (!data) return selected;
          var list2 = data.released.slice(-node2.versions);
          list2 = list2.map(nameMapper(data.name));
          list2 = filterJumps(list2, data.name, node2.versions, context2);
          return selected.concat(list2);
        }, []);
      }
    },
    last_electron_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
      select: function(context2, node2) {
        var validVersions = getMajorVersions(Object.keys(e2c), node2.versions);
        return validVersions.map(function(i) {
          return "chrome " + e2c[i];
        });
      }
    },
    last_node_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
      select: function(context2, node2) {
        return getMajorVersions(browserslist.nodeVersions, node2.versions).map(
          function(version2) {
            return "node " + version2;
          }
        );
      }
    },
    last_browser_major_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
      select: function(context2, node2) {
        var data = checkName(node2.browser, context2);
        var validVersions = getMajorVersions(data.released, node2.versions);
        var list2 = validVersions.map(nameMapper(data.name));
        list2 = filterJumps(list2, data.name, node2.versions, context2);
        return list2;
      }
    },
    last_electron_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
      select: function(context2, node2) {
        return Object.keys(e2c).slice(-node2.versions).map(function(i) {
          return "chrome " + e2c[i];
        });
      }
    },
    last_node_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
      select: function(context2, node2) {
        return browserslist.nodeVersions.slice(-node2.versions).map(function(version2) {
          return "node " + version2;
        });
      }
    },
    last_browser_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
      select: function(context2, node2) {
        var data = checkName(node2.browser, context2);
        var list2 = data.released.slice(-node2.versions).map(nameMapper(data.name));
        list2 = filterJumps(list2, data.name, node2.versions, context2);
        return list2;
      }
    },
    unreleased_versions: {
      matches: [],
      regexp: /^unreleased\s+versions$/i,
      select: function(context2) {
        return Object.keys(agents2).reduce(function(selected, name) {
          var data = byName(name, context2);
          if (!data) return selected;
          var list2 = data.versions.filter(function(v) {
            return data.released.indexOf(v) === -1;
          });
          list2 = list2.map(nameMapper(data.name));
          return selected.concat(list2);
        }, []);
      }
    },
    unreleased_electron_versions: {
      matches: [],
      regexp: /^unreleased\s+electron\s+versions?$/i,
      select: function() {
        return [];
      }
    },
    unreleased_browser_versions: {
      matches: ["browser"],
      regexp: /^unreleased\s+(\w+)\s+versions?$/i,
      select: function(context2, node2) {
        var data = checkName(node2.browser, context2);
        return data.versions.filter(function(v) {
          return data.released.indexOf(v) === -1;
        }).map(nameMapper(data.name));
      }
    },
    last_years: {
      matches: ["years"],
      regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
      select: function(context2, node2) {
        return filterByYear(Date.now() - YEAR * node2.years, context2);
      }
    },
    since_y: {
      matches: ["year"],
      regexp: /^since (\d+)$/i,
      select: sinceQuery
    },
    since_y_m: {
      matches: ["year", "month"],
      regexp: /^since (\d+)-(\d+)$/i,
      select: sinceQuery
    },
    since_y_m_d: {
      matches: ["year", "month", "day"],
      regexp: /^since (\d+)-(\d+)-(\d+)$/i,
      select: sinceQuery
    },
    popularity: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
      select: function(context2, node2) {
        var popularity = parseFloat(node2.popularity);
        var usage = browserslist.usage.global;
        return Object.keys(usage).reduce(function(result, version2) {
          if (node2.sign === ">") {
            if (usage[version2] > popularity) {
              result.push(version2);
            }
          } else if (node2.sign === "<") {
            if (usage[version2] < popularity) {
              result.push(version2);
            }
          } else if (node2.sign === "<=") {
            if (usage[version2] <= popularity) {
              result.push(version2);
            }
          } else if (usage[version2] >= popularity) {
            result.push(version2);
          }
          return result;
        }, []);
      }
    },
    popularity_in_my_stats: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
      select: function(context2, node2) {
        var popularity = parseFloat(node2.popularity);
        if (!context2.customUsage) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        var usage = context2.customUsage;
        return Object.keys(usage).reduce(function(result, version2) {
          var percentage = usage[version2];
          if (percentage == null) {
            return result;
          }
          if (node2.sign === ">") {
            if (percentage > popularity) {
              result.push(version2);
            }
          } else if (node2.sign === "<") {
            if (percentage < popularity) {
              result.push(version2);
            }
          } else if (node2.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version2);
            }
          } else if (percentage >= popularity) {
            result.push(version2);
          }
          return result;
        }, []);
      }
    },
    popularity_in_config_stats: {
      matches: ["sign", "popularity", "config"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
      select: function(context2, node2) {
        var popularity = parseFloat(node2.popularity);
        var stats = env.loadStat(context2, node2.config, browserslist.data);
        if (stats) {
          context2.customUsage = {};
          for (var browser2 in stats) {
            fillUsage(context2.customUsage, browser2, stats[browser2]);
          }
        }
        if (!context2.customUsage) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        var usage = context2.customUsage;
        return Object.keys(usage).reduce(function(result, version2) {
          var percentage = usage[version2];
          if (percentage == null) {
            return result;
          }
          if (node2.sign === ">") {
            if (percentage > popularity) {
              result.push(version2);
            }
          } else if (node2.sign === "<") {
            if (percentage < popularity) {
              result.push(version2);
            }
          } else if (node2.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version2);
            }
          } else if (percentage >= popularity) {
            result.push(version2);
          }
          return result;
        }, []);
      }
    },
    popularity_in_place: {
      matches: ["sign", "popularity", "place"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
      select: function(context2, node2) {
        var popularity = parseFloat(node2.popularity);
        var place = node2.place;
        if (place.length === 2) {
          place = place.toUpperCase();
        } else {
          place = place.toLowerCase();
        }
        env.loadCountry(browserslist.usage, place, browserslist.data);
        var usage = browserslist.usage[place];
        return Object.keys(usage).reduce(function(result, version2) {
          var percentage = usage[version2];
          if (percentage == null) {
            return result;
          }
          if (node2.sign === ">") {
            if (percentage > popularity) {
              result.push(version2);
            }
          } else if (node2.sign === "<") {
            if (percentage < popularity) {
              result.push(version2);
            }
          } else if (node2.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version2);
            }
          } else if (percentage >= popularity) {
            result.push(version2);
          }
          return result;
        }, []);
      }
    },
    cover: {
      matches: ["coverage"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
      select: coverQuery
    },
    cover_in: {
      matches: ["coverage", "place"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
      select: coverQuery
    },
    supports: {
      matches: ["supportType", "feature"],
      regexp: /^(?:(fully|partially) )?supports\s+([\w-]+)$/,
      select: function(context2, node2) {
        env.loadFeature(browserslist.cache, node2.feature);
        var withPartial = node2.supportType !== "fully";
        var features2 = browserslist.cache[node2.feature];
        var result = [];
        for (var name in features2) {
          var data = byName(name, context2);
          var checkDesktop = context2.mobileToDesktop && name in browserslist.desktopNames && isSupported(features2[name][data.released.slice(-1)[0]], withPartial);
          data.versions.forEach(function(version2) {
            var flags = features2[name][version2];
            if (flags === void 0 && checkDesktop) {
              flags = features2[browserslist.desktopNames[name]][version2];
            }
            if (isSupported(flags, withPartial)) {
              result.push(name + " " + version2);
            }
          });
        }
        return result;
      }
    },
    electron_range: {
      matches: ["from", "to"],
      regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function(context2, node2) {
        var fromToUse = normalizeElectron(node2.from);
        var toToUse = normalizeElectron(node2.to);
        var from = parseFloat(node2.from);
        var to = parseFloat(node2.to);
        if (!e2c[fromToUse]) {
          throw new BrowserslistError("Unknown version " + from + " of electron");
        }
        if (!e2c[toToUse]) {
          throw new BrowserslistError("Unknown version " + to + " of electron");
        }
        return Object.keys(e2c).filter(function(i) {
          var parsed = parseFloat(i);
          return parsed >= from && parsed <= to;
        }).map(function(i) {
          return "chrome " + e2c[i];
        });
      }
    },
    node_range: {
      matches: ["from", "to"],
      regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function(context2, node2) {
        return browserslist.nodeVersions.filter(semverFilterLoose(">=", node2.from)).filter(semverFilterLoose("<=", node2.to)).map(function(v) {
          return "node " + v;
        });
      }
    },
    browser_range: {
      matches: ["browser", "from", "to"],
      regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function(context2, node2) {
        var data = checkName(node2.browser, context2);
        var from = parseFloat(normalizeVersion(data, node2.from) || node2.from);
        var to = parseFloat(normalizeVersion(data, node2.to) || node2.to);
        function filter(v) {
          var parsed = parseFloat(v);
          return parsed >= from && parsed <= to;
        }
        return data.released.filter(filter).map(nameMapper(data.name));
      }
    },
    electron_ray: {
      matches: ["sign", "version"],
      regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function(context2, node2) {
        var versionToUse = normalizeElectron(node2.version);
        return Object.keys(e2c).filter(generateFilter(node2.sign, versionToUse)).map(function(i) {
          return "chrome " + e2c[i];
        });
      }
    },
    node_ray: {
      matches: ["sign", "version"],
      regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function(context2, node2) {
        return browserslist.nodeVersions.filter(generateSemverFilter(node2.sign, node2.version)).map(function(v) {
          return "node " + v;
        });
      }
    },
    browser_ray: {
      matches: ["browser", "sign", "version"],
      regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
      select: function(context2, node2) {
        var version2 = node2.version;
        var data = checkName(node2.browser, context2);
        var alias = browserslist.versionAliases[data.name][version2];
        if (alias) version2 = alias;
        return data.released.filter(generateFilter(node2.sign, version2)).map(function(v) {
          return data.name + " " + v;
        });
      }
    },
    firefox_esr: {
      matches: [],
      regexp: /^(firefox|ff|fx)\s+esr$/i,
      select: function() {
        return ["firefox 115"];
      }
    },
    opera_mini_all: {
      matches: [],
      regexp: /(operamini|op_mini)\s+all/i,
      select: function() {
        return ["op_mini all"];
      }
    },
    electron_version: {
      matches: ["version"],
      regexp: /^electron\s+([\d.]+)$/i,
      select: function(context2, node2) {
        var versionToUse = normalizeElectron(node2.version);
        var chrome = e2c[versionToUse];
        if (!chrome) {
          throw new BrowserslistError(
            "Unknown version " + node2.version + " of electron"
          );
        }
        return ["chrome " + chrome];
      }
    },
    node_major_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+)$/i,
      select: nodeQuery
    },
    node_minor_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+)$/i,
      select: nodeQuery
    },
    node_patch_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
      select: nodeQuery
    },
    current_node: {
      matches: [],
      regexp: /^current\s+node$/i,
      select: function(context2) {
        return [env.currentNode(resolve, context2)];
      }
    },
    maintained_node: {
      matches: [],
      regexp: /^maintained\s+node\s+versions$/i,
      select: function(context2) {
        var now = Date.now();
        var queries = Object.keys(jsEOL).filter(function(key2) {
          return now < Date.parse(jsEOL[key2].end) && now > Date.parse(jsEOL[key2].start) && isEolReleased(key2);
        }).map(function(key2) {
          return "node " + key2.slice(1);
        });
        return resolve(queries, context2);
      }
    },
    phantomjs_1_9: {
      matches: [],
      regexp: /^phantomjs\s+1.9$/i,
      select: function() {
        return ["safari 5"];
      }
    },
    phantomjs_2_1: {
      matches: [],
      regexp: /^phantomjs\s+2.1$/i,
      select: function() {
        return ["safari 6"];
      }
    },
    browser_version: {
      matches: ["browser", "version"],
      regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
      select: function(context2, node2) {
        var version2 = node2.version;
        if (/^tp$/i.test(version2)) version2 = "TP";
        var data = checkName(node2.browser, context2);
        var alias = normalizeVersion(data, version2);
        if (alias) {
          version2 = alias;
        } else {
          if (version2.indexOf(".") === -1) {
            alias = version2 + ".0";
          } else {
            alias = version2.replace(/\.0$/, "");
          }
          alias = normalizeVersion(data, alias);
          if (alias) {
            version2 = alias;
          } else if (context2.ignoreUnknownVersions) {
            return [];
          } else {
            throw new BrowserslistError(
              "Unknown version " + version2 + " of " + node2.browser
            );
          }
        }
        return [data.name + " " + version2];
      }
    },
    browserslist_config: {
      matches: [],
      regexp: /^browserslist config$/i,
      select: function(context2) {
        return browserslist(void 0, context2);
      }
    },
    extends: {
      matches: ["config"],
      regexp: /^extends (.+)$/i,
      select: function(context2, node2) {
        return resolve(env.loadQueries(context2, node2.config), context2);
      }
    },
    defaults: {
      matches: [],
      regexp: /^defaults$/i,
      select: function(context2) {
        return resolve(browserslist.defaults, context2);
      }
    },
    dead: {
      matches: [],
      regexp: /^dead$/i,
      select: function(context2) {
        var dead = [
          "Baidu >= 0",
          "ie <= 11",
          "ie_mob <= 11",
          "bb <= 10",
          "op_mob <= 12.1",
          "samsung 4"
        ];
        return resolve(dead, context2);
      }
    },
    unknown: {
      matches: [],
      regexp: /^(\w+)$/i,
      select: function(context2, node2) {
        if (byName(node2.query, context2)) {
          throw new BrowserslistError(
            "Specify versions in Browserslist query for browser " + node2.query
          );
        } else {
          throw unknownQuery(node2.query);
        }
      }
    }
  };
  (function() {
    for (var name in agents2) {
      var browser2 = agents2[name];
      browserslist.data[name] = {
        name,
        versions: normalize(agents2[name].versions),
        released: normalize(agents2[name].versions.slice(0, -3)),
        releaseDate: agents2[name].release_date
      };
      fillUsage(browserslist.usage.global, name, browser2.usage_global);
      browserslist.versionAliases[name] = {};
      for (var i = 0; i < browser2.versions.length; i++) {
        var full2 = browser2.versions[i];
        if (!full2) continue;
        if (full2.indexOf("-") !== -1) {
          var interval = full2.split("-");
          for (var j = 0; j < interval.length; j++) {
            browserslist.versionAliases[name][interval[j]] = full2;
          }
        }
      }
    }
    browserslist.nodeVersions = jsReleases.map(function(release) {
      return release.version;
    });
  })();
  browserslist_1 = browserslist;
  return browserslist_1;
}
var lib$x = {};
var validator = {};
var findSuggestion = {};
var hasRequiredFindSuggestion;
function requireFindSuggestion() {
  if (hasRequiredFindSuggestion) return findSuggestion;
  hasRequiredFindSuggestion = 1;
  Object.defineProperty(findSuggestion, "__esModule", {
    value: true
  });
  findSuggestion.findSuggestion = findSuggestion$1;
  const {
    min
  } = Math;
  function levenshtein(a, b) {
    let t = [], u = [], i, j;
    const m = a.length, n = b.length;
    if (!m) {
      return n;
    }
    if (!n) {
      return m;
    }
    for (j = 0; j <= n; j++) {
      t[j] = j;
    }
    for (i = 1; i <= m; i++) {
      for (u = [i], j = 1; j <= n; j++) {
        u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;
      }
      t = u;
    }
    return u[n];
  }
  function findSuggestion$1(str, arr) {
    const distances = arr.map((el) => levenshtein(el, str));
    return arr[distances.indexOf(min(...distances))];
  }
  return findSuggestion;
}
var hasRequiredValidator;
function requireValidator() {
  if (hasRequiredValidator) return validator;
  hasRequiredValidator = 1;
  Object.defineProperty(validator, "__esModule", {
    value: true
  });
  validator.OptionValidator = void 0;
  var _findSuggestion = requireFindSuggestion();
  class OptionValidator {
    constructor(descriptor) {
      this.descriptor = descriptor;
    }
    validateTopLevelOptions(options2, TopLevelOptionShape) {
      const validOptionNames = Object.keys(TopLevelOptionShape);
      for (const option of Object.keys(options2)) {
        if (!validOptionNames.includes(option)) {
          throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
        }
      }
    }
    validateBooleanOption(name, value2, defaultValue) {
      if (value2 === void 0) {
        return defaultValue;
      } else {
        this.invariant(typeof value2 === "boolean", `'${name}' option must be a boolean.`);
      }
      return value2;
    }
    validateStringOption(name, value2, defaultValue) {
      if (value2 === void 0) {
        return defaultValue;
      } else {
        this.invariant(typeof value2 === "string", `'${name}' option must be a string.`);
      }
      return value2;
    }
    invariant(condition, message) {
      if (!condition) {
        throw new Error(this.formatMessage(message));
      }
    }
    formatMessage(message) {
      return `${this.descriptor}: ${message}`;
    }
  }
  validator.OptionValidator = OptionValidator;
  return validator;
}
var hasRequiredLib$z;
function requireLib$z() {
  if (hasRequiredLib$z) return lib$x;
  hasRequiredLib$z = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "OptionValidator", {
      enumerable: true,
      get: function() {
        return _validator.OptionValidator;
      }
    });
    Object.defineProperty(exports, "findSuggestion", {
      enumerable: true,
      get: function() {
        return _findSuggestion.findSuggestion;
      }
    });
    var _validator = requireValidator();
    var _findSuggestion = requireFindSuggestion();
  })(lib$x);
  return lib$x;
}
const require$$0$4 = {
  "es6.module": {
    chrome: "61",
    and_chr: "61",
    edge: "16",
    firefox: "60",
    and_ff: "60",
    node: "13.2.0",
    opera: "48",
    op_mob: "45",
    safari: "10.1",
    ios: "10.3",
    samsung: "8.2",
    android: "61",
    electron: "2.0",
    ios_saf: "10.3"
  }
};
var nativeModules;
var hasRequiredNativeModules;
function requireNativeModules() {
  if (hasRequiredNativeModules) return nativeModules;
  hasRequiredNativeModules = 1;
  nativeModules = require$$0$4;
  return nativeModules;
}
var iterator;
var hasRequiredIterator;
function requireIterator() {
  if (hasRequiredIterator) return iterator;
  hasRequiredIterator = 1;
  iterator = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next) {
        yield walker.value;
      }
    };
  };
  return iterator;
}
var yallist;
var hasRequiredYallist;
function requireYallist() {
  if (hasRequiredYallist) return yallist;
  hasRequiredYallist = 1;
  yallist = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list2) {
    var self = this;
    if (!(self instanceof Yallist)) {
      self = new Yallist();
    }
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list2 && typeof list2.forEach === "function") {
      list2.forEach(function(item2) {
        self.push(item2);
      });
    } else if (arguments.length > 0) {
      for (var i = 0, l = arguments.length; i < l; i++) {
        self.push(arguments[i]);
      }
    }
    return self;
  }
  Yallist.prototype.removeNode = function(node2) {
    if (node2.list !== this) {
      throw new Error("removing node which does not belong to this list");
    }
    var next = node2.next;
    var prev = node2.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    if (node2 === this.head) {
      this.head = next;
    }
    if (node2 === this.tail) {
      this.tail = prev;
    }
    node2.list.length--;
    node2.next = null;
    node2.prev = null;
    node2.list = null;
    return next;
  };
  Yallist.prototype.unshiftNode = function(node2) {
    if (node2 === this.head) {
      return;
    }
    if (node2.list) {
      node2.list.removeNode(node2);
    }
    var head = this.head;
    node2.list = this;
    node2.next = head;
    if (head) {
      head.prev = node2;
    }
    this.head = node2;
    if (!this.tail) {
      this.tail = node2;
    }
    this.length++;
  };
  Yallist.prototype.pushNode = function(node2) {
    if (node2 === this.tail) {
      return;
    }
    if (node2.list) {
      node2.list.removeNode(node2);
    }
    var tail = this.tail;
    node2.list = this;
    node2.prev = tail;
    if (tail) {
      tail.next = node2;
    }
    this.tail = node2;
    if (!this.head) {
      this.head = node2;
    }
    this.length++;
  };
  Yallist.prototype.push = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      push2(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      unshift(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!this.tail) {
      return void 0;
    }
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) {
      this.tail.next = null;
    } else {
      this.head = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.shift = function() {
    if (!this.head) {
      return void 0;
    }
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) {
      this.head.prev = null;
    } else {
      this.tail = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.forEach = function(fn2, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++) {
      fn2.call(thisp, walker.value, i, this);
      walker = walker.next;
    }
  };
  Yallist.prototype.forEachReverse = function(fn2, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
      fn2.call(thisp, walker.value, i, this);
      walker = walker.prev;
    }
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
      walker = walker.next;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
      walker = walker.prev;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.map = function(fn2, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.head; walker !== null; ) {
      res.push(fn2.call(thisp, walker.value, this));
      walker = walker.next;
    }
    return res;
  };
  Yallist.prototype.mapReverse = function(fn2, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.tail; walker !== null; ) {
      res.push(fn2.call(thisp, walker.value, this));
      walker = walker.prev;
    }
    return res;
  };
  Yallist.prototype.reduce = function(fn2, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.head) {
      walker = this.head.next;
      acc = this.head.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = 0; walker !== null; i++) {
      acc = fn2(acc, walker.value, i);
      walker = walker.next;
    }
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn2, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.tail) {
      walker = this.tail.prev;
      acc = this.tail.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = this.length - 1; walker !== null; i--) {
      acc = fn2(acc, walker.value, i);
      walker = walker.prev;
    }
    return acc;
  };
  Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.head; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.next;
    }
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.prev;
    }
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next;
    }
    for (; walker !== null && i < to; i++, walker = walker.next) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
      walker = walker.prev;
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.splice = function(start, deleteCount) {
    if (start > this.length) {
      start = this.length - 1;
    }
    if (start < 0) {
      start = this.length + start;
    }
    for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
      walker = walker.next;
    }
    var ret = [];
    for (var i = 0; walker && i < deleteCount; i++) {
      ret.push(walker.value);
      walker = this.removeNode(walker);
    }
    if (walker === null) {
      walker = this.tail;
    }
    if (walker !== this.head && walker !== this.tail) {
      walker = walker.prev;
    }
    for (var i = 2; i < arguments.length; i++) {
      walker = insert(this, walker, arguments[i]);
    }
    return ret;
  };
  Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for (var walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next;
      walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
  };
  function insert(self, node2, value2) {
    var inserted = node2 === self.head ? new Node(value2, null, node2, self) : new Node(value2, node2, node2.next, self);
    if (inserted.next === null) {
      self.tail = inserted;
    }
    if (inserted.prev === null) {
      self.head = inserted;
    }
    self.length++;
    return inserted;
  }
  function push2(self, item2) {
    self.tail = new Node(item2, self.tail, null, self);
    if (!self.head) {
      self.head = self.tail;
    }
    self.length++;
  }
  function unshift(self, item2) {
    self.head = new Node(item2, null, self.head, self);
    if (!self.tail) {
      self.tail = self.head;
    }
    self.length++;
  }
  function Node(value2, prev, next, list2) {
    if (!(this instanceof Node)) {
      return new Node(value2, prev, next, list2);
    }
    this.list = list2;
    this.value = value2;
    if (prev) {
      prev.next = this;
      this.prev = prev;
    } else {
      this.prev = null;
    }
    if (next) {
      next.prev = this;
      this.next = next;
    } else {
      this.next = null;
    }
  }
  try {
    requireIterator()(Yallist);
  } catch (er) {
  }
  return yallist;
}
var lruCache;
var hasRequiredLruCache;
function requireLruCache() {
  if (hasRequiredLruCache) return lruCache;
  hasRequiredLruCache = 1;
  const Yallist = requireYallist();
  const MAX = Symbol("max");
  const LENGTH = Symbol("length");
  const LENGTH_CALCULATOR = Symbol("lengthCalculator");
  const ALLOW_STALE = Symbol("allowStale");
  const MAX_AGE = Symbol("maxAge");
  const DISPOSE = Symbol("dispose");
  const NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
  const LRU_LIST = Symbol("lruList");
  const CACHE = Symbol("cache");
  const UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
  const naiveLength = () => 1;
  class LRUCache {
    constructor(options2) {
      if (typeof options2 === "number")
        options2 = { max: options2 };
      if (!options2)
        options2 = {};
      if (options2.max && (typeof options2.max !== "number" || options2.max < 0))
        throw new TypeError("max must be a non-negative number");
      this[MAX] = options2.max || Infinity;
      const lc = options2.length || naiveLength;
      this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
      this[ALLOW_STALE] = options2.stale || false;
      if (options2.maxAge && typeof options2.maxAge !== "number")
        throw new TypeError("maxAge must be a number");
      this[MAX_AGE] = options2.maxAge || 0;
      this[DISPOSE] = options2.dispose;
      this[NO_DISPOSE_ON_SET] = options2.noDisposeOnSet || false;
      this[UPDATE_AGE_ON_GET] = options2.updateAgeOnGet || false;
      this.reset();
    }
    // resize the cache when the max changes.
    set max(mL) {
      if (typeof mL !== "number" || mL < 0)
        throw new TypeError("max must be a non-negative number");
      this[MAX] = mL || Infinity;
      trim2(this);
    }
    get max() {
      return this[MAX];
    }
    set allowStale(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
      return this[ALLOW_STALE];
    }
    set maxAge(mA) {
      if (typeof mA !== "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[MAX_AGE] = mA;
      trim2(this);
    }
    get maxAge() {
      return this[MAX_AGE];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
      if (typeof lC !== "function")
        lC = naiveLength;
      if (lC !== this[LENGTH_CALCULATOR]) {
        this[LENGTH_CALCULATOR] = lC;
        this[LENGTH] = 0;
        this[LRU_LIST].forEach((hit) => {
          hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
          this[LENGTH] += hit.length;
        });
      }
      trim2(this);
    }
    get lengthCalculator() {
      return this[LENGTH_CALCULATOR];
    }
    get length() {
      return this[LENGTH];
    }
    get itemCount() {
      return this[LRU_LIST].length;
    }
    rforEach(fn2, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].tail; walker !== null; ) {
        const prev = walker.prev;
        forEachStep(this, fn2, walker, thisp);
        walker = prev;
      }
    }
    forEach(fn2, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].head; walker !== null; ) {
        const next = walker.next;
        forEachStep(this, fn2, walker, thisp);
        walker = next;
      }
    }
    keys() {
      return this[LRU_LIST].toArray().map((k) => k.key);
    }
    values() {
      return this[LRU_LIST].toArray().map((k) => k.value);
    }
    reset() {
      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
        this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
      }
      this[CACHE] = /* @__PURE__ */ new Map();
      this[LRU_LIST] = new Yallist();
      this[LENGTH] = 0;
    }
    dump() {
      return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter((h) => h);
    }
    dumpLru() {
      return this[LRU_LIST];
    }
    set(key2, value2, maxAge) {
      maxAge = maxAge || this[MAX_AGE];
      if (maxAge && typeof maxAge !== "number")
        throw new TypeError("maxAge must be a number");
      const now = maxAge ? Date.now() : 0;
      const len = this[LENGTH_CALCULATOR](value2, key2);
      if (this[CACHE].has(key2)) {
        if (len > this[MAX]) {
          del(this, this[CACHE].get(key2));
          return false;
        }
        const node2 = this[CACHE].get(key2);
        const item2 = node2.value;
        if (this[DISPOSE]) {
          if (!this[NO_DISPOSE_ON_SET])
            this[DISPOSE](key2, item2.value);
        }
        item2.now = now;
        item2.maxAge = maxAge;
        item2.value = value2;
        this[LENGTH] += len - item2.length;
        item2.length = len;
        this.get(key2);
        trim2(this);
        return true;
      }
      const hit = new Entry(key2, value2, len, now, maxAge);
      if (hit.length > this[MAX]) {
        if (this[DISPOSE])
          this[DISPOSE](key2, value2);
        return false;
      }
      this[LENGTH] += hit.length;
      this[LRU_LIST].unshift(hit);
      this[CACHE].set(key2, this[LRU_LIST].head);
      trim2(this);
      return true;
    }
    has(key2) {
      if (!this[CACHE].has(key2)) return false;
      const hit = this[CACHE].get(key2).value;
      return !isStale(this, hit);
    }
    get(key2) {
      return get(this, key2, true);
    }
    peek(key2) {
      return get(this, key2, false);
    }
    pop() {
      const node2 = this[LRU_LIST].tail;
      if (!node2)
        return null;
      del(this, node2);
      return node2.value;
    }
    del(key2) {
      del(this, this[CACHE].get(key2));
    }
    load(arr) {
      this.reset();
      const now = Date.now();
      for (let l = arr.length - 1; l >= 0; l--) {
        const hit = arr[l];
        const expiresAt = hit.e || 0;
        if (expiresAt === 0)
          this.set(hit.k, hit.v);
        else {
          const maxAge = expiresAt - now;
          if (maxAge > 0) {
            this.set(hit.k, hit.v, maxAge);
          }
        }
      }
    }
    prune() {
      this[CACHE].forEach((value2, key2) => get(this, key2, false));
    }
  }
  const get = (self, key2, doUse) => {
    const node2 = self[CACHE].get(key2);
    if (node2) {
      const hit = node2.value;
      if (isStale(self, hit)) {
        del(self, node2);
        if (!self[ALLOW_STALE])
          return void 0;
      } else {
        if (doUse) {
          if (self[UPDATE_AGE_ON_GET])
            node2.value.now = Date.now();
          self[LRU_LIST].unshiftNode(node2);
        }
      }
      return hit.value;
    }
  };
  const isStale = (self, hit) => {
    if (!hit || !hit.maxAge && !self[MAX_AGE])
      return false;
    const diff2 = Date.now() - hit.now;
    return hit.maxAge ? diff2 > hit.maxAge : self[MAX_AGE] && diff2 > self[MAX_AGE];
  };
  const trim2 = (self) => {
    if (self[LENGTH] > self[MAX]) {
      for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null; ) {
        const prev = walker.prev;
        del(self, walker);
        walker = prev;
      }
    }
  };
  const del = (self, node2) => {
    if (node2) {
      const hit = node2.value;
      if (self[DISPOSE])
        self[DISPOSE](hit.key, hit.value);
      self[LENGTH] -= hit.length;
      self[CACHE].delete(hit.key);
      self[LRU_LIST].removeNode(node2);
    }
  };
  class Entry {
    constructor(key2, value2, length, now, maxAge) {
      this.key = key2;
      this.value = value2;
      this.length = length;
      this.now = now;
      this.maxAge = maxAge || 0;
    }
  }
  const forEachStep = (self, fn2, node2, thisp) => {
    let hit = node2.value;
    if (isStale(self, hit)) {
      del(self, node2);
      if (!self[ALLOW_STALE])
        hit = void 0;
    }
    if (hit)
      fn2.call(thisp, hit.value, hit.key, self);
  };
  lruCache = LRUCache;
  return lruCache;
}
var utils$2 = {};
var targets = {};
var hasRequiredTargets;
function requireTargets() {
  if (hasRequiredTargets) return targets;
  hasRequiredTargets = 1;
  Object.defineProperty(targets, "__esModule", {
    value: true
  });
  targets.unreleasedLabels = targets.browserNameMap = void 0;
  targets.unreleasedLabels = {
    safari: "tp"
  };
  targets.browserNameMap = {
    and_chr: "chrome",
    and_ff: "firefox",
    android: "android",
    chrome: "chrome",
    edge: "edge",
    firefox: "firefox",
    ie: "ie",
    ie_mob: "ie",
    ios_saf: "ios",
    node: "node",
    deno: "deno",
    op_mob: "opera_mobile",
    opera: "opera",
    safari: "safari",
    samsung: "samsung"
  };
  return targets;
}
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils$2;
  hasRequiredUtils = 1;
  Object.defineProperty(utils$2, "__esModule", {
    value: true
  });
  utils$2.getHighestUnreleased = getHighestUnreleased;
  utils$2.getLowestImplementedVersion = getLowestImplementedVersion;
  utils$2.getLowestUnreleased = getLowestUnreleased;
  utils$2.isUnreleasedVersion = isUnreleasedVersion;
  utils$2.semverMin = semverMin;
  utils$2.semverify = semverify;
  var _semver = requireSemver();
  var _helperValidatorOption = requireLib$z();
  var _targets = requireTargets();
  const versionRegExp = /^(\d+|\d+.\d+)$/;
  const v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");
  function semverMin(first, second) {
    return first && _semver.lt(first, second) ? first : second;
  }
  function semverify(version2) {
    if (typeof version2 === "string" && _semver.valid(version2)) {
      return version2;
    }
    v.invariant(typeof version2 === "number" || typeof version2 === "string" && versionRegExp.test(version2), `'${version2}' is not a valid version`);
    version2 = version2.toString();
    let pos2 = 0;
    let num = 0;
    while ((pos2 = version2.indexOf(".", pos2 + 1)) > 0) {
      num++;
    }
    return version2 + ".0".repeat(2 - num);
  }
  function isUnreleasedVersion(version2, env) {
    const unreleasedLabel = _targets.unreleasedLabels[env];
    return !!unreleasedLabel && unreleasedLabel === version2.toString().toLowerCase();
  }
  function getLowestUnreleased(a, b, env) {
    const unreleasedLabel = _targets.unreleasedLabels[env];
    if (a === unreleasedLabel) {
      return b;
    }
    if (b === unreleasedLabel) {
      return a;
    }
    return semverMin(a, b);
  }
  function getHighestUnreleased(a, b, env) {
    return getLowestUnreleased(a, b, env) === a ? b : a;
  }
  function getLowestImplementedVersion(plugin2, environment2) {
    const result = plugin2[environment2];
    if (!result && environment2 === "android") {
      return plugin2.chrome;
    }
    return result;
  }
  return utils$2;
}
var options$1 = {};
var hasRequiredOptions$1;
function requireOptions$1() {
  if (hasRequiredOptions$1) return options$1;
  hasRequiredOptions$1 = 1;
  Object.defineProperty(options$1, "__esModule", {
    value: true
  });
  options$1.TargetNames = void 0;
  options$1.TargetNames = {
    node: "node",
    deno: "deno",
    chrome: "chrome",
    opera: "opera",
    edge: "edge",
    firefox: "firefox",
    safari: "safari",
    ie: "ie",
    ios: "ios",
    android: "android",
    electron: "electron",
    samsung: "samsung",
    rhino: "rhino",
    opera_mobile: "opera_mobile"
  };
  return options$1;
}
var pretty = {};
var hasRequiredPretty;
function requirePretty() {
  if (hasRequiredPretty) return pretty;
  hasRequiredPretty = 1;
  Object.defineProperty(pretty, "__esModule", {
    value: true
  });
  pretty.prettifyTargets = prettifyTargets;
  pretty.prettifyVersion = prettifyVersion;
  var _semver = requireSemver();
  var _targets = requireTargets();
  function prettifyVersion(version2) {
    if (typeof version2 !== "string") {
      return version2;
    }
    const {
      major,
      minor,
      patch
    } = _semver.parse(version2);
    const parts = [major];
    if (minor || patch) {
      parts.push(minor);
    }
    if (patch) {
      parts.push(patch);
    }
    return parts.join(".");
  }
  function prettifyTargets(targets2) {
    return Object.keys(targets2).reduce((results, target) => {
      let value2 = targets2[target];
      const unreleasedLabel = _targets.unreleasedLabels[target];
      if (typeof value2 === "string" && unreleasedLabel !== value2) {
        value2 = prettifyVersion(value2);
      }
      results[target] = value2;
      return results;
    }, {});
  }
  return pretty;
}
var debug = {};
var hasRequiredDebug;
function requireDebug() {
  if (hasRequiredDebug) return debug;
  hasRequiredDebug = 1;
  Object.defineProperty(debug, "__esModule", {
    value: true
  });
  debug.getInclusionReasons = getInclusionReasons;
  var _semver = requireSemver();
  var _pretty = requirePretty();
  var _utils = requireUtils();
  function getInclusionReasons(item2, targetVersions, list2) {
    const minVersions = list2[item2] || {};
    return Object.keys(targetVersions).reduce((result, env) => {
      const minVersion = (0, _utils.getLowestImplementedVersion)(minVersions, env);
      const targetVersion = targetVersions[env];
      if (!minVersion) {
        result[env] = (0, _pretty.prettifyVersion)(targetVersion);
      } else {
        const minIsUnreleased = (0, _utils.isUnreleasedVersion)(minVersion, env);
        const targetIsUnreleased = (0, _utils.isUnreleasedVersion)(targetVersion, env);
        if (!targetIsUnreleased && (minIsUnreleased || _semver.lt(targetVersion.toString(), (0, _utils.semverify)(minVersion)))) {
          result[env] = (0, _pretty.prettifyVersion)(targetVersion);
        }
      }
      return result;
    }, {});
  }
  return debug;
}
var filterItems = {};
const require$$0$3 = {
  "transform-unicode-sets-regex": {
    chrome: "112",
    opera: "98",
    edge: "112",
    firefox: "116",
    safari: "tp",
    node: "20",
    deno: "1.32",
    opera_mobile: "75",
    electron: "24.0"
  },
  "bugfix/transform-v8-static-class-fields-redefine-readonly": {
    chrome: "98",
    opera: "84",
    edge: "98",
    firefox: "95",
    safari: "15",
    node: "12",
    deno: "1.18",
    ios: "15",
    samsung: "11",
    opera_mobile: "52",
    electron: "17.0"
  },
  "transform-class-static-block": {
    chrome: "94",
    opera: "80",
    edge: "94",
    firefox: "93",
    safari: "16.4",
    node: "16.11",
    deno: "1.14",
    ios: "16.4",
    samsung: "17",
    opera_mobile: "66",
    electron: "15.0"
  },
  "proposal-class-static-block": {
    chrome: "94",
    opera: "80",
    edge: "94",
    firefox: "93",
    safari: "16.4",
    node: "16.11",
    deno: "1.14",
    ios: "16.4",
    samsung: "17",
    opera_mobile: "66",
    electron: "15.0"
  },
  "transform-private-property-in-object": {
    chrome: "91",
    opera: "77",
    edge: "91",
    firefox: "90",
    safari: "15",
    node: "16.9",
    deno: "1.9",
    ios: "15",
    samsung: "16",
    opera_mobile: "64",
    electron: "13.0"
  },
  "proposal-private-property-in-object": {
    chrome: "91",
    opera: "77",
    edge: "91",
    firefox: "90",
    safari: "15",
    node: "16.9",
    deno: "1.9",
    ios: "15",
    samsung: "16",
    opera_mobile: "64",
    electron: "13.0"
  },
  "transform-class-properties": {
    chrome: "74",
    opera: "62",
    edge: "79",
    firefox: "90",
    safari: "14.1",
    node: "12",
    deno: "1",
    ios: "14.5",
    samsung: "11",
    opera_mobile: "53",
    electron: "6.0"
  },
  "proposal-class-properties": {
    chrome: "74",
    opera: "62",
    edge: "79",
    firefox: "90",
    safari: "14.1",
    node: "12",
    deno: "1",
    ios: "14.5",
    samsung: "11",
    opera_mobile: "53",
    electron: "6.0"
  },
  "transform-private-methods": {
    chrome: "84",
    opera: "70",
    edge: "84",
    firefox: "90",
    safari: "15",
    node: "14.6",
    deno: "1",
    ios: "15",
    samsung: "14",
    opera_mobile: "60",
    electron: "10.0"
  },
  "proposal-private-methods": {
    chrome: "84",
    opera: "70",
    edge: "84",
    firefox: "90",
    safari: "15",
    node: "14.6",
    deno: "1",
    ios: "15",
    samsung: "14",
    opera_mobile: "60",
    electron: "10.0"
  },
  "transform-numeric-separator": {
    chrome: "75",
    opera: "62",
    edge: "79",
    firefox: "70",
    safari: "13",
    node: "12.5",
    deno: "1",
    ios: "13",
    samsung: "11",
    rhino: "1.7.14",
    opera_mobile: "54",
    electron: "6.0"
  },
  "proposal-numeric-separator": {
    chrome: "75",
    opera: "62",
    edge: "79",
    firefox: "70",
    safari: "13",
    node: "12.5",
    deno: "1",
    ios: "13",
    samsung: "11",
    rhino: "1.7.14",
    opera_mobile: "54",
    electron: "6.0"
  },
  "transform-logical-assignment-operators": {
    chrome: "85",
    opera: "71",
    edge: "85",
    firefox: "79",
    safari: "14",
    node: "15",
    deno: "1.2",
    ios: "14",
    samsung: "14",
    opera_mobile: "60",
    electron: "10.0"
  },
  "proposal-logical-assignment-operators": {
    chrome: "85",
    opera: "71",
    edge: "85",
    firefox: "79",
    safari: "14",
    node: "15",
    deno: "1.2",
    ios: "14",
    samsung: "14",
    opera_mobile: "60",
    electron: "10.0"
  },
  "transform-nullish-coalescing-operator": {
    chrome: "80",
    opera: "67",
    edge: "80",
    firefox: "72",
    safari: "13.1",
    node: "14",
    deno: "1",
    ios: "13.4",
    samsung: "13",
    opera_mobile: "57",
    electron: "8.0"
  },
  "proposal-nullish-coalescing-operator": {
    chrome: "80",
    opera: "67",
    edge: "80",
    firefox: "72",
    safari: "13.1",
    node: "14",
    deno: "1",
    ios: "13.4",
    samsung: "13",
    opera_mobile: "57",
    electron: "8.0"
  },
  "transform-optional-chaining": {
    chrome: "91",
    opera: "77",
    edge: "91",
    firefox: "74",
    safari: "13.1",
    node: "16.9",
    deno: "1.9",
    ios: "13.4",
    samsung: "16",
    opera_mobile: "64",
    electron: "13.0"
  },
  "proposal-optional-chaining": {
    chrome: "91",
    opera: "77",
    edge: "91",
    firefox: "74",
    safari: "13.1",
    node: "16.9",
    deno: "1.9",
    ios: "13.4",
    samsung: "16",
    opera_mobile: "64",
    electron: "13.0"
  },
  "transform-json-strings": {
    chrome: "66",
    opera: "53",
    edge: "79",
    firefox: "62",
    safari: "12",
    node: "10",
    deno: "1",
    ios: "12",
    samsung: "9",
    rhino: "1.7.14",
    opera_mobile: "47",
    electron: "3.0"
  },
  "proposal-json-strings": {
    chrome: "66",
    opera: "53",
    edge: "79",
    firefox: "62",
    safari: "12",
    node: "10",
    deno: "1",
    ios: "12",
    samsung: "9",
    rhino: "1.7.14",
    opera_mobile: "47",
    electron: "3.0"
  },
  "transform-optional-catch-binding": {
    chrome: "66",
    opera: "53",
    edge: "79",
    firefox: "58",
    safari: "11.1",
    node: "10",
    deno: "1",
    ios: "11.3",
    samsung: "9",
    opera_mobile: "47",
    electron: "3.0"
  },
  "proposal-optional-catch-binding": {
    chrome: "66",
    opera: "53",
    edge: "79",
    firefox: "58",
    safari: "11.1",
    node: "10",
    deno: "1",
    ios: "11.3",
    samsung: "9",
    opera_mobile: "47",
    electron: "3.0"
  },
  "transform-parameters": {
    chrome: "49",
    opera: "36",
    edge: "18",
    firefox: "53",
    safari: "16.3",
    node: "6",
    deno: "1",
    ios: "16.3",
    samsung: "5",
    opera_mobile: "36",
    electron: "0.37"
  },
  "transform-async-generator-functions": {
    chrome: "63",
    opera: "50",
    edge: "79",
    firefox: "57",
    safari: "12",
    node: "10",
    deno: "1",
    ios: "12",
    samsung: "8",
    opera_mobile: "46",
    electron: "3.0"
  },
  "proposal-async-generator-functions": {
    chrome: "63",
    opera: "50",
    edge: "79",
    firefox: "57",
    safari: "12",
    node: "10",
    deno: "1",
    ios: "12",
    samsung: "8",
    opera_mobile: "46",
    electron: "3.0"
  },
  "transform-object-rest-spread": {
    chrome: "60",
    opera: "47",
    edge: "79",
    firefox: "55",
    safari: "11.1",
    node: "8.3",
    deno: "1",
    ios: "11.3",
    samsung: "8",
    opera_mobile: "44",
    electron: "2.0"
  },
  "proposal-object-rest-spread": {
    chrome: "60",
    opera: "47",
    edge: "79",
    firefox: "55",
    safari: "11.1",
    node: "8.3",
    deno: "1",
    ios: "11.3",
    samsung: "8",
    opera_mobile: "44",
    electron: "2.0"
  },
  "transform-dotall-regex": {
    chrome: "62",
    opera: "49",
    edge: "79",
    firefox: "78",
    safari: "11.1",
    node: "8.10",
    deno: "1",
    ios: "11.3",
    samsung: "8",
    opera_mobile: "46",
    electron: "3.0"
  },
  "transform-unicode-property-regex": {
    chrome: "64",
    opera: "51",
    edge: "79",
    firefox: "78",
    safari: "11.1",
    node: "10",
    deno: "1",
    ios: "11.3",
    samsung: "9",
    opera_mobile: "47",
    electron: "3.0"
  },
  "proposal-unicode-property-regex": {
    chrome: "64",
    opera: "51",
    edge: "79",
    firefox: "78",
    safari: "11.1",
    node: "10",
    deno: "1",
    ios: "11.3",
    samsung: "9",
    opera_mobile: "47",
    electron: "3.0"
  },
  "transform-named-capturing-groups-regex": {
    chrome: "64",
    opera: "51",
    edge: "79",
    firefox: "78",
    safari: "11.1",
    node: "10",
    deno: "1",
    ios: "11.3",
    samsung: "9",
    opera_mobile: "47",
    electron: "3.0"
  },
  "transform-async-to-generator": {
    chrome: "55",
    opera: "42",
    edge: "15",
    firefox: "52",
    safari: "11",
    node: "7.6",
    deno: "1",
    ios: "11",
    samsung: "6",
    opera_mobile: "42",
    electron: "1.6"
  },
  "transform-exponentiation-operator": {
    chrome: "52",
    opera: "39",
    edge: "14",
    firefox: "52",
    safari: "10.1",
    node: "7",
    deno: "1",
    ios: "10.3",
    samsung: "6",
    rhino: "1.7.14",
    opera_mobile: "41",
    electron: "1.3"
  },
  "transform-template-literals": {
    chrome: "41",
    opera: "28",
    edge: "13",
    firefox: "34",
    safari: "13",
    node: "4",
    deno: "1",
    ios: "13",
    samsung: "3.4",
    opera_mobile: "28",
    electron: "0.21"
  },
  "transform-literals": {
    chrome: "44",
    opera: "31",
    edge: "12",
    firefox: "53",
    safari: "9",
    node: "4",
    deno: "1",
    ios: "9",
    samsung: "4",
    opera_mobile: "32",
    electron: "0.30"
  },
  "transform-function-name": {
    chrome: "51",
    opera: "38",
    edge: "79",
    firefox: "53",
    safari: "10",
    node: "6.5",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "41",
    electron: "1.2"
  },
  "transform-arrow-functions": {
    chrome: "47",
    opera: "34",
    edge: "13",
    firefox: "43",
    safari: "10",
    node: "6",
    deno: "1",
    ios: "10",
    samsung: "5",
    rhino: "1.7.13",
    opera_mobile: "34",
    electron: "0.36"
  },
  "transform-block-scoped-functions": {
    chrome: "41",
    opera: "28",
    edge: "12",
    firefox: "46",
    safari: "10",
    node: "4",
    deno: "1",
    ie: "11",
    ios: "10",
    samsung: "3.4",
    opera_mobile: "28",
    electron: "0.21"
  },
  "transform-classes": {
    chrome: "46",
    opera: "33",
    edge: "13",
    firefox: "45",
    safari: "10",
    node: "5",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "33",
    electron: "0.36"
  },
  "transform-object-super": {
    chrome: "46",
    opera: "33",
    edge: "13",
    firefox: "45",
    safari: "10",
    node: "5",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "33",
    electron: "0.36"
  },
  "transform-shorthand-properties": {
    chrome: "43",
    opera: "30",
    edge: "12",
    firefox: "33",
    safari: "9",
    node: "4",
    deno: "1",
    ios: "9",
    samsung: "4",
    rhino: "1.7.14",
    opera_mobile: "30",
    electron: "0.27"
  },
  "transform-duplicate-keys": {
    chrome: "42",
    opera: "29",
    edge: "12",
    firefox: "34",
    safari: "9",
    node: "4",
    deno: "1",
    ios: "9",
    samsung: "3.4",
    opera_mobile: "29",
    electron: "0.25"
  },
  "transform-computed-properties": {
    chrome: "44",
    opera: "31",
    edge: "12",
    firefox: "34",
    safari: "7.1",
    node: "4",
    deno: "1",
    ios: "8",
    samsung: "4",
    opera_mobile: "32",
    electron: "0.30"
  },
  "transform-for-of": {
    chrome: "51",
    opera: "38",
    edge: "15",
    firefox: "53",
    safari: "10",
    node: "6.5",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "41",
    electron: "1.2"
  },
  "transform-sticky-regex": {
    chrome: "49",
    opera: "36",
    edge: "13",
    firefox: "3",
    safari: "10",
    node: "6",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "36",
    electron: "0.37"
  },
  "transform-unicode-escapes": {
    chrome: "44",
    opera: "31",
    edge: "12",
    firefox: "53",
    safari: "9",
    node: "4",
    deno: "1",
    ios: "9",
    samsung: "4",
    opera_mobile: "32",
    electron: "0.30"
  },
  "transform-unicode-regex": {
    chrome: "50",
    opera: "37",
    edge: "13",
    firefox: "46",
    safari: "12",
    node: "6",
    deno: "1",
    ios: "12",
    samsung: "5",
    opera_mobile: "37",
    electron: "1.1"
  },
  "transform-spread": {
    chrome: "46",
    opera: "33",
    edge: "13",
    firefox: "45",
    safari: "10",
    node: "5",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "33",
    electron: "0.36"
  },
  "transform-destructuring": {
    chrome: "51",
    opera: "38",
    edge: "15",
    firefox: "53",
    safari: "10",
    node: "6.5",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "41",
    electron: "1.2"
  },
  "transform-block-scoping": {
    chrome: "50",
    opera: "37",
    edge: "14",
    firefox: "53",
    safari: "11",
    node: "6",
    deno: "1",
    ios: "11",
    samsung: "5",
    opera_mobile: "37",
    electron: "1.1"
  },
  "transform-typeof-symbol": {
    chrome: "38",
    opera: "25",
    edge: "12",
    firefox: "36",
    safari: "9",
    node: "0.12",
    deno: "1",
    ios: "9",
    samsung: "3",
    rhino: "1.7.13",
    opera_mobile: "25",
    electron: "0.20"
  },
  "transform-new-target": {
    chrome: "46",
    opera: "33",
    edge: "14",
    firefox: "41",
    safari: "10",
    node: "5",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "33",
    electron: "0.36"
  },
  "transform-regenerator": {
    chrome: "50",
    opera: "37",
    edge: "13",
    firefox: "53",
    safari: "10",
    node: "6",
    deno: "1",
    ios: "10",
    samsung: "5",
    opera_mobile: "37",
    electron: "1.1"
  },
  "transform-member-expression-literals": {
    chrome: "7",
    opera: "12",
    edge: "12",
    firefox: "2",
    safari: "5.1",
    node: "0.4",
    deno: "1",
    ie: "9",
    android: "4",
    ios: "6",
    phantom: "1.9",
    samsung: "1",
    rhino: "1.7.13",
    opera_mobile: "12",
    electron: "0.20"
  },
  "transform-property-literals": {
    chrome: "7",
    opera: "12",
    edge: "12",
    firefox: "2",
    safari: "5.1",
    node: "0.4",
    deno: "1",
    ie: "9",
    android: "4",
    ios: "6",
    phantom: "1.9",
    samsung: "1",
    rhino: "1.7.13",
    opera_mobile: "12",
    electron: "0.20"
  },
  "transform-reserved-words": {
    chrome: "13",
    opera: "10.50",
    edge: "12",
    firefox: "2",
    safari: "3.1",
    node: "0.6",
    deno: "1",
    ie: "9",
    android: "4.4",
    ios: "6",
    phantom: "1.9",
    samsung: "1",
    rhino: "1.7.13",
    opera_mobile: "10.1",
    electron: "0.20"
  },
  "transform-export-namespace-from": {
    chrome: "72",
    deno: "1.0",
    edge: "79",
    firefox: "80",
    node: "13.2",
    opera: "60",
    opera_mobile: "51",
    safari: "14.1",
    ios: "14.5",
    samsung: "11.0",
    android: "72",
    electron: "5.0"
  },
  "proposal-export-namespace-from": {
    chrome: "72",
    deno: "1.0",
    edge: "79",
    firefox: "80",
    node: "13.2",
    opera: "60",
    opera_mobile: "51",
    safari: "14.1",
    ios: "14.5",
    samsung: "11.0",
    android: "72",
    electron: "5.0"
  }
};
var plugins$1;
var hasRequiredPlugins$1;
function requirePlugins$1() {
  if (hasRequiredPlugins$1) return plugins$1;
  hasRequiredPlugins$1 = 1;
  plugins$1 = require$$0$3;
  return plugins$1;
}
var hasRequiredFilterItems;
function requireFilterItems() {
  if (hasRequiredFilterItems) return filterItems;
  hasRequiredFilterItems = 1;
  Object.defineProperty(filterItems, "__esModule", {
    value: true
  });
  filterItems.default = filterItems$1;
  filterItems.isRequired = isRequired;
  filterItems.targetsSupported = targetsSupported;
  var _semver = requireSemver();
  var _plugins = requirePlugins$1();
  var _utils = requireUtils();
  function targetsSupported(target, support) {
    const targetEnvironments = Object.keys(target);
    if (targetEnvironments.length === 0) {
      return false;
    }
    const unsupportedEnvironments = targetEnvironments.filter((environment2) => {
      const lowestImplementedVersion = (0, _utils.getLowestImplementedVersion)(support, environment2);
      if (!lowestImplementedVersion) {
        return true;
      }
      const lowestTargetedVersion = target[environment2];
      if ((0, _utils.isUnreleasedVersion)(lowestTargetedVersion, environment2)) {
        return false;
      }
      if ((0, _utils.isUnreleasedVersion)(lowestImplementedVersion, environment2)) {
        return true;
      }
      if (!_semver.valid(lowestTargetedVersion.toString())) {
        throw new Error(`Invalid version passed for target "${environment2}": "${lowestTargetedVersion}". Versions must be in semver format (major.minor.patch)`);
      }
      return _semver.gt((0, _utils.semverify)(lowestImplementedVersion), lowestTargetedVersion.toString());
    });
    return unsupportedEnvironments.length === 0;
  }
  function isRequired(name, targets2, {
    compatData = _plugins,
    includes,
    excludes
  } = {}) {
    if (excludes != null && excludes.has(name)) return false;
    if (includes != null && includes.has(name)) return true;
    return !targetsSupported(targets2, compatData[name]);
  }
  function filterItems$1(list2, includes, excludes, targets2, defaultIncludes, defaultExcludes, pluginSyntaxMap) {
    const result = /* @__PURE__ */ new Set();
    const options2 = {
      compatData: list2,
      includes,
      excludes
    };
    for (const item2 in list2) {
      if (isRequired(item2, targets2, options2)) {
        result.add(item2);
      } else if (pluginSyntaxMap) {
        const shippedProposalsSyntax = pluginSyntaxMap.get(item2);
        if (shippedProposalsSyntax) {
          result.add(shippedProposalsSyntax);
        }
      }
    }
    defaultIncludes == null || defaultIncludes.forEach((item2) => !excludes.has(item2) && result.add(item2));
    defaultExcludes == null || defaultExcludes.forEach((item2) => !includes.has(item2) && result.delete(item2));
    return result;
  }
  return filterItems;
}
var hasRequiredLib$y;
function requireLib$y() {
  if (hasRequiredLib$y) return lib$y;
  hasRequiredLib$y = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "TargetNames", {
      enumerable: true,
      get: function() {
        return _options.TargetNames;
      }
    });
    exports.default = getTargets;
    Object.defineProperty(exports, "filterItems", {
      enumerable: true,
      get: function() {
        return _filterItems.default;
      }
    });
    Object.defineProperty(exports, "getInclusionReasons", {
      enumerable: true,
      get: function() {
        return _debug.getInclusionReasons;
      }
    });
    exports.isBrowsersQueryValid = isBrowsersQueryValid;
    Object.defineProperty(exports, "isRequired", {
      enumerable: true,
      get: function() {
        return _filterItems.isRequired;
      }
    });
    Object.defineProperty(exports, "prettifyTargets", {
      enumerable: true,
      get: function() {
        return _pretty.prettifyTargets;
      }
    });
    Object.defineProperty(exports, "unreleasedLabels", {
      enumerable: true,
      get: function() {
        return _targets.unreleasedLabels;
      }
    });
    var _browserslist = requireBrowserslist();
    var _helperValidatorOption = requireLib$z();
    var _nativeModules = requireNativeModules();
    var _lruCache = requireLruCache();
    var _utils = requireUtils();
    var _targets = requireTargets();
    var _options = requireOptions$1();
    var _pretty = requirePretty();
    var _debug = requireDebug();
    var _filterItems = requireFilterItems();
    const ESM_SUPPORT = _nativeModules["es6.module"];
    const v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");
    function validateTargetNames(targets2) {
      const validTargets = Object.keys(_options.TargetNames);
      for (const target of Object.keys(targets2)) {
        if (!(target in _options.TargetNames)) {
          throw new Error(v.formatMessage(`'${target}' is not a valid target
- Did you mean '${(0, _helperValidatorOption.findSuggestion)(target, validTargets)}'?`));
        }
      }
      return targets2;
    }
    function isBrowsersQueryValid(browsers2) {
      return typeof browsers2 === "string" || Array.isArray(browsers2) && browsers2.every((b) => typeof b === "string");
    }
    function validateBrowsers(browsers2) {
      v.invariant(browsers2 === void 0 || isBrowsersQueryValid(browsers2), `'${String(browsers2)}' is not a valid browserslist query`);
      return browsers2;
    }
    function getLowestVersions(browsers2) {
      return browsers2.reduce((all, browser2) => {
        const [browserName, browserVersion] = browser2.split(" ");
        const target = _targets.browserNameMap[browserName];
        if (!target) {
          return all;
        }
        try {
          const splitVersion = browserVersion.split("-")[0].toLowerCase();
          const isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, target);
          if (!all[target]) {
            all[target] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);
            return all;
          }
          const version2 = all[target];
          const isUnreleased = (0, _utils.isUnreleasedVersion)(version2, target);
          if (isUnreleased && isSplitUnreleased) {
            all[target] = (0, _utils.getLowestUnreleased)(version2, splitVersion, target);
          } else if (isUnreleased) {
            all[target] = (0, _utils.semverify)(splitVersion);
          } else if (!isUnreleased && !isSplitUnreleased) {
            const parsedBrowserVersion = (0, _utils.semverify)(splitVersion);
            all[target] = (0, _utils.semverMin)(version2, parsedBrowserVersion);
          }
        } catch (e) {
        }
        return all;
      }, {});
    }
    function outputDecimalWarning(decimalTargets) {
      if (!decimalTargets.length) {
        return;
      }
      console.warn("Warning, the following targets are using a decimal version:\n");
      decimalTargets.forEach(({
        target,
        value: value2
      }) => console.warn(`  ${target}: ${value2}`));
      console.warn(`
We recommend using a string for minor/patch versions to avoid numbers like 6.10
getting parsed as 6.1, which can lead to unexpected behavior.
`);
    }
    function semverifyTarget(target, value2) {
      try {
        return (0, _utils.semverify)(value2);
      } catch (error2) {
        throw new Error(v.formatMessage(`'${value2}' is not a valid value for 'targets.${target}'.`));
      }
    }
    function nodeTargetParser(value2) {
      const parsed = value2 === true || value2 === "current" ? process.versions.node : semverifyTarget("node", value2);
      return ["node", parsed];
    }
    function defaultTargetParser(target, value2) {
      const version2 = (0, _utils.isUnreleasedVersion)(value2, target) ? value2.toLowerCase() : semverifyTarget(target, value2);
      return [target, version2];
    }
    function generateTargets(inputTargets) {
      const input2 = Object.assign({}, inputTargets);
      delete input2.esmodules;
      delete input2.browsers;
      return input2;
    }
    function resolveTargets(queries, env) {
      const resolved = _browserslist(queries, {
        mobileToDesktop: true,
        env
      });
      return getLowestVersions(resolved);
    }
    const targetsCache = new _lruCache({
      max: 64
    });
    function resolveTargetsCached(queries, env) {
      const cacheKey = typeof queries === "string" ? queries : queries.join() + env;
      let cached = targetsCache.get(cacheKey);
      if (!cached) {
        cached = resolveTargets(queries, env);
        targetsCache.set(cacheKey, cached);
      }
      return Object.assign({}, cached);
    }
    function getTargets(inputTargets = {}, options2 = {}) {
      var _browsers, _browsers2;
      let {
        browsers: browsers2,
        esmodules
      } = inputTargets;
      const {
        configPath = "."
      } = options2;
      validateBrowsers(browsers2);
      const input2 = generateTargets(inputTargets);
      let targets2 = validateTargetNames(input2);
      const shouldParseBrowsers = !!browsers2;
      const hasTargets = shouldParseBrowsers || Object.keys(targets2).length > 0;
      const shouldSearchForConfig = !options2.ignoreBrowserslistConfig && !hasTargets;
      if (!browsers2 && shouldSearchForConfig) {
        browsers2 = _browserslist.loadConfig({
          config: options2.configFile,
          path: configPath,
          env: options2.browserslistEnv
        });
        if (browsers2 == null) {
          {
            browsers2 = [];
          }
        }
      }
      if (esmodules && (esmodules !== "intersect" || !((_browsers = browsers2) != null && _browsers.length))) {
        browsers2 = Object.keys(ESM_SUPPORT).map((browser2) => `${browser2} >= ${ESM_SUPPORT[browser2]}`).join(", ");
        esmodules = false;
      }
      if ((_browsers2 = browsers2) != null && _browsers2.length) {
        const queryBrowsers = resolveTargetsCached(browsers2, options2.browserslistEnv);
        if (esmodules === "intersect") {
          for (const browser2 of Object.keys(queryBrowsers)) {
            if (browser2 !== "deno" && browser2 !== "ie") {
              const esmSupportVersion = ESM_SUPPORT[browser2 === "opera_mobile" ? "op_mob" : browser2];
              if (esmSupportVersion) {
                const version2 = queryBrowsers[browser2];
                queryBrowsers[browser2] = (0, _utils.getHighestUnreleased)(version2, (0, _utils.semverify)(esmSupportVersion), browser2);
              } else {
                delete queryBrowsers[browser2];
              }
            } else {
              delete queryBrowsers[browser2];
            }
          }
        }
        targets2 = Object.assign(queryBrowsers, targets2);
      }
      const result = {};
      const decimalWarnings = [];
      for (const target of Object.keys(targets2).sort()) {
        const value2 = targets2[target];
        if (typeof value2 === "number" && value2 % 1 !== 0) {
          decimalWarnings.push({
            target,
            value: value2
          });
        }
        const [parsedTarget, parsedValue] = target === "node" ? nodeTargetParser(value2) : defaultTargetParser(target, value2);
        if (parsedValue) {
          result[parsedTarget] = parsedValue;
        }
      }
      outputDecimalWarning(decimalWarnings);
      return result;
    }
  })(lib$y);
  return lib$y;
}
var hasRequiredResolveTargetsBrowser;
function requireResolveTargetsBrowser() {
  if (hasRequiredResolveTargetsBrowser) return resolveTargetsBrowser;
  hasRequiredResolveTargetsBrowser = 1;
  Object.defineProperty(resolveTargetsBrowser, "__esModule", {
    value: true
  });
  resolveTargetsBrowser.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
  resolveTargetsBrowser.resolveTargets = resolveTargets;
  function _helperCompilationTargets() {
    const data = requireLib$y();
    _helperCompilationTargets = function() {
      return data;
    };
    return data;
  }
  function resolveBrowserslistConfigFile(browserslistConfigFile, configFilePath) {
    return void 0;
  }
  function resolveTargets(options2, root2) {
    const optTargets = options2.targets;
    let targets2;
    if (typeof optTargets === "string" || Array.isArray(optTargets)) {
      targets2 = {
        browsers: optTargets
      };
    } else if (optTargets) {
      if ("esmodules" in optTargets) {
        targets2 = Object.assign({}, optTargets, {
          esmodules: "intersect"
        });
      } else {
        targets2 = optTargets;
      }
    }
    return (0, _helperCompilationTargets().default)(targets2, {
      ignoreBrowserslistConfig: true,
      browserslistEnv: options2.browserslistEnv
    });
  }
  return resolveTargetsBrowser;
}
var hasRequiredConfigDescriptors;
function requireConfigDescriptors() {
  if (hasRequiredConfigDescriptors) return configDescriptors;
  hasRequiredConfigDescriptors = 1;
  Object.defineProperty(configDescriptors, "__esModule", {
    value: true
  });
  configDescriptors.createCachedDescriptors = createCachedDescriptors;
  configDescriptors.createDescriptor = createDescriptor;
  configDescriptors.createUncachedDescriptors = createUncachedDescriptors;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _functional = requireFunctional();
  var _index = requireIndexBrowser();
  var _item = requireItem();
  var _caching = requireCaching();
  var _resolveTargets = requireResolveTargetsBrowser();
  function isEqualDescriptor(a, b) {
    var _a$file, _b$file, _a$file2, _b$file2;
    return a.name === b.name && a.value === b.value && a.options === b.options && a.dirname === b.dirname && a.alias === b.alias && a.ownPass === b.ownPass && ((_a$file = a.file) == null ? void 0 : _a$file.request) === ((_b$file = b.file) == null ? void 0 : _b$file.request) && ((_a$file2 = a.file) == null ? void 0 : _a$file2.resolved) === ((_b$file2 = b.file) == null ? void 0 : _b$file2.resolved);
  }
  function* handlerOf(value2) {
    return value2;
  }
  function optionsWithResolvedBrowserslistConfigFile(options2, dirname) {
    if (typeof options2.browserslistConfigFile === "string") {
      options2.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options2.browserslistConfigFile, dirname);
    }
    return options2;
  }
  function createCachedDescriptors(dirname, options2, alias) {
    const {
      plugins: plugins2,
      presets,
      passPerPreset
    } = options2;
    return {
      options: optionsWithResolvedBrowserslistConfigFile(options2, dirname),
      plugins: plugins2 ? () => createCachedPluginDescriptors(plugins2, dirname)(alias) : () => handlerOf([]),
      presets: presets ? () => createCachedPresetDescriptors(presets, dirname)(alias)(!!passPerPreset) : () => handlerOf([])
    };
  }
  function createUncachedDescriptors(dirname, options2, alias) {
    return {
      options: optionsWithResolvedBrowserslistConfigFile(options2, dirname),
      plugins: (0, _functional.once)(() => createPluginDescriptors(options2.plugins || [], dirname, alias)),
      presets: (0, _functional.once)(() => createPresetDescriptors(options2.presets || [], dirname, alias, !!options2.passPerPreset))
    };
  }
  const PRESET_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap();
  const createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache2) => {
    const dirname = cache2.using((dir) => dir);
    return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
      const descriptors = yield* createPresetDescriptors(items, dirname, alias, passPerPreset);
      return descriptors.map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
    }));
  });
  const PLUGIN_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap();
  const createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache2) => {
    const dirname = cache2.using((dir) => dir);
    return (0, _caching.makeStrongCache)(function* (alias) {
      const descriptors = yield* createPluginDescriptors(items, dirname, alias);
      return descriptors.map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
    });
  });
  const DEFAULT_OPTIONS2 = {};
  function loadCachedDescriptor(cache2, desc) {
    const {
      value: value2,
      options: options2 = DEFAULT_OPTIONS2
    } = desc;
    if (options2 === false) return desc;
    let cacheByOptions = cache2.get(value2);
    if (!cacheByOptions) {
      cacheByOptions = /* @__PURE__ */ new WeakMap();
      cache2.set(value2, cacheByOptions);
    }
    let possibilities = cacheByOptions.get(options2);
    if (!possibilities) {
      possibilities = [];
      cacheByOptions.set(options2, possibilities);
    }
    if (possibilities.indexOf(desc) === -1) {
      const matches = possibilities.filter((possibility) => isEqualDescriptor(possibility, desc));
      if (matches.length > 0) {
        return matches[0];
      }
      possibilities.push(desc);
    }
    return desc;
  }
  function* createPresetDescriptors(items, dirname, alias, passPerPreset) {
    return yield* createDescriptors("preset", items, dirname, alias, passPerPreset);
  }
  function* createPluginDescriptors(items, dirname, alias) {
    return yield* createDescriptors("plugin", items, dirname, alias);
  }
  function* createDescriptors(type, items, dirname, alias, ownPass) {
    const descriptors = yield* _gensync().all(items.map((item2, index2) => createDescriptor(item2, dirname, {
      type,
      alias: `${alias}$${index2}`,
      ownPass: !!ownPass
    })));
    assertNoDuplicates(descriptors);
    return descriptors;
  }
  function* createDescriptor(pair, dirname, {
    type,
    alias,
    ownPass
  }) {
    const desc = (0, _item.getItemDescriptor)(pair);
    if (desc) {
      return desc;
    }
    let name;
    let options2;
    let value2 = pair;
    if (Array.isArray(value2)) {
      if (value2.length === 3) {
        [value2, options2, name] = value2;
      } else {
        [value2, options2] = value2;
      }
    }
    let file2 = void 0;
    let filepath = null;
    if (typeof value2 === "string") {
      if (typeof type !== "string") {
        throw new Error("To resolve a string-based item, the type of item must be given");
      }
      const resolver = type === "plugin" ? _index.loadPlugin : _index.loadPreset;
      const request = value2;
      ({
        filepath,
        value: value2
      } = yield* resolver(value2, dirname));
      file2 = {
        request,
        resolved: filepath
      };
    }
    if (!value2) {
      throw new Error(`Unexpected falsy value: ${String(value2)}`);
    }
    if (typeof value2 === "object" && value2.__esModule) {
      if (value2.default) {
        value2 = value2.default;
      } else {
        throw new Error("Must export a default export when using ES6 modules.");
      }
    }
    if (typeof value2 !== "object" && typeof value2 !== "function") {
      throw new Error(`Unsupported format: ${typeof value2}. Expected an object or a function.`);
    }
    if (filepath !== null && typeof value2 === "object" && value2) {
      throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
    }
    return {
      name,
      alias: filepath || alias,
      value: value2,
      options: options2,
      dirname,
      ownPass,
      file: file2
    };
  }
  function assertNoDuplicates(items) {
    const map = /* @__PURE__ */ new Map();
    for (const item2 of items) {
      if (typeof item2.value !== "function") continue;
      let nameMap = map.get(item2.value);
      if (!nameMap) {
        nameMap = /* @__PURE__ */ new Set();
        map.set(item2.value, nameMap);
      }
      if (nameMap.has(item2.name)) {
        const conflicts = items.filter((i) => i.value === item2.value);
        throw new Error([`Duplicate plugin/preset detected.`, `If you'd like to use two separate instances of a plugin,`, `they need separate names, e.g.`, ``, `  plugins: [`, `    ['some-plugin', {}],`, `    ['some-plugin', {}, 'some unique name'],`, `  ]`, ``, `Duplicates detected are:`, `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
      }
      nameMap.add(item2.name);
    }
  }
  return configDescriptors;
}
var hasRequiredItem;
function requireItem() {
  if (hasRequiredItem) return item;
  hasRequiredItem = 1;
  Object.defineProperty(item, "__esModule", {
    value: true
  });
  item.createConfigItem = createConfigItem;
  item.createItemFromDescriptor = createItemFromDescriptor;
  item.getItemDescriptor = getItemDescriptor;
  function _path() {
    const data = pathExports;
    _path = function() {
      return data;
    };
    return data;
  }
  var _configDescriptors = requireConfigDescriptors();
  function createItemFromDescriptor(desc) {
    return new ConfigItem(desc);
  }
  function* createConfigItem(value2, {
    dirname = ".",
    type
  } = {}) {
    const descriptor = yield* (0, _configDescriptors.createDescriptor)(value2, _path().resolve(dirname), {
      type,
      alias: "programmatic item"
    });
    return createItemFromDescriptor(descriptor);
  }
  const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
  function getItemDescriptor(item2) {
    if (item2 != null && item2[CONFIG_ITEM_BRAND]) {
      return item2._descriptor;
    }
    return void 0;
  }
  class ConfigItem {
    constructor(descriptor) {
      this._descriptor = void 0;
      this[CONFIG_ITEM_BRAND] = true;
      this.value = void 0;
      this.options = void 0;
      this.dirname = void 0;
      this.name = void 0;
      this.file = void 0;
      this._descriptor = descriptor;
      Object.defineProperty(this, "_descriptor", {
        enumerable: false
      });
      Object.defineProperty(this, CONFIG_ITEM_BRAND, {
        enumerable: false
      });
      this.value = this._descriptor.value;
      this.options = this._descriptor.options;
      this.dirname = this._descriptor.dirname;
      this.name = this._descriptor.name;
      this.file = this._descriptor.file ? {
        request: this._descriptor.file.request,
        resolved: this._descriptor.file.resolved
      } : void 0;
      Object.freeze(this);
    }
  }
  Object.freeze(ConfigItem.prototype);
  return item;
}
var configChain = {};
var options = {};
var removed = {};
var hasRequiredRemoved;
function requireRemoved() {
  if (hasRequiredRemoved) return removed;
  hasRequiredRemoved = 1;
  Object.defineProperty(removed, "__esModule", {
    value: true
  });
  removed.default = void 0;
  removed.default = {
    auxiliaryComment: {
      message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
    },
    blacklist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    breakConfig: {
      message: "This is not a necessary option in Babel 6"
    },
    experimental: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    externalHelpers: {
      message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"
    },
    extra: {
      message: ""
    },
    jsxPragma: {
      message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
    },
    loose: {
      message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."
    },
    metadataUsedHelpers: {
      message: "Not required anymore as this is enabled by default"
    },
    modules: {
      message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"
    },
    nonStandard: {
      message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
    },
    optional: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    sourceMapName: {
      message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."
    },
    stage: {
      message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
    },
    whitelist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    resolveModuleSource: {
      version: 6,
      message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
    },
    metadata: {
      version: 6,
      message: "Generated plugin metadata is always included in the output result"
    },
    sourceMapTarget: {
      version: 6,
      message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."
    }
  };
  return removed;
}
var optionAssertions = {};
var hasRequiredOptionAssertions;
function requireOptionAssertions() {
  if (hasRequiredOptionAssertions) return optionAssertions;
  hasRequiredOptionAssertions = 1;
  Object.defineProperty(optionAssertions, "__esModule", {
    value: true
  });
  optionAssertions.access = access;
  optionAssertions.assertArray = assertArray;
  optionAssertions.assertAssumptions = assertAssumptions;
  optionAssertions.assertBabelrcSearch = assertBabelrcSearch;
  optionAssertions.assertBoolean = assertBoolean;
  optionAssertions.assertCallerMetadata = assertCallerMetadata;
  optionAssertions.assertCompact = assertCompact;
  optionAssertions.assertConfigApplicableTest = assertConfigApplicableTest;
  optionAssertions.assertConfigFileSearch = assertConfigFileSearch;
  optionAssertions.assertFunction = assertFunction;
  optionAssertions.assertIgnoreList = assertIgnoreList;
  optionAssertions.assertInputSourceMap = assertInputSourceMap;
  optionAssertions.assertObject = assertObject;
  optionAssertions.assertPluginList = assertPluginList;
  optionAssertions.assertRootMode = assertRootMode;
  optionAssertions.assertSourceMaps = assertSourceMaps;
  optionAssertions.assertSourceType = assertSourceType;
  optionAssertions.assertString = assertString;
  optionAssertions.assertTargets = assertTargets;
  optionAssertions.msg = msg;
  function _helperCompilationTargets() {
    const data = requireLib$y();
    _helperCompilationTargets = function() {
      return data;
    };
    return data;
  }
  var _options = requireOptions();
  function msg(loc) {
    switch (loc.type) {
      case "root":
        return ``;
      case "env":
        return `${msg(loc.parent)}.env["${loc.name}"]`;
      case "overrides":
        return `${msg(loc.parent)}.overrides[${loc.index}]`;
      case "option":
        return `${msg(loc.parent)}.${loc.name}`;
      case "access":
        return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
      default:
        throw new Error(`Assertion failure: Unknown type ${loc.type}`);
    }
  }
  function access(loc, name) {
    return {
      type: "access",
      name,
      parent: loc
    };
  }
  function assertRootMode(loc, value2) {
    if (value2 !== void 0 && value2 !== "root" && value2 !== "upward" && value2 !== "upward-optional") {
      throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
    }
    return value2;
  }
  function assertSourceMaps(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean" && value2 !== "inline" && value2 !== "both") {
      throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
    }
    return value2;
  }
  function assertCompact(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean" && value2 !== "auto") {
      throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
    }
    return value2;
  }
  function assertSourceType(loc, value2) {
    if (value2 !== void 0 && value2 !== "module" && value2 !== "script" && value2 !== "unambiguous") {
      throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
    }
    return value2;
  }
  function assertCallerMetadata(loc, value2) {
    const obj = assertObject(loc, value2);
    if (obj) {
      if (typeof obj.name !== "string") {
        throw new Error(`${msg(loc)} set but does not contain "name" property string`);
      }
      for (const prop of Object.keys(obj)) {
        const propLoc = access(loc, prop);
        const value3 = obj[prop];
        if (value3 != null && typeof value3 !== "boolean" && typeof value3 !== "string" && typeof value3 !== "number") {
          throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
        }
      }
    }
    return value2;
  }
  function assertInputSourceMap(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean" && (typeof value2 !== "object" || !value2)) {
      throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
    }
    return value2;
  }
  function assertString(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "string") {
      throw new Error(`${msg(loc)} must be a string, or undefined`);
    }
    return value2;
  }
  function assertFunction(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "function") {
      throw new Error(`${msg(loc)} must be a function, or undefined`);
    }
    return value2;
  }
  function assertBoolean(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean") {
      throw new Error(`${msg(loc)} must be a boolean, or undefined`);
    }
    return value2;
  }
  function assertObject(loc, value2) {
    if (value2 !== void 0 && (typeof value2 !== "object" || Array.isArray(value2) || !value2)) {
      throw new Error(`${msg(loc)} must be an object, or undefined`);
    }
    return value2;
  }
  function assertArray(loc, value2) {
    if (value2 != null && !Array.isArray(value2)) {
      throw new Error(`${msg(loc)} must be an array, or undefined`);
    }
    return value2;
  }
  function assertIgnoreList(loc, value2) {
    const arr = assertArray(loc, value2);
    arr == null || arr.forEach((item2, i) => assertIgnoreItem(access(loc, i), item2));
    return arr;
  }
  function assertIgnoreItem(loc, value2) {
    if (typeof value2 !== "string" && typeof value2 !== "function" && !(value2 instanceof RegExp)) {
      throw new Error(`${msg(loc)} must be an array of string/Function/RegExp values, or undefined`);
    }
    return value2;
  }
  function assertConfigApplicableTest(loc, value2) {
    if (value2 === void 0) {
      return value2;
    }
    if (Array.isArray(value2)) {
      value2.forEach((item2, i) => {
        if (!checkValidTest(item2)) {
          throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
        }
      });
    } else if (!checkValidTest(value2)) {
      throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
    }
    return value2;
  }
  function checkValidTest(value2) {
    return typeof value2 === "string" || typeof value2 === "function" || value2 instanceof RegExp;
  }
  function assertConfigFileSearch(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean" && typeof value2 !== "string") {
      throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value2)}`);
    }
    return value2;
  }
  function assertBabelrcSearch(loc, value2) {
    if (value2 === void 0 || typeof value2 === "boolean") {
      return value2;
    }
    if (Array.isArray(value2)) {
      value2.forEach((item2, i) => {
        if (!checkValidTest(item2)) {
          throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
        }
      });
    } else if (!checkValidTest(value2)) {
      throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value2)}`);
    }
    return value2;
  }
  function assertPluginList(loc, value2) {
    const arr = assertArray(loc, value2);
    if (arr) {
      arr.forEach((item2, i) => assertPluginItem(access(loc, i), item2));
    }
    return arr;
  }
  function assertPluginItem(loc, value2) {
    if (Array.isArray(value2)) {
      if (value2.length === 0) {
        throw new Error(`${msg(loc)} must include an object`);
      }
      if (value2.length > 3) {
        throw new Error(`${msg(loc)} may only be a two-tuple or three-tuple`);
      }
      assertPluginTarget(access(loc, 0), value2[0]);
      if (value2.length > 1) {
        const opts = value2[1];
        if (opts !== void 0 && opts !== false && (typeof opts !== "object" || Array.isArray(opts) || opts === null)) {
          throw new Error(`${msg(access(loc, 1))} must be an object, false, or undefined`);
        }
      }
      if (value2.length === 3) {
        const name = value2[2];
        if (name !== void 0 && typeof name !== "string") {
          throw new Error(`${msg(access(loc, 2))} must be a string, or undefined`);
        }
      }
    } else {
      assertPluginTarget(loc, value2);
    }
    return value2;
  }
  function assertPluginTarget(loc, value2) {
    if ((typeof value2 !== "object" || !value2) && typeof value2 !== "string" && typeof value2 !== "function") {
      throw new Error(`${msg(loc)} must be a string, object, function`);
    }
    return value2;
  }
  function assertTargets(loc, value2) {
    if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) return value2;
    if (typeof value2 !== "object" || !value2 || Array.isArray(value2)) {
      throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
    }
    const browsersLoc = access(loc, "browsers");
    const esmodulesLoc = access(loc, "esmodules");
    assertBrowsersList(browsersLoc, value2.browsers);
    assertBoolean(esmodulesLoc, value2.esmodules);
    for (const key2 of Object.keys(value2)) {
      const val = value2[key2];
      const subLoc = access(loc, key2);
      if (key2 === "esmodules") assertBoolean(subLoc, val);
      else if (key2 === "browsers") assertBrowsersList(subLoc, val);
      else if (!hasOwnProperty.call(_helperCompilationTargets().TargetNames, key2)) {
        const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
        throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
      } else assertBrowserVersion(subLoc, val);
    }
    return value2;
  }
  function assertBrowsersList(loc, value2) {
    if (value2 !== void 0 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) {
      throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
    }
  }
  function assertBrowserVersion(loc, value2) {
    if (typeof value2 === "number" && Math.round(value2) === value2) return;
    if (typeof value2 === "string") return;
    throw new Error(`${msg(loc)} must be a string or an integer number`);
  }
  function assertAssumptions(loc, value2) {
    if (value2 === void 0) return;
    if (typeof value2 !== "object" || value2 === null) {
      throw new Error(`${msg(loc)} must be an object or undefined.`);
    }
    let root2 = loc;
    do {
      root2 = root2.parent;
    } while (root2.type !== "root");
    const inPreset = root2.source === "preset";
    for (const name of Object.keys(value2)) {
      const subLoc = access(loc, name);
      if (!_options.assumptionsNames.has(name)) {
        throw new Error(`${msg(subLoc)} is not a supported assumption.`);
      }
      if (typeof value2[name] !== "boolean") {
        throw new Error(`${msg(subLoc)} must be a boolean.`);
      }
      if (inPreset && value2[name] === false) {
        throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
      }
    }
    return value2;
  }
  return optionAssertions;
}
var configError = {};
var rewriteStackTrace = {};
var hasRequiredRewriteStackTrace;
function requireRewriteStackTrace() {
  if (hasRequiredRewriteStackTrace) return rewriteStackTrace;
  hasRequiredRewriteStackTrace = 1;
  Object.defineProperty(rewriteStackTrace, "__esModule", {
    value: true
  });
  rewriteStackTrace.beginHiddenCallStack = beginHiddenCallStack;
  rewriteStackTrace.endHiddenCallStack = endHiddenCallStack;
  rewriteStackTrace.expectedError = expectedError;
  rewriteStackTrace.injectVirtualStackFrame = injectVirtualStackFrame;
  var _Object$getOwnPropert;
  const ErrorToString = Function.call.bind(Error.prototype.toString);
  const SUPPORTED = !!Error.captureStackTrace && ((_Object$getOwnPropert = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit")) == null ? void 0 : _Object$getOwnPropert.writable) === true;
  const START_HIDING = "startHiding - secret - don't use this - v1";
  const STOP_HIDING = "stopHiding - secret - don't use this - v1";
  const expectedErrors = /* @__PURE__ */ new WeakSet();
  const virtualFrames = /* @__PURE__ */ new WeakMap();
  function CallSite(filename) {
    return /* @__PURE__ */ Object.create({
      isNative: () => false,
      isConstructor: () => false,
      isToplevel: () => true,
      getFileName: () => filename,
      getLineNumber: () => void 0,
      getColumnNumber: () => void 0,
      getFunctionName: () => void 0,
      getMethodName: () => void 0,
      getTypeName: () => void 0,
      toString: () => filename
    });
  }
  function injectVirtualStackFrame(error2, filename) {
    if (!SUPPORTED) return;
    let frames = virtualFrames.get(error2);
    if (!frames) virtualFrames.set(error2, frames = []);
    frames.push(CallSite(filename));
    return error2;
  }
  function expectedError(error2) {
    if (!SUPPORTED) return;
    expectedErrors.add(error2);
    return error2;
  }
  function beginHiddenCallStack(fn2) {
    if (!SUPPORTED) return fn2;
    return Object.defineProperty(function(...args) {
      setupPrepareStackTrace();
      return fn2(...args);
    }, "name", {
      value: STOP_HIDING
    });
  }
  function endHiddenCallStack(fn2) {
    if (!SUPPORTED) return fn2;
    return Object.defineProperty(function(...args) {
      return fn2(...args);
    }, "name", {
      value: START_HIDING
    });
  }
  function setupPrepareStackTrace() {
    setupPrepareStackTrace = () => {
    };
    const {
      prepareStackTrace = defaultPrepareStackTrace
    } = Error;
    const MIN_STACK_TRACE_LIMIT = 50;
    Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, MIN_STACK_TRACE_LIMIT));
    Error.prepareStackTrace = function stackTraceRewriter(err, trace) {
      let newTrace = [];
      const isExpected = expectedErrors.has(err);
      let status = isExpected ? "hiding" : "unknown";
      for (let i = 0; i < trace.length; i++) {
        const name = trace[i].getFunctionName();
        if (name === START_HIDING) {
          status = "hiding";
        } else if (name === STOP_HIDING) {
          if (status === "hiding") {
            status = "showing";
            if (virtualFrames.has(err)) {
              newTrace.unshift(...virtualFrames.get(err));
            }
          } else if (status === "unknown") {
            newTrace = trace;
            break;
          }
        } else if (status !== "hiding") {
          newTrace.push(trace[i]);
        }
      }
      return prepareStackTrace(err, newTrace);
    };
  }
  function defaultPrepareStackTrace(err, trace) {
    if (trace.length === 0) return ErrorToString(err);
    return `${ErrorToString(err)}
    at ${trace.join("\n    at ")}`;
  }
  return rewriteStackTrace;
}
var hasRequiredConfigError;
function requireConfigError() {
  if (hasRequiredConfigError) return configError;
  hasRequiredConfigError = 1;
  Object.defineProperty(configError, "__esModule", {
    value: true
  });
  configError.default = void 0;
  var _rewriteStackTrace = requireRewriteStackTrace();
  class ConfigError extends Error {
    constructor(message, filename) {
      super(message);
      (0, _rewriteStackTrace.expectedError)(this);
      if (filename) (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
    }
  }
  configError.default = ConfigError;
  return configError;
}
var hasRequiredOptions;
function requireOptions() {
  if (hasRequiredOptions) return options;
  hasRequiredOptions = 1;
  Object.defineProperty(options, "__esModule", {
    value: true
  });
  options.assumptionsNames = void 0;
  options.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;
  options.validate = validate2;
  var _removed = requireRemoved();
  var _optionAssertions = requireOptionAssertions();
  var _configError = requireConfigError();
  const ROOT_VALIDATORS = {
    cwd: _optionAssertions.assertString,
    root: _optionAssertions.assertString,
    rootMode: _optionAssertions.assertRootMode,
    configFile: _optionAssertions.assertConfigFileSearch,
    caller: _optionAssertions.assertCallerMetadata,
    filename: _optionAssertions.assertString,
    filenameRelative: _optionAssertions.assertString,
    code: _optionAssertions.assertBoolean,
    ast: _optionAssertions.assertBoolean,
    cloneInputAst: _optionAssertions.assertBoolean,
    envName: _optionAssertions.assertString
  };
  const BABELRC_VALIDATORS = {
    babelrc: _optionAssertions.assertBoolean,
    babelrcRoots: _optionAssertions.assertBabelrcSearch
  };
  const NONPRESET_VALIDATORS = {
    extends: _optionAssertions.assertString,
    ignore: _optionAssertions.assertIgnoreList,
    only: _optionAssertions.assertIgnoreList,
    targets: _optionAssertions.assertTargets,
    browserslistConfigFile: _optionAssertions.assertConfigFileSearch,
    browserslistEnv: _optionAssertions.assertString
  };
  const COMMON_VALIDATORS = {
    inputSourceMap: _optionAssertions.assertInputSourceMap,
    presets: _optionAssertions.assertPluginList,
    plugins: _optionAssertions.assertPluginList,
    passPerPreset: _optionAssertions.assertBoolean,
    assumptions: _optionAssertions.assertAssumptions,
    env: assertEnvSet,
    overrides: assertOverridesList,
    test: _optionAssertions.assertConfigApplicableTest,
    include: _optionAssertions.assertConfigApplicableTest,
    exclude: _optionAssertions.assertConfigApplicableTest,
    retainLines: _optionAssertions.assertBoolean,
    comments: _optionAssertions.assertBoolean,
    shouldPrintComment: _optionAssertions.assertFunction,
    compact: _optionAssertions.assertCompact,
    minified: _optionAssertions.assertBoolean,
    auxiliaryCommentBefore: _optionAssertions.assertString,
    auxiliaryCommentAfter: _optionAssertions.assertString,
    sourceType: _optionAssertions.assertSourceType,
    wrapPluginVisitorMethod: _optionAssertions.assertFunction,
    highlightCode: _optionAssertions.assertBoolean,
    sourceMaps: _optionAssertions.assertSourceMaps,
    sourceMap: _optionAssertions.assertSourceMaps,
    sourceFileName: _optionAssertions.assertString,
    sourceRoot: _optionAssertions.assertString,
    parserOpts: _optionAssertions.assertObject,
    generatorOpts: _optionAssertions.assertObject
  };
  {
    Object.assign(COMMON_VALIDATORS, {
      getModuleId: _optionAssertions.assertFunction,
      moduleRoot: _optionAssertions.assertString,
      moduleIds: _optionAssertions.assertBoolean,
      moduleId: _optionAssertions.assertString
    });
  }
  const knownAssumptions = ["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "noUninitializedPrivateFieldAccess", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"];
  options.assumptionsNames = new Set(knownAssumptions);
  function getSource(loc) {
    return loc.type === "root" ? loc.source : getSource(loc.parent);
  }
  function validate2(type, opts, filename) {
    try {
      return validateNested({
        type: "root",
        source: type
      }, opts);
    } catch (error2) {
      const configError2 = new _configError.default(error2.message, filename);
      if (error2.code) configError2.code = error2.code;
      throw configError2;
    }
  }
  function validateNested(loc, opts) {
    const type = getSource(loc);
    assertNoDuplicateSourcemap(opts);
    Object.keys(opts).forEach((key2) => {
      const optLoc = {
        type: "option",
        name: key2,
        parent: loc
      };
      if (type === "preset" && NONPRESET_VALIDATORS[key2]) {
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
      }
      if (type !== "arguments" && ROOT_VALIDATORS[key2]) {
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
      }
      if (type !== "arguments" && type !== "configfile" && BABELRC_VALIDATORS[key2]) {
        if (type === "babelrcfile" || type === "extendsfile") {
          throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
        }
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
      }
      const validator2 = COMMON_VALIDATORS[key2] || NONPRESET_VALIDATORS[key2] || BABELRC_VALIDATORS[key2] || ROOT_VALIDATORS[key2] || throwUnknownError;
      validator2(optLoc, opts[key2]);
    });
    return opts;
  }
  function throwUnknownError(loc) {
    const key2 = loc.name;
    if (_removed.default[key2]) {
      const {
        message,
        version: version2 = 5
      } = _removed.default[key2];
      throw new Error(`Using removed Babel ${version2} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
    } else {
      const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
      unknownOptErr.code = "BABEL_UNKNOWN_OPTION";
      throw unknownOptErr;
    }
  }
  function assertNoDuplicateSourcemap(opts) {
    if (hasOwnProperty.call(opts, "sourceMap") && hasOwnProperty.call(opts, "sourceMaps")) {
      throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
    }
  }
  function assertEnvSet(loc, value2) {
    if (loc.parent.type === "env") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
    }
    const parent = loc.parent;
    const obj = (0, _optionAssertions.assertObject)(loc, value2);
    if (obj) {
      for (const envName of Object.keys(obj)) {
        const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
        if (!env) continue;
        const envLoc = {
          type: "env",
          name: envName,
          parent
        };
        validateNested(envLoc, env);
      }
    }
    return obj;
  }
  function assertOverridesList(loc, value2) {
    if (loc.parent.type === "env") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
    }
    if (loc.parent.type === "overrides") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
    }
    const parent = loc.parent;
    const arr = (0, _optionAssertions.assertArray)(loc, value2);
    if (arr) {
      for (const [index2, item2] of arr.entries()) {
        const objLoc = (0, _optionAssertions.access)(loc, index2);
        const env = (0, _optionAssertions.assertObject)(objLoc, item2);
        if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
        const overridesLoc = {
          type: "overrides",
          index: index2,
          parent
        };
        validateNested(overridesLoc, env);
      }
    }
    return arr;
  }
  function checkNoUnwrappedItemOptionPairs(items, index2, type, e) {
    if (index2 === 0) return;
    const lastItem = items[index2 - 1];
    const thisItem = items[index2];
    if (lastItem.file && lastItem.options === void 0 && typeof thisItem.value === "object") {
      e.message += `
- Maybe you meant to use
"${type}s": [
  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, void 0, 2)}]
]
To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;
    }
  }
  return options;
}
var patternToRegex = {};
var hasRequiredPatternToRegex;
function requirePatternToRegex() {
  if (hasRequiredPatternToRegex) return patternToRegex;
  hasRequiredPatternToRegex = 1;
  Object.defineProperty(patternToRegex, "__esModule", {
    value: true
  });
  patternToRegex.default = pathToPattern;
  function _path() {
    const data = pathExports;
    _path = function() {
      return data;
    };
    return data;
  }
  const sep = `\\${_path().sep}`;
  const endSep = `(?:${sep}|$)`;
  const substitution = `[^${sep}]+`;
  const starPat = `(?:${substitution}${sep})`;
  const starPatLast = `(?:${substitution}${endSep})`;
  const starStarPat = `${starPat}*?`;
  const starStarPatLast = `${starPat}*?${starPatLast}?`;
  function escapeRegExp(string2) {
    return string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
  }
  function pathToPattern(pattern, dirname) {
    const parts = _path().resolve(dirname, pattern).split(_path().sep);
    return new RegExp(["^", ...parts.map((part, i) => {
      const last = i === parts.length - 1;
      if (part === "**") return last ? starStarPatLast : starStarPat;
      if (part === "*") return last ? starPatLast : starPat;
      if (part.indexOf("*.") === 0) {
        return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);
      }
      return escapeRegExp(part) + (last ? endSep : sep);
    })].join(""));
  }
  return patternToRegex;
}
var printer = {};
var hasRequiredPrinter;
function requirePrinter() {
  if (hasRequiredPrinter) return printer;
  hasRequiredPrinter = 1;
  Object.defineProperty(printer, "__esModule", {
    value: true
  });
  printer.ConfigPrinter = printer.ChainFormatter = void 0;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  const ChainFormatter = printer.ChainFormatter = {
    Programmatic: 0,
    Config: 1
  };
  const Formatter = {
    title(type, callerName, filepath) {
      let title = "";
      if (type === ChainFormatter.Programmatic) {
        title = "programmatic options";
        if (callerName) {
          title += " from " + callerName;
        }
      } else {
        title = "config " + filepath;
      }
      return title;
    },
    loc(index2, envName) {
      let loc = "";
      if (index2 != null) {
        loc += `.overrides[${index2}]`;
      }
      if (envName != null) {
        loc += `.env["${envName}"]`;
      }
      return loc;
    },
    *optionsAndDescriptors(opt) {
      const content = Object.assign({}, opt.options);
      delete content.overrides;
      delete content.env;
      const pluginDescriptors = [...yield* opt.plugins()];
      if (pluginDescriptors.length) {
        content.plugins = pluginDescriptors.map((d) => descriptorToConfig(d));
      }
      const presetDescriptors = [...yield* opt.presets()];
      if (presetDescriptors.length) {
        content.presets = [...presetDescriptors].map((d) => descriptorToConfig(d));
      }
      return JSON.stringify(content, void 0, 2);
    }
  };
  function descriptorToConfig(d) {
    var _d$file;
    let name = (_d$file = d.file) == null ? void 0 : _d$file.request;
    if (name == null) {
      if (typeof d.value === "object") {
        name = d.value;
      } else if (typeof d.value === "function") {
        name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`;
      }
    }
    if (name == null) {
      name = "[Unknown]";
    }
    if (d.options === void 0) {
      return name;
    } else if (d.name == null) {
      return [name, d.options];
    } else {
      return [name, d.options, d.name];
    }
  }
  class ConfigPrinter {
    constructor() {
      this._stack = [];
    }
    configure(enabled, type, {
      callerName,
      filepath
    }) {
      if (!enabled) return () => {
      };
      return (content, index2, envName) => {
        this._stack.push({
          type,
          callerName,
          filepath,
          content,
          index: index2,
          envName
        });
      };
    }
    static *format(config2) {
      let title = Formatter.title(config2.type, config2.callerName, config2.filepath);
      const loc = Formatter.loc(config2.index, config2.envName);
      if (loc) title += ` ${loc}`;
      const content = yield* Formatter.optionsAndDescriptors(config2.content);
      return `${title}
${content}`;
    }
    *output() {
      if (this._stack.length === 0) return "";
      const configs = yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)));
      return configs.join("\n\n");
    }
  }
  printer.ConfigPrinter = ConfigPrinter;
  return printer;
}
var hasRequiredConfigChain;
function requireConfigChain() {
  if (hasRequiredConfigChain) return configChain;
  hasRequiredConfigChain = 1;
  Object.defineProperty(configChain, "__esModule", {
    value: true
  });
  configChain.buildPresetChain = buildPresetChain;
  configChain.buildPresetChainWalker = void 0;
  configChain.buildRootChain = buildRootChain;
  function _path() {
    const data = pathExports;
    _path = function() {
      return data;
    };
    return data;
  }
  function _debug() {
    const data = browserExports$1;
    _debug = function() {
      return data;
    };
    return data;
  }
  var _options = requireOptions();
  var _patternToRegex = requirePatternToRegex();
  var _printer = requirePrinter();
  var _rewriteStackTrace = requireRewriteStackTrace();
  var _configError = requireConfigError();
  var _index = requireIndexBrowser();
  var _caching = requireCaching();
  var _configDescriptors = requireConfigDescriptors();
  const debug2 = _debug()("babel:config:config-chain");
  function* buildPresetChain(arg, context2) {
    const chain = yield* buildPresetChainWalker(arg, context2);
    if (!chain) return null;
    return {
      plugins: dedupDescriptors(chain.plugins),
      presets: dedupDescriptors(chain.presets),
      options: chain.options.map((o) => normalizeOptions(o)),
      files: /* @__PURE__ */ new Set()
    };
  }
  const buildPresetChainWalker = configChain.buildPresetChainWalker = makeChainWalker({
    root: (preset) => loadPresetDescriptors(preset),
    env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),
    overrides: (preset, index2) => loadPresetOverridesDescriptors(preset)(index2),
    overridesEnv: (preset, index2, envName) => loadPresetOverridesEnvDescriptors(preset)(index2)(envName),
    createLogger: () => () => {
    }
  });
  const loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors));
  const loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName)));
  const loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index2) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index2)));
  const loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index2) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index2, envName))));
  function* buildRootChain(opts, context2) {
    let configReport, babelRcReport;
    const programmaticLogger = new _printer.ConfigPrinter();
    const programmaticChain = yield* loadProgrammaticChain({
      options: opts,
      dirname: context2.cwd
    }, context2, void 0, programmaticLogger);
    if (!programmaticChain) return null;
    const programmaticReport = yield* programmaticLogger.output();
    let configFile;
    if (typeof opts.configFile === "string") {
      configFile = yield* (0, _index.loadConfig)(opts.configFile, context2.cwd, context2.envName, context2.caller);
    } else if (opts.configFile !== false) {
      configFile = yield* (0, _index.findRootConfig)(context2.root, context2.envName, context2.caller);
    }
    let {
      babelrc,
      babelrcRoots
    } = opts;
    let babelrcRootsDirectory = context2.cwd;
    const configFileChain = emptyChain();
    const configFileLogger = new _printer.ConfigPrinter();
    if (configFile) {
      const validatedFile = validateConfigFile(configFile);
      const result = yield* loadFileChain(validatedFile, context2, void 0, configFileLogger);
      if (!result) return null;
      configReport = yield* configFileLogger.output();
      if (babelrc === void 0) {
        babelrc = validatedFile.options.babelrc;
      }
      if (babelrcRoots === void 0) {
        babelrcRootsDirectory = validatedFile.dirname;
        babelrcRoots = validatedFile.options.babelrcRoots;
      }
      mergeChain(configFileChain, result);
    }
    let ignoreFile, babelrcFile;
    let isIgnored = false;
    const fileChain = emptyChain();
    if ((babelrc === true || babelrc === void 0) && typeof context2.filename === "string") {
      const pkgData = yield* (0, _index.findPackageData)(context2.filename);
      if (pkgData && babelrcLoadEnabled(context2, pkgData, babelrcRoots, babelrcRootsDirectory)) {
        ({
          ignore: ignoreFile,
          config: babelrcFile
        } = yield* (0, _index.findRelativeConfig)(pkgData, context2.envName, context2.caller));
        if (ignoreFile) {
          fileChain.files.add(ignoreFile.filepath);
        }
        if (ignoreFile && shouldIgnore(context2, ignoreFile.ignore, null, ignoreFile.dirname)) {
          isIgnored = true;
        }
        if (babelrcFile && !isIgnored) {
          const validatedFile = validateBabelrcFile(babelrcFile);
          const babelrcLogger = new _printer.ConfigPrinter();
          const result = yield* loadFileChain(validatedFile, context2, void 0, babelrcLogger);
          if (!result) {
            isIgnored = true;
          } else {
            babelRcReport = yield* babelrcLogger.output();
            mergeChain(fileChain, result);
          }
        }
        if (babelrcFile && isIgnored) {
          fileChain.files.add(babelrcFile.filepath);
        }
      }
    }
    if (context2.showConfig) {
      console.log(`Babel configs on "${context2.filename}" (ascending priority):
` + [configReport, babelRcReport, programmaticReport].filter((x2) => !!x2).join("\n\n") + "\n-----End Babel configs-----");
    }
    const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
    return {
      plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),
      presets: isIgnored ? [] : dedupDescriptors(chain.presets),
      options: isIgnored ? [] : chain.options.map((o) => normalizeOptions(o)),
      fileHandling: isIgnored ? "ignored" : "transpile",
      ignore: ignoreFile || void 0,
      babelrc: babelrcFile || void 0,
      config: configFile || void 0,
      files: chain.files
    };
  }
  function babelrcLoadEnabled(context2, pkgData, babelrcRoots, babelrcRootsDirectory) {
    if (typeof babelrcRoots === "boolean") return babelrcRoots;
    const absoluteRoot = context2.root;
    if (babelrcRoots === void 0) {
      return pkgData.directories.indexOf(absoluteRoot) !== -1;
    }
    let babelrcPatterns = babelrcRoots;
    if (!Array.isArray(babelrcPatterns)) {
      babelrcPatterns = [babelrcPatterns];
    }
    babelrcPatterns = babelrcPatterns.map((pat) => {
      return typeof pat === "string" ? _path().resolve(babelrcRootsDirectory, pat) : pat;
    });
    if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {
      return pkgData.directories.indexOf(absoluteRoot) !== -1;
    }
    return babelrcPatterns.some((pat) => {
      if (typeof pat === "string") {
        pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory);
      }
      return pkgData.directories.some((directory) => {
        return matchPattern(pat, babelrcRootsDirectory, directory, context2);
      });
    });
  }
  const validateConfigFile = (0, _caching.makeWeakCacheSync)((file2) => ({
    filepath: file2.filepath,
    dirname: file2.dirname,
    options: (0, _options.validate)("configfile", file2.options, file2.filepath)
  }));
  const validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file2) => ({
    filepath: file2.filepath,
    dirname: file2.dirname,
    options: (0, _options.validate)("babelrcfile", file2.options, file2.filepath)
  }));
  const validateExtendFile = (0, _caching.makeWeakCacheSync)((file2) => ({
    filepath: file2.filepath,
    dirname: file2.dirname,
    options: (0, _options.validate)("extendsfile", file2.options, file2.filepath)
  }));
  const loadProgrammaticChain = makeChainWalker({
    root: (input2) => buildRootDescriptors(input2, "base", _configDescriptors.createCachedDescriptors),
    env: (input2, envName) => buildEnvDescriptors(input2, "base", _configDescriptors.createCachedDescriptors, envName),
    overrides: (input2, index2) => buildOverrideDescriptors(input2, "base", _configDescriptors.createCachedDescriptors, index2),
    overridesEnv: (input2, index2, envName) => buildOverrideEnvDescriptors(input2, "base", _configDescriptors.createCachedDescriptors, index2, envName),
    createLogger: (input2, context2, baseLogger) => buildProgrammaticLogger(input2, context2, baseLogger)
  });
  const loadFileChainWalker = makeChainWalker({
    root: (file2) => loadFileDescriptors(file2),
    env: (file2, envName) => loadFileEnvDescriptors(file2)(envName),
    overrides: (file2, index2) => loadFileOverridesDescriptors(file2)(index2),
    overridesEnv: (file2, index2, envName) => loadFileOverridesEnvDescriptors(file2)(index2)(envName),
    createLogger: (file2, context2, baseLogger) => buildFileLogger(file2.filepath, context2, baseLogger)
  });
  function* loadFileChain(input2, context2, files, baseLogger) {
    const chain = yield* loadFileChainWalker(input2, context2, files, baseLogger);
    chain == null || chain.files.add(input2.filepath);
    return chain;
  }
  const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file2) => buildRootDescriptors(file2, file2.filepath, _configDescriptors.createUncachedDescriptors));
  const loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file2) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file2, file2.filepath, _configDescriptors.createUncachedDescriptors, envName)));
  const loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file2) => (0, _caching.makeStrongCacheSync)((index2) => buildOverrideDescriptors(file2, file2.filepath, _configDescriptors.createUncachedDescriptors, index2)));
  const loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file2) => (0, _caching.makeStrongCacheSync)((index2) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file2, file2.filepath, _configDescriptors.createUncachedDescriptors, index2, envName))));
  function buildFileLogger(filepath, context2, baseLogger) {
    if (!baseLogger) {
      return () => {
      };
    }
    return baseLogger.configure(context2.showConfig, _printer.ChainFormatter.Config, {
      filepath
    });
  }
  function buildRootDescriptors({
    dirname,
    options: options2
  }, alias, descriptors) {
    return descriptors(dirname, options2, alias);
  }
  function buildProgrammaticLogger(_2, context2, baseLogger) {
    var _context$caller;
    if (!baseLogger) {
      return () => {
      };
    }
    return baseLogger.configure(context2.showConfig, _printer.ChainFormatter.Programmatic, {
      callerName: (_context$caller = context2.caller) == null ? void 0 : _context$caller.name
    });
  }
  function buildEnvDescriptors({
    dirname,
    options: options2
  }, alias, descriptors, envName) {
    var _options$env;
    const opts = (_options$env = options2.env) == null ? void 0 : _options$env[envName];
    return opts ? descriptors(dirname, opts, `${alias}.env["${envName}"]`) : null;
  }
  function buildOverrideDescriptors({
    dirname,
    options: options2
  }, alias, descriptors, index2) {
    var _options$overrides;
    const opts = (_options$overrides = options2.overrides) == null ? void 0 : _options$overrides[index2];
    if (!opts) throw new Error("Assertion failure - missing override");
    return descriptors(dirname, opts, `${alias}.overrides[${index2}]`);
  }
  function buildOverrideEnvDescriptors({
    dirname,
    options: options2
  }, alias, descriptors, index2, envName) {
    var _options$overrides2, _override$env;
    const override = (_options$overrides2 = options2.overrides) == null ? void 0 : _options$overrides2[index2];
    if (!override) throw new Error("Assertion failure - missing override");
    const opts = (_override$env = override.env) == null ? void 0 : _override$env[envName];
    return opts ? descriptors(dirname, opts, `${alias}.overrides[${index2}].env["${envName}"]`) : null;
  }
  function makeChainWalker({
    root: root2,
    env,
    overrides,
    overridesEnv,
    createLogger
  }) {
    return function* chainWalker(input2, context2, files = /* @__PURE__ */ new Set(), baseLogger) {
      const {
        dirname
      } = input2;
      const flattenedConfigs = [];
      const rootOpts = root2(input2);
      if (configIsApplicable(rootOpts, dirname, context2, input2.filepath)) {
        flattenedConfigs.push({
          config: rootOpts,
          envName: void 0,
          index: void 0
        });
        const envOpts = env(input2, context2.envName);
        if (envOpts && configIsApplicable(envOpts, dirname, context2, input2.filepath)) {
          flattenedConfigs.push({
            config: envOpts,
            envName: context2.envName,
            index: void 0
          });
        }
        (rootOpts.options.overrides || []).forEach((_2, index2) => {
          const overrideOps = overrides(input2, index2);
          if (configIsApplicable(overrideOps, dirname, context2, input2.filepath)) {
            flattenedConfigs.push({
              config: overrideOps,
              index: index2,
              envName: void 0
            });
            const overrideEnvOpts = overridesEnv(input2, index2, context2.envName);
            if (overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context2, input2.filepath)) {
              flattenedConfigs.push({
                config: overrideEnvOpts,
                index: index2,
                envName: context2.envName
              });
            }
          }
        });
      }
      if (flattenedConfigs.some(({
        config: {
          options: {
            ignore,
            only
          }
        }
      }) => shouldIgnore(context2, ignore, only, dirname))) {
        return null;
      }
      const chain = emptyChain();
      const logger = createLogger(input2, context2, baseLogger);
      for (const {
        config: config2,
        index: index2,
        envName
      } of flattenedConfigs) {
        if (!(yield* mergeExtendsChain(chain, config2.options, dirname, context2, files, baseLogger))) {
          return null;
        }
        logger(config2, index2, envName);
        yield* mergeChainOpts(chain, config2);
      }
      return chain;
    };
  }
  function* mergeExtendsChain(chain, opts, dirname, context2, files, baseLogger) {
    if (opts.extends === void 0) return true;
    const file2 = yield* (0, _index.loadConfig)(opts.extends, dirname, context2.envName, context2.caller);
    if (files.has(file2)) {
      throw new Error(`Configuration cycle detected loading ${file2.filepath}.
File already loaded following the config chain:
` + Array.from(files, (file3) => ` - ${file3.filepath}`).join("\n"));
    }
    files.add(file2);
    const fileChain = yield* loadFileChain(validateExtendFile(file2), context2, files, baseLogger);
    files.delete(file2);
    if (!fileChain) return false;
    mergeChain(chain, fileChain);
    return true;
  }
  function mergeChain(target, source2) {
    target.options.push(...source2.options);
    target.plugins.push(...source2.plugins);
    target.presets.push(...source2.presets);
    for (const file2 of source2.files) {
      target.files.add(file2);
    }
    return target;
  }
  function* mergeChainOpts(target, {
    options: options2,
    plugins: plugins2,
    presets
  }) {
    target.options.push(options2);
    target.plugins.push(...yield* plugins2());
    target.presets.push(...yield* presets());
    return target;
  }
  function emptyChain() {
    return {
      options: [],
      presets: [],
      plugins: [],
      files: /* @__PURE__ */ new Set()
    };
  }
  function normalizeOptions(opts) {
    const options2 = Object.assign({}, opts);
    delete options2.extends;
    delete options2.env;
    delete options2.overrides;
    delete options2.plugins;
    delete options2.presets;
    delete options2.passPerPreset;
    delete options2.ignore;
    delete options2.only;
    delete options2.test;
    delete options2.include;
    delete options2.exclude;
    if (hasOwnProperty.call(options2, "sourceMap")) {
      options2.sourceMaps = options2.sourceMap;
      delete options2.sourceMap;
    }
    return options2;
  }
  function dedupDescriptors(items) {
    const map = /* @__PURE__ */ new Map();
    const descriptors = [];
    for (const item2 of items) {
      if (typeof item2.value === "function") {
        const fnKey = item2.value;
        let nameMap = map.get(fnKey);
        if (!nameMap) {
          nameMap = /* @__PURE__ */ new Map();
          map.set(fnKey, nameMap);
        }
        let desc = nameMap.get(item2.name);
        if (!desc) {
          desc = {
            value: item2
          };
          descriptors.push(desc);
          if (!item2.ownPass) nameMap.set(item2.name, desc);
        } else {
          desc.value = item2;
        }
      } else {
        descriptors.push({
          value: item2
        });
      }
    }
    return descriptors.reduce((acc, desc) => {
      acc.push(desc.value);
      return acc;
    }, []);
  }
  function configIsApplicable({
    options: options2
  }, dirname, context2, configName) {
    return (options2.test === void 0 || configFieldIsApplicable(context2, options2.test, dirname, configName)) && (options2.include === void 0 || configFieldIsApplicable(context2, options2.include, dirname, configName)) && (options2.exclude === void 0 || !configFieldIsApplicable(context2, options2.exclude, dirname, configName));
  }
  function configFieldIsApplicable(context2, test2, dirname, configName) {
    const patterns = Array.isArray(test2) ? test2 : [test2];
    return matchesPatterns(context2, patterns, dirname, configName);
  }
  function ignoreListReplacer(_key, value2) {
    if (value2 instanceof RegExp) {
      return String(value2);
    }
    return value2;
  }
  function shouldIgnore(context2, ignore, only, dirname) {
    if (ignore && matchesPatterns(context2, ignore, dirname)) {
      var _context$filename;
      const message = `No config is applied to "${(_context$filename = context2.filename) != null ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname}"`;
      debug2(message);
      if (context2.showConfig) {
        console.log(message);
      }
      return true;
    }
    if (only && !matchesPatterns(context2, only, dirname)) {
      var _context$filename2;
      const message = `No config is applied to "${(_context$filename2 = context2.filename) != null ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname}"`;
      debug2(message);
      if (context2.showConfig) {
        console.log(message);
      }
      return true;
    }
    return false;
  }
  function matchesPatterns(context2, patterns, dirname, configName) {
    return patterns.some((pattern) => matchPattern(pattern, dirname, context2.filename, context2, configName));
  }
  function matchPattern(pattern, dirname, pathToTest, context2, configName) {
    if (typeof pattern === "function") {
      return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, {
        dirname,
        envName: context2.envName,
        caller: context2.caller
      });
    }
    if (typeof pathToTest !== "string") {
      throw new _configError.default(`Configuration contains string/RegExp pattern, but no filename was passed to Babel`, configName);
    }
    if (typeof pattern === "string") {
      pattern = (0, _patternToRegex.default)(pattern, dirname);
    }
    return pattern.test(pathToTest);
  }
  return configChain;
}
var plugins = {};
var hasRequiredPlugins;
function requirePlugins() {
  if (hasRequiredPlugins) return plugins;
  hasRequiredPlugins = 1;
  Object.defineProperty(plugins, "__esModule", {
    value: true
  });
  plugins.validatePluginObject = validatePluginObject;
  var _optionAssertions = requireOptionAssertions();
  const VALIDATORS = {
    name: _optionAssertions.assertString,
    manipulateOptions: _optionAssertions.assertFunction,
    pre: _optionAssertions.assertFunction,
    post: _optionAssertions.assertFunction,
    inherits: _optionAssertions.assertFunction,
    visitor: assertVisitorMap,
    parserOverride: _optionAssertions.assertFunction,
    generatorOverride: _optionAssertions.assertFunction
  };
  function assertVisitorMap(loc, value2) {
    const obj = (0, _optionAssertions.assertObject)(loc, value2);
    if (obj) {
      Object.keys(obj).forEach((prop) => {
        if (prop !== "_exploded" && prop !== "_verified") {
          assertVisitorHandler(prop, obj[prop]);
        }
      });
      if (obj.enter || obj.exit) {
        throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
      }
    }
    return obj;
  }
  function assertVisitorHandler(key2, value2) {
    if (value2 && typeof value2 === "object") {
      Object.keys(value2).forEach((handler) => {
        if (handler !== "enter" && handler !== "exit") {
          throw new Error(`.visitor["${key2}"] may only have .enter and/or .exit handlers.`);
        }
      });
    } else if (typeof value2 !== "function") {
      throw new Error(`.visitor["${key2}"] must be a function`);
    }
  }
  function validatePluginObject(obj) {
    const rootPath = {
      type: "root",
      source: "plugin"
    };
    Object.keys(obj).forEach((key2) => {
      const validator2 = VALIDATORS[key2];
      if (validator2) {
        const optLoc = {
          type: "option",
          name: key2,
          parent: rootPath
        };
        validator2(optLoc, obj[key2]);
      } else {
        const invalidPluginPropertyError = new Error(`.${key2} is not a valid Plugin property`);
        invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY";
        throw invalidPluginPropertyError;
      }
    });
    return obj;
  }
  return plugins;
}
var configApi = {};
var hasRequiredConfigApi;
function requireConfigApi() {
  if (hasRequiredConfigApi) return configApi;
  hasRequiredConfigApi = 1;
  Object.defineProperty(configApi, "__esModule", {
    value: true
  });
  configApi.makeConfigAPI = makeConfigAPI;
  configApi.makePluginAPI = makePluginAPI;
  configApi.makePresetAPI = makePresetAPI;
  function _semver() {
    const data = requireSemver();
    _semver = function() {
      return data;
    };
    return data;
  }
  var _index = requireLib$x();
  var _caching = requireCaching();
  function makeConfigAPI(cache2) {
    const env = (value2) => cache2.using((data) => {
      if (typeof value2 === "undefined") return data.envName;
      if (typeof value2 === "function") {
        return (0, _caching.assertSimpleType)(value2(data.envName));
      }
      return (Array.isArray(value2) ? value2 : [value2]).some((entry) => {
        if (typeof entry !== "string") {
          throw new Error("Unexpected non-string value");
        }
        return entry === data.envName;
      });
    });
    const caller = (cb) => cache2.using((data) => (0, _caching.assertSimpleType)(cb(data.caller)));
    return {
      version: _index.version,
      cache: cache2.simple(),
      env,
      async: () => false,
      caller,
      assertVersion
    };
  }
  function makePresetAPI(cache2, externalDependencies2) {
    const targets2 = () => JSON.parse(cache2.using((data) => JSON.stringify(data.targets)));
    const addExternalDependency = (ref) => {
      externalDependencies2.push(ref);
    };
    return Object.assign({}, makeConfigAPI(cache2), {
      targets: targets2,
      addExternalDependency
    });
  }
  function makePluginAPI(cache2, externalDependencies2) {
    const assumption = (name) => cache2.using((data) => data.assumptions[name]);
    return Object.assign({}, makePresetAPI(cache2, externalDependencies2), {
      assumption
    });
  }
  function assertVersion(range) {
    if (typeof range === "number") {
      if (!Number.isInteger(range)) {
        throw new Error("Expected string or integer value.");
      }
      range = `^${range}.0.0-0`;
    }
    if (typeof range !== "string") {
      throw new Error("Expected string or integer value.");
    }
    if (range === "*" || _semver().satisfies(_index.version, range)) return;
    const limit = Error.stackTraceLimit;
    if (typeof limit === "number" && limit < 25) {
      Error.stackTraceLimit = 25;
    }
    const err = new Error(`Requires Babel "${range}", but was loaded with "${_index.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
    if (typeof limit === "number") {
      Error.stackTraceLimit = limit;
    }
    throw Object.assign(err, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version: _index.version,
      range
    });
  }
  return configApi;
}
var partial = {};
var hasRequiredPartial;
function requirePartial() {
  if (hasRequiredPartial) return partial;
  hasRequiredPartial = 1;
  Object.defineProperty(partial, "__esModule", {
    value: true
  });
  partial.default = loadPrivatePartialConfig;
  partial.loadPartialConfig = loadPartialConfig;
  function _path() {
    const data = pathExports;
    _path = function() {
      return data;
    };
    return data;
  }
  var _plugin = requirePlugin();
  var _util2 = requireUtil();
  var _item = requireItem();
  var _configChain = requireConfigChain();
  var _environment = requireEnvironment();
  var _options = requireOptions();
  var _index = requireIndexBrowser();
  var _resolveTargets = requireResolveTargetsBrowser();
  const _excluded = ["showIgnoredFiles"];
  function _objectWithoutPropertiesLoose(source2, excluded) {
    if (source2 == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key2, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key2 = sourceKeys[i];
      if (excluded.indexOf(key2) >= 0) continue;
      target[key2] = source2[key2];
    }
    return target;
  }
  function resolveRootMode(rootDir, rootMode) {
    switch (rootMode) {
      case "root":
        return rootDir;
      case "upward-optional": {
        const upwardRootDir = (0, _index.findConfigUpwards)(rootDir);
        return upwardRootDir === null ? rootDir : upwardRootDir;
      }
      case "upward": {
        const upwardRootDir = (0, _index.findConfigUpwards)(rootDir);
        if (upwardRootDir !== null) return upwardRootDir;
        throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir}".
One of the following config files must be in the directory tree: "${_index.ROOT_CONFIG_FILENAMES.join(", ")}".`), {
          code: "BABEL_ROOT_NOT_FOUND",
          dirname: rootDir
        });
      }
      default:
        throw new Error(`Assertion failure - unknown rootMode value.`);
    }
  }
  function* loadPrivatePartialConfig(inputOpts) {
    if (inputOpts != null && (typeof inputOpts !== "object" || Array.isArray(inputOpts))) {
      throw new Error("Babel options must be an object, null, or undefined");
    }
    const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {};
    const {
      envName = (0, _environment.getEnv)(),
      cwd: cwd2 = ".",
      root: rootDir = ".",
      rootMode = "root",
      caller,
      cloneInputAst = true
    } = args;
    const absoluteCwd = _path().resolve(cwd2);
    const absoluteRootDir = resolveRootMode(_path().resolve(absoluteCwd, rootDir), rootMode);
    const filename = typeof args.filename === "string" ? _path().resolve(cwd2, args.filename) : void 0;
    const showConfigPath = yield* (0, _index.resolveShowConfigPath)(absoluteCwd);
    const context2 = {
      filename,
      cwd: absoluteCwd,
      root: absoluteRootDir,
      envName,
      caller,
      showConfig: showConfigPath === filename
    };
    const configChain2 = yield* (0, _configChain.buildRootChain)(args, context2);
    if (!configChain2) return null;
    const merged = {
      assumptions: {}
    };
    configChain2.options.forEach((opts) => {
      (0, _util2.mergeOptions)(merged, opts);
    });
    const options2 = Object.assign({}, merged, {
      targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),
      cloneInputAst,
      babelrc: false,
      configFile: false,
      browserslistConfigFile: false,
      passPerPreset: false,
      envName: context2.envName,
      cwd: context2.cwd,
      root: context2.root,
      rootMode: "root",
      filename: typeof context2.filename === "string" ? context2.filename : void 0,
      plugins: configChain2.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)),
      presets: configChain2.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor))
    });
    return {
      options: options2,
      context: context2,
      fileHandling: configChain2.fileHandling,
      ignore: configChain2.ignore,
      babelrc: configChain2.babelrc,
      config: configChain2.config,
      files: configChain2.files
    };
  }
  function* loadPartialConfig(opts) {
    let showIgnoredFiles = false;
    if (typeof opts === "object" && opts !== null && !Array.isArray(opts)) {
      var _opts = opts;
      ({
        showIgnoredFiles
      } = _opts);
      opts = _objectWithoutPropertiesLoose(_opts, _excluded);
    }
    const result = yield* loadPrivatePartialConfig(opts);
    if (!result) return null;
    const {
      options: options2,
      babelrc,
      ignore,
      config: config2,
      fileHandling,
      files
    } = result;
    if (fileHandling === "ignored" && !showIgnoredFiles) {
      return null;
    }
    (options2.plugins || []).forEach((item2) => {
      if (item2.value instanceof _plugin.default) {
        throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
      }
    });
    return new PartialConfig(options2, babelrc ? babelrc.filepath : void 0, ignore ? ignore.filepath : void 0, config2 ? config2.filepath : void 0, fileHandling, files);
  }
  class PartialConfig {
    constructor(options2, babelrc, ignore, config2, fileHandling, files) {
      this.options = void 0;
      this.babelrc = void 0;
      this.babelignore = void 0;
      this.config = void 0;
      this.fileHandling = void 0;
      this.files = void 0;
      this.options = options2;
      this.babelignore = ignore;
      this.babelrc = babelrc;
      this.config = config2;
      this.fileHandling = fileHandling;
      this.files = files;
      Object.freeze(this);
    }
    hasFilesystemConfig() {
      return this.babelrc !== void 0 || this.config !== void 0;
    }
  }
  Object.freeze(PartialConfig.prototype);
  return partial;
}
var hasRequiredFull;
function requireFull() {
  if (hasRequiredFull) return full;
  hasRequiredFull = 1;
  Object.defineProperty(full, "__esModule", {
    value: true
  });
  full.default = void 0;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _async = requireAsync();
  var _util2 = requireUtil();
  var context2 = requireLib$x();
  var _plugin = requirePlugin();
  var _item = requireItem();
  var _configChain = requireConfigChain();
  var _deepArray = requireDeepArray();
  function _traverse() {
    const data = requireLib$E();
    _traverse = function() {
      return data;
    };
    return data;
  }
  var _caching = requireCaching();
  var _options = requireOptions();
  var _plugins = requirePlugins();
  var _configApi = requireConfigApi();
  var _partial = requirePartial();
  var _configError = requireConfigError();
  full.default = _gensync()(function* loadFullConfig(inputOpts) {
    var _opts$assumptions;
    const result = yield* (0, _partial.default)(inputOpts);
    if (!result) {
      return null;
    }
    const {
      options: options2,
      context: context3,
      fileHandling
    } = result;
    if (fileHandling === "ignored") {
      return null;
    }
    const optionDefaults = {};
    const {
      plugins: plugins2,
      presets
    } = options2;
    if (!plugins2 || !presets) {
      throw new Error("Assertion failure - plugins and presets exist");
    }
    const presetContext = Object.assign({}, context3, {
      targets: options2.targets
    });
    const toDescriptor = (item2) => {
      const desc = (0, _item.getItemDescriptor)(item2);
      if (!desc) {
        throw new Error("Assertion failure - must be config item");
      }
      return desc;
    };
    const presetsDescriptors = presets.map(toDescriptor);
    const initialPluginsDescriptors = plugins2.map(toDescriptor);
    const pluginDescriptorsByPass = [[]];
    const passes = [];
    const externalDependencies2 = [];
    const ignored = yield* enhanceError(context3, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
      const presets2 = [];
      for (let i = 0; i < rawPresets.length; i++) {
        const descriptor = rawPresets[i];
        if (descriptor.options !== false) {
          try {
            var preset = yield* loadPresetDescriptor(descriptor, presetContext);
          } catch (e) {
            if (e.code === "BABEL_UNKNOWN_OPTION") {
              (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e);
            }
            throw e;
          }
          externalDependencies2.push(preset.externalDependencies);
          if (descriptor.ownPass) {
            presets2.push({
              preset: preset.chain,
              pass: []
            });
          } else {
            presets2.unshift({
              preset: preset.chain,
              pass: pluginDescriptorsPass
            });
          }
        }
      }
      if (presets2.length > 0) {
        pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o) => o.pass).filter((p) => p !== pluginDescriptorsPass));
        for (const {
          preset: preset2,
          pass
        } of presets2) {
          if (!preset2) return true;
          pass.push(...preset2.plugins);
          const ignored2 = yield* recursePresetDescriptors(preset2.presets, pass);
          if (ignored2) return true;
          preset2.options.forEach((opts2) => {
            (0, _util2.mergeOptions)(optionDefaults, opts2);
          });
        }
      }
    })(presetsDescriptors, pluginDescriptorsByPass[0]);
    if (ignored) return null;
    const opts = optionDefaults;
    (0, _util2.mergeOptions)(opts, options2);
    const pluginContext = Object.assign({}, presetContext, {
      assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {}
    });
    yield* enhanceError(context3, function* loadPluginDescriptors() {
      pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
      for (const descs of pluginDescriptorsByPass) {
        const pass = [];
        passes.push(pass);
        for (let i = 0; i < descs.length; i++) {
          const descriptor = descs[i];
          if (descriptor.options !== false) {
            try {
              var plugin2 = yield* loadPluginDescriptor(descriptor, pluginContext);
            } catch (e) {
              if (e.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY") {
                (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e);
              }
              throw e;
            }
            pass.push(plugin2);
            externalDependencies2.push(plugin2.externalDependencies);
          }
        }
      }
    })();
    opts.plugins = passes[0];
    opts.presets = passes.slice(1).filter((plugins3) => plugins3.length > 0).map((plugins3) => ({
      plugins: plugins3
    }));
    opts.passPerPreset = opts.presets.length > 0;
    return {
      options: opts,
      passes,
      externalDependencies: (0, _deepArray.finalize)(externalDependencies2)
    };
  });
  function enhanceError(context3, fn2) {
    return function* (arg1, arg2) {
      try {
        return yield* fn2(arg1, arg2);
      } catch (e) {
        if (!/^\[BABEL\]/.test(e.message)) {
          var _context$filename;
          e.message = `[BABEL] ${(_context$filename = context3.filename) != null ? _context$filename : "unknown file"}: ${e.message}`;
        }
        throw e;
      }
    };
  }
  const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({
    value: value2,
    options: options2,
    dirname,
    alias
  }, cache2) {
    if (options2 === false) throw new Error("Assertion failure");
    options2 = options2 || {};
    const externalDependencies2 = [];
    let item2 = value2;
    if (typeof value2 === "function") {
      const factory = (0, _async.maybeAsync)(value2, `You appear to be using an async plugin/preset, but Babel has been called synchronously`);
      const api = Object.assign({}, context2, apiFactory(cache2, externalDependencies2));
      try {
        item2 = yield* factory(api, options2, dirname);
      } catch (e) {
        if (alias) {
          e.message += ` (While processing: ${JSON.stringify(alias)})`;
        }
        throw e;
      }
    }
    if (!item2 || typeof item2 !== "object") {
      throw new Error("Plugin/Preset did not return an object.");
    }
    if ((0, _async.isThenable)(item2)) {
      yield* [];
      throw new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
    }
    if (externalDependencies2.length > 0 && (!cache2.configured() || cache2.mode() === "forever")) {
      let error2 = `A plugin/preset has external untracked dependencies (${externalDependencies2[0]}), but the cache `;
      if (!cache2.configured()) {
        error2 += `has not been configured to be invalidated when the external dependencies change. `;
      } else {
        error2 += ` has been configured to never be invalidated. `;
      }
      error2 += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(alias)})`;
      throw new Error(error2);
    }
    return {
      value: item2,
      options: options2,
      dirname,
      alias,
      externalDependencies: (0, _deepArray.finalize)(externalDependencies2)
    };
  });
  const pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI);
  const presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);
  const instantiatePlugin = (0, _caching.makeWeakCache)(function* ({
    value: value2,
    options: options2,
    dirname,
    alias,
    externalDependencies: externalDependencies2
  }, cache2) {
    const pluginObj = (0, _plugins.validatePluginObject)(value2);
    const plugin2 = Object.assign({}, pluginObj);
    if (plugin2.visitor) {
      plugin2.visitor = _traverse().default.explode(Object.assign({}, plugin2.visitor));
    }
    if (plugin2.inherits) {
      const inheritsDescriptor = {
        name: void 0,
        alias: `${alias}$inherits`,
        value: plugin2.inherits,
        options: options2,
        dirname
      };
      const inherits2 = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run) => {
        return cache2.invalidate((data) => run(inheritsDescriptor, data));
      });
      plugin2.pre = chain(inherits2.pre, plugin2.pre);
      plugin2.post = chain(inherits2.post, plugin2.post);
      plugin2.manipulateOptions = chain(inherits2.manipulateOptions, plugin2.manipulateOptions);
      plugin2.visitor = _traverse().default.visitors.merge([inherits2.visitor || {}, plugin2.visitor || {}]);
      if (inherits2.externalDependencies.length > 0) {
        if (externalDependencies2.length === 0) {
          externalDependencies2 = inherits2.externalDependencies;
        } else {
          externalDependencies2 = (0, _deepArray.finalize)([externalDependencies2, inherits2.externalDependencies]);
        }
      }
    }
    return new _plugin.default(plugin2, options2, alias, externalDependencies2);
  });
  function* loadPluginDescriptor(descriptor, context3) {
    if (descriptor.value instanceof _plugin.default) {
      if (descriptor.options) {
        throw new Error("Passed options to an existing Plugin instance will not work.");
      }
      return descriptor.value;
    }
    return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context3), context3);
  }
  const needsFilename = (val) => val && typeof val !== "function";
  const validateIfOptionNeedsFilename = (options2, descriptor) => {
    if (needsFilename(options2.test) || needsFilename(options2.include) || needsFilename(options2.exclude)) {
      const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
      throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, `\`\`\``, `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, `\`\`\``, `See https://babeljs.io/docs/en/options#filename for more information.`].join("\n"));
    }
  };
  const validatePreset = (preset, context3, descriptor) => {
    if (!context3.filename) {
      var _options$overrides;
      const {
        options: options2
      } = preset;
      validateIfOptionNeedsFilename(options2, descriptor);
      (_options$overrides = options2.overrides) == null || _options$overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
    }
  };
  const instantiatePreset = (0, _caching.makeWeakCacheSync)(({
    value: value2,
    dirname,
    alias,
    externalDependencies: externalDependencies2
  }) => {
    return {
      options: (0, _options.validate)("preset", value2),
      alias,
      dirname,
      externalDependencies: externalDependencies2
    };
  });
  function* loadPresetDescriptor(descriptor, context3) {
    const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context3));
    validatePreset(preset, context3, descriptor);
    return {
      chain: yield* (0, _configChain.buildPresetChain)(preset, context3),
      externalDependencies: preset.externalDependencies
    };
  }
  function chain(a, b) {
    const fns = [a, b].filter(Boolean);
    if (fns.length <= 1) return fns[0];
    return function(...args) {
      for (const fn2 of fns) {
        fn2.apply(this, args);
      }
    };
  }
  return full;
}
var hasRequiredConfig;
function requireConfig() {
  if (hasRequiredConfig) return config;
  hasRequiredConfig = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createConfigItem = createConfigItem;
    exports.createConfigItemAsync = createConfigItemAsync;
    exports.createConfigItemSync = createConfigItemSync;
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _full.default;
      }
    });
    exports.loadOptions = loadOptions;
    exports.loadOptionsAsync = loadOptionsAsync;
    exports.loadOptionsSync = loadOptionsSync;
    exports.loadPartialConfig = loadPartialConfig;
    exports.loadPartialConfigAsync = loadPartialConfigAsync;
    exports.loadPartialConfigSync = loadPartialConfigSync;
    function _gensync() {
      const data = requireGensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _full = requireFull();
    var _partial = requirePartial();
    var _item = requireItem();
    var _rewriteStackTrace = requireRewriteStackTrace();
    const loadPartialConfigRunner = _gensync()(_partial.loadPartialConfig);
    function loadPartialConfigAsync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.async)(...args);
    }
    function loadPartialConfigSync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.sync)(...args);
    }
    function loadPartialConfig(opts, callback) {
      if (callback !== void 0) {
        (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(opts, callback);
      } else if (typeof opts === "function") {
        (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(void 0, opts);
      } else {
        {
          return loadPartialConfigSync(opts);
        }
      }
    }
    function* loadOptionsImpl(opts) {
      var _config$options;
      const config2 = yield* (0, _full.default)(opts);
      return (_config$options = config2 == null ? void 0 : config2.options) != null ? _config$options : null;
    }
    const loadOptionsRunner = _gensync()(loadOptionsImpl);
    function loadOptionsAsync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.async)(...args);
    }
    function loadOptionsSync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.sync)(...args);
    }
    function loadOptions(opts, callback) {
      if (callback !== void 0) {
        (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(opts, callback);
      } else if (typeof opts === "function") {
        (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(void 0, opts);
      } else {
        {
          return loadOptionsSync(opts);
        }
      }
    }
    const createConfigItemRunner = _gensync()(_item.createConfigItem);
    function createConfigItemAsync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.async)(...args);
    }
    function createConfigItemSync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.sync)(...args);
    }
    function createConfigItem(target, options2, callback) {
      if (callback !== void 0) {
        (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, options2, callback);
      } else if (typeof options2 === "function") {
        (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, void 0, callback);
      } else {
        {
          return createConfigItemSync(target, options2);
        }
      }
    }
  })(config);
  return config;
}
var transform = {};
var transformation = {};
var pluginPass = {};
var hasRequiredPluginPass;
function requirePluginPass() {
  if (hasRequiredPluginPass) return pluginPass;
  hasRequiredPluginPass = 1;
  Object.defineProperty(pluginPass, "__esModule", {
    value: true
  });
  pluginPass.default = void 0;
  class PluginPass {
    constructor(file2, key2, options2) {
      this._map = /* @__PURE__ */ new Map();
      this.key = void 0;
      this.file = void 0;
      this.opts = void 0;
      this.cwd = void 0;
      this.filename = void 0;
      this.key = key2;
      this.file = file2;
      this.opts = options2 || {};
      this.cwd = file2.opts.cwd;
      this.filename = file2.opts.filename;
    }
    set(key2, val) {
      this._map.set(key2, val);
    }
    get(key2) {
      return this._map.get(key2);
    }
    availableHelper(name, versionRange) {
      return this.file.availableHelper(name, versionRange);
    }
    addHelper(name) {
      return this.file.addHelper(name);
    }
    buildCodeFrameError(node2, msg, _Error) {
      return this.file.buildCodeFrameError(node2, msg, _Error);
    }
  }
  pluginPass.default = PluginPass;
  {
    PluginPass.prototype.getModuleName = function getModuleName2() {
      return this.file.getModuleName();
    };
    PluginPass.prototype.addImport = function addImport() {
      this.file.addImport();
    };
  }
  return pluginPass;
}
var blockHoistPlugin = {};
var hasRequiredBlockHoistPlugin;
function requireBlockHoistPlugin() {
  if (hasRequiredBlockHoistPlugin) return blockHoistPlugin;
  hasRequiredBlockHoistPlugin = 1;
  Object.defineProperty(blockHoistPlugin, "__esModule", {
    value: true
  });
  blockHoistPlugin.default = loadBlockHoistPlugin;
  function _traverse() {
    const data = requireLib$E();
    _traverse = function() {
      return data;
    };
    return data;
  }
  var _plugin = requirePlugin();
  let LOADED_PLUGIN;
  const blockHoistPlugin$1 = {
    name: "internal.blockHoist",
    visitor: {
      Block: {
        exit({
          node: node2
        }) {
          node2.body = performHoisting(node2.body);
        }
      },
      SwitchCase: {
        exit({
          node: node2
        }) {
          node2.consequent = performHoisting(node2.consequent);
        }
      }
    }
  };
  function performHoisting(body) {
    let max = Math.pow(2, 30) - 1;
    let hasChange = false;
    for (let i = 0; i < body.length; i++) {
      const n = body[i];
      const p = priority(n);
      if (p > max) {
        hasChange = true;
        break;
      }
      max = p;
    }
    if (!hasChange) return body;
    return stableSort(body.slice());
  }
  function loadBlockHoistPlugin() {
    if (!LOADED_PLUGIN) {
      LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin$1, {
        visitor: _traverse().default.explode(blockHoistPlugin$1.visitor)
      }), {});
    }
    return LOADED_PLUGIN;
  }
  function priority(bodyNode) {
    const priority2 = bodyNode == null ? void 0 : bodyNode._blockHoist;
    if (priority2 == null) return 1;
    if (priority2 === true) return 2;
    return priority2;
  }
  function stableSort(body) {
    const buckets = /* @__PURE__ */ Object.create(null);
    for (let i = 0; i < body.length; i++) {
      const n = body[i];
      const p = priority(n);
      const bucket = buckets[p] || (buckets[p] = []);
      bucket.push(n);
    }
    const keys2 = Object.keys(buckets).map((k) => +k).sort((a, b) => b - a);
    let index2 = 0;
    for (const key2 of keys2) {
      const bucket = buckets[key2];
      for (const n of bucket) {
        body[index2++] = n;
      }
    }
    return body;
  }
  return blockHoistPlugin;
}
var normalizeOpts = {};
var hasRequiredNormalizeOpts;
function requireNormalizeOpts() {
  if (hasRequiredNormalizeOpts) return normalizeOpts;
  hasRequiredNormalizeOpts = 1;
  Object.defineProperty(normalizeOpts, "__esModule", {
    value: true
  });
  normalizeOpts.default = normalizeOptions;
  function _path() {
    const data = pathExports;
    _path = function() {
      return data;
    };
    return data;
  }
  function normalizeOptions(config2) {
    const {
      filename,
      cwd: cwd2,
      filenameRelative = typeof filename === "string" ? _path().relative(cwd2, filename) : "unknown",
      sourceType = "module",
      inputSourceMap,
      sourceMaps: sourceMaps2 = !!inputSourceMap,
      sourceRoot = config2.options.moduleRoot,
      sourceFileName = _path().basename(filenameRelative),
      comments: comments2 = true,
      compact = "auto"
    } = config2.options;
    const opts = config2.options;
    const options2 = Object.assign({}, opts, {
      parserOpts: Object.assign({
        sourceType: _path().extname(filenameRelative) === ".mjs" ? "module" : sourceType,
        sourceFileName: filename,
        plugins: []
      }, opts.parserOpts),
      generatorOpts: Object.assign({
        filename,
        auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
        auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
        retainLines: opts.retainLines,
        comments: comments2,
        shouldPrintComment: opts.shouldPrintComment,
        compact,
        minified: opts.minified,
        sourceMaps: sourceMaps2,
        sourceRoot,
        sourceFileName
      }, opts.generatorOpts)
    });
    for (const plugins2 of config2.passes) {
      for (const plugin2 of plugins2) {
        if (plugin2.manipulateOptions) {
          plugin2.manipulateOptions(options2, options2.parserOpts);
        }
      }
    }
    return options2;
  }
  return normalizeOpts;
}
var normalizeFile = {};
var convertSourceMap = {};
var hasRequiredConvertSourceMap;
function requireConvertSourceMap() {
  if (hasRequiredConvertSourceMap) return convertSourceMap;
  hasRequiredConvertSourceMap = 1;
  (function(exports) {
    Object.defineProperty(exports, "commentRegex", {
      get: function getCommentRegex() {
        return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
      }
    });
    Object.defineProperty(exports, "mapFileCommentRegex", {
      get: function getMapFileCommentRegex() {
        return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
      }
    });
    var decodeBase64;
    if (typeof Buffer !== "undefined") {
      if (typeof Buffer.from === "function") {
        decodeBase64 = decodeBase64WithBufferFrom;
      } else {
        decodeBase64 = decodeBase64WithNewBuffer;
      }
    } else {
      decodeBase64 = decodeBase64WithAtob;
    }
    function decodeBase64WithBufferFrom(base642) {
      return Buffer.from(base642, "base64").toString();
    }
    function decodeBase64WithNewBuffer(base642) {
      if (typeof value === "number") {
        throw new TypeError("The value to decode must not be of type number.");
      }
      return new Buffer(base642, "base64").toString();
    }
    function decodeBase64WithAtob(base642) {
      return decodeURIComponent(escape(atob(base642)));
    }
    function stripComment(sm) {
      return sm.split(",").pop();
    }
    function readFromFileMap(sm, read2) {
      var r = exports.mapFileCommentRegex.exec(sm);
      var filename = r[1] || r[2];
      try {
        var sm = read2(filename);
        if (sm != null && typeof sm.catch === "function") {
          return sm.catch(throwError);
        } else {
          return sm;
        }
      } catch (e) {
        throwError(e);
      }
      function throwError(e) {
        throw new Error("An error occurred while trying to read the map file at " + filename + "\n" + e.stack);
      }
    }
    function Converter(sm, opts) {
      opts = opts || {};
      if (opts.hasComment) {
        sm = stripComment(sm);
      }
      if (opts.encoding === "base64") {
        sm = decodeBase64(sm);
      } else if (opts.encoding === "uri") {
        sm = decodeURIComponent(sm);
      }
      if (opts.isJSON || opts.encoding) {
        sm = JSON.parse(sm);
      }
      this.sourcemap = sm;
    }
    Converter.prototype.toJSON = function(space) {
      return JSON.stringify(this.sourcemap, null, space);
    };
    if (typeof Buffer !== "undefined") {
      if (typeof Buffer.from === "function") {
        Converter.prototype.toBase64 = encodeBase64WithBufferFrom;
      } else {
        Converter.prototype.toBase64 = encodeBase64WithNewBuffer;
      }
    } else {
      Converter.prototype.toBase64 = encodeBase64WithBtoa;
    }
    function encodeBase64WithBufferFrom() {
      var json = this.toJSON();
      return Buffer.from(json, "utf8").toString("base64");
    }
    function encodeBase64WithNewBuffer() {
      var json = this.toJSON();
      if (typeof json === "number") {
        throw new TypeError("The json to encode must not be of type number.");
      }
      return new Buffer(json, "utf8").toString("base64");
    }
    function encodeBase64WithBtoa() {
      var json = this.toJSON();
      return btoa(unescape(encodeURIComponent(json)));
    }
    Converter.prototype.toURI = function() {
      var json = this.toJSON();
      return encodeURIComponent(json);
    };
    Converter.prototype.toComment = function(options2) {
      var encoding, content, data;
      if (options2 != null && options2.encoding === "uri") {
        encoding = "";
        content = this.toURI();
      } else {
        encoding = ";base64";
        content = this.toBase64();
      }
      data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content;
      return options2 != null && options2.multiline ? "/*# " + data + " */" : "//# " + data;
    };
    Converter.prototype.toObject = function() {
      return JSON.parse(this.toJSON());
    };
    Converter.prototype.addProperty = function(key2, value2) {
      if (this.sourcemap.hasOwnProperty(key2)) throw new Error('property "' + key2 + '" already exists on the sourcemap, use set property instead');
      return this.setProperty(key2, value2);
    };
    Converter.prototype.setProperty = function(key2, value2) {
      this.sourcemap[key2] = value2;
      return this;
    };
    Converter.prototype.getProperty = function(key2) {
      return this.sourcemap[key2];
    };
    exports.fromObject = function(obj) {
      return new Converter(obj);
    };
    exports.fromJSON = function(json) {
      return new Converter(json, { isJSON: true });
    };
    exports.fromURI = function(uri) {
      return new Converter(uri, { encoding: "uri" });
    };
    exports.fromBase64 = function(base642) {
      return new Converter(base642, { encoding: "base64" });
    };
    exports.fromComment = function(comment) {
      var m, encoding;
      comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, "");
      m = exports.commentRegex.exec(comment);
      encoding = m && m[4] || "uri";
      return new Converter(comment, { encoding, hasComment: true });
    };
    function makeConverter(sm) {
      return new Converter(sm, { isJSON: true });
    }
    exports.fromMapFileComment = function(comment, read2) {
      if (typeof read2 === "string") {
        throw new Error(
          "String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading"
        );
      }
      var sm = readFromFileMap(comment, read2);
      if (sm != null && typeof sm.then === "function") {
        return sm.then(makeConverter);
      } else {
        return makeConverter(sm);
      }
    };
    exports.fromSource = function(content) {
      var m = content.match(exports.commentRegex);
      return m ? exports.fromComment(m.pop()) : null;
    };
    exports.fromMapFileSource = function(content, read2) {
      if (typeof read2 === "string") {
        throw new Error(
          "String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading"
        );
      }
      var m = content.match(exports.mapFileCommentRegex);
      return m ? exports.fromMapFileComment(m.pop(), read2) : null;
    };
    exports.removeComments = function(src) {
      return src.replace(exports.commentRegex, "");
    };
    exports.removeMapFileComments = function(src) {
      return src.replace(exports.mapFileCommentRegex, "");
    };
    exports.generateMapFileComment = function(file2, options2) {
      var data = "sourceMappingURL=" + file2;
      return options2 && options2.multiline ? "/*# " + data + " */" : "//# " + data;
    };
  })(convertSourceMap);
  return convertSourceMap;
}
var parser = {};
var missingPluginHelper = {};
var hasRequiredMissingPluginHelper;
function requireMissingPluginHelper() {
  if (hasRequiredMissingPluginHelper) return missingPluginHelper;
  hasRequiredMissingPluginHelper = 1;
  Object.defineProperty(missingPluginHelper, "__esModule", {
    value: true
  });
  missingPluginHelper.default = generateMissingPluginMessage;
  const pluginNameMap = {
    asyncDoExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-async-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions"
      }
    },
    decimal: {
      syntax: {
        name: "@babel/plugin-syntax-decimal",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal"
      }
    },
    decorators: {
      syntax: {
        name: "@babel/plugin-syntax-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators"
      },
      transform: {
        name: "@babel/plugin-proposal-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators"
      }
    },
    doExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions"
      }
    },
    exportDefaultFrom: {
      syntax: {
        name: "@babel/plugin-syntax-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from"
      },
      transform: {
        name: "@babel/plugin-proposal-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from"
      }
    },
    flow: {
      syntax: {
        name: "@babel/plugin-syntax-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow"
      },
      transform: {
        name: "@babel/preset-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow"
      }
    },
    functionBind: {
      syntax: {
        name: "@babel/plugin-syntax-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind"
      },
      transform: {
        name: "@babel/plugin-proposal-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind"
      }
    },
    functionSent: {
      syntax: {
        name: "@babel/plugin-syntax-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent"
      },
      transform: {
        name: "@babel/plugin-proposal-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent"
      }
    },
    jsx: {
      syntax: {
        name: "@babel/plugin-syntax-jsx",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx"
      },
      transform: {
        name: "@babel/preset-react",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react"
      }
    },
    importAttributes: {
      syntax: {
        name: "@babel/plugin-syntax-import-attributes",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes"
      }
    },
    pipelineOperator: {
      syntax: {
        name: "@babel/plugin-syntax-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator"
      },
      transform: {
        name: "@babel/plugin-proposal-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator"
      }
    },
    recordAndTuple: {
      syntax: {
        name: "@babel/plugin-syntax-record-and-tuple",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple"
      }
    },
    throwExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions"
      }
    },
    typescript: {
      syntax: {
        name: "@babel/plugin-syntax-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript"
      },
      transform: {
        name: "@babel/preset-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript"
      }
    }
  };
  {
    Object.assign(pluginNameMap, {
      asyncGenerators: {
        syntax: {
          name: "@babel/plugin-syntax-async-generators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators"
        },
        transform: {
          name: "@babel/plugin-transform-async-generator-functions",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions"
        }
      },
      classProperties: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
        }
      },
      classPrivateProperties: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
        }
      },
      classPrivateMethods: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-private-methods",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods"
        }
      },
      classStaticBlock: {
        syntax: {
          name: "@babel/plugin-syntax-class-static-block",
          url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block"
        },
        transform: {
          name: "@babel/plugin-transform-class-static-block",
          url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block"
        }
      },
      dynamicImport: {
        syntax: {
          name: "@babel/plugin-syntax-dynamic-import",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import"
        }
      },
      exportNamespaceFrom: {
        syntax: {
          name: "@babel/plugin-syntax-export-namespace-from",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from"
        },
        transform: {
          name: "@babel/plugin-transform-export-namespace-from",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from"
        }
      },
      importAssertions: {
        syntax: {
          name: "@babel/plugin-syntax-import-assertions",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions"
        }
      },
      importMeta: {
        syntax: {
          name: "@babel/plugin-syntax-import-meta",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta"
        }
      },
      logicalAssignment: {
        syntax: {
          name: "@babel/plugin-syntax-logical-assignment-operators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators"
        },
        transform: {
          name: "@babel/plugin-transform-logical-assignment-operators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators"
        }
      },
      moduleStringNames: {
        syntax: {
          name: "@babel/plugin-syntax-module-string-names",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names"
        }
      },
      numericSeparator: {
        syntax: {
          name: "@babel/plugin-syntax-numeric-separator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator"
        },
        transform: {
          name: "@babel/plugin-transform-numeric-separator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator"
        }
      },
      nullishCoalescingOperator: {
        syntax: {
          name: "@babel/plugin-syntax-nullish-coalescing-operator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator"
        },
        transform: {
          name: "@babel/plugin-transform-nullish-coalescing-operator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator"
        }
      },
      objectRestSpread: {
        syntax: {
          name: "@babel/plugin-syntax-object-rest-spread",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread"
        },
        transform: {
          name: "@babel/plugin-transform-object-rest-spread",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread"
        }
      },
      optionalCatchBinding: {
        syntax: {
          name: "@babel/plugin-syntax-optional-catch-binding",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding"
        },
        transform: {
          name: "@babel/plugin-transform-optional-catch-binding",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding"
        }
      },
      optionalChaining: {
        syntax: {
          name: "@babel/plugin-syntax-optional-chaining",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining"
        },
        transform: {
          name: "@babel/plugin-transform-optional-chaining",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining"
        }
      },
      privateIn: {
        syntax: {
          name: "@babel/plugin-syntax-private-property-in-object",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object"
        },
        transform: {
          name: "@babel/plugin-transform-private-property-in-object",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object"
        }
      },
      regexpUnicodeSets: {
        syntax: {
          name: "@babel/plugin-syntax-unicode-sets-regex",
          url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md"
        },
        transform: {
          name: "@babel/plugin-transform-unicode-sets-regex",
          url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md"
        }
      }
    });
  }
  const getNameURLCombination = ({
    name,
    url: url2
  }) => `${name} (${url2})`;
  function generateMissingPluginMessage(missingPluginName, loc, codeFrame, filename) {
    let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):

` + codeFrame;
    const pluginInfo = pluginNameMap[missingPluginName];
    if (pluginInfo) {
      const {
        syntax: syntaxPlugin,
        transform: transformPlugin
      } = pluginInfo;
      if (syntaxPlugin) {
        const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
        if (transformPlugin) {
          const transformPluginInfo = getNameURLCombination(transformPlugin);
          const sectionType = transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets";
          helpMessage += `

Add ${transformPluginInfo} to the '${sectionType}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
        } else {
          helpMessage += `

Add ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
        }
      }
    }
    const msgFilename = filename === "unknown" ? "<name of the input file>" : filename;
    helpMessage += `

If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${msgFilename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.
`;
    return helpMessage;
  }
  return missingPluginHelper;
}
var hasRequiredParser;
function requireParser() {
  if (hasRequiredParser) return parser;
  hasRequiredParser = 1;
  Object.defineProperty(parser, "__esModule", {
    value: true
  });
  parser.default = parser$1;
  function _parser() {
    const data = requireLib$I();
    _parser = function() {
      return data;
    };
    return data;
  }
  function _codeFrame2() {
    const data = requireLib$J();
    _codeFrame2 = function() {
      return data;
    };
    return data;
  }
  var _missingPluginHelper = requireMissingPluginHelper();
  function* parser$1(pluginPasses, {
    parserOpts,
    highlightCode = true,
    filename = "unknown"
  }, code) {
    try {
      const results = [];
      for (const plugins2 of pluginPasses) {
        for (const plugin2 of plugins2) {
          const {
            parserOverride
          } = plugin2;
          if (parserOverride) {
            const ast = parserOverride(code, parserOpts, _parser().parse);
            if (ast !== void 0) results.push(ast);
          }
        }
      }
      if (results.length === 0) {
        return (0, _parser().parse)(code, parserOpts);
      } else if (results.length === 1) {
        yield* [];
        if (typeof results[0].then === "function") {
          throw new Error(`You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
        }
        return results[0];
      }
      throw new Error("More than one plugin attempted to override parsing.");
    } catch (err) {
      if (err.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED") {
        err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.";
      }
      const {
        loc,
        missingPlugin
      } = err;
      if (loc) {
        const codeFrame = (0, _codeFrame2().codeFrameColumns)(code, {
          start: {
            line: loc.line,
            column: loc.column + 1
          }
        }, {
          highlightCode
        });
        if (missingPlugin) {
          err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame, filename);
        } else {
          err.message = `${filename}: ${err.message}

` + codeFrame;
        }
        err.code = "BABEL_PARSE_ERROR";
      }
      throw err;
    }
  }
  return parser;
}
var cloneDeep = {};
var hasRequiredCloneDeep;
function requireCloneDeep() {
  if (hasRequiredCloneDeep) return cloneDeep;
  hasRequiredCloneDeep = 1;
  Object.defineProperty(cloneDeep, "__esModule", {
    value: true
  });
  cloneDeep.default = _default2;
  function deepClone(value2, cache2) {
    if (value2 !== null) {
      if (cache2.has(value2)) return cache2.get(value2);
      let cloned;
      if (Array.isArray(value2)) {
        cloned = new Array(value2.length);
        cache2.set(value2, cloned);
        for (let i = 0; i < value2.length; i++) {
          cloned[i] = typeof value2[i] !== "object" ? value2[i] : deepClone(value2[i], cache2);
        }
      } else {
        cloned = {};
        cache2.set(value2, cloned);
        const keys2 = Object.keys(value2);
        for (let i = 0; i < keys2.length; i++) {
          const key2 = keys2[i];
          cloned[key2] = typeof value2[key2] !== "object" ? value2[key2] : deepClone(value2[key2], cache2);
        }
      }
      return cloned;
    }
    return value2;
  }
  function _default2(value2) {
    if (typeof value2 !== "object") return value2;
    return deepClone(value2, /* @__PURE__ */ new Map());
  }
  return cloneDeep;
}
var hasRequiredNormalizeFile;
function requireNormalizeFile() {
  if (hasRequiredNormalizeFile) return normalizeFile;
  hasRequiredNormalizeFile = 1;
  Object.defineProperty(normalizeFile, "__esModule", {
    value: true
  });
  normalizeFile.default = normalizeFile$1;
  function _fs() {
    const data = require$$2$1;
    _fs = function() {
      return data;
    };
    return data;
  }
  function _path() {
    const data = pathExports;
    _path = function() {
      return data;
    };
    return data;
  }
  function _debug() {
    const data = browserExports$1;
    _debug = function() {
      return data;
    };
    return data;
  }
  function _t() {
    const data = requireLib$O();
    _t = function() {
      return data;
    };
    return data;
  }
  function _convertSourceMap() {
    const data = requireConvertSourceMap();
    _convertSourceMap = function() {
      return data;
    };
    return data;
  }
  var _file = requireFile();
  var _index = requireParser();
  var _cloneDeep = requireCloneDeep();
  const {
    file: file2,
    traverseFast: traverseFast2
  } = _t();
  const debug2 = _debug()("babel:transform:file");
  const INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/;
  const EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
  function* normalizeFile$1(pluginPasses, options2, code, ast) {
    code = `${code || ""}`;
    if (ast) {
      if (ast.type === "Program") {
        ast = file2(ast, [], []);
      } else if (ast.type !== "File") {
        throw new Error("AST root must be a Program or File node");
      }
      if (options2.cloneInputAst) {
        ast = (0, _cloneDeep.default)(ast);
      }
    } else {
      ast = yield* (0, _index.default)(pluginPasses, options2, code);
    }
    let inputMap = null;
    if (options2.inputSourceMap !== false) {
      if (typeof options2.inputSourceMap === "object") {
        inputMap = _convertSourceMap().fromObject(options2.inputSourceMap);
      }
      if (!inputMap) {
        const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
        if (lastComment) {
          try {
            inputMap = _convertSourceMap().fromComment("//" + lastComment);
          } catch (err) {
            {
              debug2("discarding unknown inline input sourcemap");
            }
          }
        }
      }
      if (!inputMap) {
        const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
        if (typeof options2.filename === "string" && lastComment) {
          try {
            const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);
            const inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options2.filename), match[1]), "utf8");
            inputMap = _convertSourceMap().fromJSON(inputMapContent);
          } catch (err) {
            debug2("discarding unknown file input sourcemap", err);
          }
        } else if (lastComment) {
          debug2("discarding un-loadable file input sourcemap");
        }
      }
    }
    return new _file.default(options2, {
      code,
      ast,
      inputMap
    });
  }
  function extractCommentsFromList(regex, comments2, lastComment) {
    if (comments2) {
      comments2 = comments2.filter(({
        value: value2
      }) => {
        if (regex.test(value2)) {
          lastComment = value2;
          return false;
        }
        return true;
      });
    }
    return [comments2, lastComment];
  }
  function extractComments(regex, ast) {
    let lastComment = null;
    traverseFast2(ast, (node2) => {
      [node2.leadingComments, lastComment] = extractCommentsFromList(regex, node2.leadingComments, lastComment);
      [node2.innerComments, lastComment] = extractCommentsFromList(regex, node2.innerComments, lastComment);
      [node2.trailingComments, lastComment] = extractCommentsFromList(regex, node2.trailingComments, lastComment);
    });
    return lastComment;
  }
  return normalizeFile;
}
var generate = {};
var mergeMap = {};
var remapping_umd = { exports: {} };
var hasRequiredRemapping_umd;
function requireRemapping_umd() {
  if (hasRequiredRemapping_umd) return remapping_umd.exports;
  hasRequiredRemapping_umd = 1;
  (function(module, exports) {
    (function(global, factory) {
      module.exports = factory(requireTraceMapping_umd(), requireGenMapping_umd());
    })(commonjsGlobal, function(traceMapping, genMapping) {
      const SOURCELESS_MAPPING = /* @__PURE__ */ SegmentObject("", -1, -1, "", null);
      const EMPTY_SOURCES = [];
      function SegmentObject(source2, line2, column2, name, content) {
        return { source: source2, line: line2, column: column2, name, content };
      }
      function Source(map, sources, source2, content) {
        return {
          map,
          sources,
          source: source2,
          content
        };
      }
      function MapSource(map, sources) {
        return Source(map, sources, "", null);
      }
      function OriginalSource(source2, content) {
        return Source(null, EMPTY_SOURCES, source2, content);
      }
      function traceMappings(tree) {
        const gen = new genMapping.GenMapping({ file: tree.map.file });
        const { sources: rootSources, map } = tree;
        const rootNames = map.names;
        const rootMappings = traceMapping.decodedMappings(map);
        for (let i = 0; i < rootMappings.length; i++) {
          const segments = rootMappings[i];
          for (let j = 0; j < segments.length; j++) {
            const segment = segments[j];
            const genCol = segment[0];
            let traced = SOURCELESS_MAPPING;
            if (segment.length !== 1) {
              const source3 = rootSources[segment[1]];
              traced = originalPositionFor(source3, segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : "");
              if (traced == null)
                continue;
            }
            const { column: column2, line: line2, name, content, source: source2 } = traced;
            genMapping.maybeAddSegment(gen, i, genCol, source2, line2, column2, name);
            if (source2 && content != null)
              genMapping.setSourceContent(gen, source2, content);
          }
        }
        return gen;
      }
      function originalPositionFor(source2, line2, column2, name) {
        if (!source2.map) {
          return SegmentObject(source2.source, line2, column2, name, source2.content);
        }
        const segment = traceMapping.traceSegment(source2.map, line2, column2);
        if (segment == null)
          return null;
        if (segment.length === 1)
          return SOURCELESS_MAPPING;
        return originalPositionFor(source2.sources[segment[1]], segment[2], segment[3], segment.length === 5 ? source2.map.names[segment[4]] : name);
      }
      function asArray(value2) {
        if (Array.isArray(value2))
          return value2;
        return [value2];
      }
      function buildSourceMapTree(input2, loader) {
        const maps = asArray(input2).map((m) => new traceMapping.TraceMap(m, ""));
        const map = maps.pop();
        for (let i = 0; i < maps.length; i++) {
          if (maps[i].sources.length > 1) {
            throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
          }
        }
        let tree = build2(map, loader, "", 0);
        for (let i = maps.length - 1; i >= 0; i--) {
          tree = MapSource(maps[i], [tree]);
        }
        return tree;
      }
      function build2(map, loader, importer, importerDepth) {
        const { resolvedSources, sourcesContent } = map;
        const depth = importerDepth + 1;
        const children = resolvedSources.map((sourceFile, i) => {
          const ctx = {
            importer,
            depth,
            source: sourceFile || "",
            content: void 0
          };
          const sourceMap2 = loader(ctx.source, ctx);
          const { source: source2, content } = ctx;
          if (sourceMap2)
            return build2(new traceMapping.TraceMap(sourceMap2, source2), loader, source2, depth);
          const sourceContent = content !== void 0 ? content : sourcesContent ? sourcesContent[i] : null;
          return OriginalSource(source2, sourceContent);
        });
        return MapSource(map, children);
      }
      class SourceMap {
        constructor(map, options2) {
          const out = options2.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
          this.version = out.version;
          this.file = out.file;
          this.mappings = out.mappings;
          this.names = out.names;
          this.sourceRoot = out.sourceRoot;
          this.sources = out.sources;
          if (!options2.excludeContent) {
            this.sourcesContent = out.sourcesContent;
          }
        }
        toString() {
          return JSON.stringify(this);
        }
      }
      function remapping(input2, loader, options2) {
        const opts = typeof options2 === "object" ? options2 : { excludeContent: !!options2, decodedMappings: false };
        const tree = buildSourceMapTree(input2, loader);
        return new SourceMap(traceMappings(tree), opts);
      }
      return remapping;
    });
  })(remapping_umd);
  return remapping_umd.exports;
}
var hasRequiredMergeMap;
function requireMergeMap() {
  if (hasRequiredMergeMap) return mergeMap;
  hasRequiredMergeMap = 1;
  Object.defineProperty(mergeMap, "__esModule", {
    value: true
  });
  mergeMap.default = mergeSourceMap;
  function _remapping() {
    const data = requireRemapping_umd();
    _remapping = function() {
      return data;
    };
    return data;
  }
  function mergeSourceMap(inputMap, map, sourceFileName) {
    const source2 = sourceFileName.replace(/\\/g, "/");
    let found = false;
    const result = _remapping()(rootless(map), (s, ctx) => {
      if (s === source2 && !found) {
        found = true;
        ctx.source = "";
        return rootless(inputMap);
      }
      return null;
    });
    if (typeof inputMap.sourceRoot === "string") {
      result.sourceRoot = inputMap.sourceRoot;
    }
    return Object.assign({}, result);
  }
  function rootless(map) {
    return Object.assign({}, map, {
      sourceRoot: null
    });
  }
  return mergeMap;
}
var hasRequiredGenerate;
function requireGenerate() {
  if (hasRequiredGenerate) return generate;
  hasRequiredGenerate = 1;
  Object.defineProperty(generate, "__esModule", {
    value: true
  });
  generate.default = generateCode;
  function _convertSourceMap() {
    const data = requireConvertSourceMap();
    _convertSourceMap = function() {
      return data;
    };
    return data;
  }
  function _generator() {
    const data = requireLib$L();
    _generator = function() {
      return data;
    };
    return data;
  }
  var _mergeMap = requireMergeMap();
  function generateCode(pluginPasses, file2) {
    const {
      opts,
      ast,
      code,
      inputMap
    } = file2;
    const {
      generatorOpts
    } = opts;
    generatorOpts.inputSourceMap = inputMap == null ? void 0 : inputMap.toObject();
    const results = [];
    for (const plugins2 of pluginPasses) {
      for (const plugin2 of plugins2) {
        const {
          generatorOverride
        } = plugin2;
        if (generatorOverride) {
          const result2 = generatorOverride(ast, generatorOpts, code, _generator().default);
          if (result2 !== void 0) results.push(result2);
        }
      }
    }
    let result;
    if (results.length === 0) {
      result = (0, _generator().default)(ast, generatorOpts, code);
    } else if (results.length === 1) {
      result = results[0];
      if (typeof result.then === "function") {
        throw new Error(`You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
      }
    } else {
      throw new Error("More than one plugin attempted to override codegen.");
    }
    let {
      code: outputCode,
      decodedMap: outputMap = result.map
    } = result;
    if (result.__mergedMap) {
      outputMap = Object.assign({}, result.map);
    } else {
      if (outputMap) {
        if (inputMap) {
          outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName);
        } else {
          outputMap = result.map;
        }
      }
    }
    if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
      outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment();
    }
    if (opts.sourceMaps === "inline") {
      outputMap = null;
    }
    return {
      outputCode,
      outputMap
    };
  }
  return generate;
}
var hasRequiredTransformation;
function requireTransformation() {
  if (hasRequiredTransformation) return transformation;
  hasRequiredTransformation = 1;
  Object.defineProperty(transformation, "__esModule", {
    value: true
  });
  transformation.run = run;
  function _traverse() {
    const data = requireLib$E();
    _traverse = function() {
      return data;
    };
    return data;
  }
  var _pluginPass = requirePluginPass();
  var _blockHoistPlugin = requireBlockHoistPlugin();
  var _normalizeOpts = requireNormalizeOpts();
  var _normalizeFile = requireNormalizeFile();
  var _generate = requireGenerate();
  var _deepArray = requireDeepArray();
  function* run(config2, code, ast) {
    const file2 = yield* (0, _normalizeFile.default)(config2.passes, (0, _normalizeOpts.default)(config2), code, ast);
    const opts = file2.opts;
    try {
      yield* transformFile(file2, config2.passes);
    } catch (e) {
      var _opts$filename;
      e.message = `${(_opts$filename = opts.filename) != null ? _opts$filename : "unknown file"}: ${e.message}`;
      if (!e.code) {
        e.code = "BABEL_TRANSFORM_ERROR";
      }
      throw e;
    }
    let outputCode, outputMap;
    try {
      if (opts.code !== false) {
        ({
          outputCode,
          outputMap
        } = (0, _generate.default)(config2.passes, file2));
      }
    } catch (e) {
      var _opts$filename2;
      e.message = `${(_opts$filename2 = opts.filename) != null ? _opts$filename2 : "unknown file"}: ${e.message}`;
      if (!e.code) {
        e.code = "BABEL_GENERATE_ERROR";
      }
      throw e;
    }
    return {
      metadata: file2.metadata,
      options: opts,
      ast: opts.ast === true ? file2.ast : null,
      code: outputCode === void 0 ? null : outputCode,
      map: outputMap === void 0 ? null : outputMap,
      sourceType: file2.ast.program.sourceType,
      externalDependencies: (0, _deepArray.flattenToSet)(config2.externalDependencies)
    };
  }
  function* transformFile(file2, pluginPasses) {
    for (const pluginPairs of pluginPasses) {
      const passPairs = [];
      const passes = [];
      const visitors2 = [];
      for (const plugin2 of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
        const pass = new _pluginPass.default(file2, plugin2.key, plugin2.options);
        passPairs.push([plugin2, pass]);
        passes.push(pass);
        visitors2.push(plugin2.visitor);
      }
      for (const [plugin2, pass] of passPairs) {
        const fn2 = plugin2.pre;
        if (fn2) {
          const result = fn2.call(pass, file2);
          yield* [];
          if (isThenable(result)) {
            throw new Error(`You appear to be using an plugin with an async .pre, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
          }
        }
      }
      const visitor = _traverse().default.visitors.merge(visitors2, passes, file2.opts.wrapPluginVisitorMethod);
      {
        (0, _traverse().default)(file2.ast, visitor, file2.scope);
      }
      for (const [plugin2, pass] of passPairs) {
        const fn2 = plugin2.post;
        if (fn2) {
          const result = fn2.call(pass, file2);
          yield* [];
          if (isThenable(result)) {
            throw new Error(`You appear to be using an plugin with an async .post, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
          }
        }
      }
    }
  }
  function isThenable(val) {
    return !!val && (typeof val === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
  }
  return transformation;
}
var hasRequiredTransform;
function requireTransform() {
  if (hasRequiredTransform) return transform;
  hasRequiredTransform = 1;
  Object.defineProperty(transform, "__esModule", {
    value: true
  });
  transform.transform = void 0;
  transform.transformAsync = transformAsync;
  transform.transformSync = transformSync;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _index = requireConfig();
  var _index2 = requireTransformation();
  var _rewriteStackTrace = requireRewriteStackTrace();
  const transformRunner = _gensync()(function* transform2(code, opts) {
    const config2 = yield* (0, _index.default)(opts);
    if (config2 === null) return null;
    return yield* (0, _index2.run)(config2, code);
  });
  transform.transform = function transform2(code, optsOrCallback, maybeCallback) {
    let opts;
    let callback;
    if (typeof optsOrCallback === "function") {
      callback = optsOrCallback;
      opts = void 0;
    } else {
      opts = optsOrCallback;
      callback = maybeCallback;
    }
    if (callback === void 0) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
  };
  function transformSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
  }
  function transformAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
  }
  return transform;
}
var transformFileBrowser = {};
var hasRequiredTransformFileBrowser;
function requireTransformFileBrowser() {
  if (hasRequiredTransformFileBrowser) return transformFileBrowser;
  hasRequiredTransformFileBrowser = 1;
  Object.defineProperty(transformFileBrowser, "__esModule", {
    value: true
  });
  transformFileBrowser.transformFile = void 0;
  transformFileBrowser.transformFileAsync = transformFileAsync;
  transformFileBrowser.transformFileSync = transformFileSync;
  transformFileBrowser.transformFile = function transformFile(filename, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
    }
    callback(new Error("Transforming files is not supported in browsers"), null);
  };
  function transformFileSync() {
    throw new Error("Transforming files is not supported in browsers");
  }
  function transformFileAsync() {
    return Promise.reject(new Error("Transforming files is not supported in browsers"));
  }
  return transformFileBrowser;
}
var transformAst = {};
var hasRequiredTransformAst;
function requireTransformAst() {
  if (hasRequiredTransformAst) return transformAst;
  hasRequiredTransformAst = 1;
  Object.defineProperty(transformAst, "__esModule", {
    value: true
  });
  transformAst.transformFromAst = void 0;
  transformAst.transformFromAstAsync = transformFromAstAsync;
  transformAst.transformFromAstSync = transformFromAstSync;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _index = requireConfig();
  var _index2 = requireTransformation();
  var _rewriteStackTrace = requireRewriteStackTrace();
  const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
    const config2 = yield* (0, _index.default)(opts);
    if (config2 === null) return null;
    if (!ast) throw new Error("No AST given");
    return yield* (0, _index2.run)(config2, code, ast);
  });
  transformAst.transformFromAst = function transformFromAst(ast, code, optsOrCallback, maybeCallback) {
    let opts;
    let callback;
    if (typeof optsOrCallback === "function") {
      callback = optsOrCallback;
      opts = void 0;
    } else {
      opts = optsOrCallback;
      callback = maybeCallback;
    }
    if (callback === void 0) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
  };
  function transformFromAstSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
  }
  function transformFromAstAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
  }
  return transformAst;
}
var parse$1 = {};
var hasRequiredParse;
function requireParse() {
  if (hasRequiredParse) return parse$1;
  hasRequiredParse = 1;
  Object.defineProperty(parse$1, "__esModule", {
    value: true
  });
  parse$1.parse = void 0;
  parse$1.parseAsync = parseAsync;
  parse$1.parseSync = parseSync;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _index = requireConfig();
  var _index2 = requireParser();
  var _normalizeOpts = requireNormalizeOpts();
  var _rewriteStackTrace = requireRewriteStackTrace();
  const parseRunner = _gensync()(function* parse3(code, opts) {
    const config2 = yield* (0, _index.default)(opts);
    if (config2 === null) {
      return null;
    }
    return yield* (0, _index2.default)(config2.passes, (0, _normalizeOpts.default)(config2), code);
  });
  parse$1.parse = function parse3(code, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = void 0;
    }
    if (callback === void 0) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
  };
  function parseSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
  }
  function parseAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
  }
  return parse$1;
}
var hasRequiredLib$x;
function requireLib$x() {
  if (hasRequiredLib$x) return lib$Q;
  hasRequiredLib$x = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DEFAULT_EXTENSIONS = void 0;
    Object.defineProperty(exports, "File", {
      enumerable: true,
      get: function() {
        return _file.default;
      }
    });
    Object.defineProperty(exports, "buildExternalHelpers", {
      enumerable: true,
      get: function() {
        return _buildExternalHelpers.default;
      }
    });
    Object.defineProperty(exports, "createConfigItem", {
      enumerable: true,
      get: function() {
        return _index2.createConfigItem;
      }
    });
    Object.defineProperty(exports, "createConfigItemAsync", {
      enumerable: true,
      get: function() {
        return _index2.createConfigItemAsync;
      }
    });
    Object.defineProperty(exports, "createConfigItemSync", {
      enumerable: true,
      get: function() {
        return _index2.createConfigItemSync;
      }
    });
    Object.defineProperty(exports, "getEnv", {
      enumerable: true,
      get: function() {
        return _environment.getEnv;
      }
    });
    Object.defineProperty(exports, "loadOptions", {
      enumerable: true,
      get: function() {
        return _index2.loadOptions;
      }
    });
    Object.defineProperty(exports, "loadOptionsAsync", {
      enumerable: true,
      get: function() {
        return _index2.loadOptionsAsync;
      }
    });
    Object.defineProperty(exports, "loadOptionsSync", {
      enumerable: true,
      get: function() {
        return _index2.loadOptionsSync;
      }
    });
    Object.defineProperty(exports, "loadPartialConfig", {
      enumerable: true,
      get: function() {
        return _index2.loadPartialConfig;
      }
    });
    Object.defineProperty(exports, "loadPartialConfigAsync", {
      enumerable: true,
      get: function() {
        return _index2.loadPartialConfigAsync;
      }
    });
    Object.defineProperty(exports, "loadPartialConfigSync", {
      enumerable: true,
      get: function() {
        return _index2.loadPartialConfigSync;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function() {
        return _parse.parse;
      }
    });
    Object.defineProperty(exports, "parseAsync", {
      enumerable: true,
      get: function() {
        return _parse.parseAsync;
      }
    });
    Object.defineProperty(exports, "parseSync", {
      enumerable: true,
      get: function() {
        return _parse.parseSync;
      }
    });
    Object.defineProperty(exports, "resolvePlugin", {
      enumerable: true,
      get: function() {
        return _index.resolvePlugin;
      }
    });
    Object.defineProperty(exports, "resolvePreset", {
      enumerable: true,
      get: function() {
        return _index.resolvePreset;
      }
    });
    Object.defineProperty(exports, "template", {
      enumerable: true,
      get: function() {
        return _template().default;
      }
    });
    Object.defineProperty(exports, "tokTypes", {
      enumerable: true,
      get: function() {
        return _parser().tokTypes;
      }
    });
    Object.defineProperty(exports, "transform", {
      enumerable: true,
      get: function() {
        return _transform.transform;
      }
    });
    Object.defineProperty(exports, "transformAsync", {
      enumerable: true,
      get: function() {
        return _transform.transformAsync;
      }
    });
    Object.defineProperty(exports, "transformFile", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFile;
      }
    });
    Object.defineProperty(exports, "transformFileAsync", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFileAsync;
      }
    });
    Object.defineProperty(exports, "transformFileSync", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFileSync;
      }
    });
    Object.defineProperty(exports, "transformFromAst", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAst;
      }
    });
    Object.defineProperty(exports, "transformFromAstAsync", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAstAsync;
      }
    });
    Object.defineProperty(exports, "transformFromAstSync", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAstSync;
      }
    });
    Object.defineProperty(exports, "transformSync", {
      enumerable: true,
      get: function() {
        return _transform.transformSync;
      }
    });
    Object.defineProperty(exports, "traverse", {
      enumerable: true,
      get: function() {
        return _traverse().default;
      }
    });
    exports.version = exports.types = void 0;
    var _file = requireFile();
    var _buildExternalHelpers = requireBuildExternalHelpers();
    var _index = requireIndexBrowser();
    var _environment = requireEnvironment();
    function _types() {
      const data = requireLib$O();
      _types = function() {
        return data;
      };
      return data;
    }
    Object.defineProperty(exports, "types", {
      enumerable: true,
      get: function() {
        return _types();
      }
    });
    function _parser() {
      const data = requireLib$I();
      _parser = function() {
        return data;
      };
      return data;
    }
    function _traverse() {
      const data = requireLib$E();
      _traverse = function() {
        return data;
      };
      return data;
    }
    function _template() {
      const data = requireLib$G();
      _template = function() {
        return data;
      };
      return data;
    }
    var _index2 = requireConfig();
    var _transform = requireTransform();
    var _transformFile = requireTransformFileBrowser();
    var _transformAst = requireTransformAst();
    var _parse = requireParse();
    requireLib$x();
    exports.version = "7.24.4";
    exports.DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
    {
      exports.OptionManager = class OptionManager {
        init(opts) {
          return (0, _index2.loadOptionsSync)(opts);
        }
      };
      exports.Plugin = function Plugin(alias) {
        throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
      };
    }
  })(lib$Q);
  return lib$Q;
}
var decorators = {};
var lib$w = {};
var lib$v = {};
var hasRequiredLib$w;
function requireLib$w() {
  if (hasRequiredLib$w) return lib$v;
  hasRequiredLib$w = 1;
  Object.defineProperty(lib$v, "__esModule", { value: true });
  var _t = requireLib$O();
  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = /* @__PURE__ */ Object.create(null);
    if (e) {
      Object.keys(e).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function() {
              return e[k];
            }
          });
        }
      });
    }
    n.default = e;
    return Object.freeze(n);
  }
  var _t__namespace = /* @__PURE__ */ _interopNamespace(_t);
  function willPathCastToBoolean(path2) {
    const maybeWrapped = path2;
    const {
      node: node2,
      parentPath
    } = maybeWrapped;
    if (parentPath.isLogicalExpression()) {
      const {
        operator,
        right
      } = parentPath.node;
      if (operator === "&&" || operator === "||" || operator === "??" && node2 === right) {
        return willPathCastToBoolean(parentPath);
      }
    }
    if (parentPath.isSequenceExpression()) {
      const {
        expressions: expressions2
      } = parentPath.node;
      if (expressions2[expressions2.length - 1] === node2) {
        return willPathCastToBoolean(parentPath);
      } else {
        return true;
      }
    }
    return parentPath.isConditional({
      test: node2
    }) || parentPath.isUnaryExpression({
      operator: "!"
    }) || parentPath.isLoop({
      test: node2
    });
  }
  const {
    LOGICAL_OPERATORS,
    arrowFunctionExpression,
    assignmentExpression,
    binaryExpression,
    booleanLiteral,
    callExpression,
    cloneNode: cloneNode2,
    conditionalExpression,
    identifier: identifier2,
    isMemberExpression,
    isOptionalCallExpression,
    isOptionalMemberExpression,
    isUpdateExpression,
    logicalExpression,
    memberExpression,
    nullLiteral,
    optionalCallExpression,
    optionalMemberExpression,
    sequenceExpression,
    updateExpression
  } = _t__namespace;
  class AssignmentMemoiser {
    constructor() {
      this._map = void 0;
      this._map = /* @__PURE__ */ new WeakMap();
    }
    has(key2) {
      return this._map.has(key2);
    }
    get(key2) {
      if (!this.has(key2)) return;
      const record = this._map.get(key2);
      const {
        value: value2
      } = record;
      record.count--;
      if (record.count === 0) {
        return assignmentExpression("=", value2, key2);
      }
      return value2;
    }
    set(key2, value2, count) {
      return this._map.set(key2, {
        count,
        value: value2
      });
    }
  }
  function toNonOptional(path2, base2) {
    const {
      node: node2
    } = path2;
    if (isOptionalMemberExpression(node2)) {
      return memberExpression(base2, node2.property, node2.computed);
    }
    if (path2.isOptionalCallExpression()) {
      const callee = path2.get("callee");
      if (path2.node.optional && callee.isOptionalMemberExpression()) {
        const object = callee.node.object;
        const context2 = path2.scope.maybeGenerateMemoised(object);
        callee.get("object").replaceWith(assignmentExpression("=", context2, object));
        return callExpression(memberExpression(base2, identifier2("call")), [context2, ...path2.node.arguments]);
      }
      return callExpression(base2, path2.node.arguments);
    }
    return path2.node;
  }
  function isInDetachedTree(path2) {
    while (path2) {
      if (path2.isProgram()) break;
      const {
        parentPath,
        container,
        listKey
      } = path2;
      const parentNode = parentPath.node;
      if (listKey) {
        if (container !== parentNode[listKey]) {
          return true;
        }
      } else {
        if (container !== parentNode) return true;
      }
      path2 = parentPath;
    }
    return false;
  }
  const handle = {
    memoise() {
    },
    handle(member, noDocumentAll) {
      const {
        node: node2,
        parent,
        parentPath,
        scope: scope2
      } = member;
      if (member.isOptionalMemberExpression()) {
        if (isInDetachedTree(member)) return;
        const endPath = member.find(({
          node: node3,
          parent: parent2
        }) => {
          if (isOptionalMemberExpression(parent2)) {
            return parent2.optional || parent2.object !== node3;
          }
          if (isOptionalCallExpression(parent2)) {
            return node3 !== member.node && parent2.optional || parent2.callee !== node3;
          }
          return true;
        });
        if (scope2.path.isPattern()) {
          endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
          return;
        }
        const willEndPathCastToBoolean = willPathCastToBoolean(endPath);
        const rootParentPath = endPath.parentPath;
        if (rootParentPath.isUpdateExpression({
          argument: node2
        })) {
          throw member.buildCodeFrameError(`can't handle update expression`);
        }
        const isAssignment = rootParentPath.isAssignmentExpression({
          left: endPath.node
        });
        const isDeleteOperation = rootParentPath.isUnaryExpression({
          operator: "delete"
        });
        if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName()) {
          throw member.buildCodeFrameError(`can't delete a private class element`);
        }
        let startingOptional = member;
        for (; ; ) {
          if (startingOptional.isOptionalMemberExpression()) {
            if (startingOptional.node.optional) break;
            startingOptional = startingOptional.get("object");
            continue;
          } else if (startingOptional.isOptionalCallExpression()) {
            if (startingOptional.node.optional) break;
            startingOptional = startingOptional.get("callee");
            continue;
          }
          throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
        }
        const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee;
        const baseNeedsMemoised = scope2.maybeGenerateMemoised(startingNode);
        const baseRef = baseNeedsMemoised != null ? baseNeedsMemoised : startingNode;
        const parentIsOptionalCall = parentPath.isOptionalCallExpression({
          callee: node2
        });
        const isOptionalCall = (parent2) => parentIsOptionalCall;
        const parentIsCall = parentPath.isCallExpression({
          callee: node2
        });
        startingOptional.replaceWith(toNonOptional(startingOptional, baseRef));
        if (isOptionalCall()) {
          if (parent.optional) {
            parentPath.replaceWith(this.optionalCall(member, parent.arguments));
          } else {
            parentPath.replaceWith(this.call(member, parent.arguments));
          }
        } else if (parentIsCall) {
          member.replaceWith(this.boundGet(member));
        } else if (this.delete && parentPath.isUnaryExpression({
          operator: "delete"
        })) {
          parentPath.replaceWith(this.delete(member));
        } else if (parentPath.isAssignmentExpression()) {
          handleAssignment(this, member, parentPath);
        } else {
          member.replaceWith(this.get(member));
        }
        let regular = member.node;
        for (let current = member; current !== endPath; ) {
          const parentPath2 = current.parentPath;
          if (parentPath2 === endPath && isOptionalCall() && parent.optional) {
            regular = parentPath2.node;
            break;
          }
          regular = toNonOptional(parentPath2, regular);
          current = parentPath2;
        }
        let context2;
        const endParentPath = endPath.parentPath;
        if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({
          callee: endPath.node,
          optional: true
        })) {
          const {
            object
          } = regular;
          context2 = member.scope.maybeGenerateMemoised(object);
          if (context2) {
            regular.object = assignmentExpression("=", context2, object);
          }
        }
        let replacementPath = endPath;
        if (isDeleteOperation || isAssignment) {
          replacementPath = endParentPath;
          regular = endParentPath.node;
        }
        const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode2(baseRef), cloneNode2(startingNode)) : cloneNode2(baseRef);
        if (willEndPathCastToBoolean) {
          let nonNullishCheck;
          if (noDocumentAll) {
            nonNullishCheck = binaryExpression("!=", baseMemoised, nullLiteral());
          } else {
            nonNullishCheck = logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode2(baseRef), scope2.buildUndefinedNode()));
          }
          replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
        } else {
          let nullishCheck;
          if (noDocumentAll) {
            nullishCheck = binaryExpression("==", baseMemoised, nullLiteral());
          } else {
            nullishCheck = logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode2(baseRef), scope2.buildUndefinedNode()));
          }
          replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope2.buildUndefinedNode(), regular));
        }
        if (context2) {
          const endParent = endParentPath.node;
          endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier2("call"), false, true), [cloneNode2(context2), ...endParent.arguments], false));
        }
        return;
      }
      if (isUpdateExpression(parent, {
        argument: node2
      })) {
        if (this.simpleSet) {
          member.replaceWith(this.simpleSet(member));
          return;
        }
        const {
          operator,
          prefix
        } = parent;
        this.memoise(member, 2);
        const ref = scope2.generateUidIdentifierBasedOnNode(node2);
        scope2.push({
          id: ref
        });
        const seq = [assignmentExpression("=", cloneNode2(ref), this.get(member))];
        if (prefix) {
          seq.push(updateExpression(operator, cloneNode2(ref), prefix));
          const value2 = sequenceExpression(seq);
          parentPath.replaceWith(this.set(member, value2));
          return;
        } else {
          const ref2 = scope2.generateUidIdentifierBasedOnNode(node2);
          scope2.push({
            id: ref2
          });
          seq.push(assignmentExpression("=", cloneNode2(ref2), updateExpression(operator, cloneNode2(ref), prefix)), cloneNode2(ref));
          const value2 = sequenceExpression(seq);
          parentPath.replaceWith(sequenceExpression([this.set(member, value2), cloneNode2(ref2)]));
          return;
        }
      }
      if (parentPath.isAssignmentExpression({
        left: node2
      })) {
        handleAssignment(this, member, parentPath);
        return;
      }
      if (parentPath.isCallExpression({
        callee: node2
      })) {
        parentPath.replaceWith(this.call(member, parentPath.node.arguments));
        return;
      }
      if (parentPath.isOptionalCallExpression({
        callee: node2
      })) {
        if (scope2.path.isPattern()) {
          parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), []));
          return;
        }
        parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments));
        return;
      }
      if (this.delete && parentPath.isUnaryExpression({
        operator: "delete"
      })) {
        parentPath.replaceWith(this.delete(member));
        return;
      }
      if (parentPath.isForXStatement({
        left: node2
      }) || parentPath.isObjectProperty({
        value: node2
      }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({
        left: node2
      }) && parentPath.parentPath.isObjectProperty({
        value: parent
      }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({
        left: node2
      }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement()) {
        member.replaceWith(this.destructureSet(member));
        return;
      }
      if (parentPath.isTaggedTemplateExpression()) {
        member.replaceWith(this.boundGet(member));
      } else {
        member.replaceWith(this.get(member));
      }
    }
  };
  function handleAssignment(state2, member, parentPath) {
    if (state2.simpleSet) {
      member.replaceWith(state2.simpleSet(member));
      return;
    }
    const {
      operator,
      right: value2
    } = parentPath.node;
    if (operator === "=") {
      parentPath.replaceWith(state2.set(member, value2));
    } else {
      const operatorTrunc = operator.slice(0, -1);
      if (LOGICAL_OPERATORS.includes(operatorTrunc)) {
        state2.memoise(member, 1);
        parentPath.replaceWith(logicalExpression(operatorTrunc, state2.get(member), state2.set(member, value2)));
      } else {
        state2.memoise(member, 2);
        parentPath.replaceWith(state2.set(member, binaryExpression(operatorTrunc, state2.get(member), value2)));
      }
    }
  }
  function memberExpressionToFunctions(path2, visitor, state2) {
    path2.traverse(visitor, Object.assign({}, handle, state2, {
      memoiser: new AssignmentMemoiser()
    }));
  }
  lib$v.default = memberExpressionToFunctions;
  return lib$v;
}
var lib$u = {};
var hasRequiredLib$v;
function requireLib$v() {
  if (hasRequiredLib$v) return lib$u;
  hasRequiredLib$v = 1;
  Object.defineProperty(lib$u, "__esModule", {
    value: true
  });
  lib$u.default = optimiseCallExpression;
  var _t = requireLib$O();
  const {
    callExpression,
    identifier: identifier2,
    isIdentifier,
    isSpreadElement,
    memberExpression,
    optionalCallExpression,
    optionalMemberExpression
  } = _t;
  function optimiseCallExpression(callee, thisNode, args, optional) {
    if (args.length === 1 && isSpreadElement(args[0]) && isIdentifier(args[0].argument, {
      name: "arguments"
    })) {
      if (optional) {
        return optionalCallExpression(optionalMemberExpression(callee, identifier2("apply"), false, true), [thisNode, args[0].argument], false);
      }
      return callExpression(memberExpression(callee, identifier2("apply")), [thisNode, args[0].argument]);
    } else {
      if (optional) {
        return optionalCallExpression(optionalMemberExpression(callee, identifier2("call"), false, true), [thisNode, ...args], false);
      }
      return callExpression(memberExpression(callee, identifier2("call")), [thisNode, ...args]);
    }
  }
  return lib$u;
}
var hasRequiredLib$u;
function requireLib$u() {
  if (hasRequiredLib$u) return lib$w;
  hasRequiredLib$u = 1;
  Object.defineProperty(lib$w, "__esModule", {
    value: true
  });
  lib$w.default = void 0;
  var _helperEnvironmentVisitor = requireLib$M();
  var _helperMemberExpressionToFunctions = requireLib$w();
  var _helperOptimiseCallExpression = requireLib$v();
  var _core = requireLib$x();
  const {
    assignmentExpression,
    booleanLiteral,
    callExpression,
    cloneNode: cloneNode2,
    identifier: identifier2,
    memberExpression,
    sequenceExpression,
    stringLiteral,
    thisExpression
  } = _core.types;
  {
    const ns = requireLib$M();
    lib$w.environmentVisitor = ns.default;
    lib$w.skipAllButComputedKey = ns.skipAllButComputedKey;
  }
  function getPrototypeOfExpression(objectRef, isStatic, file2, isPrivateMethod) {
    objectRef = cloneNode2(objectRef);
    const targetRef = isStatic || isPrivateMethod ? objectRef : memberExpression(objectRef, identifier2("prototype"));
    return callExpression(file2.addHelper("getPrototypeOf"), [targetRef]);
  }
  const visitor = _core.traverse.visitors.merge([_helperEnvironmentVisitor.default, {
    Super(path2, state2) {
      const {
        node: node2,
        parentPath
      } = path2;
      if (!parentPath.isMemberExpression({
        object: node2
      })) return;
      state2.handle(parentPath);
    }
  }]);
  const unshadowSuperBindingVisitor = _core.traverse.visitors.merge([_helperEnvironmentVisitor.default, {
    Scopable(path2, {
      refName
    }) {
      const binding2 = path2.scope.getOwnBinding(refName);
      if (binding2 && binding2.identifier.name === refName) {
        path2.scope.rename(refName);
      }
    }
  }]);
  const specHandlers = {
    memoise(superMember, count) {
      const {
        scope: scope2,
        node: node2
      } = superMember;
      const {
        computed,
        property
      } = node2;
      if (!computed) {
        return;
      }
      const memo = scope2.maybeGenerateMemoised(property);
      if (!memo) {
        return;
      }
      this.memoiser.set(property, memo, count);
    },
    prop(superMember) {
      const {
        computed,
        property
      } = superMember.node;
      if (this.memoiser.has(property)) {
        return cloneNode2(this.memoiser.get(property));
      }
      if (computed) {
        return cloneNode2(property);
      }
      return stringLiteral(property.name);
    },
    get(superMember) {
      return this._get(superMember, this._getThisRefs());
    },
    _get(superMember, thisRefs) {
      const proto2 = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
      return callExpression(this.file.addHelper("get"), [thisRefs.needAccessFirst ? sequenceExpression([thisRefs.this, proto2]) : proto2, this.prop(superMember), thisRefs.this]);
    },
    _getThisRefs() {
      return {
        needAccessFirst: this.isDerivedConstructor,
        this: thisExpression()
      };
    },
    set(superMember, value2) {
      const thisRefs = this._getThisRefs();
      const proto2 = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
      return callExpression(this.file.addHelper("set"), [thisRefs.needAccessFirst ? sequenceExpression([thisRefs.this, proto2]) : proto2, this.prop(superMember), value2, thisRefs.this, booleanLiteral(superMember.isInStrictMode())]);
    },
    destructureSet(superMember) {
      throw superMember.buildCodeFrameError(`Destructuring to a super field is not supported yet.`);
    },
    call(superMember, args) {
      const thisRefs = this._getThisRefs();
      return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode2(thisRefs.this), args, false);
    },
    optionalCall(superMember, args) {
      const thisRefs = this._getThisRefs();
      return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode2(thisRefs.this), args, true);
    },
    delete(superMember) {
      if (superMember.node.computed) {
        return sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode2(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]);
      } else {
        return _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
      }
    }
  };
  const looseHandlers = Object.assign({}, specHandlers, {
    prop(superMember) {
      const {
        property
      } = superMember.node;
      if (this.memoiser.has(property)) {
        return cloneNode2(this.memoiser.get(property));
      }
      return cloneNode2(property);
    },
    get(superMember) {
      const {
        isStatic,
        getSuperRef
      } = this;
      const {
        computed
      } = superMember.node;
      const prop = this.prop(superMember);
      let object;
      if (isStatic) {
        var _getSuperRef;
        object = (_getSuperRef = getSuperRef()) != null ? _getSuperRef : memberExpression(identifier2("Function"), identifier2("prototype"));
      } else {
        var _getSuperRef2;
        object = memberExpression((_getSuperRef2 = getSuperRef()) != null ? _getSuperRef2 : identifier2("Object"), identifier2("prototype"));
      }
      return memberExpression(object, prop, computed);
    },
    set(superMember, value2) {
      const {
        computed
      } = superMember.node;
      const prop = this.prop(superMember);
      return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value2);
    },
    destructureSet(superMember) {
      const {
        computed
      } = superMember.node;
      const prop = this.prop(superMember);
      return memberExpression(thisExpression(), prop, computed);
    },
    call(superMember, args) {
      return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
    },
    optionalCall(superMember, args) {
      return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
    }
  });
  class ReplaceSupers {
    constructor(opts) {
      var _opts$constantSuper;
      const path2 = opts.methodPath;
      this.methodPath = path2;
      this.isDerivedConstructor = path2.isClassMethod({
        kind: "constructor"
      }) && !!opts.superRef;
      this.isStatic = path2.isObjectMethod() || path2.node.static || (path2.isStaticBlock == null ? void 0 : path2.isStaticBlock());
      this.isPrivateMethod = path2.isPrivate() && path2.isMethod();
      this.file = opts.file;
      this.constantSuper = (_opts$constantSuper = opts.constantSuper) != null ? _opts$constantSuper : opts.isLoose;
      this.opts = opts;
    }
    getObjectRef() {
      return cloneNode2(this.opts.objectRef || this.opts.getObjectRef());
    }
    getSuperRef() {
      if (this.opts.superRef) return cloneNode2(this.opts.superRef);
      if (this.opts.getSuperRef) {
        return cloneNode2(this.opts.getSuperRef());
      }
    }
    replace() {
      const {
        methodPath
      } = this;
      if (this.opts.refToPreserve) {
        methodPath.traverse(unshadowSuperBindingVisitor, {
          refName: this.opts.refToPreserve.name
        });
      }
      const handler = this.constantSuper ? looseHandlers : specHandlers;
      visitor.shouldSkip = (path2) => {
        if (path2.parentPath === methodPath) {
          if (path2.parentKey === "decorators" || path2.parentKey === "key") {
            return true;
          }
        }
      };
      (0, _helperMemberExpressionToFunctions.default)(methodPath, visitor, Object.assign({
        file: this.file,
        scope: this.methodPath.scope,
        isDerivedConstructor: this.isDerivedConstructor,
        isStatic: this.isStatic,
        isPrivateMethod: this.isPrivateMethod,
        getObjectRef: this.getObjectRef.bind(this),
        getSuperRef: this.getSuperRef.bind(this),
        boundGet: handler.get
      }, handler));
    }
  }
  lib$w.default = ReplaceSupers;
  return lib$w;
}
var lib$t = {};
var hasRequiredLib$t;
function requireLib$t() {
  if (hasRequiredLib$t) return lib$t;
  hasRequiredLib$t = 1;
  Object.defineProperty(lib$t, "__esModule", {
    value: true
  });
  lib$t.isTransparentExprWrapper = isTransparentExprWrapper;
  lib$t.skipTransparentExprWrapperNodes = skipTransparentExprWrapperNodes;
  lib$t.skipTransparentExprWrappers = skipTransparentExprWrappers;
  var _t = requireLib$O();
  const {
    isParenthesizedExpression,
    isTSAsExpression,
    isTSNonNullExpression,
    isTSSatisfiesExpression,
    isTSTypeAssertion,
    isTypeCastExpression
  } = _t;
  function isTransparentExprWrapper(node2) {
    return isTSAsExpression(node2) || isTSSatisfiesExpression(node2) || isTSTypeAssertion(node2) || isTSNonNullExpression(node2) || isTypeCastExpression(node2) || isParenthesizedExpression(node2);
  }
  function skipTransparentExprWrappers(path2) {
    while (isTransparentExprWrapper(path2.node)) {
      path2 = path2.get("expression");
    }
    return path2;
  }
  function skipTransparentExprWrapperNodes(node2) {
    while (isTransparentExprWrapper(node2)) {
      node2 = node2.expression;
    }
    return node2;
  }
  return lib$t;
}
var fields = {};
var lib$s = {};
var hasRequiredLib$s;
function requireLib$s() {
  if (hasRequiredLib$s) return lib$s;
  hasRequiredLib$s = 1;
  Object.defineProperty(lib$s, "__esModule", {
    value: true
  });
  lib$s.default = annotateAsPure;
  var _t = requireLib$O();
  const {
    addComment: addComment2
  } = _t;
  const PURE_ANNOTATION = "#__PURE__";
  const isPureAnnotated = ({
    leadingComments
  }) => !!leadingComments && leadingComments.some((comment) => /[@#]__PURE__/.test(comment.value));
  function annotateAsPure(pathOrNode) {
    const node2 = pathOrNode["node"] || pathOrNode;
    if (isPureAnnotated(node2)) {
      return;
    }
    addComment2(node2, "leading", PURE_ANNOTATION);
  }
  return lib$s;
}
var typescript = {};
var hasRequiredTypescript;
function requireTypescript() {
  if (hasRequiredTypescript) return typescript;
  hasRequiredTypescript = 1;
  Object.defineProperty(typescript, "__esModule", {
    value: true
  });
  typescript.assertFieldTransformed = assertFieldTransformed;
  function assertFieldTransformed(path2) {
    if (path2.node.declare || false) {
      throw path2.buildCodeFrameError(`TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.
If you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:
 - @babel/plugin-transform-class-properties
 - @babel/plugin-transform-private-methods
 - @babel/plugin-proposal-decorators`);
    }
  }
  return typescript;
}
var hasRequiredFields;
function requireFields() {
  if (hasRequiredFields) return fields;
  hasRequiredFields = 1;
  Object.defineProperty(fields, "__esModule", {
    value: true
  });
  fields.buildCheckInRHS = buildCheckInRHS;
  fields.buildFieldsInitNodes = buildFieldsInitNodes;
  fields.buildPrivateNamesMap = buildPrivateNamesMap;
  fields.buildPrivateNamesNodes = buildPrivateNamesNodes;
  fields.privateNameVisitorFactory = privateNameVisitorFactory;
  fields.transformPrivateNamesUsage = transformPrivateNamesUsage;
  var _core = requireLib$x();
  var _helperReplaceSupers = requireLib$u();
  var _helperEnvironmentVisitor = requireLib$M();
  var _helperMemberExpressionToFunctions = requireLib$w();
  var _helperOptimiseCallExpression = requireLib$v();
  var _helperAnnotateAsPure = requireLib$s();
  var _helperSkipTransparentExpressionWrappers = requireLib$t();
  var ts = requireTypescript();
  {
    var newHelpers = (file2) => {
      return file2.availableHelper("classPrivateFieldGet2");
    };
  }
  function buildPrivateNamesMap(className, privateFieldsAsSymbolsOrProperties, props, file2) {
    const privateNamesMap = /* @__PURE__ */ new Map();
    let classBrandId;
    for (const prop of props) {
      if (prop.isPrivate()) {
        const {
          name
        } = prop.node.key.id;
        let update = privateNamesMap.get(name);
        if (!update) {
          const isMethod = !prop.isProperty();
          const isStatic = prop.node.static;
          let initAdded = false;
          let id;
          if (!privateFieldsAsSymbolsOrProperties && newHelpers(file2) && isMethod && !isStatic) {
            var _classBrandId;
            initAdded = !!classBrandId;
            (_classBrandId = classBrandId) != null ? _classBrandId : classBrandId = prop.scope.generateUidIdentifier(`${className}_brand`);
            id = classBrandId;
          } else {
            id = prop.scope.generateUidIdentifier(name);
          }
          update = {
            id,
            static: isStatic,
            method: isMethod,
            initAdded
          };
          privateNamesMap.set(name, update);
        }
        if (prop.isClassPrivateMethod()) {
          if (prop.node.kind === "get") {
            const {
              body
            } = prop.node.body;
            let $;
            if (body.length === 1 && _core.types.isReturnStatement($ = body[0]) && _core.types.isCallExpression($ = $.argument) && $.arguments.length === 1 && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($ = $.callee)) {
              update.getId = _core.types.cloneNode($);
              update.getterDeclared = true;
            } else {
              update.getId = prop.scope.generateUidIdentifier(`get_${name}`);
            }
          } else if (prop.node.kind === "set") {
            const {
              params
            } = prop.node;
            const {
              body
            } = prop.node.body;
            let $;
            if (body.length === 1 && _core.types.isExpressionStatement($ = body[0]) && _core.types.isCallExpression($ = $.expression) && $.arguments.length === 2 && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($.arguments[1], {
              name: params[0].name
            }) && _core.types.isIdentifier($ = $.callee)) {
              update.setId = _core.types.cloneNode($);
              update.setterDeclared = true;
            } else {
              update.setId = prop.scope.generateUidIdentifier(`set_${name}`);
            }
          } else if (prop.node.kind === "method") {
            update.methodId = prop.scope.generateUidIdentifier(name);
          }
        }
        privateNamesMap.set(name, update);
      }
    }
    return privateNamesMap;
  }
  function buildPrivateNamesNodes(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state2) {
    const initNodes = [];
    const injectedIds = /* @__PURE__ */ new Set();
    for (const [name, value2] of privateNamesMap) {
      const {
        static: isStatic,
        method: isMethod,
        getId,
        setId
      } = value2;
      const isGetterOrSetter = getId || setId;
      const id = _core.types.cloneNode(value2.id);
      let init;
      if (privateFieldsAsProperties) {
        init = _core.types.callExpression(state2.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]);
      } else if (privateFieldsAsSymbols) {
        init = _core.types.callExpression(_core.types.identifier("Symbol"), [_core.types.stringLiteral(name)]);
      } else if (!isStatic) {
        if (injectedIds.has(id.name)) continue;
        injectedIds.add(id.name);
        init = _core.types.newExpression(_core.types.identifier(isMethod && (!isGetterOrSetter || newHelpers(state2)) ? "WeakSet" : "WeakMap"), []);
      }
      if (init) {
        if (!privateFieldsAsSymbols) {
          (0, _helperAnnotateAsPure.default)(init);
        }
        initNodes.push(_core.template.statement.ast`var ${id} = ${init}`);
      }
    }
    return initNodes;
  }
  function privateNameVisitorFactory(visitor) {
    const nestedVisitor = _core.traverse.visitors.merge([Object.assign({}, visitor), _helperEnvironmentVisitor.default]);
    const privateNameVisitor2 = Object.assign({}, visitor, {
      Class(path2) {
        const {
          privateNamesMap
        } = this;
        const body = path2.get("body.body");
        const visiblePrivateNames = new Map(privateNamesMap);
        const redeclared = [];
        for (const prop of body) {
          if (!prop.isPrivate()) continue;
          const {
            name
          } = prop.node.key.id;
          visiblePrivateNames.delete(name);
          redeclared.push(name);
        }
        if (!redeclared.length) {
          return;
        }
        path2.get("body").traverse(nestedVisitor, Object.assign({}, this, {
          redeclared
        }));
        path2.traverse(privateNameVisitor2, Object.assign({}, this, {
          privateNamesMap: visiblePrivateNames
        }));
        path2.skipKey("body");
      }
    });
    return privateNameVisitor2;
  }
  const privateNameVisitor = privateNameVisitorFactory({
    PrivateName(path2, {
      noDocumentAll
    }) {
      const {
        privateNamesMap,
        redeclared
      } = this;
      const {
        node: node2,
        parentPath
      } = path2;
      if (!parentPath.isMemberExpression({
        property: node2
      }) && !parentPath.isOptionalMemberExpression({
        property: node2
      })) {
        return;
      }
      const {
        name
      } = node2.id;
      if (!privateNamesMap.has(name)) return;
      if (redeclared && redeclared.includes(name)) return;
      this.handle(parentPath, noDocumentAll);
    }
  });
  function unshadow(name, scope2, innerBinding) {
    while ((_scope = scope2) != null && _scope.hasBinding(name) && !scope2.bindingIdentifierEquals(name, innerBinding)) {
      var _scope;
      scope2.rename(name);
      scope2 = scope2.parent;
    }
  }
  function buildCheckInRHS(rhs, file2, inRHSIsObject) {
    if (inRHSIsObject || !(file2.availableHelper != null && file2.availableHelper("checkInRHS"))) return rhs;
    return _core.types.callExpression(file2.addHelper("checkInRHS"), [rhs]);
  }
  const privateInVisitor = privateNameVisitorFactory({
    BinaryExpression(path2, {
      file: file2
    }) {
      const {
        operator,
        left,
        right
      } = path2.node;
      if (operator !== "in") return;
      if (!_core.types.isPrivateName(left)) return;
      const {
        privateFieldsAsProperties,
        privateNamesMap,
        redeclared
      } = this;
      const {
        name
      } = left.id;
      if (!privateNamesMap.has(name)) return;
      if (redeclared && redeclared.includes(name)) return;
      unshadow(this.classRef.name, path2.scope, this.innerBinding);
      if (privateFieldsAsProperties) {
        const {
          id: id2
        } = privateNamesMap.get(name);
        path2.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file2)}, ${_core.types.cloneNode(id2)})
      `);
        return;
      }
      const {
        id,
        static: isStatic
      } = privateNamesMap.get(name);
      if (isStatic) {
        path2.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file2)} === ${_core.types.cloneNode(this.classRef)}`);
        return;
      }
      path2.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file2)})`);
    }
  });
  function readOnlyError(file2, name) {
    return _core.types.callExpression(file2.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)]);
  }
  function writeOnlyError(file2, name) {
    if (!file2.availableHelper("writeOnlyError")) {
      console.warn(`@babel/helpers is outdated, update it to silence this warning.`);
      return _core.types.buildUndefinedNode();
    }
    return _core.types.callExpression(file2.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)]);
  }
  function buildStaticPrivateFieldAccess(expr, noUninitializedPrivateFieldAccess) {
    if (noUninitializedPrivateFieldAccess) return expr;
    return _core.types.memberExpression(expr, _core.types.identifier("_"));
  }
  const privateNameHandlerSpec = {
    memoise(member, count) {
      const {
        scope: scope2
      } = member;
      const {
        object
      } = member.node;
      const memo = scope2.maybeGenerateMemoised(object);
      if (!memo) {
        return;
      }
      this.memoiser.set(object, memo, count);
    },
    receiver(member) {
      const {
        object
      } = member.node;
      if (this.memoiser.has(object)) {
        return _core.types.cloneNode(this.memoiser.get(object));
      }
      return _core.types.cloneNode(object);
    },
    get(member) {
      const {
        classRef,
        privateNamesMap,
        file: file2,
        innerBinding,
        noUninitializedPrivateFieldAccess
      } = this;
      const {
        name
      } = member.node.property.id;
      const {
        id,
        static: isStatic,
        method: isMethod,
        methodId,
        getId,
        setId
      } = privateNamesMap.get(name);
      const isGetterOrSetter = getId || setId;
      if (isStatic) {
        unshadow(classRef.name, member.scope, innerBinding);
        if (!newHelpers(file2)) {
          const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
          return _core.types.callExpression(file2.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]);
        }
        const receiver = this.receiver(member);
        const skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
        if (!isMethod) {
          if (skipCheck) {
            return buildStaticPrivateFieldAccess(_core.types.cloneNode(id), noUninitializedPrivateFieldAccess);
          }
          return buildStaticPrivateFieldAccess(_core.types.callExpression(file2.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, _core.types.cloneNode(id)]), noUninitializedPrivateFieldAccess);
        }
        if (getId) {
          if (skipCheck) {
            return _core.types.callExpression(_core.types.cloneNode(getId), [receiver]);
          }
          return _core.types.callExpression(file2.addHelper("classPrivateGetter"), [_core.types.cloneNode(classRef), receiver, _core.types.cloneNode(getId)]);
        }
        if (setId) {
          const err = _core.types.buildUndefinedNode();
          if (skipCheck) return err;
          return _core.types.sequenceExpression([_core.types.callExpression(file2.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), err]);
        }
        if (skipCheck) return _core.types.cloneNode(id);
        return _core.types.callExpression(file2.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, _core.types.cloneNode(id)]);
      }
      if (isMethod) {
        if (isGetterOrSetter) {
          if (!getId) {
            return _core.types.sequenceExpression([this.receiver(member), writeOnlyError(file2, name)]);
          }
          if (!newHelpers(file2)) {
            return _core.types.callExpression(file2.addHelper("classPrivateFieldGet"), [this.receiver(member), _core.types.cloneNode(id)]);
          }
          return _core.types.callExpression(file2.addHelper("classPrivateGetter"), [_core.types.cloneNode(id), this.receiver(member), _core.types.cloneNode(getId)]);
        }
        if (!newHelpers(file2)) {
          return _core.types.callExpression(file2.addHelper("classPrivateMethodGet"), [this.receiver(member), _core.types.cloneNode(id), _core.types.cloneNode(methodId)]);
        }
        return _core.types.callExpression(file2.addHelper("assertClassBrand"), [_core.types.cloneNode(id), this.receiver(member), _core.types.cloneNode(methodId)]);
      }
      if (newHelpers(file2)) {
        return _core.types.callExpression(file2.addHelper("classPrivateFieldGet2"), [_core.types.cloneNode(id), this.receiver(member)]);
      }
      return _core.types.callExpression(file2.addHelper("classPrivateFieldGet"), [this.receiver(member), _core.types.cloneNode(id)]);
    },
    boundGet(member) {
      this.memoise(member, 1);
      return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
    },
    set(member, value2) {
      const {
        classRef,
        privateNamesMap,
        file: file2,
        noUninitializedPrivateFieldAccess
      } = this;
      const {
        name
      } = member.node.property.id;
      const {
        id,
        static: isStatic,
        method: isMethod,
        setId,
        getId
      } = privateNamesMap.get(name);
      const isGetterOrSetter = getId || setId;
      if (isStatic) {
        if (!newHelpers(file2)) {
          const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
          return _core.types.callExpression(file2.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id), value2]);
        }
        const receiver = this.receiver(member);
        const skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
        if (isMethod && !setId) {
          const err = readOnlyError(file2, name);
          if (skipCheck) return _core.types.sequenceExpression([value2, err]);
          return _core.types.sequenceExpression([value2, _core.types.callExpression(file2.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), readOnlyError(file2, name)]);
        }
        if (setId) {
          if (skipCheck) {
            return _core.types.callExpression(_core.types.cloneNode(setId), [receiver, value2]);
          }
          return _core.types.callExpression(file2.addHelper("classPrivateSetter"), [_core.types.cloneNode(classRef), _core.types.cloneNode(setId), receiver, value2]);
        }
        return _core.types.assignmentExpression("=", buildStaticPrivateFieldAccess(_core.types.cloneNode(id), noUninitializedPrivateFieldAccess), skipCheck ? value2 : _core.types.callExpression(file2.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, value2]));
      }
      if (isMethod) {
        if (setId) {
          if (!newHelpers(file2)) {
            return _core.types.callExpression(file2.addHelper("classPrivateFieldSet"), [this.receiver(member), _core.types.cloneNode(id), value2]);
          }
          return _core.types.callExpression(file2.addHelper("classPrivateSetter"), [_core.types.cloneNode(id), _core.types.cloneNode(setId), this.receiver(member), value2]);
        }
        return _core.types.sequenceExpression([this.receiver(member), value2, readOnlyError(file2, name)]);
      }
      if (newHelpers(file2)) {
        return _core.types.callExpression(file2.addHelper("classPrivateFieldSet2"), [_core.types.cloneNode(id), this.receiver(member), value2]);
      }
      return _core.types.callExpression(file2.addHelper("classPrivateFieldSet"), [this.receiver(member), _core.types.cloneNode(id), value2]);
    },
    destructureSet(member) {
      const {
        classRef,
        privateNamesMap,
        file: file2,
        noUninitializedPrivateFieldAccess
      } = this;
      const {
        name
      } = member.node.property.id;
      const {
        id,
        static: isStatic,
        method: isMethod,
        setId
      } = privateNamesMap.get(name);
      if (!newHelpers(file2)) {
        if (isStatic) {
          try {
            var helper = file2.addHelper("classStaticPrivateFieldDestructureSet");
          } catch (_unused) {
            throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
          }
          return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]), _core.types.identifier("value"));
        }
        return _core.types.memberExpression(_core.types.callExpression(file2.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), _core.types.cloneNode(id)]), _core.types.identifier("value"));
      }
      if (isMethod && !setId) {
        return _core.types.memberExpression(_core.types.sequenceExpression([member.node.object, readOnlyError(file2, name)]), _core.types.identifier("_"));
      }
      if (isStatic && !isMethod) {
        const getCall = this.get(member);
        if (!noUninitializedPrivateFieldAccess || !_core.types.isCallExpression(getCall)) {
          return getCall;
        }
        const ref = getCall.arguments.pop();
        getCall.arguments.push(_core.template.expression.ast`(_) => ${ref} = _`);
        return _core.types.memberExpression(_core.types.callExpression(file2.addHelper("toSetter"), [getCall]), _core.types.identifier("_"));
      }
      const setCall = this.set(member, _core.types.identifier("_"));
      if (!_core.types.isCallExpression(setCall) || !_core.types.isIdentifier(setCall.arguments[setCall.arguments.length - 1], {
        name: "_"
      })) {
        throw member.buildCodeFrameError("Internal Babel error while compiling this code. This is a Babel bug. Please report it at https://github.com/babel/babel/issues.");
      }
      let args;
      if (_core.types.isMemberExpression(setCall.callee, {
        computed: false
      }) && _core.types.isIdentifier(setCall.callee.property) && setCall.callee.property.name === "call") {
        args = [setCall.callee.object, _core.types.arrayExpression(setCall.arguments.slice(1, -1)), setCall.arguments[0]];
      } else {
        args = [setCall.callee, _core.types.arrayExpression(setCall.arguments.slice(0, -1))];
      }
      return _core.types.memberExpression(_core.types.callExpression(file2.addHelper("toSetter"), args), _core.types.identifier("_"));
    },
    call(member, args) {
      this.memoise(member, 1);
      return (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);
    },
    optionalCall(member, args) {
      this.memoise(member, 1);
      return (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);
    },
    delete() {
      throw new Error("Internal Babel error: deleting private elements is a parsing error.");
    }
  };
  const privateNameHandlerLoose = {
    get(member) {
      const {
        privateNamesMap,
        file: file2
      } = this;
      const {
        object
      } = member.node;
      const {
        name
      } = member.node.property.id;
      return _core.template.expression`BASE(REF, PROP)[PROP]`({
        BASE: file2.addHelper("classPrivateFieldLooseBase"),
        REF: _core.types.cloneNode(object),
        PROP: _core.types.cloneNode(privateNamesMap.get(name).id)
      });
    },
    set() {
      throw new Error("private name handler with loose = true don't need set()");
    },
    boundGet(member) {
      return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
    },
    simpleSet(member) {
      return this.get(member);
    },
    destructureSet(member) {
      return this.get(member);
    },
    call(member, args) {
      return _core.types.callExpression(this.get(member), args);
    },
    optionalCall(member, args) {
      return _core.types.optionalCallExpression(this.get(member), args, true);
    },
    delete() {
      throw new Error("Internal Babel error: deleting private elements is a parsing error.");
    }
  };
  function transformPrivateNamesUsage(ref, path2, privateNamesMap, {
    privateFieldsAsProperties,
    noUninitializedPrivateFieldAccess,
    noDocumentAll,
    innerBinding
  }, state2) {
    if (!privateNamesMap.size) return;
    const body = path2.get("body");
    const handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
    (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({
      privateNamesMap,
      classRef: ref,
      file: state2
    }, handler, {
      noDocumentAll,
      noUninitializedPrivateFieldAccess,
      innerBinding
    }));
    body.traverse(privateInVisitor, {
      privateNamesMap,
      classRef: ref,
      file: state2,
      privateFieldsAsProperties,
      innerBinding
    });
  }
  function buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {
    const {
      id
    } = privateNamesMap.get(prop.node.key.id.name);
    const value2 = prop.node.value || prop.scope.buildUndefinedNode();
    return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value2}
      });
    `, prop);
  }
  function buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state2) {
    const {
      id
    } = privateNamesMap.get(prop.node.key.id.name);
    const value2 = prop.node.value || prop.scope.buildUndefinedNode();
    {
      if (!state2.availableHelper("classPrivateFieldInitSpec")) {
        return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value2},
        })`, prop);
      }
    }
    const helper = state2.addHelper("classPrivateFieldInitSpec");
    return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(helper, [_core.types.thisExpression(), _core.types.cloneNode(id), newHelpers(state2) ? value2 : _core.template.expression.ast`{ writable: true, value: ${value2} }`])), prop);
  }
  function buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const value2 = noUninitializedPrivateFieldAccess ? prop.node.value : _core.template.expression.ast`{
        _: ${prop.node.value || _core.types.buildUndefinedNode()}
      }`;
    return inheritPropComments(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(_core.types.cloneNode(privateName.id), value2)]), prop);
  }
  {
    var buildPrivateStaticFieldInitSpecOld = function(prop, privateNamesMap) {
      const privateName = privateNamesMap.get(prop.node.key.id.name);
      const {
        id,
        getId,
        setId,
        initAdded
      } = privateName;
      const isGetterOrSetter = getId || setId;
      if (!prop.isProperty() && (initAdded || !isGetterOrSetter)) return;
      if (isGetterOrSetter) {
        privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
          initAdded: true
        }));
        return inheritPropComments(_core.template.statement.ast`
          var ${_core.types.cloneNode(id)} = {
            // configurable is false by default
            // enumerable is false by default
            // writable is false by default
            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
          }
        `, prop);
      }
      const value2 = prop.node.value || prop.scope.buildUndefinedNode();
      return inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          writable: true,
          value: ${value2}
        };
      `, prop);
    };
  }
  function buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      methodId,
      id,
      getId,
      setId,
      initAdded
    } = privateName;
    if (initAdded) return;
    if (methodId) {
      return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `, prop);
    }
    const isGetterOrSetter = getId || setId;
    if (isGetterOrSetter) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        initAdded: true
      }));
      return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        });
      `, prop);
    }
  }
  function buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state2) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    if (privateName.initAdded) return;
    if (!newHelpers(state2)) {
      const isGetterOrSetter = privateName.getId || privateName.setId;
      if (isGetterOrSetter) {
        return buildPrivateAccessorInitialization(ref, prop, privateNamesMap, state2);
      }
    }
    return buildPrivateInstanceMethodInitialization(ref, prop, privateNamesMap, state2);
  }
  function buildPrivateAccessorInitialization(ref, prop, privateNamesMap, state2) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      id,
      getId,
      setId
    } = privateName;
    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
      initAdded: true
    }));
    {
      if (!state2.availableHelper("classPrivateFieldInitSpec")) {
        return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref}, {
            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
          });
        `, prop);
      }
    }
    const helper = state2.addHelper("classPrivateFieldInitSpec");
    return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
      },
    )`, prop);
  }
  function buildPrivateInstanceMethodInitialization(ref, prop, privateNamesMap, state2) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      id
    } = privateName;
    {
      if (!state2.availableHelper("classPrivateMethodInitSpec")) {
        return inheritPropComments(_core.template.statement.ast`${id}.add(${ref})`, prop);
      }
    }
    const helper = state2.addHelper("classPrivateMethodInitSpec");
    return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`, prop);
  }
  function buildPublicFieldInitLoose(ref, prop) {
    const {
      key: key2,
      computed
    } = prop.node;
    const value2 = prop.node.value || prop.scope.buildUndefinedNode();
    return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref, key2, computed || _core.types.isLiteral(key2)), value2)), prop);
  }
  function buildPublicFieldInitSpec(ref, prop, state2) {
    const {
      key: key2,
      computed
    } = prop.node;
    const value2 = prop.node.value || prop.scope.buildUndefinedNode();
    return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state2.addHelper("defineProperty"), [ref, computed || _core.types.isLiteral(key2) ? key2 : _core.types.stringLiteral(key2.name), value2])), prop);
  }
  function buildPrivateStaticMethodInitLoose(ref, prop, state2, privateNamesMap) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      id,
      methodId,
      getId,
      setId,
      initAdded
    } = privateName;
    if (initAdded) return;
    const isGetterOrSetter = getId || setId;
    if (isGetterOrSetter) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        initAdded: true
      }));
      return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        })
      `, prop);
    }
    return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `, prop);
  }
  function buildPrivateMethodDeclaration(file2, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties = false) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      id,
      methodId,
      getId,
      setId,
      getterDeclared,
      setterDeclared,
      static: isStatic
    } = privateName;
    const {
      params,
      body,
      generator,
      async: async2
    } = prop.node;
    const isGetter = getId && params.length === 0;
    const isSetter = setId && params.length > 0;
    if (isGetter && getterDeclared || isSetter && setterDeclared) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        initAdded: true
      }));
      return null;
    }
    if (newHelpers(file2) && (isGetter || isSetter) && !privateFieldsAsSymbolsOrProperties) {
      const scope2 = prop.get("body").scope;
      const thisArg = scope2.generateUidIdentifier("this");
      const state2 = {
        thisRef: thisArg,
        argumentsPath: []
      };
      prop.traverse(thisContextVisitor, state2);
      if (state2.argumentsPath.length) {
        const argumentsId = scope2.generateUidIdentifier("arguments");
        scope2.push({
          id: argumentsId,
          init: _core.template.expression.ast`[].slice.call(arguments, 1)`
        });
        for (const path2 of state2.argumentsPath) {
          path2.replaceWith(_core.types.cloneNode(argumentsId));
        }
      }
      params.unshift(_core.types.cloneNode(thisArg));
    }
    let declId = methodId;
    if (isGetter) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        getterDeclared: true,
        initAdded: true
      }));
      declId = getId;
    } else if (isSetter) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        setterDeclared: true,
        initAdded: true
      }));
      declId = setId;
    } else if (isStatic && !privateFieldsAsSymbolsOrProperties) {
      declId = id;
    }
    return inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async2), prop);
  }
  const thisContextVisitor = _core.traverse.visitors.merge([{
    Identifier(path2, state2) {
      if (state2.argumentsPath && path2.node.name === "arguments") {
        state2.argumentsPath.push(path2);
      }
    },
    UnaryExpression(path2) {
      const {
        node: node2
      } = path2;
      if (node2.operator === "delete") {
        const argument = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(node2.argument);
        if (_core.types.isThisExpression(argument)) {
          path2.replaceWith(_core.types.booleanLiteral(true));
        }
      }
    },
    ThisExpression(path2, state2) {
      state2.needsClassRef = true;
      path2.replaceWith(_core.types.cloneNode(state2.thisRef));
    },
    MetaProperty(path2) {
      const {
        node: node2,
        scope: scope2
      } = path2;
      if (node2.meta.name === "new" && node2.property.name === "target") {
        path2.replaceWith(scope2.buildUndefinedNode());
      }
    }
  }, _helperEnvironmentVisitor.default]);
  const innerReferencesVisitor = {
    ReferencedIdentifier(path2, state2) {
      if (path2.scope.bindingIdentifierEquals(path2.node.name, state2.innerBinding)) {
        state2.needsClassRef = true;
        path2.node.name = state2.thisRef.name;
      }
    }
  };
  function replaceThisContext(path2, ref, innerBindingRef) {
    var _state$thisRef;
    const state2 = {
      thisRef: ref,
      needsClassRef: false,
      innerBinding: innerBindingRef
    };
    if (!path2.isMethod()) {
      path2.traverse(thisContextVisitor, state2);
    }
    if (innerBindingRef != null && (_state$thisRef = state2.thisRef) != null && _state$thisRef.name && state2.thisRef.name !== innerBindingRef.name) {
      path2.traverse(innerReferencesVisitor, state2);
    }
    return state2.needsClassRef;
  }
  function isNameOrLength({
    key: key2,
    computed
  }) {
    if (key2.type === "Identifier") {
      return !computed && (key2.name === "name" || key2.name === "length");
    }
    if (key2.type === "StringLiteral") {
      return key2.value === "name" || key2.value === "length";
    }
    return false;
  }
  function inheritPropComments(node2, prop) {
    _core.types.inheritLeadingComments(node2, prop.node);
    _core.types.inheritInnerComments(node2, prop.node);
    return node2;
  }
  function buildFieldsInitNodes(ref, superRef, props, privateNamesMap, file2, setPublicClassFields, privateFieldsAsSymbolsOrProperties, noUninitializedPrivateFieldAccess, constantSuper, innerBindingRef) {
    var _ref, _ref2;
    let classRefFlags = 0;
    let injectSuperRef;
    const staticNodes = [];
    const instanceNodes = [];
    let lastInstanceNodeReturnsThis = false;
    const pureStaticNodes = [];
    let classBindingNode = null;
    const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => {
      var _injectSuperRef;
      (_injectSuperRef = injectSuperRef) != null ? _injectSuperRef : injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef);
      return injectSuperRef;
    };
    const classRefForInnerBinding = (_ref = ref) != null ? _ref : props[0].scope.generateUidIdentifier((innerBindingRef == null ? void 0 : innerBindingRef.name) || "Class");
    (_ref2 = ref) != null ? _ref2 : ref = _core.types.cloneNode(innerBindingRef);
    for (const prop of props) {
      prop.isClassProperty() && ts.assertFieldTransformed(prop);
      const isStatic = !(_core.types.isStaticBlock != null && _core.types.isStaticBlock(prop.node)) && prop.node.static;
      const isInstance = !isStatic;
      const isPrivate = prop.isPrivate();
      const isPublic = !isPrivate;
      const isField = prop.isProperty();
      const isMethod = !isField;
      const isStaticBlock = prop.isStaticBlock == null ? void 0 : prop.isStaticBlock();
      if (isStatic) classRefFlags |= 1;
      if (isStatic || isMethod && isPrivate || isStaticBlock) {
        new _helperReplaceSupers.default({
          methodPath: prop,
          constantSuper,
          file: file2,
          refToPreserve: innerBindingRef,
          getSuperRef,
          getObjectRef() {
            classRefFlags |= 2;
            if (isStatic || isStaticBlock) {
              return classRefForInnerBinding;
            } else {
              return _core.types.memberExpression(classRefForInnerBinding, _core.types.identifier("prototype"));
            }
          }
        }).replace();
        const replaced = replaceThisContext(prop, classRefForInnerBinding, innerBindingRef);
        if (replaced) {
          classRefFlags |= 2;
        }
      }
      lastInstanceNodeReturnsThis = false;
      switch (true) {
        case isStaticBlock: {
          const blockBody = prop.node.body;
          if (blockBody.length === 1 && _core.types.isExpressionStatement(blockBody[0])) {
            staticNodes.push(inheritPropComments(blockBody[0], prop));
          } else {
            staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));
          }
          break;
        }
        case (isStatic && isPrivate && isField && privateFieldsAsSymbolsOrProperties):
          staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));
          break;
        case (isStatic && isPrivate && isField && !privateFieldsAsSymbolsOrProperties):
          if (!newHelpers(file2)) {
            staticNodes.push(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));
          } else {
            staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess));
          }
          break;
        case (isStatic && isPublic && isField && setPublicClassFields):
          if (!isNameOrLength(prop.node)) {
            staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));
            break;
          }
        case (isStatic && isPublic && isField && !setPublicClassFields):
          staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, file2));
          break;
        case (isInstance && isPrivate && isField && privateFieldsAsSymbolsOrProperties):
          instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
          break;
        case (isInstance && isPrivate && isField && !privateFieldsAsSymbolsOrProperties):
          instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file2));
          break;
        case (isInstance && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties):
          instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
          pureStaticNodes.push(buildPrivateMethodDeclaration(file2, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
          break;
        case (isInstance && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties):
          instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file2));
          pureStaticNodes.push(buildPrivateMethodDeclaration(file2, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
          break;
        case (isStatic && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties):
          if (!newHelpers(file2)) {
            staticNodes.unshift(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));
          }
          pureStaticNodes.push(buildPrivateMethodDeclaration(file2, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
          break;
        case (isStatic && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties):
          staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, file2, privateNamesMap));
          pureStaticNodes.push(buildPrivateMethodDeclaration(file2, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
          break;
        case (isInstance && isPublic && isField && setPublicClassFields):
          instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
          break;
        case (isInstance && isPublic && isField && !setPublicClassFields):
          lastInstanceNodeReturnsThis = true;
          instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, file2));
          break;
        default:
          throw new Error("Unreachable.");
      }
    }
    if (classRefFlags & 2 && innerBindingRef != null) {
      classBindingNode = _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classRefForInnerBinding), _core.types.cloneNode(innerBindingRef)));
    }
    return {
      staticNodes: staticNodes.filter(Boolean),
      instanceNodes: instanceNodes.filter(Boolean),
      lastInstanceNodeReturnsThis,
      pureStaticNodes: pureStaticNodes.filter(Boolean),
      classBindingNode,
      wrapClass(path2) {
        for (const prop of props) {
          prop.node.leadingComments = null;
          prop.remove();
        }
        if (injectSuperRef) {
          path2.scope.push({
            id: _core.types.cloneNode(injectSuperRef)
          });
          path2.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path2.node.superClass));
        }
        if (classRefFlags !== 0) {
          if (path2.isClassExpression()) {
            path2.scope.push({
              id: ref
            });
            path2.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref), path2.node));
          } else {
            if (innerBindingRef == null) {
              path2.node.id = ref;
            }
            if (classBindingNode != null) {
              path2.scope.push({
                id: classRefForInnerBinding
              });
            }
          }
        }
        return path2;
      }
    };
  }
  return fields;
}
var misc = {};
var hasRequiredMisc;
function requireMisc() {
  if (hasRequiredMisc) return misc;
  hasRequiredMisc = 1;
  Object.defineProperty(misc, "__esModule", {
    value: true
  });
  misc.extractComputedKeys = extractComputedKeys;
  misc.injectInitialization = injectInitialization;
  misc.memoiseComputedKey = memoiseComputedKey;
  var _core = requireLib$x();
  var _helperEnvironmentVisitor = requireLib$M();
  const findBareSupers = _core.traverse.visitors.merge([{
    Super(path2) {
      const {
        node: node2,
        parentPath
      } = path2;
      if (parentPath.isCallExpression({
        callee: node2
      })) {
        this.push(parentPath);
      }
    }
  }, _helperEnvironmentVisitor.default]);
  const referenceVisitor = {
    "TSTypeAnnotation|TypeAnnotation"(path2) {
      path2.skip();
    },
    ReferencedIdentifier(path2, {
      scope: scope2
    }) {
      if (scope2.hasOwnBinding(path2.node.name)) {
        scope2.rename(path2.node.name);
        path2.skip();
      }
    }
  };
  function handleClassTDZ(path2, state2) {
    if (state2.classBinding && state2.classBinding === path2.scope.getBinding(path2.node.name)) {
      const classNameTDZError = state2.file.addHelper("classNameTDZError");
      const throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path2.node.name)]);
      path2.replaceWith(_core.types.sequenceExpression([throwNode, path2.node]));
      path2.skip();
    }
  }
  const classFieldDefinitionEvaluationTDZVisitor = {
    ReferencedIdentifier: handleClassTDZ
  };
  function injectInitialization(path2, constructor, nodes, renamer2, lastReturnsThis) {
    if (!nodes.length) return;
    const isDerived = !!path2.node.superClass;
    if (!constructor) {
      const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
      if (isDerived) {
        newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))];
        newConstructor.body.body.push(_core.template.statement.ast`super(...args)`);
      }
      [constructor] = path2.get("body").unshiftContainer("body", newConstructor);
    }
    if (renamer2) {
      renamer2(referenceVisitor, {
        scope: constructor.scope
      });
    }
    if (isDerived) {
      const bareSupers = [];
      constructor.traverse(findBareSupers, bareSupers);
      let isFirst = true;
      for (const bareSuper of bareSupers) {
        if (isFirst) {
          isFirst = false;
        } else {
          nodes = nodes.map((n) => _core.types.cloneNode(n));
        }
        if (!bareSuper.parentPath.isExpressionStatement()) {
          const allNodes = [bareSuper.node, ...nodes.map((n) => _core.types.toExpression(n))];
          if (!lastReturnsThis) allNodes.push(_core.types.thisExpression());
          bareSuper.replaceWith(_core.types.sequenceExpression(allNodes));
        } else {
          bareSuper.insertAfter(nodes);
        }
      }
    } else {
      constructor.get("body").unshiftContainer("body", nodes);
    }
  }
  function memoiseComputedKey(keyNode, scope2, hint) {
    const isUidReference = _core.types.isIdentifier(keyNode) && scope2.hasUid(keyNode.name);
    if (isUidReference) {
      return;
    }
    const isMemoiseAssignment = _core.types.isAssignmentExpression(keyNode, {
      operator: "="
    }) && _core.types.isIdentifier(keyNode.left) && scope2.hasUid(keyNode.left.name);
    if (isMemoiseAssignment) {
      return _core.types.cloneNode(keyNode);
    } else {
      const ident = _core.types.identifier(hint);
      scope2.push({
        id: ident,
        kind: "let"
      });
      return _core.types.assignmentExpression("=", _core.types.cloneNode(ident), keyNode);
    }
  }
  function extractComputedKeys(path2, computedPaths, file2) {
    const {
      scope: scope2
    } = path2;
    const declarations = [];
    const state2 = {
      classBinding: path2.node.id && scope2.getBinding(path2.node.id.name),
      file: file2
    };
    for (const computedPath of computedPaths) {
      const computedKey = computedPath.get("key");
      if (computedKey.isReferencedIdentifier()) {
        handleClassTDZ(computedKey, state2);
      } else {
        computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state2);
      }
      const computedNode = computedPath.node;
      if (!computedKey.isConstantExpression()) {
        const assignment = memoiseComputedKey(computedKey.node, scope2, scope2.generateUidBasedOnNode(computedKey.node));
        if (assignment) {
          declarations.push(_core.types.expressionStatement(assignment));
          computedNode.key = _core.types.cloneNode(assignment.left);
        }
      }
    }
    return declarations;
  }
  return misc;
}
var hasRequiredDecorators;
function requireDecorators() {
  if (hasRequiredDecorators) return decorators;
  hasRequiredDecorators = 1;
  Object.defineProperty(decorators, "__esModule", {
    value: true
  });
  decorators.default = _default2;
  var _core = requireLib$x();
  var _helperReplaceSupers = requireLib$u();
  var _helperSplitExportDeclaration = requireLib$N();
  var _helperSkipTransparentExpressionWrappers = requireLib$t();
  var _fields = requireFields();
  var _misc = requireMisc();
  function incrementId(id, idx = id.length - 1) {
    if (idx === -1) {
      id.unshift(65);
      return;
    }
    const current = id[idx];
    if (current === 90) {
      id[idx] = 97;
    } else if (current === 122) {
      id[idx] = 65;
      incrementId(id, idx - 1);
    } else {
      id[idx] = current + 1;
    }
  }
  function createPrivateUidGeneratorForClass(classPath) {
    const currentPrivateId = [];
    const privateNames = /* @__PURE__ */ new Set();
    classPath.traverse({
      PrivateName(path2) {
        privateNames.add(path2.node.id.name);
      }
    });
    return () => {
      let reifiedId;
      do {
        incrementId(currentPrivateId);
        reifiedId = String.fromCharCode(...currentPrivateId);
      } while (privateNames.has(reifiedId));
      return _core.types.privateName(_core.types.identifier(reifiedId));
    };
  }
  function createLazyPrivateUidGeneratorForClass(classPath) {
    let generator;
    return () => {
      if (!generator) {
        generator = createPrivateUidGeneratorForClass(classPath);
      }
      return generator();
    };
  }
  function replaceClassWithVar(path2, className) {
    const id = path2.node.id;
    const scope2 = path2.scope;
    if (path2.type === "ClassDeclaration") {
      const className2 = id.name;
      const varId = scope2.generateUidIdentifierBasedOnNode(id);
      const classId = _core.types.identifier(className2);
      scope2.rename(className2, varId.name);
      path2.get("id").replaceWith(classId);
      return {
        id: _core.types.cloneNode(varId),
        path: path2
      };
    } else {
      let varId;
      if (id) {
        className = id.name;
        varId = generateLetUidIdentifier(scope2.parent, className);
        scope2.rename(className, varId.name);
      } else {
        varId = generateLetUidIdentifier(scope2.parent, typeof className === "string" ? className : "decorated_class");
      }
      const newClassExpr = _core.types.classExpression(typeof className === "string" ? _core.types.identifier(className) : null, path2.node.superClass, path2.node.body);
      const [newPath] = path2.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
      return {
        id: _core.types.cloneNode(varId),
        path: newPath.get("expressions.0")
      };
    }
  }
  function generateClassProperty(key2, value2, isStatic) {
    if (key2.type === "PrivateName") {
      return _core.types.classPrivateProperty(key2, value2, void 0, isStatic);
    } else {
      return _core.types.classProperty(key2, value2, void 0, void 0, isStatic);
    }
  }
  function addProxyAccessorsFor(className, element, getterKey, setterKey, targetKey, isComputed, isStatic, version2) {
    const thisArg = (version2 === "2023-11" || version2 === "2023-05") && isStatic ? className : _core.types.thisExpression();
    const getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)))]);
    const setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
    let getter, setter;
    if (getterKey.type === "PrivateName") {
      getter = _core.types.classPrivateMethod("get", getterKey, [], getterBody, isStatic);
      setter = _core.types.classPrivateMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isStatic);
    } else {
      getter = _core.types.classMethod("get", getterKey, [], getterBody, isComputed, isStatic);
      setter = _core.types.classMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isComputed, isStatic);
    }
    element.insertAfter(setter);
    element.insertAfter(getter);
  }
  function extractProxyAccessorsFor(targetKey, version2) {
    if (version2 !== "2023-11" && version2 !== "2023-05" && version2 !== "2023-01") {
      return [_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `, _core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `];
    }
    return [_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `, _core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `];
  }
  function getComputedKeyLastElement(path2) {
    path2 = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2);
    if (path2.isSequenceExpression()) {
      const expressions2 = path2.get("expressions");
      return getComputedKeyLastElement(expressions2[expressions2.length - 1]);
    }
    return path2;
  }
  function getComputedKeyMemoiser(path2) {
    const element = getComputedKeyLastElement(path2);
    if (element.isConstantExpression()) {
      return _core.types.cloneNode(path2.node);
    } else if (element.isIdentifier() && path2.scope.hasUid(element.node.name)) {
      return _core.types.cloneNode(path2.node);
    } else if (element.isAssignmentExpression() && element.get("left").isIdentifier()) {
      return _core.types.cloneNode(element.node.left);
    } else {
      throw new Error(`Internal Error: the computed key ${path2.toString()} has not yet been memoised.`);
    }
  }
  function prependExpressionsToComputedKey(expressions2, fieldPath) {
    const key2 = fieldPath.get("key");
    if (key2.isSequenceExpression()) {
      expressions2.push(...key2.node.expressions);
    } else {
      expressions2.push(key2.node);
    }
    key2.replaceWith(maybeSequenceExpression(expressions2));
  }
  function appendExpressionsToComputedKey(expressions2, fieldPath) {
    const key2 = fieldPath.get("key");
    const completion = getComputedKeyLastElement(key2);
    if (completion.isConstantExpression()) {
      prependExpressionsToComputedKey(expressions2, fieldPath);
    } else {
      const scopeParent = key2.scope.parent;
      const maybeAssignment = (0, _misc.memoiseComputedKey)(completion.node, scopeParent, scopeParent.generateUid("computedKey"));
      if (!maybeAssignment) {
        prependExpressionsToComputedKey(expressions2, fieldPath);
      } else {
        const expressionSequence = [...expressions2, _core.types.cloneNode(maybeAssignment.left)];
        const completionParent = completion.parentPath;
        if (completionParent.isSequenceExpression()) {
          completionParent.pushContainer("expressions", expressionSequence);
        } else {
          completion.replaceWith(maybeSequenceExpression([_core.types.cloneNode(maybeAssignment), ...expressionSequence]));
        }
      }
    }
  }
  function prependExpressionsToFieldInitializer(expressions2, fieldPath) {
    const initializer = fieldPath.get("value");
    if (initializer.node) {
      expressions2.push(initializer.node);
    } else if (expressions2.length > 0) {
      expressions2[expressions2.length - 1] = _core.types.unaryExpression("void", expressions2[expressions2.length - 1]);
    }
    initializer.replaceWith(maybeSequenceExpression(expressions2));
  }
  function prependExpressionsToStaticBlock(expressions2, blockPath) {
    blockPath.unshiftContainer("body", _core.types.expressionStatement(maybeSequenceExpression(expressions2)));
  }
  function prependExpressionsToConstructor(expressions2, constructorPath) {
    constructorPath.node.body.body.unshift(_core.types.expressionStatement(maybeSequenceExpression(expressions2)));
  }
  function isProtoInitCallExpression(expression, protoInitCall) {
    return _core.types.isCallExpression(expression) && _core.types.isIdentifier(expression.callee, {
      name: protoInitCall.name
    });
  }
  function optimizeSuperCallAndExpressions(expressions2, protoInitLocal) {
    if (protoInitLocal) {
      if (expressions2.length >= 2 && isProtoInitCallExpression(expressions2[1], protoInitLocal)) {
        const mergedSuperCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [expressions2[0]]);
        expressions2.splice(0, 2, mergedSuperCall);
      }
      if (expressions2.length >= 2 && _core.types.isThisExpression(expressions2[expressions2.length - 1]) && isProtoInitCallExpression(expressions2[expressions2.length - 2], protoInitLocal)) {
        expressions2.splice(expressions2.length - 1, 1);
      }
    }
    return maybeSequenceExpression(expressions2);
  }
  function insertExpressionsAfterSuperCallAndOptimize(expressions2, constructorPath, protoInitLocal) {
    constructorPath.traverse({
      CallExpression: {
        exit(path2) {
          if (!path2.get("callee").isSuper()) return;
          const newNodes = [path2.node, ...expressions2.map((expr) => _core.types.cloneNode(expr))];
          if (path2.isCompletionRecord()) {
            newNodes.push(_core.types.thisExpression());
          }
          path2.replaceWith(optimizeSuperCallAndExpressions(newNodes, protoInitLocal));
          path2.skip();
        }
      },
      ClassMethod(path2) {
        if (path2.node.kind === "constructor") {
          path2.skip();
        }
      }
    });
  }
  function createConstructorFromExpressions(expressions2, isDerivedClass) {
    const body = [_core.types.expressionStatement(maybeSequenceExpression(expressions2))];
    if (isDerivedClass) {
      body.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))])));
    }
    return _core.types.classMethod("constructor", _core.types.identifier("constructor"), isDerivedClass ? [_core.types.restElement(_core.types.identifier("args"))] : [], _core.types.blockStatement(body));
  }
  function createStaticBlockFromExpressions(expressions2) {
    return _core.types.staticBlock([_core.types.expressionStatement(maybeSequenceExpression(expressions2))]);
  }
  const FIELD = 0;
  const ACCESSOR = 1;
  const METHOD = 2;
  const GETTER = 3;
  const SETTER = 4;
  const STATIC_OLD_VERSION = 5;
  const STATIC = 8;
  const DECORATORS_HAVE_THIS = 16;
  function getElementKind(element) {
    switch (element.node.type) {
      case "ClassProperty":
      case "ClassPrivateProperty":
        return FIELD;
      case "ClassAccessorProperty":
        return ACCESSOR;
      case "ClassMethod":
      case "ClassPrivateMethod":
        if (element.node.kind === "get") {
          return GETTER;
        } else if (element.node.kind === "set") {
          return SETTER;
        } else {
          return METHOD;
        }
    }
  }
  function toSortedDecoratorInfo(info) {
    return [...info.filter((el) => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter((el) => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter((el) => el.isStatic && el.kind === FIELD), ...info.filter((el) => !el.isStatic && el.kind === FIELD)];
  }
  function generateDecorationList(decorators2, decoratorsThis, version2) {
    const decsCount = decorators2.length;
    const haveOneThis = decoratorsThis.some(Boolean);
    const decs = [];
    for (let i = 0; i < decsCount; i++) {
      if ((version2 === "2023-11" || version2 === "2023-05") && haveOneThis) {
        decs.push(decoratorsThis[i] || _core.types.unaryExpression("void", _core.types.numericLiteral(0)));
      }
      decs.push(decorators2[i]);
    }
    return {
      haveThis: haveOneThis,
      decs
    };
  }
  function generateDecorationExprs(decorationInfo, version2) {
    return _core.types.arrayExpression(decorationInfo.map((el) => {
      let flag = el.kind;
      if (el.isStatic) {
        flag += version2 === "2023-11" || version2 === "2023-05" ? STATIC : STATIC_OLD_VERSION;
      }
      if (el.decoratorsHaveThis) flag += DECORATORS_HAVE_THIS;
      return _core.types.arrayExpression([el.decoratorsArray, _core.types.numericLiteral(flag), el.name, ...el.privateMethods || []]);
    }));
  }
  function extractElementLocalAssignments(decorationInfo) {
    const localIds = [];
    for (const el of decorationInfo) {
      const {
        locals
      } = el;
      if (Array.isArray(locals)) {
        localIds.push(...locals);
      } else if (locals !== void 0) {
        localIds.push(locals);
      }
    }
    return localIds;
  }
  function addCallAccessorsFor(version2, element, key2, getId, setId, isStatic) {
    element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key2), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), version2 === "2023-11" && isStatic ? [] : [_core.types.thisExpression()]))]), isStatic));
    element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key2), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), version2 === "2023-11" && isStatic ? [_core.types.identifier("v")] : [_core.types.thisExpression(), _core.types.identifier("v")]))]), isStatic));
  }
  function movePrivateAccessor(element, key2, methodLocalVar, isStatic) {
    let params;
    let block;
    if (element.node.kind === "set") {
      params = [_core.types.identifier("v")];
      block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))];
    } else {
      params = [];
      block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))];
    }
    element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key2), params, _core.types.blockStatement(block), isStatic));
  }
  function isClassDecoratableElementPath(path2) {
    const {
      type
    } = path2;
    return type !== "TSDeclareMethod" && type !== "TSIndexSignature" && type !== "StaticBlock";
  }
  function staticBlockToIIFE(block) {
    return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block.body)), []);
  }
  function staticBlockToFunctionClosure(block) {
    return _core.types.functionExpression(null, [], _core.types.blockStatement(block.body));
  }
  function fieldInitializerToClosure(value2) {
    return _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(value2)]));
  }
  function maybeSequenceExpression(exprs) {
    if (exprs.length === 0) return _core.types.unaryExpression("void", _core.types.numericLiteral(0));
    if (exprs.length === 1) return exprs[0];
    return _core.types.sequenceExpression(exprs);
  }
  function createFunctionExpressionFromPrivateMethod(node2) {
    const {
      params,
      body,
      generator: isGenerator,
      async: isAsync
    } = node2;
    return _core.types.functionExpression(void 0, params, body, isGenerator, isAsync);
  }
  function createSetFunctionNameCall(state2, className) {
    return _core.types.callExpression(state2.addHelper("setFunctionName"), [_core.types.thisExpression(), className]);
  }
  function createToPropertyKeyCall(state2, propertyKey) {
    return _core.types.callExpression(state2.addHelper("toPropertyKey"), [propertyKey]);
  }
  function createPrivateBrandCheckClosure(brandName) {
    return _core.types.arrowFunctionExpression([_core.types.identifier("_")], _core.types.binaryExpression("in", _core.types.cloneNode(brandName), _core.types.identifier("_")));
  }
  function usesPrivateField(expression) {
    try {
      _core.types.traverseFast(expression, (node2) => {
        if (_core.types.isPrivateName(node2)) {
          throw null;
        }
      });
      return false;
    } catch (_unused) {
      return true;
    }
  }
  function convertToComputedKey(path2) {
    const {
      node: node2
    } = path2;
    node2.computed = true;
    if (_core.types.isIdentifier(node2.key)) {
      node2.key = _core.types.stringLiteral(node2.key.name);
    }
  }
  function hasInstancePrivateAccess(path2, privateNames) {
    let containsInstancePrivateAccess = false;
    if (privateNames.length > 0) {
      const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({
        PrivateName(path3, state2) {
          if (state2.privateNamesMap.has(path3.node.id.name)) {
            containsInstancePrivateAccess = true;
            path3.stop();
          }
        }
      });
      const privateNamesMap = /* @__PURE__ */ new Map();
      for (const name of privateNames) {
        privateNamesMap.set(name, null);
      }
      path2.traverse(privateNameVisitor, {
        privateNamesMap
      });
    }
    return containsInstancePrivateAccess;
  }
  function checkPrivateMethodUpdateError(path2, decoratedPrivateMethods) {
    const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({
      PrivateName(path3, state2) {
        if (!state2.privateNamesMap.has(path3.node.id.name)) return;
        const parentPath = path3.parentPath;
        const parentParentPath = parentPath.parentPath;
        if (parentParentPath.node.type === "AssignmentExpression" && parentParentPath.node.left === parentPath.node || parentParentPath.node.type === "UpdateExpression" || parentParentPath.node.type === "RestElement" || parentParentPath.node.type === "ArrayPattern" || parentParentPath.node.type === "ObjectProperty" && parentParentPath.node.value === parentPath.node && parentParentPath.parentPath.type === "ObjectPattern" || parentParentPath.node.type === "ForOfStatement" && parentParentPath.node.left === parentPath.node) {
          throw path3.buildCodeFrameError(`Decorated private methods are read-only, but "#${path3.node.id.name}" is updated via this expression.`);
        }
      }
    });
    const privateNamesMap = /* @__PURE__ */ new Map();
    for (const name of decoratedPrivateMethods) {
      privateNamesMap.set(name, null);
    }
    path2.traverse(privateNameVisitor, {
      privateNamesMap
    });
  }
  function transformClass(path2, state2, constantSuper, ignoreFunctionLength, className, propertyVisitor, version2) {
    var _path$node$id, _classDecorationsId;
    const body = path2.get("body.body");
    const classDecorators = path2.node.decorators;
    let hasElementDecorators = false;
    let hasComputedKeysSideEffects = false;
    let elemDecsUseFnContext = false;
    const generateClassPrivateUid = createLazyPrivateUidGeneratorForClass(path2);
    const classAssignments = [];
    const scopeParent = path2.scope.parent;
    const memoiseExpression = (expression, hint, assignments) => {
      const localEvaluatedId = generateLetUidIdentifier(scopeParent, hint);
      assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression));
      return _core.types.cloneNode(localEvaluatedId);
    };
    let protoInitLocal;
    let staticInitLocal;
    const classIdName = (_path$node$id = path2.node.id) == null ? void 0 : _path$node$id.name;
    const usesFunctionContextOrYieldAwait = (expression) => {
      try {
        _core.types.traverseFast(expression, (node2) => {
          if (_core.types.isThisExpression(node2) || _core.types.isSuper(node2) || _core.types.isYieldExpression(node2) || _core.types.isAwaitExpression(node2) || _core.types.isIdentifier(node2, {
            name: "arguments"
          }) || classIdName && _core.types.isIdentifier(node2, {
            name: classIdName
          }) || _core.types.isMetaProperty(node2) && node2.meta.name !== "import") {
            throw null;
          }
        });
        return false;
      } catch (_unused2) {
        return true;
      }
    };
    const instancePrivateNames = [];
    for (const element of body) {
      if (!isClassDecoratableElementPath(element)) {
        continue;
      }
      const elementNode = element.node;
      if (!elementNode.static && _core.types.isPrivateName(elementNode.key)) {
        instancePrivateNames.push(elementNode.key.id.name);
      }
      if (isDecorated(elementNode)) {
        switch (elementNode.type) {
          case "ClassProperty":
            propertyVisitor.ClassProperty(element, state2);
            break;
          case "ClassPrivateProperty":
            propertyVisitor.ClassPrivateProperty(element, state2);
            break;
          case "ClassAccessorProperty":
            propertyVisitor.ClassAccessorProperty(element, state2);
            if (version2 === "2023-11") {
              break;
            }
          default:
            if (elementNode.static) {
              var _staticInitLocal;
              (_staticInitLocal = staticInitLocal) != null ? _staticInitLocal : staticInitLocal = generateLetUidIdentifier(scopeParent, "initStatic");
            } else {
              var _protoInitLocal;
              (_protoInitLocal = protoInitLocal) != null ? _protoInitLocal : protoInitLocal = generateLetUidIdentifier(scopeParent, "initProto");
            }
            break;
        }
        hasElementDecorators = true;
        elemDecsUseFnContext || (elemDecsUseFnContext = elementNode.decorators.some(usesFunctionContextOrYieldAwait));
      } else if (elementNode.type === "ClassAccessorProperty") {
        propertyVisitor.ClassAccessorProperty(element, state2);
        const {
          key: key2,
          value: value2,
          static: isStatic,
          computed
        } = elementNode;
        const newId = generateClassPrivateUid();
        const newField = generateClassProperty(newId, value2, isStatic);
        const keyPath = element.get("key");
        const [newPath] = element.replaceWith(newField);
        let getterKey, setterKey;
        if (computed && !keyPath.isConstantExpression()) {
          getterKey = (0, _misc.memoiseComputedKey)(createToPropertyKeyCall(state2, key2), scopeParent, scopeParent.generateUid("computedKey"));
          setterKey = _core.types.cloneNode(getterKey.left);
        } else {
          getterKey = _core.types.cloneNode(key2);
          setterKey = _core.types.cloneNode(key2);
        }
        addProxyAccessorsFor(path2.node.id, newPath, getterKey, setterKey, newId, computed, isStatic, version2);
      }
      if ("computed" in element.node && element.node.computed) {
        hasComputedKeysSideEffects || (hasComputedKeysSideEffects = !scopeParent.isStatic(element.node.key));
      }
    }
    if (!classDecorators && !hasElementDecorators) {
      return;
    }
    const elementDecoratorInfo = [];
    let constructorPath;
    const decoratedPrivateMethods = /* @__PURE__ */ new Set();
    let classInitLocal, classIdLocal;
    let decoratorReceiverId = null;
    function handleDecoratorExpressions(expressions2) {
      let hasSideEffects = false;
      let usesFnContext = false;
      const decoratorsThis = [];
      for (const expression of expressions2) {
        let object;
        if ((version2 === "2023-11" || version2 === "2023-05") && _core.types.isMemberExpression(expression)) {
          if (_core.types.isSuper(expression.object)) {
            object = _core.types.thisExpression();
          } else if (scopeParent.isStatic(expression.object)) {
            object = _core.types.cloneNode(expression.object);
          } else {
            var _decoratorReceiverId;
            (_decoratorReceiverId = decoratorReceiverId) != null ? _decoratorReceiverId : decoratorReceiverId = generateLetUidIdentifier(scopeParent, "obj");
            object = _core.types.assignmentExpression("=", _core.types.cloneNode(decoratorReceiverId), expression.object);
            expression.object = _core.types.cloneNode(decoratorReceiverId);
          }
        }
        decoratorsThis.push(object);
        hasSideEffects || (hasSideEffects = !scopeParent.isStatic(expression));
        usesFnContext || (usesFnContext = usesFunctionContextOrYieldAwait(expression));
      }
      return {
        hasSideEffects,
        usesFnContext,
        decoratorsThis
      };
    }
    const willExtractSomeElemDecs = hasComputedKeysSideEffects || elemDecsUseFnContext || version2 !== "2023-11";
    let needsDeclaraionForClassBinding = false;
    let classDecorationsFlag = 0;
    let classDecorations = [];
    let classDecorationsId;
    let computedKeyAssignments = [];
    if (classDecorators) {
      classInitLocal = generateLetUidIdentifier(scopeParent, "initClass");
      needsDeclaraionForClassBinding = path2.isClassDeclaration();
      ({
        id: classIdLocal,
        path: path2
      } = replaceClassWithVar(path2, className));
      path2.node.decorators = null;
      const decoratorExpressions = classDecorators.map((el) => el.expression);
      const classDecsUsePrivateName = decoratorExpressions.some(usesPrivateField);
      const {
        hasSideEffects,
        decoratorsThis
      } = handleDecoratorExpressions(decoratorExpressions);
      const {
        haveThis,
        decs
      } = generateDecorationList(decoratorExpressions, decoratorsThis, version2);
      classDecorationsFlag = haveThis ? 1 : 0;
      classDecorations = decs;
      if (hasSideEffects && willExtractSomeElemDecs || classDecsUsePrivateName) {
        classDecorationsId = memoiseExpression(_core.types.arrayExpression(classDecorations), "classDecs", classAssignments);
      }
      if (!hasElementDecorators) {
        for (const element of path2.get("body.body")) {
          const {
            node: node2
          } = element;
          const isComputed = "computed" in node2 && node2.computed;
          if (isComputed) {
            if (element.isClassProperty({
              static: true
            })) {
              if (!element.get("key").isConstantExpression()) {
                const key2 = node2.key;
                const maybeAssignment = (0, _misc.memoiseComputedKey)(key2, scopeParent, scopeParent.generateUid("computedKey"));
                if (maybeAssignment != null) {
                  node2.key = _core.types.cloneNode(maybeAssignment.left);
                  computedKeyAssignments.push(maybeAssignment);
                }
              }
            } else if (computedKeyAssignments.length > 0) {
              prependExpressionsToComputedKey(computedKeyAssignments, element);
              computedKeyAssignments = [];
            }
          }
        }
      }
    } else {
      if (!path2.node.id) {
        path2.node.id = path2.scope.generateUidIdentifier("Class");
      }
      classIdLocal = _core.types.cloneNode(path2.node.id);
    }
    let lastInstancePrivateName;
    let needsInstancePrivateBrandCheck = false;
    let fieldInitializerExpressions = [];
    let staticFieldInitializerExpressions = [];
    if (hasElementDecorators) {
      if (protoInitLocal) {
        const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
        fieldInitializerExpressions.push(protoInitCall);
      }
      for (const element of body) {
        if (!isClassDecoratableElementPath(element)) {
          if (staticFieldInitializerExpressions.length > 0 && element.isStaticBlock()) {
            prependExpressionsToStaticBlock(staticFieldInitializerExpressions, element);
            staticFieldInitializerExpressions = [];
          }
          continue;
        }
        const {
          node: node2
        } = element;
        const decorators2 = node2.decorators;
        const hasDecorators = !!(decorators2 != null && decorators2.length);
        const isComputed = "computed" in node2 && node2.computed;
        let name = "computedKey";
        if (node2.key.type === "PrivateName") {
          name = node2.key.id.name;
        } else if (!isComputed && node2.key.type === "Identifier") {
          name = node2.key.name;
        }
        let decoratorsArray;
        let decoratorsHaveThis;
        if (hasDecorators) {
          const decoratorExpressions = decorators2.map((d) => d.expression);
          const {
            hasSideEffects,
            usesFnContext,
            decoratorsThis
          } = handleDecoratorExpressions(decoratorExpressions);
          const {
            decs,
            haveThis
          } = generateDecorationList(decoratorExpressions, decoratorsThis, version2);
          decoratorsHaveThis = haveThis;
          decoratorsArray = decs.length === 1 ? decs[0] : _core.types.arrayExpression(decs);
          if (usesFnContext || hasSideEffects && willExtractSomeElemDecs) {
            decoratorsArray = memoiseExpression(decoratorsArray, name + "Decs", computedKeyAssignments);
          }
        }
        if (isComputed) {
          if (!element.get("key").isConstantExpression()) {
            const key3 = node2.key;
            const maybeAssignment = (0, _misc.memoiseComputedKey)(hasDecorators ? createToPropertyKeyCall(state2, key3) : key3, scopeParent, scopeParent.generateUid("computedKey"));
            if (maybeAssignment != null) {
              if (classDecorators && element.isClassProperty({
                static: true
              })) {
                node2.key = _core.types.cloneNode(maybeAssignment.left);
                computedKeyAssignments.push(maybeAssignment);
              } else {
                node2.key = maybeAssignment;
              }
            }
          }
        }
        const {
          key: key2,
          static: isStatic
        } = node2;
        const isPrivate = key2.type === "PrivateName";
        const kind = getElementKind(element);
        if (isPrivate && !isStatic) {
          if (hasDecorators) {
            needsInstancePrivateBrandCheck = true;
          }
          if (_core.types.isClassPrivateProperty(node2) || !lastInstancePrivateName) {
            lastInstancePrivateName = key2;
          }
        }
        if (element.isClassMethod({
          kind: "constructor"
        })) {
          constructorPath = element;
        }
        let locals;
        if (hasDecorators) {
          let privateMethods;
          let nameExpr;
          if (isComputed) {
            nameExpr = getComputedKeyMemoiser(element.get("key"));
          } else if (key2.type === "PrivateName") {
            nameExpr = _core.types.stringLiteral(key2.id.name);
          } else if (key2.type === "Identifier") {
            nameExpr = _core.types.stringLiteral(key2.name);
          } else {
            nameExpr = _core.types.cloneNode(key2);
          }
          if (kind === ACCESSOR) {
            const {
              value: value2
            } = element.node;
            const params = version2 === "2023-11" && isStatic ? [] : [_core.types.thisExpression()];
            if (value2) {
              params.push(_core.types.cloneNode(value2));
            }
            const newId = generateClassPrivateUid();
            const newFieldInitId = generateLetUidIdentifier(scopeParent, `init_${name}`);
            const newValue = _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params);
            const newField = generateClassProperty(newId, newValue, isStatic);
            const [newPath] = element.replaceWith(newField);
            if (isPrivate) {
              privateMethods = extractProxyAccessorsFor(newId, version2);
              const getId = generateLetUidIdentifier(scopeParent, `get_${name}`);
              const setId = generateLetUidIdentifier(scopeParent, `set_${name}`);
              addCallAccessorsFor(version2, newPath, key2, getId, setId, isStatic);
              locals = [newFieldInitId, getId, setId];
            } else {
              addProxyAccessorsFor(path2.node.id, newPath, _core.types.cloneNode(key2), _core.types.isAssignmentExpression(key2) ? _core.types.cloneNode(key2.left) : _core.types.cloneNode(key2), newId, isComputed, isStatic, version2);
              locals = [newFieldInitId];
            }
          } else if (kind === FIELD) {
            const initId = generateLetUidIdentifier(scopeParent, `init_${name}`);
            const valuePath = element.get("value");
            const args = version2 === "2023-11" && isStatic ? [] : [_core.types.thisExpression()];
            if (valuePath.node) args.push(valuePath.node);
            valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), args));
            locals = [initId];
            if (isPrivate) {
              privateMethods = extractProxyAccessorsFor(key2, version2);
            }
          } else if (isPrivate) {
            const callId = generateLetUidIdentifier(scopeParent, `call_${name}`);
            locals = [callId];
            const replaceSupers = new _helperReplaceSupers.default({
              constantSuper,
              methodPath: element,
              objectRef: classIdLocal,
              superRef: path2.node.superClass,
              file: state2.file,
              refToPreserve: classIdLocal
            });
            replaceSupers.replace();
            privateMethods = [createFunctionExpressionFromPrivateMethod(element.node)];
            if (kind === GETTER || kind === SETTER) {
              movePrivateAccessor(element, _core.types.cloneNode(key2), _core.types.cloneNode(callId), isStatic);
            } else {
              const node3 = element.node;
              path2.node.body.body.unshift(_core.types.classPrivateProperty(key2, _core.types.cloneNode(callId), [], node3.static));
              decoratedPrivateMethods.add(key2.id.name);
              element.remove();
            }
          }
          elementDecoratorInfo.push({
            kind,
            decoratorsArray,
            decoratorsHaveThis,
            name: nameExpr,
            isStatic,
            privateMethods,
            locals
          });
          if (element.node) {
            element.node.decorators = null;
          }
        }
        if (isComputed && computedKeyAssignments.length > 0) {
          if (classDecorators && element.isClassProperty({
            static: true
          })) ;
          else {
            prependExpressionsToComputedKey(computedKeyAssignments, kind === ACCESSOR ? element.getNextSibling() : element);
            computedKeyAssignments = [];
          }
        }
        if (fieldInitializerExpressions.length > 0 && !isStatic && (kind === FIELD || kind === ACCESSOR)) {
          prependExpressionsToFieldInitializer(fieldInitializerExpressions, element);
          fieldInitializerExpressions = [];
        }
        if (staticFieldInitializerExpressions.length > 0 && isStatic && (kind === FIELD || kind === ACCESSOR)) {
          prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element);
          staticFieldInitializerExpressions = [];
        }
        if (hasDecorators && version2 === "2023-11") {
          if (kind === FIELD || kind === ACCESSOR) {
            const initExtraId = generateLetUidIdentifier(scopeParent, `init_extra_${name}`);
            locals.push(initExtraId);
            const initExtraCall = _core.types.callExpression(_core.types.cloneNode(initExtraId), isStatic ? [] : [_core.types.thisExpression()]);
            if (!isStatic) {
              fieldInitializerExpressions.push(initExtraCall);
            } else {
              staticFieldInitializerExpressions.push(initExtraCall);
            }
          }
        }
      }
    }
    if (computedKeyAssignments.length > 0) {
      const elements = path2.get("body.body");
      let lastComputedElement;
      for (let i = elements.length - 1; i >= 0; i--) {
        const path3 = elements[i];
        const node2 = path3.node;
        if (node2.computed) {
          if (classDecorators && _core.types.isClassProperty(node2, {
            static: true
          })) {
            continue;
          }
          lastComputedElement = path3;
          break;
        }
      }
      if (lastComputedElement != null) {
        appendExpressionsToComputedKey(computedKeyAssignments, lastComputedElement);
        computedKeyAssignments = [];
      }
    }
    if (fieldInitializerExpressions.length > 0) {
      const isDerivedClass = !!path2.node.superClass;
      if (constructorPath) {
        if (isDerivedClass) {
          insertExpressionsAfterSuperCallAndOptimize(fieldInitializerExpressions, constructorPath, protoInitLocal);
        } else {
          prependExpressionsToConstructor(fieldInitializerExpressions, constructorPath);
        }
      } else {
        path2.node.body.body.unshift(createConstructorFromExpressions(fieldInitializerExpressions, isDerivedClass));
      }
      fieldInitializerExpressions = [];
    }
    if (staticFieldInitializerExpressions.length > 0) {
      path2.node.body.body.push(createStaticBlockFromExpressions(staticFieldInitializerExpressions));
      staticFieldInitializerExpressions = [];
    }
    const sortedElementDecoratorInfo = toSortedDecoratorInfo(elementDecoratorInfo);
    const elementDecorations = generateDecorationExprs(version2 === "2023-11" ? elementDecoratorInfo : sortedElementDecoratorInfo, version2);
    const elementLocals = extractElementLocalAssignments(sortedElementDecoratorInfo);
    if (protoInitLocal) {
      elementLocals.push(protoInitLocal);
    }
    if (staticInitLocal) {
      elementLocals.push(staticInitLocal);
    }
    const classLocals = [];
    let classInitInjected = false;
    const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []);
    let originalClassPath = path2;
    const originalClass = path2.node;
    const staticClosures = [];
    if (classDecorators) {
      classLocals.push(classIdLocal, classInitLocal);
      const statics = [];
      path2.get("body.body").forEach((element) => {
        if (element.isStaticBlock()) {
          if (hasInstancePrivateAccess(element, instancePrivateNames)) {
            const staticBlockClosureId = memoiseExpression(staticBlockToFunctionClosure(element.node), "staticBlock", staticClosures);
            staticFieldInitializerExpressions.push(_core.types.callExpression(_core.types.memberExpression(staticBlockClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
          } else {
            staticFieldInitializerExpressions.push(staticBlockToIIFE(element.node));
          }
          element.remove();
          return;
        }
        if ((element.isClassProperty() || element.isClassPrivateProperty()) && element.node.static) {
          const valuePath = element.get("value");
          if (hasInstancePrivateAccess(valuePath, instancePrivateNames)) {
            const fieldValueClosureId = memoiseExpression(fieldInitializerToClosure(valuePath.node), "fieldValue", staticClosures);
            valuePath.replaceWith(_core.types.callExpression(_core.types.memberExpression(fieldValueClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
          }
          if (staticFieldInitializerExpressions.length > 0) {
            prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element);
            staticFieldInitializerExpressions = [];
          }
          element.node.static = false;
          statics.push(element.node);
          element.remove();
        } else if (element.isClassPrivateMethod({
          static: true
        })) {
          if (hasInstancePrivateAccess(element, instancePrivateNames)) {
            const replaceSupers = new _helperReplaceSupers.default({
              constantSuper,
              methodPath: element,
              objectRef: classIdLocal,
              superRef: path2.node.superClass,
              file: state2.file,
              refToPreserve: classIdLocal
            });
            replaceSupers.replace();
            const privateMethodDelegateId = memoiseExpression(createFunctionExpressionFromPrivateMethod(element.node), element.get("key.id").node.name, staticClosures);
            if (ignoreFunctionLength) {
              element.node.params = [_core.types.restElement(_core.types.identifier("arg"))];
              element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arg")]))]);
            } else {
              element.node.params = element.node.params.map((p, i) => {
                if (_core.types.isRestElement(p)) {
                  return _core.types.restElement(_core.types.identifier("arg"));
                } else {
                  return _core.types.identifier("_" + i);
                }
              });
              element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arguments")]))]);
            }
          }
          element.node.static = false;
          statics.push(element.node);
          element.remove();
        }
      });
      if (statics.length > 0 || staticFieldInitializerExpressions.length > 0) {
        const staticsClass = _core.template.expression.ast`
        class extends ${state2.addHelper("identity")} {}
      `;
        staticsClass.body.body = [_core.types.classProperty(_core.types.toExpression(originalClass), void 0, void 0, void 0, true, true), ...statics];
        const constructorBody = [];
        const newExpr = _core.types.newExpression(staticsClass, []);
        if (staticFieldInitializerExpressions.length > 0) {
          constructorBody.push(...staticFieldInitializerExpressions);
        }
        if (classInitCall) {
          classInitInjected = true;
          constructorBody.push(classInitCall);
        }
        if (constructorBody.length > 0) {
          constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classIdLocal)]));
          staticsClass.body.body.push(createConstructorFromExpressions(constructorBody, false));
        } else {
          newExpr.arguments.push(_core.types.cloneNode(classIdLocal));
        }
        const [newPath] = path2.replaceWith(newExpr);
        originalClassPath = newPath.get("callee").get("body").get("body")[0].get("key");
      }
    }
    if (!classInitInjected && classInitCall) {
      path2.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
    }
    let {
      superClass
    } = originalClass;
    if (superClass && (version2 === "2023-11" || version2 === "2023-05")) {
      const id = path2.scope.maybeGenerateMemoised(superClass);
      if (id) {
        originalClass.superClass = _core.types.assignmentExpression("=", id, superClass);
        superClass = id;
      }
    }
    const applyDecoratorWrapper = _core.types.staticBlock([]);
    originalClass.body.body.unshift(applyDecoratorWrapper);
    const applyDecsBody = applyDecoratorWrapper.body;
    if (computedKeyAssignments.length > 0) {
      const elements = originalClassPath.get("body.body");
      let firstPublicElement;
      for (const path3 of elements) {
        if ((path3.isClassProperty() || path3.isClassMethod()) && path3.node.kind !== "constructor") {
          firstPublicElement = path3;
          break;
        }
      }
      if (firstPublicElement != null) {
        convertToComputedKey(firstPublicElement);
        prependExpressionsToComputedKey(computedKeyAssignments, firstPublicElement);
      } else {
        originalClass.body.body.unshift(_core.types.classProperty(_core.types.sequenceExpression([...computedKeyAssignments, _core.types.stringLiteral("_")]), void 0, void 0, void 0, true, true));
        applyDecsBody.push(_core.types.expressionStatement(_core.types.unaryExpression("delete", _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier("_")))));
      }
      computedKeyAssignments = [];
    }
    applyDecsBody.push(_core.types.expressionStatement(createLocalsAssignment(elementLocals, classLocals, elementDecorations, (_classDecorationsId = classDecorationsId) != null ? _classDecorationsId : _core.types.arrayExpression(classDecorations), _core.types.numericLiteral(classDecorationsFlag), needsInstancePrivateBrandCheck ? lastInstancePrivateName : null, typeof className === "object" ? className : void 0, _core.types.cloneNode(superClass), state2, version2)));
    if (staticInitLocal) {
      applyDecsBody.push(_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()])));
    }
    if (staticClosures.length > 0) {
      applyDecsBody.push(...staticClosures.map((expr) => _core.types.expressionStatement(expr)));
    }
    path2.insertBefore(classAssignments.map((expr) => _core.types.expressionStatement(expr)));
    if (needsDeclaraionForClassBinding) {
      const classBindingInfo = scopeParent.getBinding(classIdLocal.name);
      if (!classBindingInfo.constantViolations.length) {
        path2.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]));
      } else {
        const classOuterBindingDelegateLocal = scopeParent.generateUidIdentifier("t" + classIdLocal.name);
        const classOuterBindingLocal = classIdLocal;
        path2.replaceWithMultiple([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classOuterBindingLocal)), _core.types.variableDeclarator(classOuterBindingDelegateLocal)]), _core.types.blockStatement([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]), path2.node, _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingDelegateLocal), _core.types.cloneNode(classIdLocal)))]), _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingLocal), _core.types.cloneNode(classOuterBindingDelegateLocal)))]);
      }
    }
    if (decoratedPrivateMethods.size > 0) {
      checkPrivateMethodUpdateError(path2, decoratedPrivateMethods);
    }
    path2.scope.crawl();
    return path2;
  }
  function createLocalsAssignment(elementLocals, classLocals, elementDecorations, classDecorations, classDecorationsFlag, maybePrivateBrandName, setClassName, superClass, state2, version2) {
    let lhs, rhs;
    const args = [setClassName ? createSetFunctionNameCall(state2, setClassName) : _core.types.thisExpression(), classDecorations, elementDecorations];
    {
      if (version2 !== "2023-11") {
        args.splice(1, 2, elementDecorations, classDecorations);
      }
      if (version2 === "2021-12" || version2 === "2022-03" && !state2.availableHelper("applyDecs2203R")) {
        lhs = _core.types.arrayPattern([...elementLocals, ...classLocals]);
        rhs = _core.types.callExpression(state2.addHelper(version2 === "2021-12" ? "applyDecs" : "applyDecs2203"), args);
        return _core.types.assignmentExpression("=", lhs, rhs);
      } else if (version2 === "2022-03") {
        rhs = _core.types.callExpression(state2.addHelper("applyDecs2203R"), args);
      } else if (version2 === "2023-01") {
        if (maybePrivateBrandName) {
          args.push(createPrivateBrandCheckClosure(maybePrivateBrandName));
        }
        rhs = _core.types.callExpression(state2.addHelper("applyDecs2301"), args);
      } else if (version2 === "2023-05") {
        if (maybePrivateBrandName || superClass || classDecorationsFlag.value !== 0) {
          args.push(classDecorationsFlag);
        }
        if (maybePrivateBrandName) {
          args.push(createPrivateBrandCheckClosure(maybePrivateBrandName));
        } else if (superClass) {
          args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0)));
        }
        if (superClass) args.push(superClass);
        rhs = _core.types.callExpression(state2.addHelper("applyDecs2305"), args);
      }
    }
    if (version2 === "2023-11") {
      if (maybePrivateBrandName || superClass || classDecorationsFlag.value !== 0) {
        args.push(classDecorationsFlag);
      }
      if (maybePrivateBrandName) {
        args.push(createPrivateBrandCheckClosure(maybePrivateBrandName));
      } else if (superClass) {
        args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0)));
      }
      if (superClass) args.push(superClass);
      rhs = _core.types.callExpression(state2.addHelper("applyDecs2311"), args);
    }
    if (elementLocals.length > 0) {
      if (classLocals.length > 0) {
        lhs = _core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"), _core.types.arrayPattern(elementLocals)), _core.types.objectProperty(_core.types.identifier("c"), _core.types.arrayPattern(classLocals))]);
      } else {
        lhs = _core.types.arrayPattern(elementLocals);
        rhs = _core.types.memberExpression(rhs, _core.types.identifier("e"), false, false);
      }
    } else {
      lhs = _core.types.arrayPattern(classLocals);
      rhs = _core.types.memberExpression(rhs, _core.types.identifier("c"), false, false);
    }
    return _core.types.assignmentExpression("=", lhs, rhs);
  }
  function isProtoKey(node2) {
    return node2.type === "Identifier" ? node2.name === "__proto__" : node2.value === "__proto__";
  }
  function isDecorated(node2) {
    return node2.decorators && node2.decorators.length > 0;
  }
  function shouldTransformElement(node2) {
    switch (node2.type) {
      case "ClassAccessorProperty":
        return true;
      case "ClassMethod":
      case "ClassProperty":
      case "ClassPrivateMethod":
      case "ClassPrivateProperty":
        return isDecorated(node2);
      default:
        return false;
    }
  }
  function shouldTransformClass(node2) {
    return isDecorated(node2) || node2.body.body.some(shouldTransformElement);
  }
  function NamedEvaluationVisitoryFactory(isAnonymous, visitor) {
    function handleComputedProperty(propertyPath, key2, state2) {
      switch (key2.type) {
        case "StringLiteral":
          return _core.types.stringLiteral(key2.value);
        case "NumericLiteral":
        case "BigIntLiteral": {
          const keyValue = key2.value + "";
          propertyPath.get("key").replaceWith(_core.types.stringLiteral(keyValue));
          return _core.types.stringLiteral(keyValue);
        }
        default: {
          const ref = propertyPath.scope.maybeGenerateMemoised(key2);
          propertyPath.get("key").replaceWith(_core.types.assignmentExpression("=", ref, createToPropertyKeyCall(state2, key2)));
          return _core.types.cloneNode(ref);
        }
      }
    }
    return {
      VariableDeclarator(path2, state2) {
        const id = path2.node.id;
        if (id.type === "Identifier") {
          const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("init"));
          if (isAnonymous(initializer)) {
            const name = id.name;
            visitor(initializer, state2, name);
          }
        }
      },
      AssignmentExpression(path2, state2) {
        const id = path2.node.left;
        if (id.type === "Identifier") {
          const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("right"));
          if (isAnonymous(initializer)) {
            switch (path2.node.operator) {
              case "=":
              case "&&=":
              case "||=":
              case "??=":
                visitor(initializer, state2, id.name);
            }
          }
        }
      },
      AssignmentPattern(path2, state2) {
        const id = path2.node.left;
        if (id.type === "Identifier") {
          const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("right"));
          if (isAnonymous(initializer)) {
            const name = id.name;
            visitor(initializer, state2, name);
          }
        }
      },
      ObjectExpression(path2, state2) {
        for (const propertyPath of path2.get("properties")) {
          const {
            node: node2
          } = propertyPath;
          if (node2.type !== "ObjectProperty") continue;
          const id = node2.key;
          const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(propertyPath.get("value"));
          if (isAnonymous(initializer)) {
            if (!node2.computed) {
              if (!isProtoKey(id)) {
                if (id.type === "Identifier") {
                  visitor(initializer, state2, id.name);
                } else {
                  const className = _core.types.stringLiteral(id.value + "");
                  visitor(initializer, state2, className);
                }
              }
            } else {
              const ref = handleComputedProperty(propertyPath, id, state2);
              visitor(initializer, state2, ref);
            }
          }
        }
      },
      ClassPrivateProperty(path2, state2) {
        const {
          node: node2
        } = path2;
        const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("value"));
        if (isAnonymous(initializer)) {
          const className = _core.types.stringLiteral("#" + node2.key.id.name);
          visitor(initializer, state2, className);
        }
      },
      ClassAccessorProperty(path2, state2) {
        const {
          node: node2
        } = path2;
        const id = node2.key;
        const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("value"));
        if (isAnonymous(initializer)) {
          if (!node2.computed) {
            if (id.type === "Identifier") {
              visitor(initializer, state2, id.name);
            } else if (id.type === "PrivateName") {
              const className = _core.types.stringLiteral("#" + id.id.name);
              visitor(initializer, state2, className);
            } else {
              const className = _core.types.stringLiteral(id.value + "");
              visitor(initializer, state2, className);
            }
          } else {
            const ref = handleComputedProperty(path2, id, state2);
            visitor(initializer, state2, ref);
          }
        }
      },
      ClassProperty(path2, state2) {
        const {
          node: node2
        } = path2;
        const id = node2.key;
        const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path2.get("value"));
        if (isAnonymous(initializer)) {
          if (!node2.computed) {
            if (id.type === "Identifier") {
              visitor(initializer, state2, id.name);
            } else {
              const className = _core.types.stringLiteral(id.value + "");
              visitor(initializer, state2, className);
            }
          } else {
            const ref = handleComputedProperty(path2, id, state2);
            visitor(initializer, state2, ref);
          }
        }
      }
    };
  }
  function isDecoratedAnonymousClassExpression(path2) {
    return path2.isClassExpression({
      id: null
    }) && shouldTransformClass(path2.node);
  }
  function generateLetUidIdentifier(scope2, name) {
    const id = scope2.generateUidIdentifier(name);
    scope2.push({
      id,
      kind: "let"
    });
    return _core.types.cloneNode(id);
  }
  function _default2({
    assertVersion,
    assumption
  }, {
    loose
  }, version2, inherits2) {
    var _assumption, _assumption2;
    {
      if (version2 === "2023-11" || version2 === "2023-05" || version2 === "2023-01") {
        assertVersion("^7.21.0");
      } else if (version2 === "2021-12") {
        assertVersion("^7.16.0");
      } else {
        assertVersion("^7.19.0");
      }
    }
    const VISITED = /* @__PURE__ */ new WeakSet();
    const constantSuper = (_assumption = assumption("constantSuper")) != null ? _assumption : loose;
    const ignoreFunctionLength = (_assumption2 = assumption("ignoreFunctionLength")) != null ? _assumption2 : loose;
    const namedEvaluationVisitor = NamedEvaluationVisitoryFactory(isDecoratedAnonymousClassExpression, visitClass);
    function visitClass(path2, state2, className) {
      var _className, _node$id;
      if (VISITED.has(path2)) return;
      const {
        node: node2
      } = path2;
      (_className = className) != null ? _className : className = (_node$id = node2.id) == null ? void 0 : _node$id.name;
      const newPath = transformClass(path2, state2, constantSuper, ignoreFunctionLength, className, namedEvaluationVisitor, version2);
      if (newPath) {
        VISITED.add(newPath);
        return;
      }
      VISITED.add(path2);
    }
    return {
      name: "proposal-decorators",
      inherits: inherits2,
      visitor: Object.assign({
        ExportDefaultDeclaration(path2, state2) {
          const {
            declaration
          } = path2.node;
          if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && isDecorated(declaration)) {
            const isAnonymous = !declaration.id;
            const updatedVarDeclarationPath = (0, _helperSplitExportDeclaration.default)(path2);
            if (isAnonymous) {
              visitClass(updatedVarDeclarationPath, state2, _core.types.stringLiteral("default"));
            }
          }
        },
        ExportNamedDeclaration(path2) {
          const {
            declaration
          } = path2.node;
          if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && isDecorated(declaration)) {
            (0, _helperSplitExportDeclaration.default)(path2);
          }
        },
        Class(path2, state2) {
          visitClass(path2, state2, void 0);
        }
      }, namedEvaluationVisitor)
    };
  }
  return decorators;
}
var decorators201809 = {};
var hasRequiredDecorators201809;
function requireDecorators201809() {
  if (hasRequiredDecorators201809) return decorators201809;
  hasRequiredDecorators201809 = 1;
  Object.defineProperty(decorators201809, "__esModule", {
    value: true
  });
  decorators201809.buildDecoratedClass = buildDecoratedClass;
  decorators201809.hasDecorators = hasDecorators;
  decorators201809.hasOwnDecorators = hasOwnDecorators;
  var _core = requireLib$x();
  var _helperReplaceSupers = requireLib$u();
  var _helperFunctionName = requireLib$F();
  function hasOwnDecorators(node2) {
    var _node$decorators;
    return !!((_node$decorators = node2.decorators) != null && _node$decorators.length);
  }
  function hasDecorators(node2) {
    return hasOwnDecorators(node2) || node2.body.body.some(hasOwnDecorators);
  }
  function prop(key2, value2) {
    if (!value2) return null;
    return _core.types.objectProperty(_core.types.identifier(key2), value2);
  }
  function method(key2, body) {
    return _core.types.objectMethod("method", _core.types.identifier(key2), [], _core.types.blockStatement(body));
  }
  function takeDecorators(node2) {
    let result;
    if (node2.decorators && node2.decorators.length > 0) {
      result = _core.types.arrayExpression(node2.decorators.map((decorator) => decorator.expression));
    }
    node2.decorators = void 0;
    return result;
  }
  function getKey(node2) {
    if (node2.computed) {
      return node2.key;
    } else if (_core.types.isIdentifier(node2.key)) {
      return _core.types.stringLiteral(node2.key.name);
    } else {
      return _core.types.stringLiteral(String(node2.key.value));
    }
  }
  function extractElementDescriptor(file2, classRef, superRef, path2) {
    const isMethod = path2.isClassMethod();
    if (path2.isPrivate()) {
      throw path2.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
    }
    if (path2.node.type === "ClassAccessorProperty") {
      throw path2.buildCodeFrameError(`Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.`);
    }
    if (path2.node.type === "StaticBlock") {
      throw path2.buildCodeFrameError(`Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.`);
    }
    const {
      node: node2,
      scope: scope2
    } = path2;
    if (!path2.isTSDeclareMethod()) {
      new _helperReplaceSupers.default({
        methodPath: path2,
        objectRef: classRef,
        superRef,
        file: file2,
        refToPreserve: classRef
      }).replace();
    }
    const properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node2) ? node2.kind : "field")), prop("decorators", takeDecorators(node2)), prop("static", node2.static && _core.types.booleanLiteral(true)), prop("key", getKey(node2))].filter(Boolean);
    if (_core.types.isClassMethod(node2)) {
      const id = node2.computed ? null : node2.key;
      const transformed = _core.types.toExpression(node2);
      properties.push(prop("value", (0, _helperFunctionName.default)({
        node: transformed,
        id,
        scope: scope2
      }) || transformed));
    } else if (_core.types.isClassProperty(node2) && node2.value) {
      properties.push(method("value", _core.template.statements.ast`return ${node2.value}`));
    } else {
      properties.push(prop("value", scope2.buildUndefinedNode()));
    }
    path2.remove();
    return _core.types.objectExpression(properties);
  }
  function addDecorateHelper(file2) {
    return file2.addHelper("decorate");
  }
  function buildDecoratedClass(ref, path2, elements, file2) {
    const {
      node: node2,
      scope: scope2
    } = path2;
    const initializeId = scope2.generateUidIdentifier("initialize");
    const isDeclaration = node2.id && path2.isDeclaration();
    const isStrict = path2.isInStrictMode();
    const {
      superClass
    } = node2;
    node2.type = "ClassDeclaration";
    if (!node2.id) node2.id = _core.types.cloneNode(ref);
    let superId;
    if (superClass) {
      superId = scope2.generateUidIdentifierBasedOnNode(node2.superClass, "super");
      node2.superClass = superId;
    }
    const classDecorators = takeDecorators(node2);
    const definitions2 = _core.types.arrayExpression(elements.filter((element) => !element.node.abstract && element.node.type !== "TSIndexSignature").map((path3) => extractElementDescriptor(file2, node2.id, superId, path3)));
    const wrapperCall = _core.template.expression.ast`
    ${addDecorateHelper(file2)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node2}
        return { F: ${_core.types.cloneNode(node2.id)}, d: ${definitions2} };
      },
      ${superClass}
    )
  `;
    if (!isStrict) {
      wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
    }
    let replacement2 = wrapperCall;
    let classPathDesc = "arguments.1.body.body.0";
    if (isDeclaration) {
      replacement2 = _core.template.statement.ast`let ${ref} = ${wrapperCall}`;
      classPathDesc = "declarations.0.init." + classPathDesc;
    }
    return {
      instanceNodes: [_core.template.statement.ast`
        ${_core.types.cloneNode(initializeId)}(this)
      `],
      wrapClass(path3) {
        path3.replaceWith(replacement2);
        return path3.get(classPathDesc);
      }
    };
  }
  return decorators201809;
}
var features = {};
var hasRequiredFeatures;
function requireFeatures() {
  if (hasRequiredFeatures) return features;
  hasRequiredFeatures = 1;
  Object.defineProperty(features, "__esModule", {
    value: true
  });
  features.FEATURES = void 0;
  features.enableFeature = enableFeature;
  features.isLoose = isLoose;
  features.shouldTransform = shouldTransform;
  var _decorators = requireDecorators201809();
  const FEATURES = features.FEATURES = Object.freeze({
    fields: 1 << 1,
    privateMethods: 1 << 2,
    decorators: 1 << 3,
    privateIn: 1 << 4,
    staticBlocks: 1 << 5
  });
  const featuresSameLoose = /* @__PURE__ */ new Map([[FEATURES.fields, "@babel/plugin-transform-class-properties"], [FEATURES.privateMethods, "@babel/plugin-transform-private-methods"], [FEATURES.privateIn, "@babel/plugin-transform-private-property-in-object"]]);
  const featuresKey = "@babel/plugin-class-features/featuresKey";
  const looseKey = "@babel/plugin-class-features/looseKey";
  {
    var looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";
  }
  {
    var canIgnoreLoose = function(file2, feature) {
      return !!(file2.get(looseLowPriorityKey) & feature);
    };
  }
  function enableFeature(file2, feature, loose) {
    if (!hasFeature(file2, feature) || canIgnoreLoose(file2, feature)) {
      file2.set(featuresKey, file2.get(featuresKey) | feature);
      if (loose === "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error") {
        setLoose(file2, feature, true);
        file2.set(looseLowPriorityKey, file2.get(looseLowPriorityKey) | feature);
      } else if (loose === "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error") {
        setLoose(file2, feature, false);
        file2.set(looseLowPriorityKey, file2.get(looseLowPriorityKey) | feature);
      } else {
        setLoose(file2, feature, loose);
      }
    }
    let resolvedLoose;
    for (const [mask, name] of featuresSameLoose) {
      if (!hasFeature(file2, mask)) continue;
      {
        if (canIgnoreLoose(file2, mask)) continue;
      }
      const loose2 = isLoose(file2, mask);
      if (resolvedLoose === !loose2) {
        throw new Error("'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled).\n\n" + getBabelShowConfigForHint(file2));
      } else {
        resolvedLoose = loose2;
        {
          var higherPriorityPluginName = name;
        }
      }
    }
    if (resolvedLoose !== void 0) {
      for (const [mask, name] of featuresSameLoose) {
        if (hasFeature(file2, mask) && isLoose(file2, mask) !== resolvedLoose) {
          setLoose(file2, mask, resolvedLoose);
          console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.
The "loose" option must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
	["${name}", { "loose": ${resolvedLoose} }]
to the "plugins" section of your Babel config.

` + getBabelShowConfigForHint(file2));
        }
      }
    }
  }
  function getBabelShowConfigForHint(file2) {
    let {
      filename
    } = file2.opts;
    if (!filename || filename === "unknown") {
      filename = "[name of the input file]";
    }
    return `If you already set the same 'loose' mode for these plugins in your config, it's possible that they are enabled multiple times with different options.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${filename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.`;
  }
  function hasFeature(file2, feature) {
    return !!(file2.get(featuresKey) & feature);
  }
  function isLoose(file2, feature) {
    return !!(file2.get(looseKey) & feature);
  }
  function setLoose(file2, feature, loose) {
    if (loose) file2.set(looseKey, file2.get(looseKey) | feature);
    else file2.set(looseKey, file2.get(looseKey) & ~feature);
    {
      file2.set(looseLowPriorityKey, file2.get(looseLowPriorityKey) & ~feature);
    }
  }
  function shouldTransform(path2, file2) {
    let decoratorPath = null;
    let publicFieldPath = null;
    let privateFieldPath = null;
    let privateMethodPath = null;
    let staticBlockPath = null;
    if ((0, _decorators.hasOwnDecorators)(path2.node)) {
      decoratorPath = path2.get("decorators.0");
    }
    for (const el of path2.get("body.body")) {
      if (!decoratorPath && (0, _decorators.hasOwnDecorators)(el.node)) {
        decoratorPath = el.get("decorators.0");
      }
      if (!publicFieldPath && el.isClassProperty()) {
        publicFieldPath = el;
      }
      if (!privateFieldPath && el.isClassPrivateProperty()) {
        privateFieldPath = el;
      }
      if (!privateMethodPath && el.isClassPrivateMethod != null && el.isClassPrivateMethod()) {
        privateMethodPath = el;
      }
      if (!staticBlockPath && el.isStaticBlock != null && el.isStaticBlock()) {
        staticBlockPath = el;
      }
    }
    if (decoratorPath && privateFieldPath) {
      throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
    }
    if (decoratorPath && privateMethodPath) {
      throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
    }
    if (decoratorPath && !hasFeature(file2, FEATURES.decorators)) {
      throw path2.buildCodeFrameError('Decorators are not enabled.\nIf you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-transform-class-properties" and enable loose mode, like so:\n	["@babel/plugin-proposal-decorators", { "version": "legacy" }]\n	["@babel/plugin-transform-class-properties", { "loose": true }]');
    }
    if (privateMethodPath && !hasFeature(file2, FEATURES.privateMethods)) {
      throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-transform-private-methods` to your configuration.");
    }
    if ((publicFieldPath || privateFieldPath) && !hasFeature(file2, FEATURES.fields) && !hasFeature(file2, FEATURES.privateMethods)) {
      throw path2.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-transform-class-properties` to your configuration.");
    }
    if (staticBlockPath && !hasFeature(file2, FEATURES.staticBlocks)) {
      throw path2.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-transform-class-static-block` to your configuration.");
    }
    if (decoratorPath || privateMethodPath || staticBlockPath) {
      return true;
    }
    if ((publicFieldPath || privateFieldPath) && hasFeature(file2, FEATURES.fields)) {
      return true;
    }
    return false;
  }
  return features;
}
var hasRequiredLib$r;
function requireLib$r() {
  if (hasRequiredLib$r) return lib$R;
  hasRequiredLib$r = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "FEATURES", {
      enumerable: true,
      get: function() {
        return _features.FEATURES;
      }
    });
    Object.defineProperty(exports, "buildCheckInRHS", {
      enumerable: true,
      get: function() {
        return _fields.buildCheckInRHS;
      }
    });
    exports.createClassFeaturePlugin = createClassFeaturePlugin;
    Object.defineProperty(exports, "enableFeature", {
      enumerable: true,
      get: function() {
        return _features.enableFeature;
      }
    });
    Object.defineProperty(exports, "injectInitialization", {
      enumerable: true,
      get: function() {
        return _misc.injectInitialization;
      }
    });
    var _core = requireLib$x();
    var _helperFunctionName = requireLib$F();
    var _helperSplitExportDeclaration = requireLib$N();
    var _decorators = requireDecorators();
    var _semver = requireSemver();
    var _fields = requireFields();
    var _decorators2 = requireDecorators201809();
    var _misc = requireMisc();
    var _features = requireFeatures();
    var _typescript = requireTypescript();
    const versionKey = "@babel/plugin-class-features/version";
    function createClassFeaturePlugin({
      name,
      feature,
      loose,
      manipulateOptions,
      api,
      inherits: inherits2,
      decoratorVersion
    }) {
      var _api$assumption;
      if (feature & _features.FEATURES.decorators) {
        {
          if (decoratorVersion === "2023-11" || decoratorVersion === "2023-05" || decoratorVersion === "2023-01" || decoratorVersion === "2022-03" || decoratorVersion === "2021-12") {
            return (0, _decorators.default)(api, {
              loose
            }, decoratorVersion, inherits2);
          }
        }
      }
      {
        var _api;
        (_api = api) != null ? _api : api = {
          assumption: () => void 0
        };
      }
      const setPublicClassFields = api.assumption("setPublicClassFields");
      const privateFieldsAsSymbols = api.assumption("privateFieldsAsSymbols");
      const privateFieldsAsProperties = api.assumption("privateFieldsAsProperties");
      const noUninitializedPrivateFieldAccess = (_api$assumption = api.assumption("noUninitializedPrivateFieldAccess")) != null ? _api$assumption : false;
      const constantSuper = api.assumption("constantSuper");
      const noDocumentAll = api.assumption("noDocumentAll");
      if (privateFieldsAsProperties && privateFieldsAsSymbols) {
        throw new Error(`Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.`);
      }
      const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;
      if (loose === true) {
        const explicit = [];
        if (setPublicClassFields !== void 0) {
          explicit.push(`"setPublicClassFields"`);
        }
        if (privateFieldsAsProperties !== void 0) {
          explicit.push(`"privateFieldsAsProperties"`);
        }
        if (privateFieldsAsSymbols !== void 0) {
          explicit.push(`"privateFieldsAsSymbols"`);
        }
        if (explicit.length !== 0) {
          console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:
	"assumptions": {
		"setPublicClassFields": true,
		"privateFieldsAsSymbols": true
	}`);
        }
      }
      return {
        name,
        manipulateOptions,
        inherits: inherits2,
        pre(file2) {
          (0, _features.enableFeature)(file2, feature, loose);
          {
            if (typeof file2.get(versionKey) === "number") {
              file2.set(versionKey, "7.24.4");
              return;
            }
          }
          if (!file2.get(versionKey) || _semver.lt(file2.get(versionKey), "7.24.4")) {
            file2.set(versionKey, "7.24.4");
          }
        },
        visitor: {
          Class(path2, {
            file: file2
          }) {
            var _ref;
            if (file2.get(versionKey) !== "7.24.4") return;
            if (!(0, _features.shouldTransform)(path2, file2)) return;
            const pathIsClassDeclaration = path2.isClassDeclaration();
            if (pathIsClassDeclaration) (0, _typescript.assertFieldTransformed)(path2);
            const loose2 = (0, _features.isLoose)(file2, feature);
            let constructor;
            const isDecorated = (0, _decorators2.hasDecorators)(path2.node);
            const props = [];
            const elements = [];
            const computedPaths = [];
            const privateNames = /* @__PURE__ */ new Set();
            const body = path2.get("body");
            for (const path3 of body.get("body")) {
              if ((path3.isClassProperty() || path3.isClassMethod()) && path3.node.computed) {
                computedPaths.push(path3);
              }
              if (path3.isPrivate()) {
                const {
                  name: name2
                } = path3.node.key.id;
                const getName = `get ${name2}`;
                const setName = `set ${name2}`;
                if (path3.isClassPrivateMethod()) {
                  if (path3.node.kind === "get") {
                    if (privateNames.has(getName) || privateNames.has(name2) && !privateNames.has(setName)) {
                      throw path3.buildCodeFrameError("Duplicate private field");
                    }
                    privateNames.add(getName).add(name2);
                  } else if (path3.node.kind === "set") {
                    if (privateNames.has(setName) || privateNames.has(name2) && !privateNames.has(getName)) {
                      throw path3.buildCodeFrameError("Duplicate private field");
                    }
                    privateNames.add(setName).add(name2);
                  }
                } else {
                  if (privateNames.has(name2) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name2) && (privateNames.has(getName) || privateNames.has(setName))) {
                    throw path3.buildCodeFrameError("Duplicate private field");
                  }
                  privateNames.add(name2);
                }
              }
              if (path3.isClassMethod({
                kind: "constructor"
              })) {
                constructor = path3;
              } else {
                elements.push(path3);
                if (path3.isProperty() || path3.isPrivate() || path3.isStaticBlock != null && path3.isStaticBlock()) {
                  props.push(path3);
                }
              }
            }
            {
              if (!props.length && !isDecorated) return;
            }
            const innerBinding = path2.node.id;
            let ref;
            if (!innerBinding || !pathIsClassDeclaration) {
              (0, _helperFunctionName.default)(path2);
              ref = path2.scope.generateUidIdentifier((innerBinding == null ? void 0 : innerBinding.name) || "Class");
            }
            const classRefForDefine = (_ref = ref) != null ? _ref : _core.types.cloneNode(innerBinding);
            const privateNamesMap = (0, _fields.buildPrivateNamesMap)(classRefForDefine.name, privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose2, props, file2);
            const privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, privateFieldsAsProperties != null ? privateFieldsAsProperties : loose2, privateFieldsAsSymbols != null ? privateFieldsAsSymbols : false, file2);
            (0, _fields.transformPrivateNamesUsage)(classRefForDefine, path2, privateNamesMap, {
              privateFieldsAsProperties: privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose2,
              noUninitializedPrivateFieldAccess,
              noDocumentAll,
              innerBinding
            }, file2);
            let keysNodes, staticNodes, instanceNodes, lastInstanceNodeReturnsThis, pureStaticNodes, classBindingNode, wrapClass;
            {
              if (isDecorated) {
                staticNodes = pureStaticNodes = keysNodes = [];
                ({
                  instanceNodes,
                  wrapClass
                } = (0, _decorators2.buildDecoratedClass)(classRefForDefine, path2, elements, file2));
              } else {
                keysNodes = (0, _misc.extractComputedKeys)(path2, computedPaths, file2);
                ({
                  staticNodes,
                  pureStaticNodes,
                  instanceNodes,
                  lastInstanceNodeReturnsThis,
                  classBindingNode,
                  wrapClass
                } = (0, _fields.buildFieldsInitNodes)(ref, path2.node.superClass, props, privateNamesMap, file2, setPublicClassFields != null ? setPublicClassFields : loose2, privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose2, noUninitializedPrivateFieldAccess, constantSuper != null ? constantSuper : loose2, innerBinding));
              }
            }
            if (instanceNodes.length > 0) {
              (0, _misc.injectInitialization)(path2, constructor, instanceNodes, (referenceVisitor, state2) => {
                {
                  if (isDecorated) return;
                }
                for (const prop of props) {
                  if (_core.types.isStaticBlock != null && _core.types.isStaticBlock(prop.node) || prop.node.static) continue;
                  prop.traverse(referenceVisitor, state2);
                }
              }, lastInstanceNodeReturnsThis);
            }
            const wrappedPath = wrapClass(path2);
            wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]);
            if (staticNodes.length > 0) {
              wrappedPath.insertAfter(staticNodes);
            }
            if (pureStaticNodes.length > 0) {
              wrappedPath.find((parent) => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes);
            }
            if (classBindingNode != null && pathIsClassDeclaration) {
              wrappedPath.insertAfter(classBindingNode);
            }
          },
          ExportDefaultDeclaration(path2, {
            file: file2
          }) {
            {
              if (file2.get(versionKey) !== "7.24.4") return;
              const decl = path2.get("declaration");
              if (decl.isClassDeclaration() && (0, _decorators2.hasDecorators)(decl.node)) {
                if (decl.node.id) {
                  (0, _helperSplitExportDeclaration.default)(path2);
                } else {
                  decl.node.type = "ClassExpression";
                }
              }
            }
          }
        }
      };
    }
  })(lib$R);
  return lib$R;
}
var transformerLegacy = {};
var hasRequiredTransformerLegacy;
function requireTransformerLegacy() {
  if (hasRequiredTransformerLegacy) return transformerLegacy;
  hasRequiredTransformerLegacy = 1;
  Object.defineProperty(transformerLegacy, "__esModule", {
    value: true
  });
  transformerLegacy.default = void 0;
  var _core = requireLib$x();
  const buildClassDecorator = _core.template.statement(`
  DECORATOR(CLASS_REF = INNER) || CLASS_REF;
`);
  const buildClassPrototype = (0, _core.template)(`
  CLASS_REF.prototype;
`);
  const buildGetDescriptor = (0, _core.template)(`
    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);
`);
  const buildGetObjectInitializer = (0, _core.template)(`
    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {
        enumerable: true,
        configurable: true,
        writable: true,
        initializer: function(){
            return TEMP;
        }
    })
`);
  const WARNING_CALLS = /* @__PURE__ */ new WeakSet();
  function applyEnsureOrdering(path2) {
    const decorators2 = (path2.isClass() ? [path2, ...path2.get("body.body")] : path2.get("properties")).reduce((acc, prop) => acc.concat(prop.node.decorators || []), []);
    const identDecorators = decorators2.filter((decorator) => !_core.types.isIdentifier(decorator.expression));
    if (identDecorators.length === 0) return;
    return _core.types.sequenceExpression(identDecorators.map((decorator) => {
      const expression = decorator.expression;
      const id = decorator.expression = path2.scope.generateDeclaredUidIdentifier("dec");
      return _core.types.assignmentExpression("=", id, expression);
    }).concat([path2.node]));
  }
  function applyClassDecorators(classPath) {
    if (!hasClassDecorators(classPath.node)) return;
    const decorators2 = classPath.node.decorators || [];
    classPath.node.decorators = null;
    const name = classPath.scope.generateDeclaredUidIdentifier("class");
    return decorators2.map((dec) => dec.expression).reverse().reduce(function(acc, decorator) {
      return buildClassDecorator({
        CLASS_REF: _core.types.cloneNode(name),
        DECORATOR: _core.types.cloneNode(decorator),
        INNER: acc
      }).expression;
    }, classPath.node);
  }
  function hasClassDecorators(classNode) {
    var _classNode$decorators;
    return !!((_classNode$decorators = classNode.decorators) != null && _classNode$decorators.length);
  }
  function applyMethodDecorators(path2, state2) {
    if (!hasMethodDecorators(path2.node.body.body)) return;
    return applyTargetDecorators(path2, state2, path2.node.body.body);
  }
  function hasMethodDecorators(body) {
    return body.some((node2) => {
      var _node$decorators;
      return (_node$decorators = node2.decorators) == null ? void 0 : _node$decorators.length;
    });
  }
  function applyObjectDecorators(path2, state2) {
    if (!hasMethodDecorators(path2.node.properties)) return;
    return applyTargetDecorators(path2, state2, path2.node.properties.filter((prop) => prop.type !== "SpreadElement"));
  }
  function applyTargetDecorators(path2, state2, decoratedProps) {
    const name = path2.scope.generateDeclaredUidIdentifier(path2.isClass() ? "class" : "obj");
    const exprs = decoratedProps.reduce(function(acc, node2) {
      let decorators2 = [];
      if (node2.decorators != null) {
        decorators2 = node2.decorators;
        node2.decorators = null;
      }
      if (decorators2.length === 0) return acc;
      if (node2.computed) {
        throw path2.buildCodeFrameError("Computed method/property decorators are not yet supported.");
      }
      const property = _core.types.isLiteral(node2.key) ? node2.key : _core.types.stringLiteral(node2.key.name);
      const target = path2.isClass() && !node2.static ? buildClassPrototype({
        CLASS_REF: name
      }).expression : name;
      if (_core.types.isClassProperty(node2, {
        static: false
      })) {
        const descriptor = path2.scope.generateDeclaredUidIdentifier("descriptor");
        const initializer = node2.value ? _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(node2.value)])) : _core.types.nullLiteral();
        node2.value = _core.types.callExpression(state2.addHelper("initializerWarningHelper"), [descriptor, _core.types.thisExpression()]);
        WARNING_CALLS.add(node2.value);
        acc.push(_core.types.assignmentExpression("=", _core.types.cloneNode(descriptor), _core.types.callExpression(state2.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators2.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.objectExpression([_core.types.objectProperty(_core.types.identifier("configurable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("enumerable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("writable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("initializer"), initializer)])])));
      } else {
        acc.push(_core.types.callExpression(state2.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators2.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.isObjectProperty(node2) || _core.types.isClassProperty(node2, {
          static: true
        }) ? buildGetObjectInitializer({
          TEMP: path2.scope.generateDeclaredUidIdentifier("init"),
          TARGET: _core.types.cloneNode(target),
          PROPERTY: _core.types.cloneNode(property)
        }).expression : buildGetDescriptor({
          TARGET: _core.types.cloneNode(target),
          PROPERTY: _core.types.cloneNode(property)
        }).expression, _core.types.cloneNode(target)]));
      }
      return acc;
    }, []);
    return _core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(name), path2.node), _core.types.sequenceExpression(exprs), _core.types.cloneNode(name)]);
  }
  function decoratedClassToExpression({
    node: node2,
    scope: scope2
  }) {
    if (!hasClassDecorators(node2) && !hasMethodDecorators(node2.body.body)) {
      return;
    }
    const ref = node2.id ? _core.types.cloneNode(node2.id) : scope2.generateUidIdentifier("class");
    return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(ref, _core.types.toExpression(node2))]);
  }
  const visitor = {
    ExportDefaultDeclaration(path2) {
      const decl = path2.get("declaration");
      if (!decl.isClassDeclaration()) return;
      const replacement2 = decoratedClassToExpression(decl);
      if (replacement2) {
        const [varDeclPath] = path2.replaceWithMultiple([replacement2, _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(replacement2.declarations[0].id), _core.types.identifier("default"))])]);
        if (!decl.node.id) {
          path2.scope.registerDeclaration(varDeclPath);
        }
      }
    },
    ClassDeclaration(path2) {
      const replacement2 = decoratedClassToExpression(path2);
      if (replacement2) {
        const [newPath] = path2.replaceWith(replacement2);
        const decl = newPath.get("declarations.0");
        const id = decl.node.id;
        const binding2 = path2.scope.getOwnBinding(id.name);
        binding2.identifier = id;
        binding2.path = decl;
      }
    },
    ClassExpression(path2, state2) {
      const decoratedClass = applyEnsureOrdering(path2) || applyClassDecorators(path2) || applyMethodDecorators(path2, state2);
      if (decoratedClass) path2.replaceWith(decoratedClass);
    },
    ObjectExpression(path2, state2) {
      const decoratedObject = applyEnsureOrdering(path2) || applyObjectDecorators(path2, state2);
      if (decoratedObject) path2.replaceWith(decoratedObject);
    },
    AssignmentExpression(path2, state2) {
      if (!WARNING_CALLS.has(path2.node.right)) return;
      path2.replaceWith(_core.types.callExpression(state2.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path2.get("left.object").node), _core.types.stringLiteral(path2.get("left.property").node.name || path2.get("left.property").node.value), _core.types.cloneNode(path2.get("right.arguments")[0].node), _core.types.cloneNode(path2.get("right.arguments")[1].node)]));
    },
    CallExpression(path2, state2) {
      if (path2.node.arguments.length !== 3) return;
      if (!WARNING_CALLS.has(path2.node.arguments[2])) return;
      if (path2.node.callee.name !== state2.addHelper("defineProperty").name) {
        return;
      }
      path2.replaceWith(_core.types.callExpression(state2.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path2.get("arguments")[0].node), _core.types.cloneNode(path2.get("arguments")[1].node), _core.types.cloneNode(path2.get("arguments.2.arguments")[0].node), _core.types.cloneNode(path2.get("arguments.2.arguments")[1].node)]));
    }
  };
  transformerLegacy.default = visitor;
  return transformerLegacy;
}
var hasRequiredLib$q;
function requireLib$q() {
  if (hasRequiredLib$q) return lib$T;
  hasRequiredLib$q = 1;
  Object.defineProperty(lib$T, "__esModule", {
    value: true
  });
  lib$T.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _pluginSyntaxDecorators = requireLib$R();
  var _helperCreateClassFeaturesPlugin = requireLib$r();
  var _transformerLegacy = requireTransformerLegacy();
  lib$T.default = (0, _helperPluginUtils.declare)((api, options2) => {
    api.assertVersion(7);
    {
      var {
        legacy
      } = options2;
    }
    const {
      version: version2
    } = options2;
    if (legacy || version2 === "legacy") {
      return {
        name: "proposal-decorators",
        inherits: _pluginSyntaxDecorators.default,
        visitor: _transformerLegacy.default
      };
    } else if (!version2 || version2 === "2018-09" || version2 === "2021-12" || version2 === "2022-03" || version2 === "2023-01" || version2 === "2023-05" || version2 === "2023-11") {
      api.assertVersion("^7.0.2");
      return (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({
        name: "proposal-decorators",
        api,
        feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators,
        inherits: _pluginSyntaxDecorators.default,
        decoratorVersion: version2
      });
    } else {
      throw new Error("The '.version' option must be one of 'legacy', '2023-11', '2023-05', '2023-01', '2022-03', or '2021-12'.");
    }
  });
  return lib$T;
}
var lib$r = {};
var lib$q = {};
var hasRequiredLib$p;
function requireLib$p() {
  if (hasRequiredLib$p) return lib$q;
  hasRequiredLib$p = 1;
  Object.defineProperty(lib$q, "__esModule", {
    value: true
  });
  lib$q.default = void 0;
  var _helperPluginUtils = requireLib$T();
  lib$q.default = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-explicit-resource-management",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("explicitResourceManagement");
      }
    };
  });
  return lib$q;
}
var hasRequiredLib$o;
function requireLib$o() {
  if (hasRequiredLib$o) return lib$r;
  hasRequiredLib$o = 1;
  Object.defineProperty(lib$r, "__esModule", {
    value: true
  });
  lib$r.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _pluginSyntaxExplicitResourceManagement = requireLib$p();
  var _core = requireLib$x();
  lib$r.default = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion("^7.22.0");
    const TOP_LEVEL_USING = /* @__PURE__ */ new Map();
    function isUsingDeclaration(node2) {
      if (!_core.types.isVariableDeclaration(node2)) return false;
      return node2.kind === "using" || node2.kind === "await using" || TOP_LEVEL_USING.has(node2);
    }
    const transformUsingDeclarationsVisitor = {
      ForOfStatement(path2) {
        const {
          left
        } = path2.node;
        if (!isUsingDeclaration(left)) return;
        const {
          id
        } = left.declarations[0];
        const tmpId = path2.scope.generateUidIdentifierBasedOnNode(id);
        left.declarations[0].id = tmpId;
        left.kind = "const";
        path2.ensureBlock();
        path2.node.body.body.unshift(_core.types.variableDeclaration("using", [_core.types.variableDeclarator(id, _core.types.cloneNode(tmpId))]));
      },
      "BlockStatement|StaticBlock"(path2, state2) {
        if (state2.availableHelper("usingCtx")) {
          let ctx = null;
          let needsAwait = false;
          for (const node2 of path2.node.body) {
            var _ctx;
            if (!isUsingDeclaration(node2)) continue;
            (_ctx = ctx) != null ? _ctx : ctx = path2.scope.generateUidIdentifier("usingCtx");
            const isAwaitUsing = node2.kind === "await using" || TOP_LEVEL_USING.get(node2) === 1;
            needsAwait || (needsAwait = isAwaitUsing);
            if (!TOP_LEVEL_USING.delete(node2)) {
              node2.kind = "const";
            }
            for (const decl of node2.declarations) {
              decl.init = _core.types.callExpression(_core.types.memberExpression(_core.types.cloneNode(ctx), isAwaitUsing ? _core.types.identifier("a") : _core.types.identifier("u")), [decl.init]);
            }
          }
          if (!ctx) return;
          const disposeCall = _core.types.callExpression(_core.types.memberExpression(_core.types.cloneNode(ctx), _core.types.identifier("d")), []);
          const replacement2 = _core.template.statement.ast`
        try {
          var ${_core.types.cloneNode(ctx)} = ${state2.addHelper("usingCtx")}();
          ${path2.node.body}
        } catch (_) {
          ${_core.types.cloneNode(ctx)}.e = _;
        } finally {
          ${needsAwait ? _core.types.awaitExpression(disposeCall) : disposeCall}
        }
      `;
          _core.types.inherits(replacement2, path2.node);
          const {
            parentPath
          } = path2;
          if (parentPath.isFunction() || parentPath.isTryStatement() || parentPath.isCatchClause()) {
            path2.replaceWith(_core.types.blockStatement([replacement2]));
          } else if (path2.isStaticBlock()) {
            path2.node.body = [replacement2];
          } else {
            path2.replaceWith(replacement2);
          }
        } else {
          let stackId = null;
          let needsAwait = false;
          for (const node2 of path2.node.body) {
            var _stackId;
            if (!isUsingDeclaration(node2)) continue;
            (_stackId = stackId) != null ? _stackId : stackId = path2.scope.generateUidIdentifier("stack");
            const isAwaitUsing = node2.kind === "await using" || TOP_LEVEL_USING.get(node2) === 1;
            needsAwait || (needsAwait = isAwaitUsing);
            if (!TOP_LEVEL_USING.delete(node2)) {
              node2.kind = "const";
            }
            node2.declarations.forEach((decl) => {
              const args = [_core.types.cloneNode(stackId), decl.init];
              if (isAwaitUsing) args.push(_core.types.booleanLiteral(true));
              decl.init = _core.types.callExpression(state2.addHelper("using"), args);
            });
          }
          if (!stackId) return;
          const errorId = path2.scope.generateUidIdentifier("error");
          const hasErrorId = path2.scope.generateUidIdentifier("hasError");
          let disposeCall = _core.types.callExpression(state2.addHelper("dispose"), [_core.types.cloneNode(stackId), _core.types.cloneNode(errorId), _core.types.cloneNode(hasErrorId)]);
          if (needsAwait) disposeCall = _core.types.awaitExpression(disposeCall);
          const replacement2 = _core.template.statement.ast`
        try {
          var ${stackId} = [];
          ${path2.node.body}
        } catch (_) {
          var ${errorId} = _;
          var ${hasErrorId} = true;
        } finally {
          ${disposeCall}
        }
      `;
          _core.types.inherits(replacement2.block, path2.node);
          const {
            parentPath
          } = path2;
          if (parentPath.isFunction() || parentPath.isTryStatement() || parentPath.isCatchClause()) {
            path2.replaceWith(_core.types.blockStatement([replacement2]));
          } else if (path2.isStaticBlock()) {
            path2.node.body = [replacement2];
          } else {
            path2.replaceWith(replacement2);
          }
        }
      }
    };
    const transformUsingDeclarationsVisitorSkipFn = _core.traverse.visitors.merge([transformUsingDeclarationsVisitor, {
      Function(path2) {
        path2.skip();
      }
    }]);
    return {
      name: "proposal-explicit-resource-management",
      inherits: _pluginSyntaxExplicitResourceManagement.default,
      visitor: _core.traverse.visitors.merge([transformUsingDeclarationsVisitor, {
        Program(path2) {
          TOP_LEVEL_USING.clear();
          if (path2.node.sourceType !== "module") return;
          if (!path2.node.body.some(isUsingDeclaration)) return;
          const innerBlockBody = [];
          for (const stmt of path2.get("body")) {
            if (stmt.isFunctionDeclaration() || stmt.isImportDeclaration()) {
              continue;
            }
            let {
              node: node2
            } = stmt;
            let shouldRemove = true;
            if (stmt.isExportDefaultDeclaration()) {
              var _varId;
              let {
                declaration
              } = stmt.node;
              let varId;
              if (_core.types.isClassDeclaration(declaration)) {
                varId = declaration.id;
                declaration.id = null;
                declaration = _core.types.toExpression(declaration);
              } else if (!_core.types.isExpression(declaration)) {
                continue;
              }
              (_varId = varId) != null ? _varId : varId = path2.scope.generateUidIdentifier("_default");
              innerBlockBody.push(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(varId, declaration)]));
              stmt.replaceWith(_core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(varId), _core.types.identifier("default"))]));
              continue;
            }
            if (stmt.isExportNamedDeclaration()) {
              node2 = stmt.node.declaration;
              if (!node2 || _core.types.isFunction(node2)) continue;
              stmt.replaceWith(_core.types.exportNamedDeclaration(null, Object.keys(_core.types.getOuterBindingIdentifiers(node2, false)).map((id) => _core.types.exportSpecifier(_core.types.identifier(id), _core.types.identifier(id)))));
              shouldRemove = false;
            } else if (stmt.isExportDeclaration()) {
              continue;
            }
            if (_core.types.isClassDeclaration(node2)) {
              const {
                id
              } = node2;
              node2.id = null;
              innerBlockBody.push(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(id, _core.types.toExpression(node2))]));
            } else if (_core.types.isVariableDeclaration(node2)) {
              if (node2.kind === "using") {
                TOP_LEVEL_USING.set(stmt.node, 0);
              } else if (node2.kind === "await using") {
                TOP_LEVEL_USING.set(stmt.node, 1);
              }
              node2.kind = "var";
              innerBlockBody.push(node2);
            } else {
              innerBlockBody.push(stmt.node);
            }
            if (shouldRemove) stmt.remove();
          }
          path2.pushContainer("body", _core.types.blockStatement(innerBlockBody));
        },
        Function(path2, state2) {
          if (path2.node.async) {
            path2.traverse(transformUsingDeclarationsVisitorSkipFn, state2);
          }
        }
      }])
    };
  });
  return lib$r;
}
var lib$p = {};
var hasRequiredLib$n;
function requireLib$n() {
  if (hasRequiredLib$n) return lib$p;
  hasRequiredLib$n = 1;
  Object.defineProperty(lib$p, "__esModule", {
    value: true
  });
  lib$p.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _helperCreateClassFeaturesPlugin = requireLib$r();
  lib$p.default = (0, _helperPluginUtils.declare)((api, options2) => {
    api.assertVersion(7);
    return (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({
      name: "transform-class-properties",
      api,
      feature: _helperCreateClassFeaturesPlugin.FEATURES.fields,
      loose: options2.loose,
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("classProperties", "classPrivateProperties");
      }
    });
  });
  return lib$p;
}
var lib$o = {};
var lib$n = {};
var hasRequiredLib$m;
function requireLib$m() {
  if (hasRequiredLib$m) return lib$n;
  hasRequiredLib$m = 1;
  Object.defineProperty(lib$n, "__esModule", {
    value: true
  });
  lib$n.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-class-static-block",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("classStaticBlock");
      }
    };
  });
  lib$n.default = _default2;
  return lib$n;
}
var hasRequiredLib$l;
function requireLib$l() {
  if (hasRequiredLib$l) return lib$o;
  hasRequiredLib$l = 1;
  Object.defineProperty(lib$o, "__esModule", {
    value: true
  });
  lib$o.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _helperCreateClassFeaturesPlugin = requireLib$r();
  function generateUid(scope2, denyList) {
    const name = "";
    let uid;
    let i = 1;
    do {
      uid = scope2._generateUid(name, i);
      i++;
    } while (denyList.has(uid));
    return uid;
  }
  lib$o.default = (0, _helperPluginUtils.declare)(({
    types: t,
    template: template2,
    assertVersion,
    version: version2
  }) => {
    assertVersion("^7.12.0 || >8.0.0-alpha <8.0.0-beta");
    return {
      name: "transform-class-static-block",
      inherits: version2[0] === "8" ? void 0 : requireLib$m().default,
      pre() {
        (0, _helperCreateClassFeaturesPlugin.enableFeature)(this.file, _helperCreateClassFeaturesPlugin.FEATURES.staticBlocks, false);
      },
      visitor: {
        ClassBody(classBody) {
          const {
            scope: scope2
          } = classBody;
          const privateNames = /* @__PURE__ */ new Set();
          const body = classBody.get("body");
          for (const path2 of body) {
            if (path2.isPrivate()) {
              privateNames.add(path2.get("key.id").node.name);
            }
          }
          for (const path2 of body) {
            if (!path2.isStaticBlock()) continue;
            const staticBlockPrivateId = generateUid(scope2, privateNames);
            privateNames.add(staticBlockPrivateId);
            const staticBlockRef = t.privateName(t.identifier(staticBlockPrivateId));
            let replacement2;
            const blockBody = path2.node.body;
            if (blockBody.length === 1 && t.isExpressionStatement(blockBody[0])) {
              replacement2 = t.inheritsComments(blockBody[0].expression, blockBody[0]);
            } else {
              replacement2 = template2.expression.ast`(() => { ${blockBody} })()`;
            }
            path2.replaceWith(t.classPrivateProperty(staticBlockRef, replacement2, [], true));
          }
        }
      }
    };
  });
  return lib$o;
}
var lib$m = {};
var lib$l = {};
var hasRequiredLib$k;
function requireLib$k() {
  if (hasRequiredLib$k) return lib$l;
  hasRequiredLib$k = 1;
  Object.defineProperty(lib$l, "__esModule", {
    value: true
  });
  lib$l.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-numeric-separator",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("numericSeparator");
      }
    };
  });
  lib$l.default = _default2;
  return lib$l;
}
var hasRequiredLib$j;
function requireLib$j() {
  if (hasRequiredLib$j) return lib$m;
  hasRequiredLib$j = 1;
  Object.defineProperty(lib$m, "__esModule", {
    value: true
  });
  lib$m.default = void 0;
  var _helperPluginUtils = requireLib$T();
  function remover({
    node: node2
  }) {
    var _extra$raw;
    const {
      extra
    } = node2;
    if (extra != null && (_extra$raw = extra.raw) != null && _extra$raw.includes("_")) {
      extra.raw = extra.raw.replace(/_/g, "");
    }
  }
  lib$m.default = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "transform-numeric-separator",
      inherits: api.version[0] === "8" ? void 0 : requireLib$k().default,
      visitor: {
        NumericLiteral: remover,
        BigIntLiteral: remover
      }
    };
  });
  return lib$m;
}
var lib$k = {};
var lib$j = {};
var hasRequiredLib$i;
function requireLib$i() {
  if (hasRequiredLib$i) return lib$j;
  hasRequiredLib$i = 1;
  Object.defineProperty(lib$j, "__esModule", {
    value: true
  });
  lib$j.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-logical-assignment-operators",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("logicalAssignment");
      }
    };
  });
  lib$j.default = _default2;
  return lib$j;
}
var hasRequiredLib$h;
function requireLib$h() {
  if (hasRequiredLib$h) return lib$k;
  hasRequiredLib$h = 1;
  Object.defineProperty(lib$k, "__esModule", {
    value: true
  });
  lib$k.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _core = requireLib$x();
  lib$k.default = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "transform-logical-assignment-operators",
      inherits: api.version[0] === "8" ? void 0 : requireLib$i().default,
      visitor: {
        AssignmentExpression(path2) {
          const {
            node: node2,
            scope: scope2
          } = path2;
          const {
            operator,
            left,
            right
          } = node2;
          const operatorTrunc = operator.slice(0, -1);
          if (!_core.types.LOGICAL_OPERATORS.includes(operatorTrunc)) {
            return;
          }
          const lhs = _core.types.cloneNode(left);
          if (_core.types.isMemberExpression(left)) {
            const {
              object,
              property,
              computed
            } = left;
            const memo = scope2.maybeGenerateMemoised(object);
            if (memo) {
              left.object = memo;
              lhs.object = _core.types.assignmentExpression("=", _core.types.cloneNode(memo), object);
            }
            if (computed) {
              const memo2 = scope2.maybeGenerateMemoised(property);
              if (memo2) {
                left.property = memo2;
                lhs.property = _core.types.assignmentExpression("=", _core.types.cloneNode(memo2), property);
              }
            }
          }
          path2.replaceWith(_core.types.logicalExpression(operatorTrunc, lhs, _core.types.assignmentExpression("=", left, right)));
        }
      }
    };
  });
  return lib$k;
}
var lib$i = {};
var lib$h = {};
var hasRequiredLib$g;
function requireLib$g() {
  if (hasRequiredLib$g) return lib$h;
  hasRequiredLib$g = 1;
  Object.defineProperty(lib$h, "__esModule", {
    value: true
  });
  lib$h.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-nullish-coalescing-operator",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("nullishCoalescingOperator");
      }
    };
  });
  lib$h.default = _default2;
  return lib$h;
}
var hasRequiredLib$f;
function requireLib$f() {
  if (hasRequiredLib$f) return lib$i;
  hasRequiredLib$f = 1;
  Object.defineProperty(lib$i, "__esModule", {
    value: true
  });
  lib$i.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _core = requireLib$x();
  lib$i.default = (0, _helperPluginUtils.declare)((api, {
    loose = false
  }) => {
    var _api$assumption;
    api.assertVersion(7);
    const noDocumentAll = (_api$assumption = api.assumption("noDocumentAll")) != null ? _api$assumption : loose;
    return {
      name: "transform-nullish-coalescing-operator",
      inherits: api.version[0] === "8" ? void 0 : requireLib$g().default,
      visitor: {
        LogicalExpression(path2) {
          const {
            node: node2,
            scope: scope2
          } = path2;
          if (node2.operator !== "??") {
            return;
          }
          let ref;
          let assignment;
          if (scope2.isStatic(node2.left)) {
            ref = node2.left;
            assignment = _core.types.cloneNode(node2.left);
          } else if (scope2.path.isPattern()) {
            path2.replaceWith(_core.template.statement.ast`(() => ${path2.node})()`);
            return;
          } else {
            ref = scope2.generateUidIdentifierBasedOnNode(node2.left);
            scope2.push({
              id: _core.types.cloneNode(ref)
            });
            assignment = _core.types.assignmentExpression("=", ref, node2.left);
          }
          path2.replaceWith(_core.types.conditionalExpression(noDocumentAll ? _core.types.binaryExpression("!=", assignment, _core.types.nullLiteral()) : _core.types.logicalExpression("&&", _core.types.binaryExpression("!==", assignment, _core.types.nullLiteral()), _core.types.binaryExpression("!==", _core.types.cloneNode(ref), scope2.buildUndefinedNode())), _core.types.cloneNode(ref), node2.right));
        }
      }
    };
  });
  return lib$i;
}
var lib$g = {};
var lib$f = {};
var hasRequiredLib$e;
function requireLib$e() {
  if (hasRequiredLib$e) return lib$f;
  hasRequiredLib$e = 1;
  Object.defineProperty(lib$f, "__esModule", {
    value: true
  });
  lib$f.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-optional-chaining",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("optionalChaining");
      }
    };
  });
  lib$f.default = _default2;
  return lib$f;
}
var hasRequiredLib$d;
function requireLib$d() {
  if (hasRequiredLib$d) return lib$g;
  hasRequiredLib$d = 1;
  Object.defineProperty(lib$g, "__esModule", { value: true });
  var helperPluginUtils = requireLib$T();
  var core2 = requireLib$x();
  var helperSkipTransparentExpressionWrappers = requireLib$t();
  function willPathCastToBoolean(path2) {
    const maybeWrapped = findOutermostTransparentParent(path2);
    const {
      node: node2,
      parentPath
    } = maybeWrapped;
    if (parentPath.isLogicalExpression()) {
      const {
        operator,
        right
      } = parentPath.node;
      if (operator === "&&" || operator === "||" || operator === "??" && node2 === right) {
        return willPathCastToBoolean(parentPath);
      }
    }
    if (parentPath.isSequenceExpression()) {
      const {
        expressions: expressions2
      } = parentPath.node;
      if (expressions2[expressions2.length - 1] === node2) {
        return willPathCastToBoolean(parentPath);
      } else {
        return true;
      }
    }
    return parentPath.isConditional({
      test: node2
    }) || parentPath.isUnaryExpression({
      operator: "!"
    }) || parentPath.isLoop({
      test: node2
    });
  }
  function findOutermostTransparentParent(path2) {
    let maybeWrapped = path2;
    path2.findParent((p) => {
      if (!helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(p.node)) return true;
      maybeWrapped = p;
    });
    return maybeWrapped;
  }
  const last = (arr) => arr[arr.length - 1];
  function isSimpleMemberExpression(expression) {
    expression = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(expression);
    return core2.types.isIdentifier(expression) || core2.types.isSuper(expression) || core2.types.isMemberExpression(expression) && !expression.computed && isSimpleMemberExpression(expression.object);
  }
  function needsMemoize(path2) {
    let optionalPath = path2;
    const {
      scope: scope2
    } = path2;
    while (optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression()) {
      const {
        node: node2
      } = optionalPath;
      const childPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.isOptionalMemberExpression() ? optionalPath.get("object") : optionalPath.get("callee"));
      if (node2.optional) {
        return !scope2.isStatic(childPath.node);
      }
      optionalPath = childPath;
    }
  }
  const NULLISH_CHECK = core2.template.expression(`%%check%% === null || %%ref%% === void 0`);
  const NULLISH_CHECK_NO_DDA = core2.template.expression(`%%check%% == null`);
  const NULLISH_CHECK_NEG = core2.template.expression(`%%check%% !== null && %%ref%% !== void 0`);
  const NULLISH_CHECK_NO_DDA_NEG = core2.template.expression(`%%check%% != null`);
  function transformOptionalChain(path2, {
    pureGetters,
    noDocumentAll
  }, replacementPath, ifNullish, wrapLast) {
    const {
      scope: scope2
    } = path2;
    if (scope2.path.isPattern() && needsMemoize(path2)) {
      replacementPath.replaceWith(core2.template.expression.ast`(() => ${replacementPath.node})()`);
      return;
    }
    const optionals = [];
    let optionalPath = path2;
    while (optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression()) {
      const {
        node: node2
      } = optionalPath;
      if (node2.optional) {
        optionals.push(node2);
      }
      if (optionalPath.isOptionalMemberExpression()) {
        optionalPath.node.type = "MemberExpression";
        optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("object"));
      } else if (optionalPath.isOptionalCallExpression()) {
        optionalPath.node.type = "CallExpression";
        optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("callee"));
      }
    }
    if (optionals.length === 0) {
      return;
    }
    const checks = [];
    let tmpVar;
    for (let i = optionals.length - 1; i >= 0; i--) {
      const node2 = optionals[i];
      const isCall = core2.types.isCallExpression(node2);
      const chainWithTypes = isCall ? node2.callee : node2.object;
      const chain = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(chainWithTypes);
      let ref;
      let check2;
      if (isCall && core2.types.isIdentifier(chain, {
        name: "eval"
      })) {
        check2 = ref = chain;
        node2.callee = core2.types.sequenceExpression([core2.types.numericLiteral(0), ref]);
      } else if (pureGetters && isCall && isSimpleMemberExpression(chain)) {
        check2 = ref = node2.callee;
      } else if (scope2.isStatic(chain)) {
        check2 = ref = chainWithTypes;
      } else {
        if (!tmpVar || isCall) {
          tmpVar = scope2.generateUidIdentifierBasedOnNode(chain);
          scope2.push({
            id: core2.types.cloneNode(tmpVar)
          });
        }
        ref = tmpVar;
        check2 = core2.types.assignmentExpression("=", core2.types.cloneNode(tmpVar), chainWithTypes);
        isCall ? node2.callee = ref : node2.object = ref;
      }
      if (isCall && core2.types.isMemberExpression(chain)) {
        if (pureGetters && isSimpleMemberExpression(chain)) {
          node2.callee = chainWithTypes;
        } else {
          const {
            object
          } = chain;
          let context2;
          if (core2.types.isSuper(object)) {
            context2 = core2.types.thisExpression();
          } else {
            const memoized = scope2.maybeGenerateMemoised(object);
            if (memoized) {
              context2 = memoized;
              chain.object = core2.types.assignmentExpression("=", memoized, object);
            } else {
              context2 = object;
            }
          }
          node2.arguments.unshift(core2.types.cloneNode(context2));
          node2.callee = core2.types.memberExpression(node2.callee, core2.types.identifier("call"));
        }
      }
      const data = {
        check: core2.types.cloneNode(check2),
        ref: core2.types.cloneNode(ref)
      };
      Object.defineProperty(data, "ref", {
        enumerable: false
      });
      checks.push(data);
    }
    let result = replacementPath.node;
    if (wrapLast) result = wrapLast(result);
    const ifNullishBoolean = core2.types.isBooleanLiteral(ifNullish);
    const ifNullishFalse = ifNullishBoolean && ifNullish.value === false;
    const ifNullishVoid = !ifNullishBoolean && core2.types.isUnaryExpression(ifNullish, {
      operator: "void"
    });
    const isEvaluationValueIgnored = core2.types.isExpressionStatement(replacementPath.parent) && !replacementPath.isCompletionRecord() || core2.types.isSequenceExpression(replacementPath.parent) && last(replacementPath.parent.expressions) !== replacementPath.node;
    const tpl = ifNullishFalse ? noDocumentAll ? NULLISH_CHECK_NO_DDA_NEG : NULLISH_CHECK_NEG : noDocumentAll ? NULLISH_CHECK_NO_DDA : NULLISH_CHECK;
    const logicalOp = ifNullishFalse ? "&&" : "||";
    const check = checks.map(tpl).reduce((expr, check2) => core2.types.logicalExpression(logicalOp, expr, check2));
    replacementPath.replaceWith(ifNullishBoolean || ifNullishVoid && isEvaluationValueIgnored ? core2.types.logicalExpression(logicalOp, check, result) : core2.types.conditionalExpression(check, ifNullish, result));
  }
  function transform2(path2, assumptions) {
    const {
      scope: scope2
    } = path2;
    const maybeWrapped = findOutermostTransparentParent(path2);
    const {
      parentPath
    } = maybeWrapped;
    if (parentPath.isUnaryExpression({
      operator: "delete"
    })) {
      transformOptionalChain(path2, assumptions, parentPath, core2.types.booleanLiteral(true));
    } else {
      let wrapLast;
      if (parentPath.isCallExpression({
        callee: maybeWrapped.node
      }) && path2.isOptionalMemberExpression()) {
        wrapLast = (replacement2) => {
          var _baseRef;
          const object = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(replacement2.object);
          let baseRef;
          if (!assumptions.pureGetters || !isSimpleMemberExpression(object)) {
            baseRef = scope2.maybeGenerateMemoised(object);
            if (baseRef) {
              replacement2.object = core2.types.assignmentExpression("=", baseRef, object);
            }
          }
          return core2.types.callExpression(core2.types.memberExpression(replacement2, core2.types.identifier("bind")), [core2.types.cloneNode((_baseRef = baseRef) != null ? _baseRef : object)]);
        };
      }
      transformOptionalChain(path2, assumptions, path2, willPathCastToBoolean(maybeWrapped) ? core2.types.booleanLiteral(false) : scope2.buildUndefinedNode(), wrapLast);
    }
  }
  var index2 = helperPluginUtils.declare((api, options2) => {
    var _api$assumption, _api$assumption2;
    api.assertVersion(7);
    const {
      loose = false
    } = options2;
    const noDocumentAll = (_api$assumption = api.assumption("noDocumentAll")) != null ? _api$assumption : loose;
    const pureGetters = (_api$assumption2 = api.assumption("pureGetters")) != null ? _api$assumption2 : loose;
    return {
      name: "transform-optional-chaining",
      inherits: api.version[0] === "8" ? void 0 : requireLib$e().default,
      visitor: {
        "OptionalCallExpression|OptionalMemberExpression"(path2) {
          transform2(path2, {
            noDocumentAll,
            pureGetters
          });
        }
      }
    };
  });
  lib$g.default = index2;
  lib$g.transform = transform2;
  lib$g.transformOptionalChain = transformOptionalChain;
  return lib$g;
}
var lib$e = {};
var hasRequiredLib$c;
function requireLib$c() {
  if (hasRequiredLib$c) return lib$e;
  hasRequiredLib$c = 1;
  Object.defineProperty(lib$e, "__esModule", {
    value: true
  });
  lib$e.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _helperCreateClassFeaturesPlugin = requireLib$r();
  lib$e.default = (0, _helperPluginUtils.declare)((api, options2) => {
    api.assertVersion(7);
    return (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({
      name: "transform-private-methods",
      api,
      feature: _helperCreateClassFeaturesPlugin.FEATURES.privateMethods,
      loose: options2.loose,
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("classPrivateMethods");
      }
    });
  });
  return lib$e;
}
var lib$d = {};
var hasRequiredLib$b;
function requireLib$b() {
  if (hasRequiredLib$b) return lib$d;
  hasRequiredLib$b = 1;
  Object.defineProperty(lib$d, "__esModule", {
    value: true
  });
  lib$d.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-json-strings",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("jsonStrings");
      }
    };
  });
  lib$d.default = _default2;
  return lib$d;
}
var lib$c = {};
var hasRequiredLib$a;
function requireLib$a() {
  if (hasRequiredLib$a) return lib$c;
  hasRequiredLib$a = 1;
  Object.defineProperty(lib$c, "__esModule", {
    value: true
  });
  lib$c.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-optional-catch-binding",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("optionalCatchBinding");
      }
    };
  });
  lib$c.default = _default2;
  return lib$c;
}
var lib$b = {};
var hasRequiredLib$9;
function requireLib$9() {
  if (hasRequiredLib$9) return lib$b;
  hasRequiredLib$9 = 1;
  Object.defineProperty(lib$b, "__esModule", {
    value: true
  });
  lib$b.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-async-generators",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("asyncGenerators");
      }
    };
  });
  lib$b.default = _default2;
  return lib$b;
}
var lib$a = {};
var hasRequiredLib$8;
function requireLib$8() {
  if (hasRequiredLib$8) return lib$a;
  hasRequiredLib$8 = 1;
  Object.defineProperty(lib$a, "__esModule", {
    value: true
  });
  lib$a.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-object-rest-spread",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("objectRestSpread");
      }
    };
  });
  lib$a.default = _default2;
  return lib$a;
}
var lib$9 = {};
var lib$8 = {};
var hasRequiredLib$7;
function requireLib$7() {
  if (hasRequiredLib$7) return lib$8;
  hasRequiredLib$7 = 1;
  Object.defineProperty(lib$8, "__esModule", {
    value: true
  });
  lib$8.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _default2 = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-export-namespace-from",
      manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("exportNamespaceFrom");
      }
    };
  });
  lib$8.default = _default2;
  return lib$8;
}
var hasRequiredLib$6;
function requireLib$6() {
  if (hasRequiredLib$6) return lib$9;
  hasRequiredLib$6 = 1;
  Object.defineProperty(lib$9, "__esModule", {
    value: true
  });
  lib$9.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _core = requireLib$x();
  lib$9.default = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "transform-export-namespace-from",
      inherits: api.version[0] === "8" ? void 0 : requireLib$7().default,
      visitor: {
        ExportNamedDeclaration(path2) {
          var _exported$name;
          const {
            node: node2,
            scope: scope2
          } = path2;
          const {
            specifiers
          } = node2;
          const index2 = _core.types.isExportDefaultSpecifier(specifiers[0]) ? 1 : 0;
          if (!_core.types.isExportNamespaceSpecifier(specifiers[index2])) return;
          const nodes = [];
          if (index2 === 1) {
            nodes.push(_core.types.exportNamedDeclaration(null, [specifiers.shift()], node2.source));
          }
          const specifier = specifiers.shift();
          const {
            exported
          } = specifier;
          const uid = scope2.generateUidIdentifier((_exported$name = exported.name) != null ? _exported$name : exported.value);
          nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid)], _core.types.cloneNode(node2.source)), _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(uid), exported)]));
          if (node2.specifiers.length >= 1) {
            nodes.push(node2);
          }
          const [importDeclaration] = path2.replaceWithMultiple(nodes);
          path2.scope.registerDeclaration(importDeclaration);
        }
      }
    };
  });
  return lib$9;
}
var lib$7 = {};
var createPlugin = {};
var lib$6 = {};
var hasRequiredLib$5;
function requireLib$5() {
  if (hasRequiredLib$5) return lib$6;
  hasRequiredLib$5 = 1;
  Object.defineProperty(lib$6, "__esModule", {
    value: true
  });
  lib$6.default = void 0;
  var _helperPluginUtils = requireLib$T();
  lib$6.default = (0, _helperPluginUtils.declare)((api) => {
    api.assertVersion(7);
    return {
      name: "syntax-jsx",
      manipulateOptions(opts, parserOpts) {
        {
          if (parserOpts.plugins.some((p) => (Array.isArray(p) ? p[0] : p) === "typescript")) {
            return;
          }
        }
        parserOpts.plugins.push("jsx");
      }
    };
  });
  return lib$6;
}
var hasRequiredCreatePlugin;
function requireCreatePlugin() {
  if (hasRequiredCreatePlugin) return createPlugin;
  hasRequiredCreatePlugin = 1;
  Object.defineProperty(createPlugin, "__esModule", {
    value: true
  });
  createPlugin.default = createPlugin$1;
  var _pluginSyntaxJsx = requireLib$5();
  var _helperPluginUtils = requireLib$T();
  var _core = requireLib$x();
  var _helperModuleImports = requireLib$C();
  var _helperAnnotateAsPure = requireLib$s();
  const DEFAULT = {
    importSource: "react",
    runtime: "automatic",
    pragma: "React.createElement",
    pragmaFrag: "React.Fragment"
  };
  const JSX_SOURCE_ANNOTATION_REGEX = /^\s*\*?\s*@jsxImportSource\s+([^\s]+)\s*$/m;
  const JSX_RUNTIME_ANNOTATION_REGEX = /^\s*\*?\s*@jsxRuntime\s+([^\s]+)\s*$/m;
  const JSX_ANNOTATION_REGEX = /^\s*\*?\s*@jsx\s+([^\s]+)\s*$/m;
  const JSX_FRAG_ANNOTATION_REGEX = /^\s*\*?\s*@jsxFrag\s+([^\s]+)\s*$/m;
  const get = (pass, name) => pass.get(`@babel/plugin-react-jsx/${name}`);
  const set = (pass, name, v) => pass.set(`@babel/plugin-react-jsx/${name}`, v);
  function hasProto(node2) {
    return node2.properties.some((value2) => _core.types.isObjectProperty(value2, {
      computed: false,
      shorthand: false
    }) && (_core.types.isIdentifier(value2.key, {
      name: "__proto__"
    }) || _core.types.isStringLiteral(value2.key, {
      value: "__proto__"
    })));
  }
  function createPlugin$1({
    name,
    development
  }) {
    return (0, _helperPluginUtils.declare)((_2, options2) => {
      const {
        pure: PURE_ANNOTATION,
        throwIfNamespace = true,
        filter,
        runtime: RUNTIME_DEFAULT = development ? "automatic" : "classic",
        importSource: IMPORT_SOURCE_DEFAULT = DEFAULT.importSource,
        pragma: PRAGMA_DEFAULT = DEFAULT.pragma,
        pragmaFrag: PRAGMA_FRAG_DEFAULT = DEFAULT.pragmaFrag
      } = options2;
      {
        var {
          useSpread = false,
          useBuiltIns = false
        } = options2;
        if (RUNTIME_DEFAULT === "classic") {
          if (typeof useSpread !== "boolean") {
            throw new Error("transform-react-jsx currently only accepts a boolean option for useSpread (defaults to false)");
          }
          if (typeof useBuiltIns !== "boolean") {
            throw new Error("transform-react-jsx currently only accepts a boolean option for useBuiltIns (defaults to false)");
          }
          if (useSpread && useBuiltIns) {
            throw new Error("transform-react-jsx currently only accepts useBuiltIns or useSpread but not both");
          }
        }
      }
      const injectMetaPropertiesVisitor = {
        JSXOpeningElement(path2, state2) {
          const attributes = [];
          if (isThisAllowed(path2.scope)) {
            attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier("__self"), _core.types.jsxExpressionContainer(_core.types.thisExpression())));
          }
          attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier("__source"), _core.types.jsxExpressionContainer(makeSource(path2, state2))));
          path2.pushContainer("attributes", attributes);
        }
      };
      return {
        name,
        inherits: _pluginSyntaxJsx.default,
        visitor: {
          JSXNamespacedName(path2) {
            if (throwIfNamespace) {
              throw path2.buildCodeFrameError(`Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set \`throwIfNamespace: false\` to bypass this warning.`);
            }
          },
          JSXSpreadChild(path2) {
            throw path2.buildCodeFrameError("Spread children are not supported in React.");
          },
          Program: {
            enter(path2, state2) {
              const {
                file: file2
              } = state2;
              let runtime = RUNTIME_DEFAULT;
              let source2 = IMPORT_SOURCE_DEFAULT;
              let pragma = PRAGMA_DEFAULT;
              let pragmaFrag = PRAGMA_FRAG_DEFAULT;
              let sourceSet = !!options2.importSource;
              let pragmaSet = !!options2.pragma;
              let pragmaFragSet = !!options2.pragmaFrag;
              if (file2.ast.comments) {
                for (const comment of file2.ast.comments) {
                  const sourceMatches = JSX_SOURCE_ANNOTATION_REGEX.exec(comment.value);
                  if (sourceMatches) {
                    source2 = sourceMatches[1];
                    sourceSet = true;
                  }
                  const runtimeMatches = JSX_RUNTIME_ANNOTATION_REGEX.exec(comment.value);
                  if (runtimeMatches) {
                    runtime = runtimeMatches[1];
                  }
                  const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);
                  if (jsxMatches) {
                    pragma = jsxMatches[1];
                    pragmaSet = true;
                  }
                  const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(comment.value);
                  if (jsxFragMatches) {
                    pragmaFrag = jsxFragMatches[1];
                    pragmaFragSet = true;
                  }
                }
              }
              set(state2, "runtime", runtime);
              if (runtime === "classic") {
                if (sourceSet) {
                  throw path2.buildCodeFrameError(`importSource cannot be set when runtime is classic.`);
                }
                const createElement = toMemberExpression(pragma);
                const fragment = toMemberExpression(pragmaFrag);
                set(state2, "id/createElement", () => _core.types.cloneNode(createElement));
                set(state2, "id/fragment", () => _core.types.cloneNode(fragment));
                set(state2, "defaultPure", pragma === DEFAULT.pragma);
              } else if (runtime === "automatic") {
                if (pragmaSet || pragmaFragSet) {
                  throw path2.buildCodeFrameError(`pragma and pragmaFrag cannot be set when runtime is automatic.`);
                }
                const define = (name2, id) => set(state2, name2, createImportLazily(state2, path2, id, source2));
                define("id/jsx", development ? "jsxDEV" : "jsx");
                define("id/jsxs", development ? "jsxDEV" : "jsxs");
                define("id/createElement", "createElement");
                define("id/fragment", "Fragment");
                set(state2, "defaultPure", source2 === DEFAULT.importSource);
              } else {
                throw path2.buildCodeFrameError(`Runtime must be either "classic" or "automatic".`);
              }
              if (development) {
                path2.traverse(injectMetaPropertiesVisitor, state2);
              }
            }
          },
          JSXFragment: {
            exit(path2, file2) {
              let callExpr;
              if (get(file2, "runtime") === "classic") {
                callExpr = buildCreateElementFragmentCall(path2, file2);
              } else {
                callExpr = buildJSXFragmentCall(path2, file2);
              }
              path2.replaceWith(_core.types.inherits(callExpr, path2.node));
            }
          },
          JSXElement: {
            exit(path2, file2) {
              let callExpr;
              if (get(file2, "runtime") === "classic" || shouldUseCreateElement(path2)) {
                callExpr = buildCreateElementCall(path2, file2);
              } else {
                callExpr = buildJSXElementCall(path2, file2);
              }
              path2.replaceWith(_core.types.inherits(callExpr, path2.node));
            }
          },
          JSXAttribute(path2) {
            if (_core.types.isJSXElement(path2.node.value)) {
              path2.node.value = _core.types.jsxExpressionContainer(path2.node.value);
            }
          }
        }
      };
      function isDerivedClass(classPath) {
        return classPath.node.superClass !== null;
      }
      function isThisAllowed(scope2) {
        do {
          const {
            path: path2
          } = scope2;
          if (path2.isFunctionParent() && !path2.isArrowFunctionExpression()) {
            if (!path2.isMethod()) {
              return true;
            }
            if (path2.node.kind !== "constructor") {
              return true;
            }
            return !isDerivedClass(path2.parentPath.parentPath);
          }
          if (path2.isTSModuleBlock()) {
            return false;
          }
        } while (scope2 = scope2.parent);
        return true;
      }
      function call(pass, name2, args) {
        const node2 = _core.types.callExpression(get(pass, `id/${name2}`)(), args);
        if (PURE_ANNOTATION != null ? PURE_ANNOTATION : get(pass, "defaultPure")) (0, _helperAnnotateAsPure.default)(node2);
        return node2;
      }
      function shouldUseCreateElement(path2) {
        const openingPath = path2.get("openingElement");
        const attributes = openingPath.node.attributes;
        let seenPropsSpread = false;
        for (let i = 0; i < attributes.length; i++) {
          const attr = attributes[i];
          if (seenPropsSpread && _core.types.isJSXAttribute(attr) && attr.name.name === "key") {
            return true;
          } else if (_core.types.isJSXSpreadAttribute(attr)) {
            seenPropsSpread = true;
          }
        }
        return false;
      }
      function convertJSXIdentifier(node2, parent) {
        if (_core.types.isJSXIdentifier(node2)) {
          if (node2.name === "this" && _core.types.isReferenced(node2, parent)) {
            return _core.types.thisExpression();
          } else if (_core.types.isValidIdentifier(node2.name, false)) {
            node2.type = "Identifier";
            return node2;
          } else {
            return _core.types.stringLiteral(node2.name);
          }
        } else if (_core.types.isJSXMemberExpression(node2)) {
          return _core.types.memberExpression(convertJSXIdentifier(node2.object, node2), convertJSXIdentifier(node2.property, node2));
        } else if (_core.types.isJSXNamespacedName(node2)) {
          return _core.types.stringLiteral(`${node2.namespace.name}:${node2.name.name}`);
        }
        return node2;
      }
      function convertAttributeValue(node2) {
        if (_core.types.isJSXExpressionContainer(node2)) {
          return node2.expression;
        } else {
          return node2;
        }
      }
      function accumulateAttribute(array2, attribute) {
        if (_core.types.isJSXSpreadAttribute(attribute.node)) {
          const arg = attribute.node.argument;
          if (_core.types.isObjectExpression(arg) && !hasProto(arg)) {
            array2.push(...arg.properties);
          } else {
            array2.push(_core.types.spreadElement(arg));
          }
          return array2;
        }
        const value2 = convertAttributeValue(attribute.node.name.name !== "key" ? attribute.node.value || _core.types.booleanLiteral(true) : attribute.node.value);
        if (attribute.node.name.name === "key" && value2 === null) {
          throw attribute.buildCodeFrameError('Please provide an explicit key value. Using "key" as a shorthand for "key={true}" is not allowed.');
        }
        if (_core.types.isStringLiteral(value2) && !_core.types.isJSXExpressionContainer(attribute.node.value)) {
          var _value$extra;
          value2.value = value2.value.replace(/\n\s+/g, " ");
          (_value$extra = value2.extra) == null || delete _value$extra.raw;
        }
        if (_core.types.isJSXNamespacedName(attribute.node.name)) {
          attribute.node.name = _core.types.stringLiteral(attribute.node.name.namespace.name + ":" + attribute.node.name.name.name);
        } else if (_core.types.isValidIdentifier(attribute.node.name.name, false)) {
          attribute.node.name.type = "Identifier";
        } else {
          attribute.node.name = _core.types.stringLiteral(attribute.node.name.name);
        }
        array2.push(_core.types.inherits(_core.types.objectProperty(attribute.node.name, value2), attribute.node));
        return array2;
      }
      function buildChildrenProperty(children) {
        let childrenNode;
        if (children.length === 1) {
          childrenNode = children[0];
        } else if (children.length > 1) {
          childrenNode = _core.types.arrayExpression(children);
        } else {
          return void 0;
        }
        return _core.types.objectProperty(_core.types.identifier("children"), childrenNode);
      }
      function buildJSXElementCall(path2, file2) {
        const openingPath = path2.get("openingElement");
        const args = [getTag(openingPath)];
        const attribsArray = [];
        const extracted = /* @__PURE__ */ Object.create(null);
        for (const attr of openingPath.get("attributes")) {
          if (attr.isJSXAttribute() && _core.types.isJSXIdentifier(attr.node.name)) {
            const {
              name: name2
            } = attr.node.name;
            switch (name2) {
              case "__source":
              case "__self":
                if (extracted[name2]) throw sourceSelfError(path2, name2);
              case "key": {
                const keyValue = convertAttributeValue(attr.node.value);
                if (keyValue === null) {
                  throw attr.buildCodeFrameError('Please provide an explicit key value. Using "key" as a shorthand for "key={true}" is not allowed.');
                }
                extracted[name2] = keyValue;
                break;
              }
              default:
                attribsArray.push(attr);
            }
          } else {
            attribsArray.push(attr);
          }
        }
        const children = _core.types.react.buildChildren(path2.node);
        let attribs;
        if (attribsArray.length || children.length) {
          attribs = buildJSXOpeningElementAttributes(attribsArray, children);
        } else {
          attribs = _core.types.objectExpression([]);
        }
        args.push(attribs);
        if (development) {
          var _extracted$key;
          args.push((_extracted$key = extracted.key) != null ? _extracted$key : path2.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1));
          if (extracted.__source) {
            args.push(extracted.__source);
            if (extracted.__self) args.push(extracted.__self);
          } else if (extracted.__self) {
            args.push(path2.scope.buildUndefinedNode(), extracted.__self);
          }
        } else if (extracted.key !== void 0) {
          args.push(extracted.key);
        }
        return call(file2, children.length > 1 ? "jsxs" : "jsx", args);
      }
      function buildJSXOpeningElementAttributes(attribs, children) {
        const props = attribs.reduce(accumulateAttribute, []);
        if ((children == null ? void 0 : children.length) > 0) {
          props.push(buildChildrenProperty(children));
        }
        return _core.types.objectExpression(props);
      }
      function buildJSXFragmentCall(path2, file2) {
        const args = [get(file2, "id/fragment")()];
        const children = _core.types.react.buildChildren(path2.node);
        args.push(_core.types.objectExpression(children.length > 0 ? [buildChildrenProperty(children)] : []));
        if (development) {
          args.push(path2.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1));
        }
        return call(file2, children.length > 1 ? "jsxs" : "jsx", args);
      }
      function buildCreateElementFragmentCall(path2, file2) {
        if (filter && !filter(path2.node, file2)) return;
        return call(file2, "createElement", [get(file2, "id/fragment")(), _core.types.nullLiteral(), ..._core.types.react.buildChildren(path2.node)]);
      }
      function buildCreateElementCall(path2, file2) {
        const openingPath = path2.get("openingElement");
        return call(file2, "createElement", [getTag(openingPath), buildCreateElementOpeningElementAttributes(file2, path2, openingPath.get("attributes")), ..._core.types.react.buildChildren(path2.node)]);
      }
      function getTag(openingPath) {
        const tagExpr = convertJSXIdentifier(openingPath.node.name, openingPath.node);
        let tagName;
        if (_core.types.isIdentifier(tagExpr)) {
          tagName = tagExpr.name;
        } else if (_core.types.isStringLiteral(tagExpr)) {
          tagName = tagExpr.value;
        }
        if (_core.types.react.isCompatTag(tagName)) {
          return _core.types.stringLiteral(tagName);
        } else {
          return tagExpr;
        }
      }
      function buildCreateElementOpeningElementAttributes(file2, path2, attribs) {
        const runtime = get(file2, "runtime");
        {
          if (runtime !== "automatic") {
            const objs = [];
            const props2 = attribs.reduce(accumulateAttribute, []);
            if (!useSpread) {
              let start = 0;
              props2.forEach((prop, i) => {
                if (_core.types.isSpreadElement(prop)) {
                  if (i > start) {
                    objs.push(_core.types.objectExpression(props2.slice(start, i)));
                  }
                  objs.push(prop.argument);
                  start = i + 1;
                }
              });
              if (props2.length > start) {
                objs.push(_core.types.objectExpression(props2.slice(start)));
              }
            } else if (props2.length) {
              objs.push(_core.types.objectExpression(props2));
            }
            if (!objs.length) {
              return _core.types.nullLiteral();
            }
            if (objs.length === 1) {
              if (!(_core.types.isSpreadElement(props2[0]) && _core.types.isObjectExpression(props2[0].argument))) {
                return objs[0];
              }
            }
            if (!_core.types.isObjectExpression(objs[0])) {
              objs.unshift(_core.types.objectExpression([]));
            }
            const helper = useBuiltIns ? _core.types.memberExpression(_core.types.identifier("Object"), _core.types.identifier("assign")) : file2.addHelper("extends");
            return _core.types.callExpression(helper, objs);
          }
        }
        const props = [];
        const found = /* @__PURE__ */ Object.create(null);
        for (const attr of attribs) {
          const {
            node: node2
          } = attr;
          const name2 = _core.types.isJSXAttribute(node2) && _core.types.isJSXIdentifier(node2.name) && node2.name.name;
          if (runtime === "automatic" && (name2 === "__source" || name2 === "__self")) {
            if (found[name2]) throw sourceSelfError(path2, name2);
            found[name2] = true;
          }
          accumulateAttribute(props, attr);
        }
        return props.length === 1 && _core.types.isSpreadElement(props[0]) && !_core.types.isObjectExpression(props[0].argument) ? props[0].argument : props.length > 0 ? _core.types.objectExpression(props) : _core.types.nullLiteral();
      }
    });
    function getSource(source2, importName) {
      switch (importName) {
        case "Fragment":
          return `${source2}/${development ? "jsx-dev-runtime" : "jsx-runtime"}`;
        case "jsxDEV":
          return `${source2}/jsx-dev-runtime`;
        case "jsx":
        case "jsxs":
          return `${source2}/jsx-runtime`;
        case "createElement":
          return source2;
      }
    }
    function createImportLazily(pass, path2, importName, source2) {
      return () => {
        const actualSource = getSource(source2, importName);
        if ((0, _helperModuleImports.isModule)(path2)) {
          let reference = get(pass, `imports/${importName}`);
          if (reference) return _core.types.cloneNode(reference);
          reference = (0, _helperModuleImports.addNamed)(path2, importName, actualSource, {
            importedInterop: "uncompiled",
            importPosition: "after"
          });
          set(pass, `imports/${importName}`, reference);
          return reference;
        } else {
          let reference = get(pass, `requires/${actualSource}`);
          if (reference) {
            reference = _core.types.cloneNode(reference);
          } else {
            reference = (0, _helperModuleImports.addNamespace)(path2, actualSource, {
              importedInterop: "uncompiled"
            });
            set(pass, `requires/${actualSource}`, reference);
          }
          return _core.types.memberExpression(reference, _core.types.identifier(importName));
        }
      };
    }
  }
  function toMemberExpression(id) {
    return id.split(".").map((name) => _core.types.identifier(name)).reduce((object, property) => _core.types.memberExpression(object, property));
  }
  function makeSource(path2, state2) {
    const location = path2.node.loc;
    if (!location) {
      return path2.scope.buildUndefinedNode();
    }
    if (!state2.fileNameIdentifier) {
      const {
        filename = ""
      } = state2;
      const fileNameIdentifier = path2.scope.generateUidIdentifier("_jsxFileName");
      path2.scope.getProgramParent().push({
        id: fileNameIdentifier,
        init: _core.types.stringLiteral(filename)
      });
      state2.fileNameIdentifier = fileNameIdentifier;
    }
    return makeTrace(_core.types.cloneNode(state2.fileNameIdentifier), location.start.line, location.start.column);
  }
  function makeTrace(fileNameIdentifier, lineNumber, column0Based) {
    const fileLineLiteral = lineNumber != null ? _core.types.numericLiteral(lineNumber) : _core.types.nullLiteral();
    const fileColumnLiteral = column0Based != null ? _core.types.numericLiteral(column0Based + 1) : _core.types.nullLiteral();
    return _core.template.expression.ast`{
    fileName: ${fileNameIdentifier},
    lineNumber: ${fileLineLiteral},
    columnNumber: ${fileColumnLiteral},
  }`;
  }
  function sourceSelfError(path2, name) {
    const pluginName = `transform-react-jsx-${name.slice(2)}`;
    return path2.buildCodeFrameError(`Duplicate ${name} prop found. You are most likely using the deprecated ${pluginName} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`);
  }
  return createPlugin;
}
var hasRequiredLib$4;
function requireLib$4() {
  if (hasRequiredLib$4) return lib$7;
  hasRequiredLib$4 = 1;
  Object.defineProperty(lib$7, "__esModule", {
    value: true
  });
  lib$7.default = void 0;
  var _createPlugin = requireCreatePlugin();
  lib$7.default = (0, _createPlugin.default)({
    name: "transform-react-jsx",
    development: false
  });
  return lib$7;
}
var lib$5 = {};
var dynamicImport = {};
var hasRequiredDynamicImport;
function requireDynamicImport() {
  if (hasRequiredDynamicImport) return dynamicImport;
  hasRequiredDynamicImport = 1;
  Object.defineProperty(dynamicImport, "__esModule", {
    value: true
  });
  dynamicImport.transformDynamicImport = transformDynamicImport;
  var _core = requireLib$x();
  var _helperModuleTransforms = requireLib$A();
  const requireNoInterop = (source2) => _core.template.expression.ast`require(${source2})`;
  const requireInterop = (source2, file2) => _core.types.callExpression(file2.addHelper("interopRequireWildcard"), [requireNoInterop(source2)]);
  function transformDynamicImport(path2, noInterop, file2) {
    const buildRequire = noInterop ? requireNoInterop : requireInterop;
    path2.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path2.node, true, false, (specifier) => buildRequire(specifier, file2)));
  }
  return dynamicImport;
}
var lazy = {};
var hasRequiredLazy;
function requireLazy() {
  if (hasRequiredLazy) return lazy;
  hasRequiredLazy = 1;
  Object.defineProperty(lazy, "__esModule", {
    value: true
  });
  lazy.lazyImportsHook = void 0;
  var _core = requireLib$x();
  var _helperModuleTransforms = requireLib$A();
  const lazyImportsHook = (lazy2) => ({
    name: `${"@babel/plugin-transform-modules-commonjs"}/lazy`,
    version: "7.24.1",
    getWrapperPayload(source2, metadata) {
      if ((0, _helperModuleTransforms.isSideEffectImport)(metadata) || metadata.reexportAll) {
        return null;
      }
      if (lazy2 === true) {
        return /\./.test(source2) ? null : "lazy/function";
      }
      if (Array.isArray(lazy2)) {
        return lazy2.indexOf(source2) === -1 ? null : "lazy/function";
      }
      if (typeof lazy2 === "function") {
        return lazy2(source2) ? "lazy/function" : null;
      }
    },
    buildRequireWrapper(name, init, payload, referenced) {
      if (payload === "lazy/function") {
        if (!referenced) return false;
        return _core.template.statement.ast`
        function ${name}() {
          const data = ${init};
          ${name} = function(){ return data; };
          return data;
        }
      `;
      }
    },
    wrapReference(ref, payload) {
      if (payload === "lazy/function") return _core.types.callExpression(ref, []);
    }
  });
  lazy.lazyImportsHook = lazyImportsHook;
  return lazy;
}
var hooks = {};
var hasRequiredHooks;
function requireHooks() {
  if (hasRequiredHooks) return hooks;
  hasRequiredHooks = 1;
  Object.defineProperty(hooks, "__esModule", {
    value: true
  });
  hooks.defineCommonJSHook = defineCommonJSHook;
  hooks.makeInvokers = makeInvokers;
  const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
  function defineCommonJSHook(file2, hook) {
    let hooks2 = file2.get(commonJSHooksKey);
    if (!hooks2) file2.set(commonJSHooksKey, hooks2 = []);
    hooks2.push(hook);
  }
  function findMap(arr, cb) {
    if (arr) {
      for (const el of arr) {
        const res = cb(el);
        if (res != null) return res;
      }
    }
  }
  function makeInvokers(file2) {
    const hooks2 = file2.get(commonJSHooksKey);
    return {
      getWrapperPayload(...args) {
        return findMap(hooks2, (hook) => hook.getWrapperPayload == null ? void 0 : hook.getWrapperPayload(...args));
      },
      wrapReference(...args) {
        return findMap(hooks2, (hook) => hook.wrapReference == null ? void 0 : hook.wrapReference(...args));
      },
      buildRequireWrapper(...args) {
        return findMap(hooks2, (hook) => hook.buildRequireWrapper == null ? void 0 : hook.buildRequireWrapper(...args));
      }
    };
  }
  return hooks;
}
var hasRequiredLib$3;
function requireLib$3() {
  if (hasRequiredLib$3) return lib$5;
  hasRequiredLib$3 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "defineCommonJSHook", {
      enumerable: true,
      get: function() {
        return _hooks.defineCommonJSHook;
      }
    });
    var _helperPluginUtils = requireLib$T();
    var _helperModuleTransforms = requireLib$A();
    var _helperSimpleAccess = requireLib$B();
    var _core = requireLib$x();
    var _dynamicImport = requireDynamicImport();
    var _lazy = requireLazy();
    var _hooks = requireHooks();
    exports.default = (0, _helperPluginUtils.declare)((api, options2) => {
      var _api$assumption, _api$assumption2, _api$assumption3;
      api.assertVersion(7);
      const {
        strictNamespace = false,
        mjsStrictNamespace = strictNamespace,
        allowTopLevelThis,
        strict,
        strictMode,
        noInterop,
        importInterop,
        lazy: lazy2 = false,
        allowCommonJSExports = true,
        loose = false
      } = options2;
      const constantReexports = (_api$assumption = api.assumption("constantReexports")) != null ? _api$assumption : loose;
      const enumerableModuleMeta = (_api$assumption2 = api.assumption("enumerableModuleMeta")) != null ? _api$assumption2 : loose;
      const noIncompleteNsImportDetection = (_api$assumption3 = api.assumption("noIncompleteNsImportDetection")) != null ? _api$assumption3 : false;
      if (typeof lazy2 !== "boolean" && typeof lazy2 !== "function" && (!Array.isArray(lazy2) || !lazy2.every((item2) => typeof item2 === "string"))) {
        throw new Error(`.lazy must be a boolean, array of strings, or a function`);
      }
      if (typeof strictNamespace !== "boolean") {
        throw new Error(`.strictNamespace must be a boolean, or undefined`);
      }
      if (typeof mjsStrictNamespace !== "boolean") {
        throw new Error(`.mjsStrictNamespace must be a boolean, or undefined`);
      }
      const getAssertion = (localName) => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `;
      const moduleExportsVisitor = {
        ReferencedIdentifier(path2) {
          const localName = path2.node.name;
          if (localName !== "module" && localName !== "exports") return;
          const localBinding = path2.scope.getBinding(localName);
          const rootBinding = this.scope.getBinding(localName);
          if (rootBinding !== localBinding || path2.parentPath.isObjectProperty({
            value: path2.node
          }) && path2.parentPath.parentPath.isObjectPattern() || path2.parentPath.isAssignmentExpression({
            left: path2.node
          }) || path2.isAssignmentExpression({
            left: path2.node
          })) {
            return;
          }
          path2.replaceWith(getAssertion(localName));
        },
        UpdateExpression(path2) {
          const arg = path2.get("argument");
          if (!arg.isIdentifier()) return;
          const localName = arg.node.name;
          if (localName !== "module" && localName !== "exports") return;
          const localBinding = path2.scope.getBinding(localName);
          const rootBinding = this.scope.getBinding(localName);
          if (rootBinding !== localBinding) return;
          path2.replaceWith(_core.types.assignmentExpression(path2.node.operator[0] + "=", arg.node, getAssertion(localName)));
        },
        AssignmentExpression(path2) {
          const left = path2.get("left");
          if (left.isIdentifier()) {
            const localName = left.node.name;
            if (localName !== "module" && localName !== "exports") return;
            const localBinding = path2.scope.getBinding(localName);
            const rootBinding = this.scope.getBinding(localName);
            if (rootBinding !== localBinding) return;
            const right = path2.get("right");
            right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
          } else if (left.isPattern()) {
            const ids = left.getOuterBindingIdentifiers();
            const localName = Object.keys(ids).filter((localName2) => {
              if (localName2 !== "module" && localName2 !== "exports") return false;
              return this.scope.getBinding(localName2) === path2.scope.getBinding(localName2);
            })[0];
            if (localName) {
              const right = path2.get("right");
              right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
            }
          }
        }
      };
      return {
        name: "transform-modules-commonjs",
        pre() {
          this.file.set("@babel/plugin-transform-modules-*", "commonjs");
          if (lazy2) (0, _hooks.defineCommonJSHook)(this.file, (0, _lazy.lazyImportsHook)(lazy2));
        },
        visitor: {
          ["CallExpression" + (api.types.importExpression ? "|ImportExpression" : "")](path2) {
            if (!this.file.has("@babel/plugin-proposal-dynamic-import")) return;
            if (path2.isCallExpression() && !_core.types.isImport(path2.node.callee)) return;
            let {
              scope: scope2
            } = path2;
            do {
              scope2.rename("require");
            } while (scope2 = scope2.parent);
            (0, _dynamicImport.transformDynamicImport)(path2, noInterop, this.file);
          },
          Program: {
            exit(path2, state2) {
              if (!(0, _helperModuleTransforms.isModule)(path2)) return;
              path2.scope.rename("exports");
              path2.scope.rename("module");
              path2.scope.rename("require");
              path2.scope.rename("__filename");
              path2.scope.rename("__dirname");
              if (!allowCommonJSExports) {
                {
                  (0, _helperSimpleAccess.default)(path2, /* @__PURE__ */ new Set(["module", "exports"]), false);
                }
                path2.traverse(moduleExportsVisitor, {
                  scope: path2.scope
                });
              }
              let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options2);
              if (moduleName) moduleName = _core.types.stringLiteral(moduleName);
              const hooks2 = (0, _hooks.makeInvokers)(this.file);
              const {
                meta,
                headers
              } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path2, {
                exportName: "exports",
                constantReexports,
                enumerableModuleMeta,
                strict,
                strictMode,
                allowTopLevelThis,
                noInterop,
                importInterop,
                wrapReference: hooks2.wrapReference,
                getWrapperPayload: hooks2.getWrapperPayload,
                esNamespaceOnly: typeof state2.filename === "string" && /\.mjs$/.test(state2.filename) ? mjsStrictNamespace : strictNamespace,
                noIncompleteNsImportDetection,
                filename: this.file.opts.filename
              });
              for (const [source2, metadata] of meta.source) {
                const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source2)]);
                let header;
                if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
                  if (lazy2 && metadata.wrap === "function") {
                    throw new Error("Assertion failure");
                  }
                  header = _core.types.expressionStatement(loadExpr);
                } else {
                  var _header;
                  const init = (0, _helperModuleTransforms.wrapInterop)(path2, loadExpr, metadata.interop) || loadExpr;
                  if (metadata.wrap) {
                    const res = hooks2.buildRequireWrapper(metadata.name, init, metadata.wrap, metadata.referenced);
                    if (res === false) continue;
                    else header = res;
                  }
                  (_header = header) != null ? _header : header = _core.template.statement.ast`
                var ${metadata.name} = ${init};
              `;
                }
                header.loc = metadata.loc;
                headers.push(header);
                headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks2.wrapReference));
              }
              (0, _helperModuleTransforms.ensureStatementsHoisted)(headers);
              path2.unshiftContainer("body", headers);
              path2.get("body").forEach((path3) => {
                if (headers.indexOf(path3.node) === -1) return;
                if (path3.isVariableDeclaration()) {
                  path3.scope.registerDeclaration(path3);
                }
              });
            }
          }
        }
      };
    });
  })(lib$5);
  return lib$5;
}
var lib$4 = {};
var lib$3 = {};
var lib$2 = {};
var hasRequiredLib$2;
function requireLib$2() {
  if (hasRequiredLib$2) return lib$2;
  hasRequiredLib$2 = 1;
  Object.defineProperty(lib$2, "__esModule", {
    value: true
  });
  lib$2.default = void 0;
  var _helperPluginUtils = requireLib$T();
  {
    var removePlugin = function(plugins2, name) {
      const indices = [];
      plugins2.forEach((plugin2, i) => {
        const n = Array.isArray(plugin2) ? plugin2[0] : plugin2;
        if (n === name) {
          indices.unshift(i);
        }
      });
      for (const i of indices) {
        plugins2.splice(i, 1);
      }
    };
  }
  lib$2.default = (0, _helperPluginUtils.declare)((api, opts) => {
    api.assertVersion(7);
    const {
      disallowAmbiguousJSXLike,
      dts
    } = opts;
    {
      var {
        isTSX
      } = opts;
    }
    return {
      name: "syntax-typescript",
      manipulateOptions(opts2, parserOpts) {
        {
          const {
            plugins: plugins2
          } = parserOpts;
          removePlugin(plugins2, "flow");
          removePlugin(plugins2, "jsx");
          plugins2.push("objectRestSpread", "classProperties");
          if (isTSX) {
            plugins2.push("jsx");
          }
        }
        parserOpts.plugins.push(["typescript", {
          disallowAmbiguousJSXLike,
          dts
        }]);
      }
    };
  });
  return lib$2;
}
var constEnum = {};
var _enum = {};
var hasRequired_enum;
function require_enum() {
  if (hasRequired_enum) return _enum;
  hasRequired_enum = 1;
  Object.defineProperty(_enum, "__esModule", {
    value: true
  });
  _enum.default = transpileEnum;
  _enum.translateEnumValues = translateEnumValues;
  var _core = requireLib$x();
  var _assert = requireAssert();
  var _helperAnnotateAsPure = requireLib$s();
  const ENUMS = /* @__PURE__ */ new WeakMap();
  const buildEnumWrapper = _core.template.expression(`
    (function (ID) {
      ASSIGNMENTS;
      return ID;
    })(INIT)
  `);
  function transpileEnum(path2, t) {
    const {
      node: node2,
      parentPath
    } = path2;
    if (node2.declare) {
      path2.remove();
      return;
    }
    const name = node2.id.name;
    const {
      fill: fill2,
      data,
      isPure
    } = enumFill(path2, t, node2.id);
    switch (parentPath.type) {
      case "BlockStatement":
      case "ExportNamedDeclaration":
      case "Program": {
        const isGlobal = t.isProgram(path2.parent);
        const isSeen = seen(parentPath);
        let init = t.objectExpression([]);
        if (isSeen || isGlobal) {
          init = t.logicalExpression("||", t.cloneNode(fill2.ID), init);
        }
        const enumIIFE = buildEnumWrapper(Object.assign({}, fill2, {
          INIT: init
        }));
        if (isPure) (0, _helperAnnotateAsPure.default)(enumIIFE);
        if (isSeen) {
          const toReplace = parentPath.isExportDeclaration() ? parentPath : path2;
          toReplace.replaceWith(t.expressionStatement(t.assignmentExpression("=", t.cloneNode(node2.id), enumIIFE)));
        } else {
          path2.scope.registerDeclaration(path2.replaceWith(t.variableDeclaration(isGlobal ? "var" : "let", [t.variableDeclarator(node2.id, enumIIFE)]))[0]);
        }
        ENUMS.set(path2.scope.getBindingIdentifier(name), data);
        break;
      }
      default:
        throw new Error(`Unexpected enum parent '${path2.parent.type}`);
    }
    function seen(parentPath2) {
      if (parentPath2.isExportDeclaration()) {
        return seen(parentPath2.parentPath);
      }
      if (parentPath2.getData(name)) {
        return true;
      } else {
        parentPath2.setData(name, true);
        return false;
      }
    }
  }
  const buildStringAssignment = (0, _core.template)(`
  ENUM["NAME"] = VALUE;
`);
  const buildNumericAssignment = (0, _core.template)(`
  ENUM[ENUM["NAME"] = VALUE] = "NAME";
`);
  const buildEnumMember = (isString2, options2) => (isString2 ? buildStringAssignment : buildNumericAssignment)(options2);
  function enumFill(path2, t, id) {
    const {
      enumValues: x2,
      data,
      isPure
    } = translateEnumValues(path2, t);
    const assignments = x2.map(([memberName, memberValue]) => buildEnumMember(t.isStringLiteral(memberValue), {
      ENUM: t.cloneNode(id),
      NAME: memberName,
      VALUE: memberValue
    }));
    return {
      fill: {
        ID: t.cloneNode(id),
        ASSIGNMENTS: assignments
      },
      data,
      isPure
    };
  }
  function ReferencedIdentifier(expr, state2) {
    const {
      seen,
      path: path2,
      t
    } = state2;
    const name = expr.node.name;
    if (seen.has(name) && !expr.scope.hasOwnBinding(name)) {
      expr.replaceWith(t.memberExpression(t.cloneNode(path2.node.id), t.cloneNode(expr.node)));
      expr.skip();
    }
  }
  const enumSelfReferenceVisitor = {
    ReferencedIdentifier
  };
  function translateEnumValues(path2, t) {
    var _ENUMS$get;
    const bindingIdentifier = path2.scope.getBindingIdentifier(path2.node.id.name);
    const seen = (_ENUMS$get = ENUMS.get(bindingIdentifier)) != null ? _ENUMS$get : /* @__PURE__ */ new Map();
    let constValue = -1;
    let lastName;
    let isPure = true;
    const enumValues = path2.get("members").map((memberPath) => {
      const member = memberPath.node;
      const name = t.isIdentifier(member.id) ? member.id.name : member.id.value;
      const initializerPath = memberPath.get("initializer");
      const initializer = member.initializer;
      let value2;
      if (initializer) {
        constValue = computeConstantValue(initializerPath, seen);
        if (constValue !== void 0) {
          seen.set(name, constValue);
          _assert(typeof constValue === "number" || typeof constValue === "string");
          if (constValue === Infinity || Number.isNaN(constValue)) {
            value2 = t.identifier(String(constValue));
          } else if (constValue === -Infinity) {
            value2 = t.unaryExpression("-", t.identifier("Infinity"));
          } else {
            value2 = t.valueToNode(constValue);
          }
        } else {
          isPure && (isPure = initializerPath.isPure());
          if (initializerPath.isReferencedIdentifier()) {
            ReferencedIdentifier(initializerPath, {
              t,
              seen,
              path: path2
            });
          } else {
            initializerPath.traverse(enumSelfReferenceVisitor, {
              t,
              seen,
              path: path2
            });
          }
          value2 = initializerPath.node;
          seen.set(name, void 0);
        }
      } else if (typeof constValue === "number") {
        constValue += 1;
        value2 = t.numericLiteral(constValue);
        seen.set(name, constValue);
      } else if (typeof constValue === "string") {
        throw path2.buildCodeFrameError("Enum member must have initializer.");
      } else {
        const lastRef = t.memberExpression(t.cloneNode(path2.node.id), t.stringLiteral(lastName), true);
        value2 = t.binaryExpression("+", t.numericLiteral(1), lastRef);
        seen.set(name, void 0);
      }
      lastName = name;
      return [name, value2];
    });
    return {
      isPure,
      data: seen,
      enumValues
    };
  }
  function computeConstantValue(path2, prevMembers, seen = /* @__PURE__ */ new Set()) {
    return evaluate(path2);
    function evaluate(path3) {
      const expr = path3.node;
      switch (expr.type) {
        case "MemberExpression":
          return evaluateRef(path3, prevMembers, seen);
        case "StringLiteral":
          return expr.value;
        case "UnaryExpression":
          return evalUnaryExpression(path3);
        case "BinaryExpression":
          return evalBinaryExpression(path3);
        case "NumericLiteral":
          return expr.value;
        case "ParenthesizedExpression":
          return evaluate(path3.get("expression"));
        case "Identifier":
          return evaluateRef(path3, prevMembers, seen);
        case "TemplateLiteral": {
          if (expr.quasis.length === 1) {
            return expr.quasis[0].value.cooked;
          }
          const paths = path3.get("expressions");
          const quasis = expr.quasis;
          let str = "";
          for (let i = 0; i < quasis.length; i++) {
            str += quasis[i].value.cooked;
            if (i + 1 < quasis.length) {
              const value2 = evaluateRef(paths[i], prevMembers, seen);
              if (value2 === void 0) return void 0;
              str += value2;
            }
          }
          return str;
        }
        default:
          return void 0;
      }
    }
    function evaluateRef(path3, prevMembers2, seen2) {
      if (path3.isMemberExpression()) {
        const expr = path3.node;
        const obj = expr.object;
        const prop = expr.property;
        if (!_core.types.isIdentifier(obj) || (expr.computed ? !_core.types.isStringLiteral(prop) : !_core.types.isIdentifier(prop))) {
          return;
        }
        const bindingIdentifier = path3.scope.getBindingIdentifier(obj.name);
        const data = ENUMS.get(bindingIdentifier);
        if (!data) return;
        return data.get(prop.computed ? prop.value : prop.name);
      } else if (path3.isIdentifier()) {
        const name = path3.node.name;
        if (["Infinity", "NaN"].includes(name)) {
          return Number(name);
        }
        let value2 = prevMembers2 == null ? void 0 : prevMembers2.get(name);
        if (value2 !== void 0) {
          return value2;
        }
        if (seen2.has(path3.node)) return;
        seen2.add(path3.node);
        value2 = computeConstantValue(path3.resolve(), prevMembers2, seen2);
        prevMembers2 == null || prevMembers2.set(name, value2);
        return value2;
      }
    }
    function evalUnaryExpression(path3) {
      const value2 = evaluate(path3.get("argument"));
      if (value2 === void 0) {
        return void 0;
      }
      switch (path3.node.operator) {
        case "+":
          return value2;
        case "-":
          return -value2;
        case "~":
          return ~value2;
        default:
          return void 0;
      }
    }
    function evalBinaryExpression(path3) {
      const left = evaluate(path3.get("left"));
      if (left === void 0) {
        return void 0;
      }
      const right = evaluate(path3.get("right"));
      if (right === void 0) {
        return void 0;
      }
      switch (path3.node.operator) {
        case "|":
          return left | right;
        case "&":
          return left & right;
        case ">>":
          return left >> right;
        case ">>>":
          return left >>> right;
        case "<<":
          return left << right;
        case "^":
          return left ^ right;
        case "*":
          return left * right;
        case "/":
          return left / right;
        case "+":
          return left + right;
        case "-":
          return left - right;
        case "%":
          return left % right;
        case "**":
          return Math.pow(left, right);
        default:
          return void 0;
      }
    }
  }
  return _enum;
}
var hasRequiredConstEnum;
function requireConstEnum() {
  if (hasRequiredConstEnum) return constEnum;
  hasRequiredConstEnum = 1;
  Object.defineProperty(constEnum, "__esModule", {
    value: true
  });
  constEnum.default = transpileConstEnum;
  var _enum2 = require_enum();
  function transpileConstEnum(path2, t) {
    const {
      name
    } = path2.node.id;
    const parentIsExport = path2.parentPath.isExportNamedDeclaration();
    let isExported = parentIsExport;
    if (!isExported && t.isProgram(path2.parent)) {
      isExported = path2.parent.body.some((stmt) => t.isExportNamedDeclaration(stmt) && stmt.exportKind !== "type" && !stmt.source && stmt.specifiers.some((spec) => t.isExportSpecifier(spec) && spec.exportKind !== "type" && spec.local.name === name));
    }
    const {
      enumValues: entries
    } = (0, _enum2.translateEnumValues)(path2, t);
    if (isExported) {
      const obj = t.objectExpression(entries.map(([name2, value2]) => t.objectProperty(t.isValidIdentifier(name2) ? t.identifier(name2) : t.stringLiteral(name2), value2)));
      if (path2.scope.hasOwnBinding(name)) {
        (parentIsExport ? path2.parentPath : path2).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path2.node.id, obj])));
      } else {
        path2.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path2.node.id, obj)]));
        path2.scope.registerDeclaration(path2);
      }
      return;
    }
    const entriesMap = new Map(entries);
    path2.scope.path.traverse({
      Scope(path3) {
        if (path3.scope.hasOwnBinding(name)) path3.skip();
      },
      MemberExpression(path3) {
        if (!t.isIdentifier(path3.node.object, {
          name
        })) return;
        let key2;
        if (path3.node.computed) {
          if (t.isStringLiteral(path3.node.property)) {
            key2 = path3.node.property.value;
          } else {
            return;
          }
        } else if (t.isIdentifier(path3.node.property)) {
          key2 = path3.node.property.name;
        } else {
          return;
        }
        if (!entriesMap.has(key2)) return;
        path3.replaceWith(t.cloneNode(entriesMap.get(key2)));
      }
    });
    path2.remove();
  }
  return constEnum;
}
var globalTypes = {};
var hasRequiredGlobalTypes;
function requireGlobalTypes() {
  if (hasRequiredGlobalTypes) return globalTypes;
  hasRequiredGlobalTypes = 1;
  Object.defineProperty(globalTypes, "__esModule", {
    value: true
  });
  globalTypes.GLOBAL_TYPES = void 0;
  globalTypes.isGlobalType = isGlobalType;
  globalTypes.registerGlobalType = registerGlobalType;
  const GLOBAL_TYPES = globalTypes.GLOBAL_TYPES = /* @__PURE__ */ new WeakMap();
  function isGlobalType({
    scope: scope2
  }, name) {
    if (scope2.hasBinding(name)) return false;
    if (GLOBAL_TYPES.get(scope2).has(name)) return true;
    console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${name}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`);
    return false;
  }
  function registerGlobalType(programScope, name) {
    GLOBAL_TYPES.get(programScope).add(name);
  }
  return globalTypes;
}
var namespace = {};
var hasRequiredNamespace;
function requireNamespace() {
  if (hasRequiredNamespace) return namespace;
  hasRequiredNamespace = 1;
  Object.defineProperty(namespace, "__esModule", {
    value: true
  });
  namespace.default = transpileNamespace;
  var _core = requireLib$x();
  var _globalTypes = requireGlobalTypes();
  function transpileNamespace(path2, allowNamespaces) {
    if (path2.node.declare || path2.node.id.type === "StringLiteral") {
      path2.remove();
      return;
    }
    if (!allowNamespaces) {
      throw path2.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
    }
    const name = path2.node.id.name;
    const value2 = handleNested(path2, _core.types.cloneNode(path2.node, true));
    if (value2 === null) {
      const program = path2.findParent((p) => p.isProgram());
      (0, _globalTypes.registerGlobalType)(program.scope, name);
      path2.remove();
    } else if (path2.scope.hasOwnBinding(name)) {
      path2.replaceWith(value2);
    } else {
      path2.scope.registerDeclaration(path2.replaceWithMultiple([getDeclaration(name), value2])[0]);
    }
  }
  function getDeclaration(name) {
    return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
  }
  function getMemberExpression(name, itemName) {
    return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
  }
  function handleVariableDeclaration(node2, name, hub2) {
    if (node2.kind !== "const") {
      throw hub2.file.buildCodeFrameError(node2, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
    }
    const {
      declarations
    } = node2;
    if (declarations.every((declarator) => _core.types.isIdentifier(declarator.id))) {
      for (const declarator of declarations) {
        declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init);
      }
      return [node2];
    }
    const bindingIdentifiers = _core.types.getBindingIdentifiers(node2);
    const assignments = [];
    for (const idName in bindingIdentifiers) {
      assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
    }
    return [node2, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
  }
  function buildNestedAmbientModuleError(path2, node2) {
    return path2.hub.buildError(node2, "Ambient modules cannot be nested in other modules or namespaces.", Error);
  }
  function handleNested(path2, node2, parentExport) {
    const names = /* @__PURE__ */ new Set();
    const realName = node2.id;
    _core.types.assertIdentifier(realName);
    const name = path2.scope.generateUid(realName.name);
    const namespaceTopLevel = _core.types.isTSModuleBlock(node2.body) ? node2.body.body : [_core.types.exportNamedDeclaration(node2.body)];
    let isEmpty = true;
    for (let i = 0; i < namespaceTopLevel.length; i++) {
      const subNode = namespaceTopLevel[i];
      switch (subNode.type) {
        case "TSModuleDeclaration": {
          if (!_core.types.isIdentifier(subNode.id)) {
            throw buildNestedAmbientModuleError(path2, subNode);
          }
          const transformed = handleNested(path2, subNode);
          if (transformed !== null) {
            isEmpty = false;
            const moduleName = subNode.id.name;
            if (names.has(moduleName)) {
              namespaceTopLevel[i] = transformed;
            } else {
              names.add(moduleName);
              namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed);
            }
          }
          continue;
        }
        case "TSEnumDeclaration":
        case "FunctionDeclaration":
        case "ClassDeclaration":
          isEmpty = false;
          names.add(subNode.id.name);
          continue;
        case "VariableDeclaration": {
          isEmpty = false;
          for (const name2 in _core.types.getBindingIdentifiers(subNode)) {
            names.add(name2);
          }
          continue;
        }
        default:
          isEmpty && (isEmpty = _core.types.isTypeScript(subNode));
          continue;
        case "ExportNamedDeclaration":
      }
      if ("declare" in subNode.declaration && subNode.declaration.declare) {
        continue;
      }
      switch (subNode.declaration.type) {
        case "TSEnumDeclaration":
        case "FunctionDeclaration":
        case "ClassDeclaration": {
          isEmpty = false;
          const itemName = subNode.declaration.id.name;
          names.add(itemName);
          namespaceTopLevel.splice(i++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
          break;
        }
        case "VariableDeclaration": {
          isEmpty = false;
          const nodes = handleVariableDeclaration(subNode.declaration, name, path2.hub);
          namespaceTopLevel.splice(i, nodes.length, ...nodes);
          i += nodes.length - 1;
          break;
        }
        case "TSModuleDeclaration": {
          if (!_core.types.isIdentifier(subNode.declaration.id)) {
            throw buildNestedAmbientModuleError(path2, subNode.declaration);
          }
          const transformed = handleNested(path2, subNode.declaration, _core.types.identifier(name));
          if (transformed !== null) {
            isEmpty = false;
            const moduleName = subNode.declaration.id.name;
            if (names.has(moduleName)) {
              namespaceTopLevel[i] = transformed;
            } else {
              names.add(moduleName);
              namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed);
            }
          } else {
            namespaceTopLevel.splice(i, 1);
            i--;
          }
        }
      }
    }
    if (isEmpty) return null;
    let fallthroughValue = _core.types.objectExpression([]);
    if (parentExport) {
      const memberExpr = _core.types.memberExpression(parentExport, realName);
      fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
    }
    return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
  }
  return namespace;
}
var hasRequiredLib$1;
function requireLib$1() {
  if (hasRequiredLib$1) return lib$3;
  hasRequiredLib$1 = 1;
  Object.defineProperty(lib$3, "__esModule", {
    value: true
  });
  lib$3.default = void 0;
  var _helperPluginUtils = requireLib$T();
  var _pluginSyntaxTypescript = requireLib$2();
  var _helperCreateClassFeaturesPlugin = requireLib$r();
  var _constEnum = requireConstEnum();
  var _enum2 = require_enum();
  var _globalTypes = requireGlobalTypes();
  var _namespace = requireNamespace();
  function isInType(path2) {
    switch (path2.parent.type) {
      case "TSTypeReference":
      case "TSExpressionWithTypeArguments":
      case "TSTypeQuery":
        return true;
      case "TSQualifiedName":
        return path2.parentPath.findParent((path3) => path3.type !== "TSQualifiedName").type !== "TSImportEqualsDeclaration";
      case "ExportSpecifier":
        return path2.parent.exportKind === "type" || path2.parentPath.parent.exportKind === "type";
      default:
        return false;
    }
  }
  const NEEDS_EXPLICIT_ESM = /* @__PURE__ */ new WeakMap();
  const PARSED_PARAMS = /* @__PURE__ */ new WeakSet();
  function safeRemove(path2) {
    const ids = path2.getBindingIdentifiers();
    for (const name of Object.keys(ids)) {
      const binding2 = path2.scope.getBinding(name);
      if (binding2 && binding2.identifier === ids[name]) {
        binding2.scope.removeBinding(name);
      }
    }
    path2.opts.noScope = true;
    path2.remove();
    path2.opts.noScope = false;
  }
  function assertCjsTransformEnabled(path2, pass, wrong, suggestion, extra = "") {
    if (pass.file.get("@babel/plugin-transform-modules-*") !== "commonjs") {
      throw path2.buildCodeFrameError(`\`${wrong}\` is only supported when compiling modules to CommonJS.
Please consider using \`${suggestion}\`${extra}, or add @babel/plugin-transform-modules-commonjs to your Babel config.`);
    }
  }
  lib$3.default = (0, _helperPluginUtils.declare)((api, opts) => {
    const {
      types: t,
      template: template2
    } = api;
    api.assertVersion(7);
    const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+([^\s]+)/;
    const {
      allowNamespaces = true,
      jsxPragma = "React.createElement",
      jsxPragmaFrag = "React.Fragment",
      onlyRemoveTypeImports = false,
      optimizeConstEnums = false
    } = opts;
    {
      var {
        allowDeclareFields = false
      } = opts;
    }
    const classMemberVisitors = {
      field(path2) {
        const {
          node: node2
        } = path2;
        {
          if (!allowDeclareFields && node2.declare) {
            throw path2.buildCodeFrameError(`The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.`);
          }
        }
        if (node2.declare) {
          if (node2.value) {
            throw path2.buildCodeFrameError(`Fields with the 'declare' modifier cannot be initialized here, but only in the constructor`);
          }
          if (!node2.decorators) {
            path2.remove();
          }
        } else if (node2.definite) {
          if (node2.value) {
            throw path2.buildCodeFrameError(`Definitely assigned fields cannot be initialized here, but only in the constructor`);
          }
          {
            if (!allowDeclareFields && !node2.decorators && !t.isClassPrivateProperty(node2)) {
              path2.remove();
            }
          }
        } else if (node2.abstract) {
          path2.remove();
        } else {
          if (!allowDeclareFields && !node2.value && !node2.decorators && !t.isClassPrivateProperty(node2)) {
            path2.remove();
          }
        }
        if (node2.accessibility) node2.accessibility = null;
        if (node2.abstract) node2.abstract = null;
        if (node2.readonly) node2.readonly = null;
        if (node2.optional) node2.optional = null;
        if (node2.typeAnnotation) node2.typeAnnotation = null;
        if (node2.definite) node2.definite = null;
        if (node2.declare) node2.declare = null;
        if (node2.override) node2.override = null;
      },
      method({
        node: node2
      }) {
        if (node2.accessibility) node2.accessibility = null;
        if (node2.abstract) node2.abstract = null;
        if (node2.optional) node2.optional = null;
        if (node2.override) node2.override = null;
      },
      constructor(path2, classPath) {
        if (path2.node.accessibility) path2.node.accessibility = null;
        const assigns = [];
        const {
          scope: scope2
        } = path2;
        for (const paramPath of path2.get("params")) {
          const param = paramPath.node;
          if (param.type === "TSParameterProperty") {
            const parameter = param.parameter;
            if (PARSED_PARAMS.has(parameter)) continue;
            PARSED_PARAMS.add(parameter);
            let id;
            if (t.isIdentifier(parameter)) {
              id = parameter;
            } else if (t.isAssignmentPattern(parameter) && t.isIdentifier(parameter.left)) {
              id = parameter.left;
            } else {
              throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
            }
            assigns.push(template2.statement.ast`
              this.${t.cloneNode(id)} = ${t.cloneNode(id)}
            `);
            paramPath.replaceWith(paramPath.get("parameter"));
            scope2.registerBinding("param", paramPath);
          }
        }
        (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path2, assigns);
      }
    };
    return {
      name: "transform-typescript",
      inherits: _pluginSyntaxTypescript.default,
      visitor: {
        Pattern: visitPattern,
        Identifier: visitPattern,
        RestElement: visitPattern,
        Program: {
          enter(path2, state2) {
            const {
              file: file2
            } = state2;
            let fileJsxPragma = null;
            let fileJsxPragmaFrag = null;
            const programScope = path2.scope;
            if (!_globalTypes.GLOBAL_TYPES.has(programScope)) {
              _globalTypes.GLOBAL_TYPES.set(programScope, /* @__PURE__ */ new Set());
            }
            if (file2.ast.comments) {
              for (const comment of file2.ast.comments) {
                const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
                if (jsxMatches) {
                  if (jsxMatches[1]) {
                    fileJsxPragmaFrag = jsxMatches[2];
                  } else {
                    fileJsxPragma = jsxMatches[2];
                  }
                }
              }
            }
            let pragmaImportName = fileJsxPragma || jsxPragma;
            if (pragmaImportName) {
              [pragmaImportName] = pragmaImportName.split(".");
            }
            let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
            if (pragmaFragImportName) {
              [pragmaFragImportName] = pragmaFragImportName.split(".");
            }
            for (let stmt of path2.get("body")) {
              if (stmt.isImportDeclaration()) {
                if (!NEEDS_EXPLICIT_ESM.has(state2.file.ast.program)) {
                  NEEDS_EXPLICIT_ESM.set(state2.file.ast.program, true);
                }
                if (stmt.node.importKind === "type") {
                  for (const specifier of stmt.node.specifiers) {
                    (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                  }
                  stmt.remove();
                  continue;
                }
                const importsToRemove = /* @__PURE__ */ new Set();
                const specifiersLength = stmt.node.specifiers.length;
                const isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
                for (const specifier of stmt.node.specifiers) {
                  if (specifier.type === "ImportSpecifier" && specifier.importKind === "type") {
                    (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                    const binding2 = stmt.scope.getBinding(specifier.local.name);
                    if (binding2) {
                      importsToRemove.add(binding2.path);
                    }
                  }
                }
                if (onlyRemoveTypeImports) {
                  NEEDS_EXPLICIT_ESM.set(path2.node, false);
                } else {
                  if (stmt.node.specifiers.length === 0) {
                    NEEDS_EXPLICIT_ESM.set(path2.node, false);
                    continue;
                  }
                  for (const specifier of stmt.node.specifiers) {
                    const binding2 = stmt.scope.getBinding(specifier.local.name);
                    if (binding2 && !importsToRemove.has(binding2.path)) {
                      if (isImportTypeOnly({
                        binding: binding2,
                        programPath: path2,
                        pragmaImportName,
                        pragmaFragImportName
                      })) {
                        importsToRemove.add(binding2.path);
                      } else {
                        NEEDS_EXPLICIT_ESM.set(path2.node, false);
                      }
                    }
                  }
                }
                if (isAllSpecifiersElided() && !onlyRemoveTypeImports) {
                  stmt.remove();
                } else {
                  for (const importPath of importsToRemove) {
                    importPath.remove();
                  }
                }
                continue;
              }
              if (stmt.isExportDeclaration()) {
                stmt = stmt.get("declaration");
              }
              if (stmt.isVariableDeclaration({
                declare: true
              })) {
                for (const name of Object.keys(stmt.getBindingIdentifiers())) {
                  (0, _globalTypes.registerGlobalType)(programScope, name);
                }
              } else if (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({
                declare: true
              }) || stmt.isTSEnumDeclaration({
                declare: true
              }) || stmt.isTSModuleDeclaration({
                declare: true
              }) && stmt.get("id").isIdentifier()) {
                (0, _globalTypes.registerGlobalType)(programScope, stmt.node.id.name);
              }
            }
          },
          exit(path2) {
            if (path2.node.sourceType === "module" && NEEDS_EXPLICIT_ESM.get(path2.node)) {
              path2.pushContainer("body", t.exportNamedDeclaration());
            }
          }
        },
        ExportNamedDeclaration(path2, state2) {
          if (!NEEDS_EXPLICIT_ESM.has(state2.file.ast.program)) {
            NEEDS_EXPLICIT_ESM.set(state2.file.ast.program, true);
          }
          if (path2.node.exportKind === "type") {
            path2.remove();
            return;
          }
          if (path2.node.source && path2.node.specifiers.length > 0 && path2.node.specifiers.every((specifier) => specifier.type === "ExportSpecifier" && specifier.exportKind === "type")) {
            path2.remove();
            return;
          }
          if (!path2.node.source && path2.node.specifiers.length > 0 && path2.node.specifiers.every((specifier) => t.isExportSpecifier(specifier) && (0, _globalTypes.isGlobalType)(path2, specifier.local.name))) {
            path2.remove();
            return;
          }
          if (t.isTSModuleDeclaration(path2.node.declaration)) {
            const namespace2 = path2.node.declaration;
            const {
              id
            } = namespace2;
            if (t.isIdentifier(id)) {
              if (path2.scope.hasOwnBinding(id.name)) {
                path2.replaceWith(namespace2);
              } else {
                const [newExport] = path2.replaceWithMultiple([t.exportNamedDeclaration(t.variableDeclaration("let", [t.variableDeclarator(t.cloneNode(id))])), namespace2]);
                path2.scope.registerDeclaration(newExport);
              }
            }
          }
          NEEDS_EXPLICIT_ESM.set(state2.file.ast.program, false);
        },
        ExportAllDeclaration(path2) {
          if (path2.node.exportKind === "type") path2.remove();
        },
        ExportSpecifier(path2) {
          const parent = path2.parent;
          if (!parent.source && (0, _globalTypes.isGlobalType)(path2, path2.node.local.name) || path2.node.exportKind === "type") {
            path2.remove();
          }
        },
        ExportDefaultDeclaration(path2, state2) {
          if (!NEEDS_EXPLICIT_ESM.has(state2.file.ast.program)) {
            NEEDS_EXPLICIT_ESM.set(state2.file.ast.program, true);
          }
          if (t.isIdentifier(path2.node.declaration) && (0, _globalTypes.isGlobalType)(path2, path2.node.declaration.name)) {
            path2.remove();
            return;
          }
          NEEDS_EXPLICIT_ESM.set(state2.file.ast.program, false);
        },
        TSDeclareFunction(path2) {
          safeRemove(path2);
        },
        TSDeclareMethod(path2) {
          safeRemove(path2);
        },
        VariableDeclaration(path2) {
          if (path2.node.declare) {
            safeRemove(path2);
          }
        },
        VariableDeclarator({
          node: node2
        }) {
          if (node2.definite) node2.definite = null;
        },
        TSIndexSignature(path2) {
          path2.remove();
        },
        ClassDeclaration(path2) {
          const {
            node: node2
          } = path2;
          if (node2.declare) {
            safeRemove(path2);
          }
        },
        Class(path2) {
          const {
            node: node2
          } = path2;
          if (node2.typeParameters) node2.typeParameters = null;
          if (node2.superTypeParameters) node2.superTypeParameters = null;
          if (node2.implements) node2.implements = null;
          if (node2.abstract) node2.abstract = null;
          path2.get("body.body").forEach((child) => {
            if (child.isClassMethod() || child.isClassPrivateMethod()) {
              if (child.node.kind === "constructor") {
                classMemberVisitors.constructor(child, path2);
              } else {
                classMemberVisitors.method(child);
              }
            } else if (child.isClassProperty() || child.isClassPrivateProperty() || child.isClassAccessorProperty()) {
              classMemberVisitors.field(child);
            }
          });
        },
        Function(path2) {
          const {
            node: node2
          } = path2;
          if (node2.typeParameters) node2.typeParameters = null;
          if (node2.returnType) node2.returnType = null;
          const params = node2.params;
          if (params.length > 0 && t.isIdentifier(params[0], {
            name: "this"
          })) {
            params.shift();
          }
        },
        TSModuleDeclaration(path2) {
          (0, _namespace.default)(path2, allowNamespaces);
        },
        TSInterfaceDeclaration(path2) {
          path2.remove();
        },
        TSTypeAliasDeclaration(path2) {
          path2.remove();
        },
        TSEnumDeclaration(path2) {
          if (optimizeConstEnums && path2.node.const) {
            (0, _constEnum.default)(path2, t);
          } else {
            (0, _enum2.default)(path2, t);
          }
        },
        TSImportEqualsDeclaration(path2, pass) {
          const {
            id,
            moduleReference
          } = path2.node;
          let init;
          let varKind;
          if (t.isTSExternalModuleReference(moduleReference)) {
            assertCjsTransformEnabled(path2, pass, `import ${id.name} = require(...);`, `import ${id.name} from '...';`, " alongside Typescript's --allowSyntheticDefaultImports option");
            init = t.callExpression(t.identifier("require"), [moduleReference.expression]);
            varKind = "const";
          } else {
            init = entityNameToExpr(moduleReference);
            varKind = "var";
          }
          path2.replaceWith(t.variableDeclaration(varKind, [t.variableDeclarator(id, init)]));
          path2.scope.registerDeclaration(path2);
        },
        TSExportAssignment(path2, pass) {
          assertCjsTransformEnabled(path2, pass, `export = <value>;`, `export default <value>;`);
          path2.replaceWith(template2.statement.ast`module.exports = ${path2.node.expression}`);
        },
        TSTypeAssertion(path2) {
          path2.replaceWith(path2.node.expression);
        },
        [`TSAsExpression${t.tsSatisfiesExpression ? "|TSSatisfiesExpression" : ""}`](path2) {
          let {
            node: node2
          } = path2;
          do {
            node2 = node2.expression;
          } while (t.isTSAsExpression(node2) || t.isTSSatisfiesExpression != null && t.isTSSatisfiesExpression(node2));
          path2.replaceWith(node2);
        },
        [api.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path2) {
          path2.replaceWith(path2.node.expression);
        },
        CallExpression(path2) {
          path2.node.typeParameters = null;
        },
        OptionalCallExpression(path2) {
          path2.node.typeParameters = null;
        },
        NewExpression(path2) {
          path2.node.typeParameters = null;
        },
        JSXOpeningElement(path2) {
          path2.node.typeParameters = null;
        },
        TaggedTemplateExpression(path2) {
          path2.node.typeParameters = null;
        }
      }
    };
    function entityNameToExpr(node2) {
      if (t.isTSQualifiedName(node2)) {
        return t.memberExpression(entityNameToExpr(node2.left), node2.right);
      }
      return node2;
    }
    function visitPattern({
      node: node2
    }) {
      if (node2.typeAnnotation) node2.typeAnnotation = null;
      if (t.isIdentifier(node2) && node2.optional) node2.optional = null;
    }
    function isImportTypeOnly({
      binding: binding2,
      programPath,
      pragmaImportName,
      pragmaFragImportName
    }) {
      for (const path2 of binding2.referencePaths) {
        if (!isInType(path2)) {
          return false;
        }
      }
      if (binding2.identifier.name !== pragmaImportName && binding2.identifier.name !== pragmaFragImportName) {
        return true;
      }
      let sourceFileHasJsx = false;
      programPath.traverse({
        "JSXElement|JSXFragment"(path2) {
          sourceFileHasJsx = true;
          path2.stop();
        }
      });
      return !sourceFileHasJsx;
    }
  });
  return lib$3;
}
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib) return lib$4;
  hasRequiredLib = 1;
  Object.defineProperty(lib$4, "__esModule", { value: true });
  var helperPluginUtils = requireLib$T();
  var transformTypeScript = requireLib$1();
  requireLib$5();
  var transformModulesCommonJS = requireLib$3();
  var helperValidatorOption = requireLib$z();
  function _interopDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  var transformTypeScript__default = /* @__PURE__ */ _interopDefault(transformTypeScript);
  var transformModulesCommonJS__default = /* @__PURE__ */ _interopDefault(transformModulesCommonJS);
  const v = new helperValidatorOption.OptionValidator("@babel/preset-typescript");
  function normalizeOptions(options2 = {}) {
    let {
      allowNamespaces = true,
      jsxPragma,
      onlyRemoveTypeImports
    } = options2;
    const TopLevelOptions = {
      ignoreExtensions: "ignoreExtensions",
      allowNamespaces: "allowNamespaces",
      disallowAmbiguousJSXLike: "disallowAmbiguousJSXLike",
      jsxPragma: "jsxPragma",
      jsxPragmaFrag: "jsxPragmaFrag",
      onlyRemoveTypeImports: "onlyRemoveTypeImports",
      optimizeConstEnums: "optimizeConstEnums",
      rewriteImportExtensions: "rewriteImportExtensions",
      allExtensions: "allExtensions",
      isTSX: "isTSX"
    };
    const jsxPragmaFrag = v.validateStringOption(TopLevelOptions.jsxPragmaFrag, options2.jsxPragmaFrag, "React.Fragment");
    {
      var allExtensions = v.validateBooleanOption(TopLevelOptions.allExtensions, options2.allExtensions, false);
      var isTSX = v.validateBooleanOption(TopLevelOptions.isTSX, options2.isTSX, false);
      if (isTSX) {
        v.invariant(allExtensions, "isTSX:true requires allExtensions:true");
      }
    }
    const ignoreExtensions = v.validateBooleanOption(TopLevelOptions.ignoreExtensions, options2.ignoreExtensions, false);
    const disallowAmbiguousJSXLike = v.validateBooleanOption(TopLevelOptions.disallowAmbiguousJSXLike, options2.disallowAmbiguousJSXLike, false);
    if (disallowAmbiguousJSXLike) {
      {
        v.invariant(allExtensions, "disallowAmbiguousJSXLike:true requires allExtensions:true");
      }
    }
    const optimizeConstEnums = v.validateBooleanOption(TopLevelOptions.optimizeConstEnums, options2.optimizeConstEnums, false);
    const rewriteImportExtensions = v.validateBooleanOption(TopLevelOptions.rewriteImportExtensions, options2.rewriteImportExtensions, false);
    const normalized = {
      ignoreExtensions,
      allowNamespaces,
      disallowAmbiguousJSXLike,
      jsxPragma,
      jsxPragmaFrag,
      onlyRemoveTypeImports,
      optimizeConstEnums,
      rewriteImportExtensions
    };
    {
      normalized.allExtensions = allExtensions;
      normalized.isTSX = isTSX;
    }
    return normalized;
  }
  var pluginRewriteTSImports = helperPluginUtils.declare(function({
    types: t
  }) {
    return {
      name: "preset-typescript/plugin-rewrite-ts-imports",
      visitor: {
        "ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"({
          node: node2
        }) {
          const {
            source: source2
          } = node2;
          const kind = t.isImportDeclaration(node2) ? node2.importKind : node2.exportKind;
          if (kind === "value" && source2 && /[\\/]/.test(source2.value)) {
            source2.value = source2.value.replace(/(\.[mc]?)ts$/, "$1js").replace(/\.tsx$/, ".js");
          }
        }
      }
    };
  });
  var index2 = helperPluginUtils.declarePreset((api, opts) => {
    api.assertVersion(7);
    const {
      allExtensions,
      ignoreExtensions,
      allowNamespaces,
      disallowAmbiguousJSXLike,
      isTSX,
      jsxPragma,
      jsxPragmaFrag,
      onlyRemoveTypeImports,
      optimizeConstEnums,
      rewriteImportExtensions
    } = normalizeOptions(opts);
    const pluginOptions = (disallowAmbiguousJSXLike2) => ({
      allowDeclareFields: opts.allowDeclareFields,
      allowNamespaces,
      disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2,
      jsxPragma,
      jsxPragmaFrag,
      onlyRemoveTypeImports,
      optimizeConstEnums
    });
    const getPlugins = (isTSX2, disallowAmbiguousJSXLike2) => {
      {
        return [[transformTypeScript__default.default, Object.assign({
          isTSX: isTSX2
        }, pluginOptions(disallowAmbiguousJSXLike2))]];
      }
    };
    const disableExtensionDetect = allExtensions || ignoreExtensions;
    return {
      plugins: rewriteImportExtensions ? [pluginRewriteTSImports] : [],
      overrides: disableExtensionDetect ? [{
        plugins: getPlugins(isTSX, disallowAmbiguousJSXLike)
      }] : [{
        test: /\.ts$/,
        plugins: getPlugins(false, false)
      }, {
        test: /\.mts$/,
        sourceType: "module",
        plugins: getPlugins(false, true)
      }, {
        test: /\.cts$/,
        sourceType: "unambiguous",
        plugins: [[transformModulesCommonJS__default.default, {
          allowTopLevelThis: true
        }], [transformTypeScript__default.default, pluginOptions(true)]]
      }, {
        test: /\.tsx$/,
        plugins: getPlugins(true, false)
      }]
    };
  });
  lib$4.default = index2;
  return lib$4;
}
var libExports$4 = requireLib$x();
var libExports$3 = requireLib$J();
var libExports$2 = requireLib$T();
var libExports$1 = requireLib$E();
const traverseFunction = /* @__PURE__ */ getDefaultExportFromCjs(libExports$1);
const traverse = traverseFunction;
function babelTransformOptions(isTypeScript2, isModule2, pluginsPrologue, pluginsEpilogue) {
  const plugins2 = [
    [requireLib$S(), { deprecatedAssertSyntax: true }]
  ];
  if (isTypeScript2) {
    plugins2.push(
      [requireLib$q(), { version: "2023-05" }],
      [requireLib$o()],
      [requireLib$n()],
      [requireLib$l()],
      [requireLib$j()],
      [requireLib$h()],
      [requireLib$f()],
      [requireLib$d()],
      [requireLib$c()],
      [requireLib$b()],
      [requireLib$a()],
      [requireLib$9()],
      [requireLib$8()],
      [requireLib$6()],
      [
        // From https://github.com/G-Rath/babel-plugin-replace-ts-export-assignment/blob/8dfdca32c8aa428574b0cae341444fc5822f2dc6/src/index.ts
        ({ template: template2 }) => ({
          name: "replace-ts-export-assignment",
          visitor: {
            TSExportAssignment(path2) {
              path2.replaceWith(template2("module.exports = ASSIGNMENT;")({
                ASSIGNMENT: path2.node.expression
              }));
            }
          }
        })
      ]
    );
  }
  plugins2.push([requireLib$4(), {
    throwIfNamespace: false,
    runtime: "automatic",
    importSource: path$2.dirname(Boolean("playwright"))
  }]);
  if (!isModule2) {
    plugins2.push([requireLib$3()]);
    plugins2.push([
      () => ({
        name: "css-to-identity-obj-proxy",
        visitor: {
          ImportDeclaration(path2) {
            if (path2.node.source.value.match(/\.(css|less|scss)$/))
              path2.remove();
          }
        }
      })
    ]);
  }
  return {
    browserslistConfigFile: false,
    babelrc: false,
    configFile: false,
    assumptions: {
      // Without this, babel defines a top level function that
      // breaks playwright evaluates.
      setPublicClassFields: true
    },
    presets: isTypeScript2 ? [
      [requireLib(), { onlyRemoveTypeImports: false }]
    ] : [],
    plugins: [
      ...pluginsPrologue.map(([name, options2]) => [commonjsRequire(name), options2]),
      ...plugins2,
      ...pluginsEpilogue.map(([name, options2]) => [commonjsRequire(name), options2])
    ],
    compact: false,
    sourceMaps: "both"
  };
}
let isTransforming = false;
function isTypeScript(filename) {
  return filename.endsWith(".ts") || filename.endsWith(".tsx") || filename.endsWith(".mts") || filename.endsWith(".cts");
}
function babelTransform(code, filename, isModule2, pluginsPrologue, pluginsEpilogue) {
  if (isTransforming)
    return {};
  isTransforming = true;
  try {
    const options2 = babelTransformOptions(isTypeScript(filename), isModule2, pluginsPrologue, pluginsEpilogue);
    return libExports$4.transform(code, { filename, ...options2 });
  } finally {
    isTransforming = false;
  }
}
function babelParse(code, filename, isModule2) {
  const options2 = babelTransformOptions(isTypeScript(filename), isModule2, [], []);
  return libExports$4.parse(code, { filename, ...options2 });
}
const babelBundleImpl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  babelParse,
  babelTransform,
  codeFrameColumns: libExports$3.codeFrameColumns,
  declare: libExports$2.declare,
  traverse,
  types: libExports$4.types
}, Symbol.toStringTag, { value: "Module" }));
const require$$0$2 = /* @__PURE__ */ getAugmentedNamespace(babelBundleImpl);
require$$0$2.codeFrameColumns;
require$$0$2.declare;
require$$0$2.types;
require$$0$2.traverse;
require$$0$2.babelTransform;
require$$0$2.babelParse;
var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
var unicode = {
  Space_Separator,
  ID_Start,
  ID_Continue
};
var util$6 = {
  isSpaceSeparator(c2) {
    return typeof c2 === "string" && unicode.Space_Separator.test(c2);
  },
  isIdStartChar(c2) {
    return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 === "$" || c2 === "_" || unicode.ID_Start.test(c2));
  },
  isIdContinueChar(c2) {
    return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || c2 === "$" || c2 === "_" || c2 === "‌" || c2 === "‍" || unicode.ID_Continue.test(c2));
  },
  isDigit(c2) {
    return typeof c2 === "string" && /[0-9]/.test(c2);
  },
  isHexDigit(c2) {
    return typeof c2 === "string" && /[0-9A-Fa-f]/.test(c2);
  }
};
let source;
let parseState;
let stack;
let pos;
let line;
let column;
let token;
let key;
let root;
var parse = function parse2(text2, reviver) {
  source = String(text2);
  parseState = "start";
  stack = [];
  pos = 0;
  line = 1;
  column = 0;
  token = void 0;
  key = void 0;
  root = void 0;
  do {
    token = lex();
    parseStates[parseState]();
  } while (token.type !== "eof");
  if (typeof reviver === "function") {
    return internalize({ "": root }, "", reviver);
  }
  return root;
};
function internalize(holder, name, reviver) {
  const value2 = holder[name];
  if (value2 != null && typeof value2 === "object") {
    if (Array.isArray(value2)) {
      for (let i = 0; i < value2.length; i++) {
        const key2 = String(i);
        const replacement2 = internalize(value2, key2, reviver);
        if (replacement2 === void 0) {
          delete value2[key2];
        } else {
          Object.defineProperty(value2, key2, {
            value: replacement2,
            writable: true,
            enumerable: true,
            configurable: true
          });
        }
      }
    } else {
      for (const key2 in value2) {
        const replacement2 = internalize(value2, key2, reviver);
        if (replacement2 === void 0) {
          delete value2[key2];
        } else {
          Object.defineProperty(value2, key2, {
            value: replacement2,
            writable: true,
            enumerable: true,
            configurable: true
          });
        }
      }
    }
  }
  return reviver.call(holder, name, value2);
}
let lexState;
let buffer;
let doubleQuote;
let sign;
let c;
function lex() {
  lexState = "default";
  buffer = "";
  doubleQuote = false;
  sign = 1;
  for (; ; ) {
    c = peek();
    const token2 = lexStates[lexState]();
    if (token2) {
      return token2;
    }
  }
}
function peek() {
  if (source[pos]) {
    return String.fromCodePoint(source.codePointAt(pos));
  }
}
function read() {
  const c2 = peek();
  if (c2 === "\n") {
    line++;
    column = 0;
  } else if (c2) {
    column += c2.length;
  } else {
    column++;
  }
  if (c2) {
    pos += c2.length;
  }
  return c2;
}
const lexStates = {
  default() {
    switch (c) {
      case "	":
      case "\v":
      case "\f":
      case " ":
      case " ":
      case "\uFEFF":
      case "\n":
      case "\r":
      case "\u2028":
      case "\u2029":
        read();
        return;
      case "/":
        read();
        lexState = "comment";
        return;
      case void 0:
        read();
        return newToken("eof");
    }
    if (util$6.isSpaceSeparator(c)) {
      read();
      return;
    }
    return lexStates[parseState]();
  },
  comment() {
    switch (c) {
      case "*":
        read();
        lexState = "multiLineComment";
        return;
      case "/":
        read();
        lexState = "singleLineComment";
        return;
    }
    throw invalidChar(read());
  },
  multiLineComment() {
    switch (c) {
      case "*":
        read();
        lexState = "multiLineCommentAsterisk";
        return;
      case void 0:
        throw invalidChar(read());
    }
    read();
  },
  multiLineCommentAsterisk() {
    switch (c) {
      case "*":
        read();
        return;
      case "/":
        read();
        lexState = "default";
        return;
      case void 0:
        throw invalidChar(read());
    }
    read();
    lexState = "multiLineComment";
  },
  singleLineComment() {
    switch (c) {
      case "\n":
      case "\r":
      case "\u2028":
      case "\u2029":
        read();
        lexState = "default";
        return;
      case void 0:
        read();
        return newToken("eof");
    }
    read();
  },
  value() {
    switch (c) {
      case "{":
      case "[":
        return newToken("punctuator", read());
      case "n":
        read();
        literal("ull");
        return newToken("null", null);
      case "t":
        read();
        literal("rue");
        return newToken("boolean", true);
      case "f":
        read();
        literal("alse");
        return newToken("boolean", false);
      case "-":
      case "+":
        if (read() === "-") {
          sign = -1;
        }
        lexState = "sign";
        return;
      case ".":
        buffer = read();
        lexState = "decimalPointLeading";
        return;
      case "0":
        buffer = read();
        lexState = "zero";
        return;
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        buffer = read();
        lexState = "decimalInteger";
        return;
      case "I":
        read();
        literal("nfinity");
        return newToken("numeric", Infinity);
      case "N":
        read();
        literal("aN");
        return newToken("numeric", NaN);
      case '"':
      case "'":
        doubleQuote = read() === '"';
        buffer = "";
        lexState = "string";
        return;
    }
    throw invalidChar(read());
  },
  identifierNameStartEscape() {
    if (c !== "u") {
      throw invalidChar(read());
    }
    read();
    const u = unicodeEscape();
    switch (u) {
      case "$":
      case "_":
        break;
      default:
        if (!util$6.isIdStartChar(u)) {
          throw invalidIdentifier();
        }
        break;
    }
    buffer += u;
    lexState = "identifierName";
  },
  identifierName() {
    switch (c) {
      case "$":
      case "_":
      case "‌":
      case "‍":
        buffer += read();
        return;
      case "\\":
        read();
        lexState = "identifierNameEscape";
        return;
    }
    if (util$6.isIdContinueChar(c)) {
      buffer += read();
      return;
    }
    return newToken("identifier", buffer);
  },
  identifierNameEscape() {
    if (c !== "u") {
      throw invalidChar(read());
    }
    read();
    const u = unicodeEscape();
    switch (u) {
      case "$":
      case "_":
      case "‌":
      case "‍":
        break;
      default:
        if (!util$6.isIdContinueChar(u)) {
          throw invalidIdentifier();
        }
        break;
    }
    buffer += u;
    lexState = "identifierName";
  },
  sign() {
    switch (c) {
      case ".":
        buffer = read();
        lexState = "decimalPointLeading";
        return;
      case "0":
        buffer = read();
        lexState = "zero";
        return;
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        buffer = read();
        lexState = "decimalInteger";
        return;
      case "I":
        read();
        literal("nfinity");
        return newToken("numeric", sign * Infinity);
      case "N":
        read();
        literal("aN");
        return newToken("numeric", NaN);
    }
    throw invalidChar(read());
  },
  zero() {
    switch (c) {
      case ".":
        buffer += read();
        lexState = "decimalPoint";
        return;
      case "e":
      case "E":
        buffer += read();
        lexState = "decimalExponent";
        return;
      case "x":
      case "X":
        buffer += read();
        lexState = "hexadecimal";
        return;
    }
    return newToken("numeric", sign * 0);
  },
  decimalInteger() {
    switch (c) {
      case ".":
        buffer += read();
        lexState = "decimalPoint";
        return;
      case "e":
      case "E":
        buffer += read();
        lexState = "decimalExponent";
        return;
    }
    if (util$6.isDigit(c)) {
      buffer += read();
      return;
    }
    return newToken("numeric", sign * Number(buffer));
  },
  decimalPointLeading() {
    if (util$6.isDigit(c)) {
      buffer += read();
      lexState = "decimalFraction";
      return;
    }
    throw invalidChar(read());
  },
  decimalPoint() {
    switch (c) {
      case "e":
      case "E":
        buffer += read();
        lexState = "decimalExponent";
        return;
    }
    if (util$6.isDigit(c)) {
      buffer += read();
      lexState = "decimalFraction";
      return;
    }
    return newToken("numeric", sign * Number(buffer));
  },
  decimalFraction() {
    switch (c) {
      case "e":
      case "E":
        buffer += read();
        lexState = "decimalExponent";
        return;
    }
    if (util$6.isDigit(c)) {
      buffer += read();
      return;
    }
    return newToken("numeric", sign * Number(buffer));
  },
  decimalExponent() {
    switch (c) {
      case "+":
      case "-":
        buffer += read();
        lexState = "decimalExponentSign";
        return;
    }
    if (util$6.isDigit(c)) {
      buffer += read();
      lexState = "decimalExponentInteger";
      return;
    }
    throw invalidChar(read());
  },
  decimalExponentSign() {
    if (util$6.isDigit(c)) {
      buffer += read();
      lexState = "decimalExponentInteger";
      return;
    }
    throw invalidChar(read());
  },
  decimalExponentInteger() {
    if (util$6.isDigit(c)) {
      buffer += read();
      return;
    }
    return newToken("numeric", sign * Number(buffer));
  },
  hexadecimal() {
    if (util$6.isHexDigit(c)) {
      buffer += read();
      lexState = "hexadecimalInteger";
      return;
    }
    throw invalidChar(read());
  },
  hexadecimalInteger() {
    if (util$6.isHexDigit(c)) {
      buffer += read();
      return;
    }
    return newToken("numeric", sign * Number(buffer));
  },
  string() {
    switch (c) {
      case "\\":
        read();
        buffer += escape$1();
        return;
      case '"':
        if (doubleQuote) {
          read();
          return newToken("string", buffer);
        }
        buffer += read();
        return;
      case "'":
        if (!doubleQuote) {
          read();
          return newToken("string", buffer);
        }
        buffer += read();
        return;
      case "\n":
      case "\r":
        throw invalidChar(read());
      case "\u2028":
      case "\u2029":
        separatorChar(c);
        break;
      case void 0:
        throw invalidChar(read());
    }
    buffer += read();
  },
  start() {
    switch (c) {
      case "{":
      case "[":
        return newToken("punctuator", read());
    }
    lexState = "value";
  },
  beforePropertyName() {
    switch (c) {
      case "$":
      case "_":
        buffer = read();
        lexState = "identifierName";
        return;
      case "\\":
        read();
        lexState = "identifierNameStartEscape";
        return;
      case "}":
        return newToken("punctuator", read());
      case '"':
      case "'":
        doubleQuote = read() === '"';
        lexState = "string";
        return;
    }
    if (util$6.isIdStartChar(c)) {
      buffer += read();
      lexState = "identifierName";
      return;
    }
    throw invalidChar(read());
  },
  afterPropertyName() {
    if (c === ":") {
      return newToken("punctuator", read());
    }
    throw invalidChar(read());
  },
  beforePropertyValue() {
    lexState = "value";
  },
  afterPropertyValue() {
    switch (c) {
      case ",":
      case "}":
        return newToken("punctuator", read());
    }
    throw invalidChar(read());
  },
  beforeArrayValue() {
    if (c === "]") {
      return newToken("punctuator", read());
    }
    lexState = "value";
  },
  afterArrayValue() {
    switch (c) {
      case ",":
      case "]":
        return newToken("punctuator", read());
    }
    throw invalidChar(read());
  },
  end() {
    throw invalidChar(read());
  }
};
function newToken(type, value2) {
  return {
    type,
    value: value2,
    line,
    column
  };
}
function literal(s) {
  for (const c2 of s) {
    const p = peek();
    if (p !== c2) {
      throw invalidChar(read());
    }
    read();
  }
}
function escape$1() {
  const c2 = peek();
  switch (c2) {
    case "b":
      read();
      return "\b";
    case "f":
      read();
      return "\f";
    case "n":
      read();
      return "\n";
    case "r":
      read();
      return "\r";
    case "t":
      read();
      return "	";
    case "v":
      read();
      return "\v";
    case "0":
      read();
      if (util$6.isDigit(peek())) {
        throw invalidChar(read());
      }
      return "\0";
    case "x":
      read();
      return hexEscape();
    case "u":
      read();
      return unicodeEscape();
    case "\n":
    case "\u2028":
    case "\u2029":
      read();
      return "";
    case "\r":
      read();
      if (peek() === "\n") {
        read();
      }
      return "";
    case "1":
    case "2":
    case "3":
    case "4":
    case "5":
    case "6":
    case "7":
    case "8":
    case "9":
      throw invalidChar(read());
    case void 0:
      throw invalidChar(read());
  }
  return read();
}
function hexEscape() {
  let buffer2 = "";
  let c2 = peek();
  if (!util$6.isHexDigit(c2)) {
    throw invalidChar(read());
  }
  buffer2 += read();
  c2 = peek();
  if (!util$6.isHexDigit(c2)) {
    throw invalidChar(read());
  }
  buffer2 += read();
  return String.fromCodePoint(parseInt(buffer2, 16));
}
function unicodeEscape() {
  let buffer2 = "";
  let count = 4;
  while (count-- > 0) {
    const c2 = peek();
    if (!util$6.isHexDigit(c2)) {
      throw invalidChar(read());
    }
    buffer2 += read();
  }
  return String.fromCodePoint(parseInt(buffer2, 16));
}
const parseStates = {
  start() {
    if (token.type === "eof") {
      throw invalidEOF();
    }
    push();
  },
  beforePropertyName() {
    switch (token.type) {
      case "identifier":
      case "string":
        key = token.value;
        parseState = "afterPropertyName";
        return;
      case "punctuator":
        pop();
        return;
      case "eof":
        throw invalidEOF();
    }
  },
  afterPropertyName() {
    if (token.type === "eof") {
      throw invalidEOF();
    }
    parseState = "beforePropertyValue";
  },
  beforePropertyValue() {
    if (token.type === "eof") {
      throw invalidEOF();
    }
    push();
  },
  beforeArrayValue() {
    if (token.type === "eof") {
      throw invalidEOF();
    }
    if (token.type === "punctuator" && token.value === "]") {
      pop();
      return;
    }
    push();
  },
  afterPropertyValue() {
    if (token.type === "eof") {
      throw invalidEOF();
    }
    switch (token.value) {
      case ",":
        parseState = "beforePropertyName";
        return;
      case "}":
        pop();
    }
  },
  afterArrayValue() {
    if (token.type === "eof") {
      throw invalidEOF();
    }
    switch (token.value) {
      case ",":
        parseState = "beforeArrayValue";
        return;
      case "]":
        pop();
    }
  },
  end() {
  }
};
function push() {
  let value2;
  switch (token.type) {
    case "punctuator":
      switch (token.value) {
        case "{":
          value2 = {};
          break;
        case "[":
          value2 = [];
          break;
      }
      break;
    case "null":
    case "boolean":
    case "numeric":
    case "string":
      value2 = token.value;
      break;
  }
  if (root === void 0) {
    root = value2;
  } else {
    const parent = stack[stack.length - 1];
    if (Array.isArray(parent)) {
      parent.push(value2);
    } else {
      Object.defineProperty(parent, key, {
        value: value2,
        writable: true,
        enumerable: true,
        configurable: true
      });
    }
  }
  if (value2 !== null && typeof value2 === "object") {
    stack.push(value2);
    if (Array.isArray(value2)) {
      parseState = "beforeArrayValue";
    } else {
      parseState = "beforePropertyName";
    }
  } else {
    const current = stack[stack.length - 1];
    if (current == null) {
      parseState = "end";
    } else if (Array.isArray(current)) {
      parseState = "afterArrayValue";
    } else {
      parseState = "afterPropertyValue";
    }
  }
}
function pop() {
  stack.pop();
  const current = stack[stack.length - 1];
  if (current == null) {
    parseState = "end";
  } else if (Array.isArray(current)) {
    parseState = "afterArrayValue";
  } else {
    parseState = "afterPropertyValue";
  }
}
function invalidChar(c2) {
  if (c2 === void 0) {
    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
  }
  return syntaxError(`JSON5: invalid character '${formatChar(c2)}' at ${line}:${column}`);
}
function invalidEOF() {
  return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
}
function invalidIdentifier() {
  column -= 5;
  return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
}
function separatorChar(c2) {
  console.warn(`JSON5: '${formatChar(c2)}' in strings is not valid ECMAScript; consider escaping`);
}
function formatChar(c2) {
  const replacements = {
    "'": "\\'",
    '"': '\\"',
    "\\": "\\\\",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t",
    "\v": "\\v",
    "\0": "\\0",
    "\u2028": "\\u2028",
    "\u2029": "\\u2029"
  };
  if (replacements[c2]) {
    return replacements[c2];
  }
  if (c2 < " ") {
    const hexString = c2.charCodeAt(0).toString(16);
    return "\\x" + ("00" + hexString).substring(hexString.length);
  }
  return c2;
}
function syntaxError(message) {
  const err = new SyntaxError(message);
  err.lineNumber = line;
  err.columnNumber = column;
  return err;
}
var stringify = function stringify2(value2, replacer, space) {
  const stack2 = [];
  let indent = "";
  let propertyList;
  let replacerFunc;
  let gap = "";
  let quote;
  if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
    space = replacer.space;
    quote = replacer.quote;
    replacer = replacer.replacer;
  }
  if (typeof replacer === "function") {
    replacerFunc = replacer;
  } else if (Array.isArray(replacer)) {
    propertyList = [];
    for (const v of replacer) {
      let item2;
      if (typeof v === "string") {
        item2 = v;
      } else if (typeof v === "number" || v instanceof String || v instanceof Number) {
        item2 = String(v);
      }
      if (item2 !== void 0 && propertyList.indexOf(item2) < 0) {
        propertyList.push(item2);
      }
    }
  }
  if (space instanceof Number) {
    space = Number(space);
  } else if (space instanceof String) {
    space = String(space);
  }
  if (typeof space === "number") {
    if (space > 0) {
      space = Math.min(10, Math.floor(space));
      gap = "          ".substr(0, space);
    }
  } else if (typeof space === "string") {
    gap = space.substr(0, 10);
  }
  return serializeProperty("", { "": value2 });
  function serializeProperty(key2, holder) {
    let value3 = holder[key2];
    if (value3 != null) {
      if (typeof value3.toJSON5 === "function") {
        value3 = value3.toJSON5(key2);
      } else if (typeof value3.toJSON === "function") {
        value3 = value3.toJSON(key2);
      }
    }
    if (replacerFunc) {
      value3 = replacerFunc.call(holder, key2, value3);
    }
    if (value3 instanceof Number) {
      value3 = Number(value3);
    } else if (value3 instanceof String) {
      value3 = String(value3);
    } else if (value3 instanceof Boolean) {
      value3 = value3.valueOf();
    }
    switch (value3) {
      case null:
        return "null";
      case true:
        return "true";
      case false:
        return "false";
    }
    if (typeof value3 === "string") {
      return quoteString(value3);
    }
    if (typeof value3 === "number") {
      return String(value3);
    }
    if (typeof value3 === "object") {
      return Array.isArray(value3) ? serializeArray(value3) : serializeObject(value3);
    }
    return void 0;
  }
  function quoteString(value3) {
    const quotes = {
      "'": 0.1,
      '"': 0.2
    };
    const replacements = {
      "'": "\\'",
      '"': '\\"',
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\v": "\\v",
      "\0": "\\0",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };
    let product = "";
    for (let i = 0; i < value3.length; i++) {
      const c2 = value3[i];
      switch (c2) {
        case "'":
        case '"':
          quotes[c2]++;
          product += c2;
          continue;
        case "\0":
          if (util$6.isDigit(value3[i + 1])) {
            product += "\\x00";
            continue;
          }
      }
      if (replacements[c2]) {
        product += replacements[c2];
        continue;
      }
      if (c2 < " ") {
        let hexString = c2.charCodeAt(0).toString(16);
        product += "\\x" + ("00" + hexString).substring(hexString.length);
        continue;
      }
      product += c2;
    }
    const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);
    product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]);
    return quoteChar + product + quoteChar;
  }
  function serializeObject(value3) {
    if (stack2.indexOf(value3) >= 0) {
      throw TypeError("Converting circular structure to JSON5");
    }
    stack2.push(value3);
    let stepback = indent;
    indent = indent + gap;
    let keys2 = propertyList || Object.keys(value3);
    let partial2 = [];
    for (const key2 of keys2) {
      const propertyString = serializeProperty(key2, value3);
      if (propertyString !== void 0) {
        let member = serializeKey(key2) + ":";
        if (gap !== "") {
          member += " ";
        }
        member += propertyString;
        partial2.push(member);
      }
    }
    let final;
    if (partial2.length === 0) {
      final = "{}";
    } else {
      let properties;
      if (gap === "") {
        properties = partial2.join(",");
        final = "{" + properties + "}";
      } else {
        let separator = ",\n" + indent;
        properties = partial2.join(separator);
        final = "{\n" + indent + properties + ",\n" + stepback + "}";
      }
    }
    stack2.pop();
    indent = stepback;
    return final;
  }
  function serializeKey(key2) {
    if (key2.length === 0) {
      return quoteString(key2);
    }
    const firstChar = String.fromCodePoint(key2.codePointAt(0));
    if (!util$6.isIdStartChar(firstChar)) {
      return quoteString(key2);
    }
    for (let i = firstChar.length; i < key2.length; i++) {
      if (!util$6.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i)))) {
        return quoteString(key2);
      }
    }
    return key2;
  }
  function serializeArray(value3) {
    if (stack2.indexOf(value3) >= 0) {
      throw TypeError("Converting circular structure to JSON5");
    }
    stack2.push(value3);
    let stepback = indent;
    indent = indent + gap;
    let partial2 = [];
    for (let i = 0; i < value3.length; i++) {
      const propertyString = serializeProperty(String(i), value3);
      partial2.push(propertyString !== void 0 ? propertyString : "null");
    }
    let final;
    if (partial2.length === 0) {
      final = "[]";
    } else {
      if (gap === "") {
        let properties = partial2.join(",");
        final = "[" + properties + "]";
      } else {
        let separator = ",\n" + indent;
        let properties = partial2.join(separator);
        final = "[\n" + indent + properties + ",\n" + stepback + "]";
      }
    }
    stack2.pop();
    indent = stepback;
    return final;
  }
};
const JSON5 = {
  parse,
  stringify
};
var lib$1 = JSON5;
var lib = { exports: {} };
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addHook = addHook;
  var _module = _interopRequireDefault2(require$$0$9);
  var _path = _interopRequireDefault2(pathExports);
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const nodeModulesRegex = /^(?:.*[\\/])?node_modules(?:[\\/].*)?$/;
  const Module2 = module.constructor.length > 1 ? module.constructor : _module.default;
  const HOOK_RETURNED_NOTHING_ERROR_MESSAGE = "[Pirates] A hook returned a non-string, or nothing at all! This is a violation of intergalactic law!\n--------------------\nIf you have no idea what this means or what Pirates is, let me explain: Pirates is a module that makes is easy to implement require hooks. One of the require hooks you're using uses it. One of these require hooks didn't return anything from it's handler, so we don't know what to do. You might want to debug this.";
  function shouldCompile(filename, exts, matcher, ignoreNodeModules) {
    if (typeof filename !== "string") {
      return false;
    }
    if (exts.indexOf(_path.default.extname(filename)) === -1) {
      return false;
    }
    const resolvedFilename = _path.default.resolve(filename);
    if (ignoreNodeModules && nodeModulesRegex.test(resolvedFilename)) {
      return false;
    }
    if (matcher && typeof matcher === "function") {
      return !!matcher(resolvedFilename);
    }
    return true;
  }
  function addHook(hook, opts = {}) {
    let reverted = false;
    const loaders = [];
    const oldLoaders = [];
    let exts;
    const originalJSLoader = Module2._extensions[".js"];
    const matcher = opts.matcher || null;
    const ignoreNodeModules = opts.ignoreNodeModules !== false;
    exts = opts.extensions || opts.exts || opts.extension || opts.ext || [".js"];
    if (!Array.isArray(exts)) {
      exts = [exts];
    }
    exts.forEach((ext) => {
      if (typeof ext !== "string") {
        throw new TypeError(`Invalid Extension: ${ext}`);
      }
      const oldLoader = Module2._extensions[ext] || originalJSLoader;
      oldLoaders[ext] = Module2._extensions[ext];
      loaders[ext] = Module2._extensions[ext] = function newLoader(mod, filename) {
        let compile2;
        if (!reverted) {
          if (shouldCompile(filename, exts, matcher, ignoreNodeModules)) {
            compile2 = mod._compile;
            mod._compile = function _compile(code) {
              mod._compile = compile2;
              const newCode = hook(code, filename);
              if (typeof newCode !== "string") {
                throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);
              }
              return mod._compile(newCode, filename);
            };
          }
        }
        oldLoader(mod, filename);
      };
    });
    return function revert() {
      if (reverted) return;
      reverted = true;
      exts.forEach((ext) => {
        if (Module2._extensions[ext] === loaders[ext]) {
          Module2._extensions[ext] = oldLoaders[ext];
        }
      });
    };
  }
})(lib, lib.exports);
var libExports = lib.exports;
const index = /* @__PURE__ */ getDefaultExportFromCjs(libExports);
const piratesLibrary = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: index
}, [libExports]);
var sourceMapSupport$2 = { exports: {} };
var sourceMap = {};
var sourceMapGenerator = {};
var base64Vlq = {};
var base64$1 = {};
var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
base64$1.encode = function(number2) {
  if (0 <= number2 && number2 < intToCharMap.length) {
    return intToCharMap[number2];
  }
  throw new TypeError("Must be between 0 and 63: " + number2);
};
base64$1.decode = function(charCode) {
  var bigA = 65;
  var bigZ = 90;
  var littleA = 97;
  var littleZ = 122;
  var zero = 48;
  var nine = 57;
  var plus = 43;
  var slash2 = 47;
  var littleOffset = 26;
  var numberOffset = 52;
  if (bigA <= charCode && charCode <= bigZ) {
    return charCode - bigA;
  }
  if (littleA <= charCode && charCode <= littleZ) {
    return charCode - littleA + littleOffset;
  }
  if (zero <= charCode && charCode <= nine) {
    return charCode - zero + numberOffset;
  }
  if (charCode == plus) {
    return 62;
  }
  if (charCode == slash2) {
    return 63;
  }
  return -1;
};
var base64 = base64$1;
var VLQ_BASE_SHIFT = 5;
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
var VLQ_BASE_MASK = VLQ_BASE - 1;
var VLQ_CONTINUATION_BIT = VLQ_BASE;
function toVLQSigned(aValue) {
  return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
}
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative ? -shifted : shifted;
}
base64Vlq.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;
  var vlq = toVLQSigned(aValue);
  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);
  return encoded;
};
base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;
  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }
    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }
    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);
  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};
var util$5 = {};
(function(exports) {
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;
  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;
  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;
  function urlGenerate(aParsedUrl) {
    var url2 = "";
    if (aParsedUrl.scheme) {
      url2 += aParsedUrl.scheme + ":";
    }
    url2 += "//";
    if (aParsedUrl.auth) {
      url2 += aParsedUrl.auth + "@";
    }
    if (aParsedUrl.host) {
      url2 += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url2 += ":" + aParsedUrl.port;
    }
    if (aParsedUrl.path) {
      url2 += aParsedUrl.path;
    }
    return url2;
  }
  exports.urlGenerate = urlGenerate;
  function normalize(aPath) {
    var path2 = aPath;
    var url2 = urlParse(aPath);
    if (url2) {
      if (!url2.path) {
        return aPath;
      }
      path2 = url2.path;
    }
    var isAbsolute = exports.isAbsolute(path2);
    var parts = path2.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === ".") {
        parts.splice(i, 1);
      } else if (part === "..") {
        up++;
      } else if (up > 0) {
        if (part === "") {
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path2 = parts.join("/");
    if (path2 === "") {
      path2 = isAbsolute ? "/" : ".";
    }
    if (url2) {
      url2.path = path2;
      return urlGenerate(url2);
    }
    return path2;
  }
  exports.normalize = normalize;
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || "/";
    }
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }
    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }
    var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;
  exports.isAbsolute = function(aPath) {
    return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
  };
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    aRoot = aRoot.replace(/\/$/, "");
    var level = 0;
    while (aPath.indexOf(aRoot + "/") !== 0) {
      var index2 = aRoot.lastIndexOf("/");
      if (index2 < 0) {
        return aPath;
      }
      aRoot = aRoot.slice(0, index2);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }
      ++level;
    }
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  }
  exports.relative = relative;
  var supportsNullProto = function() {
    var obj = /* @__PURE__ */ Object.create(null);
    return !("__proto__" in obj);
  }();
  function identity(s) {
    return s;
  }
  function toSetString(aStr) {
    if (isProtoString(aStr)) {
      return "$" + aStr;
    }
    return aStr;
  }
  exports.toSetString = supportsNullProto ? identity : toSetString;
  function fromSetString(aStr) {
    if (isProtoString(aStr)) {
      return aStr.slice(1);
    }
    return aStr;
  }
  exports.fromSetString = supportsNullProto ? identity : fromSetString;
  function isProtoString(s) {
    if (!s) {
      return false;
    }
    var length = s.length;
    if (length < 9) {
      return false;
    }
    if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
      return false;
    }
    for (var i = length - 10; i >= 0; i--) {
      if (s.charCodeAt(i) !== 36) {
        return false;
      }
    }
    return true;
  }
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByOriginalPositions = compareByOriginalPositions;
  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }
    if (aStr1 === null) {
      return 1;
    }
    if (aStr2 === null) {
      return -1;
    }
    if (aStr1 > aStr2) {
      return 1;
    }
    return -1;
  }
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
  function parseSourceMapInput(str) {
    return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
  }
  exports.parseSourceMapInput = parseSourceMapInput;
  function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    sourceURL = sourceURL || "";
    if (sourceRoot) {
      if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
        sourceRoot += "/";
      }
      sourceURL = sourceRoot + sourceURL;
    }
    if (sourceMapURL) {
      var parsed = urlParse(sourceMapURL);
      if (!parsed) {
        throw new Error("sourceMapURL could not be parsed");
      }
      if (parsed.path) {
        var index2 = parsed.path.lastIndexOf("/");
        if (index2 >= 0) {
          parsed.path = parsed.path.substring(0, index2 + 1);
        }
      }
      sourceURL = join(urlGenerate(parsed), sourceURL);
    }
    return normalize(sourceURL);
  }
  exports.computeSourceURL = computeSourceURL;
})(util$5);
var arraySet = {};
var util$4 = util$5;
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";
function ArraySet$2() {
  this._array = [];
  this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
}
ArraySet$2.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet$2();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};
ArraySet$2.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};
ArraySet$2.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util$4.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};
ArraySet$2.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util$4.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};
ArraySet$2.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
      return idx;
    }
  } else {
    var sStr = util$4.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }
  throw new Error('"' + aStr + '" is not in the set.');
};
ArraySet$2.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error("No element indexed by " + aIdx);
};
ArraySet$2.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};
arraySet.ArraySet = ArraySet$2;
var mappingList = {};
var util$3 = util$5;
function generatedPositionAfter(mappingA, mappingB) {
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA || util$3.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}
function MappingList$1() {
  this._array = [];
  this._sorted = true;
  this._last = { generatedLine: -1, generatedColumn: 0 };
}
MappingList$1.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
  this._array.forEach(aCallback, aThisArg);
};
MappingList$1.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};
MappingList$1.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util$3.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};
mappingList.MappingList = MappingList$1;
var base64VLQ$1 = base64Vlq;
var util$2 = util$5;
var ArraySet$1 = arraySet.ArraySet;
var MappingList = mappingList.MappingList;
function SourceMapGenerator$1(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util$2.getArg(aArgs, "file", null);
  this._sourceRoot = util$2.getArg(aArgs, "sourceRoot", null);
  this._skipValidation = util$2.getArg(aArgs, "skipValidation", false);
  this._sources = new ArraySet$1();
  this._names = new ArraySet$1();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}
SourceMapGenerator$1.prototype._version = 3;
SourceMapGenerator$1.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
  var sourceRoot = aSourceMapConsumer.sourceRoot;
  var generator = new SourceMapGenerator$1({
    file: aSourceMapConsumer.file,
    sourceRoot
  });
  aSourceMapConsumer.eachMapping(function(mapping) {
    var newMapping = {
      generated: {
        line: mapping.generatedLine,
        column: mapping.generatedColumn
      }
    };
    if (mapping.source != null) {
      newMapping.source = mapping.source;
      if (sourceRoot != null) {
        newMapping.source = util$2.relative(sourceRoot, newMapping.source);
      }
      newMapping.original = {
        line: mapping.originalLine,
        column: mapping.originalColumn
      };
      if (mapping.name != null) {
        newMapping.name = mapping.name;
      }
    }
    generator.addMapping(newMapping);
  });
  aSourceMapConsumer.sources.forEach(function(sourceFile) {
    var sourceRelative = sourceFile;
    if (sourceRoot !== null) {
      sourceRelative = util$2.relative(sourceRoot, sourceFile);
    }
    if (!generator._sources.has(sourceRelative)) {
      generator._sources.add(sourceRelative);
    }
    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    if (content != null) {
      generator.setSourceContent(sourceFile, content);
    }
  });
  return generator;
};
SourceMapGenerator$1.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
  var generated2 = util$2.getArg(aArgs, "generated");
  var original = util$2.getArg(aArgs, "original", null);
  var source2 = util$2.getArg(aArgs, "source", null);
  var name = util$2.getArg(aArgs, "name", null);
  if (!this._skipValidation) {
    this._validateMapping(generated2, original, source2, name);
  }
  if (source2 != null) {
    source2 = String(source2);
    if (!this._sources.has(source2)) {
      this._sources.add(source2);
    }
  }
  if (name != null) {
    name = String(name);
    if (!this._names.has(name)) {
      this._names.add(name);
    }
  }
  this._mappings.add({
    generatedLine: generated2.line,
    generatedColumn: generated2.column,
    originalLine: original != null && original.line,
    originalColumn: original != null && original.column,
    source: source2,
    name
  });
};
SourceMapGenerator$1.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
  var source2 = aSourceFile;
  if (this._sourceRoot != null) {
    source2 = util$2.relative(this._sourceRoot, source2);
  }
  if (aSourceContent != null) {
    if (!this._sourcesContents) {
      this._sourcesContents = /* @__PURE__ */ Object.create(null);
    }
    this._sourcesContents[util$2.toSetString(source2)] = aSourceContent;
  } else if (this._sourcesContents) {
    delete this._sourcesContents[util$2.toSetString(source2)];
    if (Object.keys(this._sourcesContents).length === 0) {
      this._sourcesContents = null;
    }
  }
};
SourceMapGenerator$1.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
  var sourceFile = aSourceFile;
  if (aSourceFile == null) {
    if (aSourceMapConsumer.file == null) {
      throw new Error(
        `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
      );
    }
    sourceFile = aSourceMapConsumer.file;
  }
  var sourceRoot = this._sourceRoot;
  if (sourceRoot != null) {
    sourceFile = util$2.relative(sourceRoot, sourceFile);
  }
  var newSources = new ArraySet$1();
  var newNames = new ArraySet$1();
  this._mappings.unsortedForEach(function(mapping) {
    if (mapping.source === sourceFile && mapping.originalLine != null) {
      var original = aSourceMapConsumer.originalPositionFor({
        line: mapping.originalLine,
        column: mapping.originalColumn
      });
      if (original.source != null) {
        mapping.source = original.source;
        if (aSourceMapPath != null) {
          mapping.source = util$2.join(aSourceMapPath, mapping.source);
        }
        if (sourceRoot != null) {
          mapping.source = util$2.relative(sourceRoot, mapping.source);
        }
        mapping.originalLine = original.line;
        mapping.originalColumn = original.column;
        if (original.name != null) {
          mapping.name = original.name;
        }
      }
    }
    var source2 = mapping.source;
    if (source2 != null && !newSources.has(source2)) {
      newSources.add(source2);
    }
    var name = mapping.name;
    if (name != null && !newNames.has(name)) {
      newNames.add(name);
    }
  }, this);
  this._sources = newSources;
  this._names = newNames;
  aSourceMapConsumer.sources.forEach(function(sourceFile2) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
    if (content != null) {
      if (aSourceMapPath != null) {
        sourceFile2 = util$2.join(aSourceMapPath, sourceFile2);
      }
      if (sourceRoot != null) {
        sourceFile2 = util$2.relative(sourceRoot, sourceFile2);
      }
      this.setSourceContent(sourceFile2, content);
    }
  }, this);
};
SourceMapGenerator$1.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
  if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
    throw new Error(
      "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
    );
  }
  if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
    return;
  } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
    return;
  } else {
    throw new Error("Invalid mapping: " + JSON.stringify({
      generated: aGenerated,
      source: aSource,
      original: aOriginal,
      name: aName
    }));
  }
};
SourceMapGenerator$1.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
  var previousGeneratedColumn = 0;
  var previousGeneratedLine = 1;
  var previousOriginalColumn = 0;
  var previousOriginalLine = 0;
  var previousName = 0;
  var previousSource = 0;
  var result = "";
  var next;
  var mapping;
  var nameIdx;
  var sourceIdx;
  var mappings = this._mappings.toArray();
  for (var i = 0, len = mappings.length; i < len; i++) {
    mapping = mappings[i];
    next = "";
    if (mapping.generatedLine !== previousGeneratedLine) {
      previousGeneratedColumn = 0;
      while (mapping.generatedLine !== previousGeneratedLine) {
        next += ";";
        previousGeneratedLine++;
      }
    } else {
      if (i > 0) {
        if (!util$2.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
          continue;
        }
        next += ",";
      }
    }
    next += base64VLQ$1.encode(mapping.generatedColumn - previousGeneratedColumn);
    previousGeneratedColumn = mapping.generatedColumn;
    if (mapping.source != null) {
      sourceIdx = this._sources.indexOf(mapping.source);
      next += base64VLQ$1.encode(sourceIdx - previousSource);
      previousSource = sourceIdx;
      next += base64VLQ$1.encode(mapping.originalLine - 1 - previousOriginalLine);
      previousOriginalLine = mapping.originalLine - 1;
      next += base64VLQ$1.encode(mapping.originalColumn - previousOriginalColumn);
      previousOriginalColumn = mapping.originalColumn;
      if (mapping.name != null) {
        nameIdx = this._names.indexOf(mapping.name);
        next += base64VLQ$1.encode(nameIdx - previousName);
        previousName = nameIdx;
      }
    }
    result += next;
  }
  return result;
};
SourceMapGenerator$1.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
  return aSources.map(function(source2) {
    if (!this._sourcesContents) {
      return null;
    }
    if (aSourceRoot != null) {
      source2 = util$2.relative(aSourceRoot, source2);
    }
    var key2 = util$2.toSetString(source2);
    return Object.prototype.hasOwnProperty.call(this._sourcesContents, key2) ? this._sourcesContents[key2] : null;
  }, this);
};
SourceMapGenerator$1.prototype.toJSON = function SourceMapGenerator_toJSON() {
  var map = {
    version: this._version,
    sources: this._sources.toArray(),
    names: this._names.toArray(),
    mappings: this._serializeMappings()
  };
  if (this._file != null) {
    map.file = this._file;
  }
  if (this._sourceRoot != null) {
    map.sourceRoot = this._sourceRoot;
  }
  if (this._sourcesContents) {
    map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
  }
  return map;
};
SourceMapGenerator$1.prototype.toString = function SourceMapGenerator_toString() {
  return JSON.stringify(this.toJSON());
};
sourceMapGenerator.SourceMapGenerator = SourceMapGenerator$1;
var sourceMapConsumer = {};
var binarySearch$1 = {};
(function(exports) {
  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      return mid;
    } else if (cmp > 0) {
      if (aHigh - mid > 1) {
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    } else {
      if (mid - aLow > 1) {
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  }
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }
    var index2 = recursiveSearch(
      -1,
      aHaystack.length,
      aNeedle,
      aHaystack,
      aCompare,
      aBias || exports.GREATEST_LOWER_BOUND
    );
    if (index2 < 0) {
      return -1;
    }
    while (index2 - 1 >= 0) {
      if (aCompare(aHaystack[index2], aHaystack[index2 - 1], true) !== 0) {
        break;
      }
      --index2;
    }
    return index2;
  };
})(binarySearch$1);
var quickSort$1 = {};
function swap(ary, x2, y) {
  var temp = ary[x2];
  ary[x2] = ary[y];
  ary[y] = temp;
}
function randomIntInRange(low, high) {
  return Math.round(low + Math.random() * (high - low));
}
function doQuickSort(ary, comparator, p, r) {
  if (p < r) {
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;
    swap(ary, pivotIndex, r);
    var pivot = ary[r];
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }
    swap(ary, i + 1, j);
    var q = i + 1;
    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}
quickSort$1.quickSort = function(ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};
var util$1 = util$5;
var binarySearch = binarySearch$1;
var ArraySet = arraySet.ArraySet;
var base64VLQ = base64Vlq;
var quickSort = quickSort$1.quickSort;
function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  return sourceMap2.sections != null ? new IndexedSourceMapConsumer(sourceMap2, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap2, aSourceMapURL);
}
SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
};
SourceMapConsumer.prototype._version = 3;
SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
  configurable: true,
  enumerable: true,
  get: function() {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }
    return this.__generatedMappings;
  }
});
SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
  configurable: true,
  enumerable: true,
  get: function() {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }
    return this.__originalMappings;
  }
});
SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index2) {
  var c2 = aStr.charAt(index2);
  return c2 === ";" || c2 === ",";
};
SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
  throw new Error("Subclasses must implement _parseMappings");
};
SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;
SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;
SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
  var context2 = aContext || null;
  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
  var mappings;
  switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
  }
  var sourceRoot = this.sourceRoot;
  mappings.map(function(mapping) {
    var source2 = mapping.source === null ? null : this._sources.at(mapping.source);
    source2 = util$1.computeSourceURL(sourceRoot, source2, this._sourceMapURL);
    return {
      source: source2,
      generatedLine: mapping.generatedLine,
      generatedColumn: mapping.generatedColumn,
      originalLine: mapping.originalLine,
      originalColumn: mapping.originalColumn,
      name: mapping.name === null ? null : this._names.at(mapping.name)
    };
  }, this).forEach(aCallback, context2);
};
SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
  var line2 = util$1.getArg(aArgs, "line");
  var needle = {
    source: util$1.getArg(aArgs, "source"),
    originalLine: line2,
    originalColumn: util$1.getArg(aArgs, "column", 0)
  };
  needle.source = this._findSourceIndex(needle.source);
  if (needle.source < 0) {
    return [];
  }
  var mappings = [];
  var index2 = this._findMapping(
    needle,
    this._originalMappings,
    "originalLine",
    "originalColumn",
    util$1.compareByOriginalPositions,
    binarySearch.LEAST_UPPER_BOUND
  );
  if (index2 >= 0) {
    var mapping = this._originalMappings[index2];
    if (aArgs.column === void 0) {
      var originalLine = mapping.originalLine;
      while (mapping && mapping.originalLine === originalLine) {
        mappings.push({
          line: util$1.getArg(mapping, "generatedLine", null),
          column: util$1.getArg(mapping, "generatedColumn", null),
          lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
        });
        mapping = this._originalMappings[++index2];
      }
    } else {
      var originalColumn = mapping.originalColumn;
      while (mapping && mapping.originalLine === line2 && mapping.originalColumn == originalColumn) {
        mappings.push({
          line: util$1.getArg(mapping, "generatedLine", null),
          column: util$1.getArg(mapping, "generatedColumn", null),
          lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
        });
        mapping = this._originalMappings[++index2];
      }
    }
  }
  return mappings;
};
sourceMapConsumer.SourceMapConsumer = SourceMapConsumer;
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  var version2 = util$1.getArg(sourceMap2, "version");
  var sources = util$1.getArg(sourceMap2, "sources");
  var names = util$1.getArg(sourceMap2, "names", []);
  var sourceRoot = util$1.getArg(sourceMap2, "sourceRoot", null);
  var sourcesContent = util$1.getArg(sourceMap2, "sourcesContent", null);
  var mappings = util$1.getArg(sourceMap2, "mappings");
  var file2 = util$1.getArg(sourceMap2, "file", null);
  if (version2 != this._version) {
    throw new Error("Unsupported version: " + version2);
  }
  if (sourceRoot) {
    sourceRoot = util$1.normalize(sourceRoot);
  }
  sources = sources.map(String).map(util$1.normalize).map(function(source2) {
    return sourceRoot && util$1.isAbsolute(sourceRoot) && util$1.isAbsolute(source2) ? util$1.relative(sourceRoot, source2) : source2;
  });
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);
  this._absoluteSources = this._sources.toArray().map(function(s) {
    return util$1.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });
  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file2;
}
BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util$1.relative(this.sourceRoot, relativeSource);
  }
  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }
  return -1;
};
BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
  var smc = Object.create(BasicSourceMapConsumer.prototype);
  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
  smc.sourceRoot = aSourceMap._sourceRoot;
  smc.sourcesContent = aSourceMap._generateSourcesContent(
    smc._sources.toArray(),
    smc.sourceRoot
  );
  smc.file = aSourceMap._file;
  smc._sourceMapURL = aSourceMapURL;
  smc._absoluteSources = smc._sources.toArray().map(function(s) {
    return util$1.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
  });
  var generatedMappings = aSourceMap._mappings.toArray().slice();
  var destGeneratedMappings = smc.__generatedMappings = [];
  var destOriginalMappings = smc.__originalMappings = [];
  for (var i = 0, length = generatedMappings.length; i < length; i++) {
    var srcMapping = generatedMappings[i];
    var destMapping = new Mapping();
    destMapping.generatedLine = srcMapping.generatedLine;
    destMapping.generatedColumn = srcMapping.generatedColumn;
    if (srcMapping.source) {
      destMapping.source = sources.indexOf(srcMapping.source);
      destMapping.originalLine = srcMapping.originalLine;
      destMapping.originalColumn = srcMapping.originalColumn;
      if (srcMapping.name) {
        destMapping.name = names.indexOf(srcMapping.name);
      }
      destOriginalMappings.push(destMapping);
    }
    destGeneratedMappings.push(destMapping);
  }
  quickSort(smc.__originalMappings, util$1.compareByOriginalPositions);
  return smc;
};
BasicSourceMapConsumer.prototype._version = 3;
Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
  get: function() {
    return this._absoluteSources.slice();
  }
});
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}
BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings2(aStr, aSourceRoot) {
  var generatedLine = 1;
  var previousGeneratedColumn = 0;
  var previousOriginalLine = 0;
  var previousOriginalColumn = 0;
  var previousSource = 0;
  var previousName = 0;
  var length = aStr.length;
  var index2 = 0;
  var cachedSegments = {};
  var temp = {};
  var originalMappings = [];
  var generatedMappings = [];
  var mapping, str, segment, end, value2;
  while (index2 < length) {
    if (aStr.charAt(index2) === ";") {
      generatedLine++;
      index2++;
      previousGeneratedColumn = 0;
    } else if (aStr.charAt(index2) === ",") {
      index2++;
    } else {
      mapping = new Mapping();
      mapping.generatedLine = generatedLine;
      for (end = index2; end < length; end++) {
        if (this._charIsMappingSeparator(aStr, end)) {
          break;
        }
      }
      str = aStr.slice(index2, end);
      segment = cachedSegments[str];
      if (segment) {
        index2 += str.length;
      } else {
        segment = [];
        while (index2 < end) {
          base64VLQ.decode(aStr, index2, temp);
          value2 = temp.value;
          index2 = temp.rest;
          segment.push(value2);
        }
        if (segment.length === 2) {
          throw new Error("Found a source, but no line and column");
        }
        if (segment.length === 3) {
          throw new Error("Found a source and line, but no column");
        }
        cachedSegments[str] = segment;
      }
      mapping.generatedColumn = previousGeneratedColumn + segment[0];
      previousGeneratedColumn = mapping.generatedColumn;
      if (segment.length > 1) {
        mapping.source = previousSource + segment[1];
        previousSource += segment[1];
        mapping.originalLine = previousOriginalLine + segment[2];
        previousOriginalLine = mapping.originalLine;
        mapping.originalLine += 1;
        mapping.originalColumn = previousOriginalColumn + segment[3];
        previousOriginalColumn = mapping.originalColumn;
        if (segment.length > 4) {
          mapping.name = previousName + segment[4];
          previousName += segment[4];
        }
      }
      generatedMappings.push(mapping);
      if (typeof mapping.originalLine === "number") {
        originalMappings.push(mapping);
      }
    }
  }
  quickSort(generatedMappings, util$1.compareByGeneratedPositionsDeflated);
  this.__generatedMappings = generatedMappings;
  quickSort(originalMappings, util$1.compareByOriginalPositions);
  this.__originalMappings = originalMappings;
};
BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
  if (aNeedle[aLineName] <= 0) {
    throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
  }
  if (aNeedle[aColumnName] < 0) {
    throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
  }
  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
};
BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
  for (var index2 = 0; index2 < this._generatedMappings.length; ++index2) {
    var mapping = this._generatedMappings[index2];
    if (index2 + 1 < this._generatedMappings.length) {
      var nextMapping = this._generatedMappings[index2 + 1];
      if (mapping.generatedLine === nextMapping.generatedLine) {
        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
        continue;
      }
    }
    mapping.lastGeneratedColumn = Infinity;
  }
};
BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
  var needle = {
    generatedLine: util$1.getArg(aArgs, "line"),
    generatedColumn: util$1.getArg(aArgs, "column")
  };
  var index2 = this._findMapping(
    needle,
    this._generatedMappings,
    "generatedLine",
    "generatedColumn",
    util$1.compareByGeneratedPositionsDeflated,
    util$1.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
  );
  if (index2 >= 0) {
    var mapping = this._generatedMappings[index2];
    if (mapping.generatedLine === needle.generatedLine) {
      var source2 = util$1.getArg(mapping, "source", null);
      if (source2 !== null) {
        source2 = this._sources.at(source2);
        source2 = util$1.computeSourceURL(this.sourceRoot, source2, this._sourceMapURL);
      }
      var name = util$1.getArg(mapping, "name", null);
      if (name !== null) {
        name = this._names.at(name);
      }
      return {
        source: source2,
        line: util$1.getArg(mapping, "originalLine", null),
        column: util$1.getArg(mapping, "originalColumn", null),
        name
      };
    }
  }
  return {
    source: null,
    line: null,
    column: null,
    name: null
  };
};
BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
  if (!this.sourcesContent) {
    return false;
  }
  return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
    return sc == null;
  });
};
BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
  if (!this.sourcesContent) {
    return null;
  }
  var index2 = this._findSourceIndex(aSource);
  if (index2 >= 0) {
    return this.sourcesContent[index2];
  }
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util$1.relative(this.sourceRoot, relativeSource);
  }
  var url2;
  if (this.sourceRoot != null && (url2 = util$1.urlParse(this.sourceRoot))) {
    var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
    if (url2.scheme == "file" && this._sources.has(fileUriAbsPath)) {
      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
    }
    if ((!url2.path || url2.path == "/") && this._sources.has("/" + relativeSource)) {
      return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
    }
  }
  if (nullOnMissing) {
    return null;
  } else {
    throw new Error('"' + relativeSource + '" is not in the SourceMap.');
  }
};
BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
  var source2 = util$1.getArg(aArgs, "source");
  source2 = this._findSourceIndex(source2);
  if (source2 < 0) {
    return {
      line: null,
      column: null,
      lastColumn: null
    };
  }
  var needle = {
    source: source2,
    originalLine: util$1.getArg(aArgs, "line"),
    originalColumn: util$1.getArg(aArgs, "column")
  };
  var index2 = this._findMapping(
    needle,
    this._originalMappings,
    "originalLine",
    "originalColumn",
    util$1.compareByOriginalPositions,
    util$1.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
  );
  if (index2 >= 0) {
    var mapping = this._originalMappings[index2];
    if (mapping.source === needle.source) {
      return {
        line: util$1.getArg(mapping, "generatedLine", null),
        column: util$1.getArg(mapping, "generatedColumn", null),
        lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
      };
    }
  }
  return {
    line: null,
    column: null,
    lastColumn: null
  };
};
sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  var version2 = util$1.getArg(sourceMap2, "version");
  var sections = util$1.getArg(sourceMap2, "sections");
  if (version2 != this._version) {
    throw new Error("Unsupported version: " + version2);
  }
  this._sources = new ArraySet();
  this._names = new ArraySet();
  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function(s) {
    if (s.url) {
      throw new Error("Support for url field in sections not implemented.");
    }
    var offset = util$1.getArg(s, "offset");
    var offsetLine = util$1.getArg(offset, "line");
    var offsetColumn = util$1.getArg(offset, "column");
    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
      throw new Error("Section offsets must be ordered and non-overlapping.");
    }
    lastOffset = offset;
    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util$1.getArg(s, "map"), aSourceMapURL)
    };
  });
}
IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
IndexedSourceMapConsumer.prototype._version = 3;
Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
  get: function() {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});
IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
  var needle = {
    generatedLine: util$1.getArg(aArgs, "line"),
    generatedColumn: util$1.getArg(aArgs, "column")
  };
  var sectionIndex = binarySearch.search(
    needle,
    this._sections,
    function(needle2, section2) {
      var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
      if (cmp) {
        return cmp;
      }
      return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
    }
  );
  var section = this._sections[sectionIndex];
  if (!section) {
    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  }
  return section.consumer.originalPositionFor({
    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
    column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
    bias: aArgs.bias
  });
};
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
  return this._sections.every(function(s) {
    return s.consumer.hasContentsOfAllSources();
  });
};
IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i];
    var content = section.consumer.sourceContentFor(aSource, true);
    if (content) {
      return content;
    }
  }
  if (nullOnMissing) {
    return null;
  } else {
    throw new Error('"' + aSource + '" is not in the SourceMap.');
  }
};
IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i];
    if (section.consumer._findSourceIndex(util$1.getArg(aArgs, "source")) === -1) {
      continue;
    }
    var generatedPosition = section.consumer.generatedPositionFor(aArgs);
    if (generatedPosition) {
      var ret = {
        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
      };
      return ret;
    }
  }
  return {
    line: null,
    column: null
  };
};
IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
  this.__generatedMappings = [];
  this.__originalMappings = [];
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i];
    var sectionMappings = section.consumer._generatedMappings;
    for (var j = 0; j < sectionMappings.length; j++) {
      var mapping = sectionMappings[j];
      var source2 = section.consumer._sources.at(mapping.source);
      source2 = util$1.computeSourceURL(section.consumer.sourceRoot, source2, this._sourceMapURL);
      this._sources.add(source2);
      source2 = this._sources.indexOf(source2);
      var name = null;
      if (mapping.name) {
        name = section.consumer._names.at(mapping.name);
        this._names.add(name);
        name = this._names.indexOf(name);
      }
      var adjustedMapping = {
        source: source2,
        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name
      };
      this.__generatedMappings.push(adjustedMapping);
      if (typeof adjustedMapping.originalLine === "number") {
        this.__originalMappings.push(adjustedMapping);
      }
    }
  }
  quickSort(this.__generatedMappings, util$1.compareByGeneratedPositionsDeflated);
  quickSort(this.__originalMappings, util$1.compareByOriginalPositions);
};
sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
var sourceNode = {};
var SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
var util = util$5;
var REGEX_NEWLINE = /(\r?\n)/;
var NEWLINE_CODE = 10;
var isSourceNode = "$$$isSourceNode$$$";
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}
SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
  var node2 = new SourceNode();
  var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
  var remainingLinesIndex = 0;
  var shiftNextLine = function() {
    var lineContents = getNextLine();
    var newLine = getNextLine() || "";
    return lineContents + newLine;
    function getNextLine() {
      return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
    }
  };
  var lastGeneratedLine = 1, lastGeneratedColumn = 0;
  var lastMapping = null;
  aSourceMapConsumer.eachMapping(function(mapping) {
    if (lastMapping !== null) {
      if (lastGeneratedLine < mapping.generatedLine) {
        addMappingWithCode(lastMapping, shiftNextLine());
        lastGeneratedLine++;
        lastGeneratedColumn = 0;
      } else {
        var nextLine = remainingLines[remainingLinesIndex] || "";
        var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
        addMappingWithCode(lastMapping, code);
        lastMapping = mapping;
        return;
      }
    }
    while (lastGeneratedLine < mapping.generatedLine) {
      node2.add(shiftNextLine());
      lastGeneratedLine++;
    }
    if (lastGeneratedColumn < mapping.generatedColumn) {
      var nextLine = remainingLines[remainingLinesIndex] || "";
      node2.add(nextLine.substr(0, mapping.generatedColumn));
      remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
      lastGeneratedColumn = mapping.generatedColumn;
    }
    lastMapping = mapping;
  }, this);
  if (remainingLinesIndex < remainingLines.length) {
    if (lastMapping) {
      addMappingWithCode(lastMapping, shiftNextLine());
    }
    node2.add(remainingLines.splice(remainingLinesIndex).join(""));
  }
  aSourceMapConsumer.sources.forEach(function(sourceFile) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    if (content != null) {
      if (aRelativePath != null) {
        sourceFile = util.join(aRelativePath, sourceFile);
      }
      node2.setSourceContent(sourceFile, content);
    }
  });
  return node2;
  function addMappingWithCode(mapping, code) {
    if (mapping === null || mapping.source === void 0) {
      node2.add(code);
    } else {
      var source2 = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
      node2.add(new SourceNode(
        mapping.originalLine,
        mapping.originalColumn,
        source2,
        code,
        mapping.name
      ));
    }
  }
};
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function(chunk) {
      this.add(chunk);
    }, this);
  } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  } else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length - 1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  } else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    } else {
      if (chunk !== "") {
        aFn(chunk, {
          source: this.source,
          line: this.line,
          column: this.column,
          name: this.name
        });
      }
    }
  }
};
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len - 1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  } else if (typeof lastChild === "string") {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  } else {
    this.children.push("".replace(aPattern, aReplacement));
  }
  return this;
};
SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
  this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
};
SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
  for (var i = 0, len = this.children.length; i < len; i++) {
    if (this.children[i][isSourceNode]) {
      this.children[i].walkSourceContents(aFn);
    }
  }
  var sources = Object.keys(this.sourceContents);
  for (var i = 0, len = sources.length; i < len; i++) {
    aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
  }
};
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function(chunk) {
    str += chunk;
  });
  return str;
};
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated2 = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function(chunk, original) {
    generated2.code += chunk;
    if (original.source !== null && original.line !== null && original.column !== null) {
      if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated2.line,
            column: generated2.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated2.line,
          column: generated2.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated2.line++;
        generated2.column = 0;
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated2.line,
              column: generated2.column
            },
            name: original.name
          });
        }
      } else {
        generated2.column++;
      }
    }
  });
  this.walkSourceContents(function(sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });
  return { code: generated2.code, map };
};
sourceNode.SourceNode = SourceNode;
sourceMap.SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
sourceMap.SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;
sourceMap.SourceNode = sourceNode.SourceNode;
var toString = Object.prototype.toString;
var isModern = typeof Buffer !== "undefined" && typeof Buffer.alloc === "function" && typeof Buffer.allocUnsafe === "function" && typeof Buffer.from === "function";
function isArrayBuffer(input2) {
  return toString.call(input2).slice(8, -1) === "ArrayBuffer";
}
function fromArrayBuffer(obj, byteOffset, length) {
  byteOffset >>>= 0;
  var maxLength = obj.byteLength - byteOffset;
  if (maxLength < 0) {
    throw new RangeError("'offset' is out of bounds");
  }
  if (length === void 0) {
    length = maxLength;
  } else {
    length >>>= 0;
    if (length > maxLength) {
      throw new RangeError("'length' is out of bounds");
    }
  }
  return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)));
}
function fromString(string2, encoding) {
  if (typeof encoding !== "string" || encoding === "") {
    encoding = "utf8";
  }
  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  return isModern ? Buffer.from(string2, encoding) : new Buffer(string2, encoding);
}
function bufferFrom(value2, encodingOrOffset, length) {
  if (typeof value2 === "number") {
    throw new TypeError('"value" argument must not be a number');
  }
  if (isArrayBuffer(value2)) {
    return fromArrayBuffer(value2, encodingOrOffset, length);
  }
  if (typeof value2 === "string") {
    return fromString(value2, encodingOrOffset);
  }
  return isModern ? Buffer.from(value2) : new Buffer(value2);
}
var bufferFrom_1 = bufferFrom;
sourceMapSupport$2.exports;
(function(module, exports) {
  var SourceMapConsumer2 = sourceMap.SourceMapConsumer;
  var path2 = pathExports;
  var fs2;
  try {
    fs2 = require$$2$1;
    if (!fs2.existsSync || !fs2.readFileSync) {
      fs2 = null;
    }
  } catch (err) {
  }
  var bufferFrom2 = bufferFrom_1;
  function dynamicRequire(mod, request) {
    return mod.require(request);
  }
  var errorFormatterInstalled = false;
  var uncaughtShimInstalled = false;
  var emptyCacheBetweenOperations = false;
  var environment2 = "auto";
  var fileContentsCache = {};
  var sourceMapCache = {};
  var reSourceMap = /^data:application\/json[^,]+base64,/;
  var retrieveFileHandlers = [];
  var retrieveMapHandlers = [];
  function isInBrowser() {
    if (environment2 === "browser")
      return true;
    if (environment2 === "node")
      return false;
    return typeof window !== "undefined" && typeof XMLHttpRequest === "function" && !(window.require && window.module && window.process && window.process.type === "renderer");
  }
  function hasGlobalProcessEventEmitter() {
    return typeof process === "object" && process !== null && typeof process.on === "function";
  }
  function globalProcessVersion() {
    if (typeof process === "object" && process !== null) {
      return process.version;
    } else {
      return "";
    }
  }
  function globalProcessStderr() {
    if (typeof process === "object" && process !== null) {
      return process.stderr;
    }
  }
  function globalProcessExit(code) {
    if (typeof process === "object" && process !== null && typeof process.exit === "function") {
      return process.exit(code);
    }
  }
  function handlerExec(list2) {
    return function(arg) {
      for (var i = 0; i < list2.length; i++) {
        var ret = list2[i](arg);
        if (ret) {
          return ret;
        }
      }
      return null;
    };
  }
  var retrieveFile = handlerExec(retrieveFileHandlers);
  retrieveFileHandlers.push(function(path3) {
    path3 = path3.trim();
    if (/^file:/.test(path3)) {
      path3 = path3.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
        return drive ? "" : (
          // file:///C:/dir/file -> C:/dir/file
          "/"
        );
      });
    }
    if (path3 in fileContentsCache) {
      return fileContentsCache[path3];
    }
    var contents = "";
    try {
      if (!fs2) {
        var xhr = new XMLHttpRequest();
        xhr.open(
          "GET",
          path3,
          /** async */
          false
        );
        xhr.send(null);
        if (xhr.readyState === 4 && xhr.status === 200) {
          contents = xhr.responseText;
        }
      } else if (fs2.existsSync(path3)) {
        contents = fs2.readFileSync(path3, "utf8");
      }
    } catch (er) {
    }
    return fileContentsCache[path3] = contents;
  });
  function supportRelativeURL(file2, url2) {
    if (!file2) return url2;
    var dir = path2.dirname(file2);
    var match = /^\w+:\/\/[^\/]*/.exec(dir);
    var protocol = match ? match[0] : "";
    var startPath = dir.slice(protocol.length);
    if (protocol && /^\/\w\:/.test(startPath)) {
      protocol += "/";
      return protocol + path2.resolve(dir.slice(protocol.length), url2).replace(/\\/g, "/");
    }
    return protocol + path2.resolve(dir.slice(protocol.length), url2);
  }
  function retrieveSourceMapURL(source2) {
    var fileData;
    if (isInBrowser()) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", source2, false);
        xhr.send(null);
        fileData = xhr.readyState === 4 ? xhr.responseText : null;
        var sourceMapHeader = xhr.getResponseHeader("SourceMap") || xhr.getResponseHeader("X-SourceMap");
        if (sourceMapHeader) {
          return sourceMapHeader;
        }
      } catch (e) {
      }
    }
    fileData = retrieveFile(source2);
    var re2 = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
    var lastMatch, match;
    while (match = re2.exec(fileData)) lastMatch = match;
    if (!lastMatch) return null;
    return lastMatch[1];
  }
  var retrieveSourceMap = handlerExec(retrieveMapHandlers);
  retrieveMapHandlers.push(function(source2) {
    var sourceMappingURL = retrieveSourceMapURL(source2);
    if (!sourceMappingURL) return null;
    var sourceMapData;
    if (reSourceMap.test(sourceMappingURL)) {
      var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
      sourceMapData = bufferFrom2(rawData, "base64").toString();
      sourceMappingURL = source2;
    } else {
      sourceMappingURL = supportRelativeURL(source2, sourceMappingURL);
      sourceMapData = retrieveFile(sourceMappingURL);
    }
    if (!sourceMapData) {
      return null;
    }
    return {
      url: sourceMappingURL,
      map: sourceMapData
    };
  });
  function mapSourcePosition(position) {
    var sourceMap2 = sourceMapCache[position.source];
    if (!sourceMap2) {
      var urlAndMap = retrieveSourceMap(position.source);
      if (urlAndMap) {
        sourceMap2 = sourceMapCache[position.source] = {
          url: urlAndMap.url,
          map: new SourceMapConsumer2(urlAndMap.map)
        };
        if (sourceMap2.map.sourcesContent) {
          sourceMap2.map.sources.forEach(function(source2, i) {
            var contents = sourceMap2.map.sourcesContent[i];
            if (contents) {
              var url2 = supportRelativeURL(sourceMap2.url, source2);
              fileContentsCache[url2] = contents;
            }
          });
        }
      } else {
        sourceMap2 = sourceMapCache[position.source] = {
          url: null,
          map: null
        };
      }
    }
    if (sourceMap2 && sourceMap2.map && typeof sourceMap2.map.originalPositionFor === "function") {
      var originalPosition = sourceMap2.map.originalPositionFor(position);
      if (originalPosition.source !== null) {
        originalPosition.source = supportRelativeURL(
          sourceMap2.url,
          originalPosition.source
        );
        return originalPosition;
      }
    }
    return position;
  }
  function mapEvalOrigin(origin) {
    var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
    if (match) {
      var position = mapSourcePosition({
        source: match[2],
        line: +match[3],
        column: match[4] - 1
      });
      return "eval at " + match[1] + " (" + position.source + ":" + position.line + ":" + (position.column + 1) + ")";
    }
    match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
    if (match) {
      return "eval at " + match[1] + " (" + mapEvalOrigin(match[2]) + ")";
    }
    return origin;
  }
  function CallSiteToString() {
    var fileName;
    var fileLocation = "";
    if (this.isNative()) {
      fileLocation = "native";
    } else {
      fileName = this.getScriptNameOrSourceURL();
      if (!fileName && this.isEval()) {
        fileLocation = this.getEvalOrigin();
        fileLocation += ", ";
      }
      if (fileName) {
        fileLocation += fileName;
      } else {
        fileLocation += "<anonymous>";
      }
      var lineNumber = this.getLineNumber();
      if (lineNumber != null) {
        fileLocation += ":" + lineNumber;
        var columnNumber = this.getColumnNumber();
        if (columnNumber) {
          fileLocation += ":" + columnNumber;
        }
      }
    }
    var line2 = "";
    var functionName = this.getFunctionName();
    var addSuffix = true;
    var isConstructor = this.isConstructor();
    var isMethodCall = !(this.isToplevel() || isConstructor);
    if (isMethodCall) {
      var typeName = this.getTypeName();
      if (typeName === "[object Object]") {
        typeName = "null";
      }
      var methodName = this.getMethodName();
      if (functionName) {
        if (typeName && functionName.indexOf(typeName) != 0) {
          line2 += typeName + ".";
        }
        line2 += functionName;
        if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
          line2 += " [as " + methodName + "]";
        }
      } else {
        line2 += typeName + "." + (methodName || "<anonymous>");
      }
    } else if (isConstructor) {
      line2 += "new " + (functionName || "<anonymous>");
    } else if (functionName) {
      line2 += functionName;
    } else {
      line2 += fileLocation;
      addSuffix = false;
    }
    if (addSuffix) {
      line2 += " (" + fileLocation + ")";
    }
    return line2;
  }
  function cloneCallSite(frame) {
    var object = {};
    Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
      object[name] = /^(?:is|get)/.test(name) ? function() {
        return frame[name].call(frame);
      } : frame[name];
    });
    object.toString = CallSiteToString;
    return object;
  }
  function wrapCallSite(frame, state2) {
    if (state2 === void 0) {
      state2 = { nextPosition: null, curPosition: null };
    }
    if (frame.isNative()) {
      state2.curPosition = null;
      return frame;
    }
    var source2 = frame.getFileName() || frame.getScriptNameOrSourceURL();
    if (source2) {
      var line2 = frame.getLineNumber();
      var column2 = frame.getColumnNumber() - 1;
      var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
      var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;
      if (line2 === 1 && column2 > headerLength && !isInBrowser() && !frame.isEval()) {
        column2 -= headerLength;
      }
      var position = mapSourcePosition({
        source: source2,
        line: line2,
        column: column2
      });
      state2.curPosition = position;
      frame = cloneCallSite(frame);
      var originalFunctionName = frame.getFunctionName;
      frame.getFunctionName = function() {
        if (state2.nextPosition == null) {
          return originalFunctionName();
        }
        return state2.nextPosition.name || originalFunctionName();
      };
      frame.getFileName = function() {
        return position.source;
      };
      frame.getLineNumber = function() {
        return position.line;
      };
      frame.getColumnNumber = function() {
        return position.column + 1;
      };
      frame.getScriptNameOrSourceURL = function() {
        return position.source;
      };
      return frame;
    }
    var origin = frame.isEval() && frame.getEvalOrigin();
    if (origin) {
      origin = mapEvalOrigin(origin);
      frame = cloneCallSite(frame);
      frame.getEvalOrigin = function() {
        return origin;
      };
      return frame;
    }
    return frame;
  }
  function prepareStackTrace(error2, stack2) {
    if (emptyCacheBetweenOperations) {
      fileContentsCache = {};
      sourceMapCache = {};
    }
    var name = error2.name || "Error";
    var message = error2.message || "";
    var errorString = name + ": " + message;
    var state2 = { nextPosition: null, curPosition: null };
    var processedStack = [];
    for (var i = stack2.length - 1; i >= 0; i--) {
      processedStack.push("\n    at " + wrapCallSite(stack2[i], state2));
      state2.nextPosition = state2.curPosition;
    }
    state2.curPosition = state2.nextPosition = null;
    return errorString + processedStack.reverse().join("");
  }
  function getErrorSource(error2) {
    var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error2.stack);
    if (match) {
      var source2 = match[1];
      var line2 = +match[2];
      var column2 = +match[3];
      var contents = fileContentsCache[source2];
      if (!contents && fs2 && fs2.existsSync(source2)) {
        try {
          contents = fs2.readFileSync(source2, "utf8");
        } catch (er) {
          contents = "";
        }
      }
      if (contents) {
        var code = contents.split(/(?:\r\n|\r|\n)/)[line2 - 1];
        if (code) {
          return source2 + ":" + line2 + "\n" + code + "\n" + new Array(column2).join(" ") + "^";
        }
      }
    }
    return null;
  }
  function printErrorAndExit(error2) {
    var source2 = getErrorSource(error2);
    var stderr = globalProcessStderr();
    if (stderr && stderr._handle && stderr._handle.setBlocking) {
      stderr._handle.setBlocking(true);
    }
    if (source2) {
      console.error();
      console.error(source2);
    }
    console.error(error2.stack);
    globalProcessExit(1);
  }
  function shimEmitUncaughtException() {
    var origEmit = process.emit;
    process.emit = function(type) {
      if (type === "uncaughtException") {
        var hasStack = arguments[1] && arguments[1].stack;
        var hasListeners = this.listeners(type).length > 0;
        if (hasStack && !hasListeners) {
          return printErrorAndExit(arguments[1]);
        }
      }
      return origEmit.apply(this, arguments);
    };
  }
  var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
  var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);
  exports.wrapCallSite = wrapCallSite;
  exports.getErrorSource = getErrorSource;
  exports.mapSourcePosition = mapSourcePosition;
  exports.retrieveSourceMap = retrieveSourceMap;
  exports.install = function(options2) {
    options2 = options2 || {};
    if (options2.environment) {
      environment2 = options2.environment;
      if (["node", "browser", "auto"].indexOf(environment2) === -1) {
        throw new Error("environment " + environment2 + " was unknown. Available options are {auto, browser, node}");
      }
    }
    if (options2.retrieveFile) {
      if (options2.overrideRetrieveFile) {
        retrieveFileHandlers.length = 0;
      }
      retrieveFileHandlers.unshift(options2.retrieveFile);
    }
    if (options2.retrieveSourceMap) {
      if (options2.overrideRetrieveSourceMap) {
        retrieveMapHandlers.length = 0;
      }
      retrieveMapHandlers.unshift(options2.retrieveSourceMap);
    }
    if (options2.hookRequire && !isInBrowser()) {
      var Module2 = dynamicRequire(module, "module");
      var $compile = Module2.prototype._compile;
      if (!$compile.__sourceMapSupport) {
        Module2.prototype._compile = function(content, filename) {
          fileContentsCache[filename] = content;
          sourceMapCache[filename] = void 0;
          return $compile.call(this, content, filename);
        };
        Module2.prototype._compile.__sourceMapSupport = true;
      }
    }
    if (!emptyCacheBetweenOperations) {
      emptyCacheBetweenOperations = "emptyCacheBetweenOperations" in options2 ? options2.emptyCacheBetweenOperations : false;
    }
    if (!errorFormatterInstalled) {
      errorFormatterInstalled = true;
      Error.prepareStackTrace = prepareStackTrace;
    }
    if (!uncaughtShimInstalled) {
      var installHandler = "handleUncaughtExceptions" in options2 ? options2.handleUncaughtExceptions : true;
      try {
        var worker_threads = dynamicRequire(module, "worker_threads");
        if (worker_threads.isMainThread === false) {
          installHandler = false;
        }
      } catch (e) {
      }
      if (installHandler && hasGlobalProcessEventEmitter()) {
        uncaughtShimInstalled = true;
        shimEmitUncaughtException();
      }
    }
  };
  exports.resetRetrieveHandlers = function() {
    retrieveFileHandlers.length = 0;
    retrieveMapHandlers.length = 0;
    retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
    retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);
    retrieveSourceMap = handlerExec(retrieveMapHandlers);
    retrieveFile = handlerExec(retrieveFileHandlers);
  };
})(sourceMapSupport$2, sourceMapSupport$2.exports);
var sourceMapSupportExports = sourceMapSupport$2.exports;
const sourceMapSupportLibrary = /* @__PURE__ */ getDefaultExportFromCjs(sourceMapSupportExports);
const https = httpsBrowserifyExports;
var stoppable$1 = (server, grace) => {
  grace = typeof grace === "undefined" ? Infinity : grace;
  const reqsPerSocket = /* @__PURE__ */ new Map();
  let stopped = false;
  let gracefully = true;
  if (server instanceof https.Server) {
    server.on("secureConnection", onConnection);
  } else {
    server.on("connection", onConnection);
  }
  server.on("request", onRequest);
  server.stop = stop;
  server._pendingSockets = reqsPerSocket;
  return server;
  function onConnection(socket) {
    reqsPerSocket.set(socket, 0);
    socket.once("close", () => reqsPerSocket.delete(socket));
  }
  function onRequest(req, res) {
    reqsPerSocket.set(req.socket, reqsPerSocket.get(req.socket) + 1);
    res.once("finish", () => {
      const pending = reqsPerSocket.get(req.socket) - 1;
      reqsPerSocket.set(req.socket, pending);
      if (stopped && pending === 0) {
        req.socket.end();
      }
    });
  }
  function stop(callback) {
    setImmediate(() => {
      stopped = true;
      if (grace < Infinity) {
        setTimeout(destroyAll, grace).unref();
      }
      server.close((e) => {
        if (callback) {
          callback(e, gracefully);
        }
      });
      reqsPerSocket.forEach(endIfIdle);
    });
  }
  function endIfIdle(requests, socket) {
    if (requests === 0) socket.end();
  }
  function destroyAll() {
    gracefully = false;
    reqsPerSocket.forEach((reqs, socket) => socket.end());
    setImmediate(() => {
      reqsPerSocket.forEach((reqs, socket) => socket.destroy());
    });
  }
};
const stoppableLibrary = /* @__PURE__ */ getDefaultExportFromCjs(stoppable$1);
var utils$1 = {};
var ansiColors = { exports: {} };
var symbols = { exports: {} };
var hasRequiredSymbols$1;
function requireSymbols$1() {
  if (hasRequiredSymbols$1) return symbols.exports;
  hasRequiredSymbols$1 = 1;
  (function(module) {
    const isHyper = typeof process !== "undefined" && process.env.TERM_PROGRAM === "Hyper";
    const isWindows = typeof process !== "undefined" && process.platform === "win32";
    const isLinux = typeof process !== "undefined" && process.platform === "linux";
    const common = {
      ballotDisabled: "☒",
      ballotOff: "☐",
      ballotOn: "☑",
      bullet: "•",
      bulletWhite: "◦",
      fullBlock: "█",
      heart: "❤",
      identicalTo: "≡",
      line: "─",
      mark: "※",
      middot: "·",
      minus: "－",
      multiplication: "×",
      obelus: "÷",
      pencilDownRight: "✎",
      pencilRight: "✏",
      pencilUpRight: "✐",
      percent: "%",
      pilcrow2: "❡",
      pilcrow: "¶",
      plusMinus: "±",
      question: "?",
      section: "§",
      starsOff: "☆",
      starsOn: "★",
      upDownArrow: "↕"
    };
    const windows = Object.assign({}, common, {
      check: "√",
      cross: "×",
      ellipsisLarge: "...",
      ellipsis: "...",
      info: "i",
      questionSmall: "?",
      pointer: ">",
      pointerSmall: "»",
      radioOff: "( )",
      radioOn: "(*)",
      warning: "‼"
    });
    const other = Object.assign({}, common, {
      ballotCross: "✘",
      check: "✔",
      cross: "✖",
      ellipsisLarge: "⋯",
      ellipsis: "…",
      info: "ℹ",
      questionFull: "？",
      questionSmall: "﹖",
      pointer: isLinux ? "▸" : "❯",
      pointerSmall: isLinux ? "‣" : "›",
      radioOff: "◯",
      radioOn: "◉",
      warning: "⚠"
    });
    module.exports = isWindows && !isHyper ? windows : other;
    Reflect.defineProperty(module.exports, "common", { enumerable: false, value: common });
    Reflect.defineProperty(module.exports, "windows", { enumerable: false, value: windows });
    Reflect.defineProperty(module.exports, "other", { enumerable: false, value: other });
  })(symbols);
  return symbols.exports;
}
const isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
const ANSI_REGEX = /[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g;
const hasColor = () => {
  if (typeof process !== "undefined") {
    return process.env.FORCE_COLOR !== "0";
  }
  return false;
};
const create = () => {
  const colors2 = {
    enabled: hasColor(),
    visible: true,
    styles: {},
    keys: {}
  };
  const ansi2 = (style2) => {
    let open = style2.open = `\x1B[${style2.codes[0]}m`;
    let close = style2.close = `\x1B[${style2.codes[1]}m`;
    let regex = style2.regex = new RegExp(`\\u001b\\[${style2.codes[1]}m`, "g");
    style2.wrap = (input2, newline) => {
      if (input2.includes(close)) input2 = input2.replace(regex, close + open);
      let output = open + input2 + close;
      return newline ? output.replace(/\r*\n/g, `${close}$&${open}`) : output;
    };
    return style2;
  };
  const wrap = (style2, input2, newline) => {
    return typeof style2 === "function" ? style2(input2) : style2.wrap(input2, newline);
  };
  const style = (input2, stack2) => {
    if (input2 === "" || input2 == null) return "";
    if (colors2.enabled === false) return input2;
    if (colors2.visible === false) return "";
    let str = "" + input2;
    let nl = str.includes("\n");
    let n = stack2.length;
    if (n > 0 && stack2.includes("unstyle")) {
      stack2 = [.../* @__PURE__ */ new Set(["unstyle", ...stack2])].reverse();
    }
    while (n-- > 0) str = wrap(colors2.styles[stack2[n]], str, nl);
    return str;
  };
  const define = (name, codes, type) => {
    colors2.styles[name] = ansi2({ name, codes });
    let keys2 = colors2.keys[type] || (colors2.keys[type] = []);
    keys2.push(name);
    Reflect.defineProperty(colors2, name, {
      configurable: true,
      enumerable: true,
      set(value2) {
        colors2.alias(name, value2);
      },
      get() {
        let color = (input2) => style(input2, color.stack);
        Reflect.setPrototypeOf(color, colors2);
        color.stack = this.stack ? this.stack.concat(name) : [name];
        return color;
      }
    });
  };
  define("reset", [0, 0], "modifier");
  define("bold", [1, 22], "modifier");
  define("dim", [2, 22], "modifier");
  define("italic", [3, 23], "modifier");
  define("underline", [4, 24], "modifier");
  define("inverse", [7, 27], "modifier");
  define("hidden", [8, 28], "modifier");
  define("strikethrough", [9, 29], "modifier");
  define("black", [30, 39], "color");
  define("red", [31, 39], "color");
  define("green", [32, 39], "color");
  define("yellow", [33, 39], "color");
  define("blue", [34, 39], "color");
  define("magenta", [35, 39], "color");
  define("cyan", [36, 39], "color");
  define("white", [37, 39], "color");
  define("gray", [90, 39], "color");
  define("grey", [90, 39], "color");
  define("bgBlack", [40, 49], "bg");
  define("bgRed", [41, 49], "bg");
  define("bgGreen", [42, 49], "bg");
  define("bgYellow", [43, 49], "bg");
  define("bgBlue", [44, 49], "bg");
  define("bgMagenta", [45, 49], "bg");
  define("bgCyan", [46, 49], "bg");
  define("bgWhite", [47, 49], "bg");
  define("blackBright", [90, 39], "bright");
  define("redBright", [91, 39], "bright");
  define("greenBright", [92, 39], "bright");
  define("yellowBright", [93, 39], "bright");
  define("blueBright", [94, 39], "bright");
  define("magentaBright", [95, 39], "bright");
  define("cyanBright", [96, 39], "bright");
  define("whiteBright", [97, 39], "bright");
  define("bgBlackBright", [100, 49], "bgBright");
  define("bgRedBright", [101, 49], "bgBright");
  define("bgGreenBright", [102, 49], "bgBright");
  define("bgYellowBright", [103, 49], "bgBright");
  define("bgBlueBright", [104, 49], "bgBright");
  define("bgMagentaBright", [105, 49], "bgBright");
  define("bgCyanBright", [106, 49], "bgBright");
  define("bgWhiteBright", [107, 49], "bgBright");
  colors2.ansiRegex = ANSI_REGEX;
  colors2.hasColor = colors2.hasAnsi = (str) => {
    colors2.ansiRegex.lastIndex = 0;
    return typeof str === "string" && str !== "" && colors2.ansiRegex.test(str);
  };
  colors2.alias = (name, color) => {
    let fn2 = typeof color === "string" ? colors2[color] : color;
    if (typeof fn2 !== "function") {
      throw new TypeError("Expected alias to be the name of an existing color (string) or a function");
    }
    if (!fn2.stack) {
      Reflect.defineProperty(fn2, "name", { value: name });
      colors2.styles[name] = fn2;
      fn2.stack = [name];
    }
    Reflect.defineProperty(colors2, name, {
      configurable: true,
      enumerable: true,
      set(value2) {
        colors2.alias(name, value2);
      },
      get() {
        let color2 = (input2) => style(input2, color2.stack);
        Reflect.setPrototypeOf(color2, colors2);
        color2.stack = this.stack ? this.stack.concat(fn2.stack) : fn2.stack;
        return color2;
      }
    });
  };
  colors2.theme = (custom) => {
    if (!isObject(custom)) throw new TypeError("Expected theme to be an object");
    for (let name of Object.keys(custom)) {
      colors2.alias(name, custom[name]);
    }
    return colors2;
  };
  colors2.alias("unstyle", (str) => {
    if (typeof str === "string" && str !== "") {
      colors2.ansiRegex.lastIndex = 0;
      return str.replace(colors2.ansiRegex, "");
    }
    return "";
  });
  colors2.alias("noop", (str) => str);
  colors2.none = colors2.clear = colors2.noop;
  colors2.stripColor = colors2.unstyle;
  colors2.symbols = requireSymbols$1();
  colors2.define = define;
  return colors2;
};
ansiColors.exports = create();
ansiColors.exports.create = create;
var ansiColorsExports = ansiColors.exports;
(function(exports) {
  const toString2 = Object.prototype.toString;
  const colors2 = ansiColorsExports;
  let called = false;
  let fns = [];
  const complements = {
    "yellow": "blue",
    "cyan": "red",
    "green": "magenta",
    "black": "white",
    "blue": "yellow",
    "red": "cyan",
    "magenta": "green",
    "white": "black"
  };
  exports.longest = (arr, prop) => {
    return arr.reduce((a, v) => Math.max(a, prop ? v[prop].length : v.length), 0);
  };
  exports.hasColor = (str) => !!str && colors2.hasColor(str);
  const isObject2 = exports.isObject = (val) => {
    return val !== null && typeof val === "object" && !Array.isArray(val);
  };
  exports.nativeType = (val) => {
    return toString2.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
  };
  exports.isAsyncFn = (val) => {
    return exports.nativeType(val) === "asyncfunction";
  };
  exports.isPrimitive = (val) => {
    return val != null && typeof val !== "object" && typeof val !== "function";
  };
  exports.resolve = (context2, value2, ...rest) => {
    if (typeof value2 === "function") {
      return value2.call(context2, ...rest);
    }
    return value2;
  };
  exports.scrollDown = (choices = []) => [...choices.slice(1), choices[0]];
  exports.scrollUp = (choices = []) => [choices.pop(), ...choices];
  exports.reorder = (arr = []) => {
    let res = arr.slice();
    res.sort((a, b) => {
      if (a.index > b.index) return 1;
      if (a.index < b.index) return -1;
      return 0;
    });
    return res;
  };
  exports.swap = (arr, index2, pos2) => {
    let len = arr.length;
    let idx = pos2 === len ? 0 : pos2 < 0 ? len - 1 : pos2;
    let choice = arr[index2];
    arr[index2] = arr[idx];
    arr[idx] = choice;
  };
  exports.width = (stream, fallback = 80) => {
    let columns = stream && stream.columns ? stream.columns : fallback;
    if (stream && typeof stream.getWindowSize === "function") {
      columns = stream.getWindowSize()[0];
    }
    if (process.platform === "win32") {
      return columns - 1;
    }
    return columns;
  };
  exports.height = (stream, fallback = 20) => {
    let rows = stream && stream.rows ? stream.rows : fallback;
    if (stream && typeof stream.getWindowSize === "function") {
      rows = stream.getWindowSize()[1];
    }
    return rows;
  };
  exports.wordWrap = (str, options2 = {}) => {
    if (!str) return str;
    if (typeof options2 === "number") {
      options2 = { width: options2 };
    }
    let { indent = "", newline = "\n" + indent, width = 80 } = options2;
    let spaces = (newline + indent).match(/[^\S\n]/g) || [];
    width -= spaces.length;
    let source2 = `.{1,${width}}([\\s\\u200B]+|$)|[^\\s\\u200B]+?([\\s\\u200B]+|$)`;
    let output = str.trim();
    let regex = new RegExp(source2, "g");
    let lines = output.match(regex) || [];
    lines = lines.map((line2) => line2.replace(/\n$/, ""));
    if (options2.padEnd) lines = lines.map((line2) => line2.padEnd(width, " "));
    if (options2.padStart) lines = lines.map((line2) => line2.padStart(width, " "));
    return indent + lines.join(newline);
  };
  exports.unmute = (color) => {
    let name = color.stack.find((n) => colors2.keys.color.includes(n));
    if (name) {
      return colors2[name];
    }
    let bg = color.stack.find((n) => n.slice(2) === "bg");
    if (bg) {
      return colors2[name.slice(2)];
    }
    return (str) => str;
  };
  exports.pascal = (str) => str ? str[0].toUpperCase() + str.slice(1) : "";
  exports.inverse = (color) => {
    if (!color || !color.stack) return color;
    let name = color.stack.find((n) => colors2.keys.color.includes(n));
    if (name) {
      let col = colors2["bg" + exports.pascal(name)];
      return col ? col.black : color;
    }
    let bg = color.stack.find((n) => n.slice(0, 2) === "bg");
    if (bg) {
      return colors2[bg.slice(2).toLowerCase()] || color;
    }
    return colors2.none;
  };
  exports.complement = (color) => {
    if (!color || !color.stack) return color;
    let name = color.stack.find((n) => colors2.keys.color.includes(n));
    let bg = color.stack.find((n) => n.slice(0, 2) === "bg");
    if (name && !bg) {
      return colors2[complements[name] || name];
    }
    if (bg) {
      let lower = bg.slice(2).toLowerCase();
      let comp = complements[lower];
      if (!comp) return color;
      return colors2["bg" + exports.pascal(comp)] || color;
    }
    return colors2.none;
  };
  exports.meridiem = (date) => {
    let hours = date.getHours();
    let minutes = date.getMinutes();
    let ampm = hours >= 12 ? "pm" : "am";
    hours = hours % 12;
    let hrs = hours === 0 ? 12 : hours;
    let min = minutes < 10 ? "0" + minutes : minutes;
    return hrs + ":" + min + " " + ampm;
  };
  exports.set = (obj = {}, prop = "", val) => {
    return prop.split(".").reduce((acc, k, i, arr) => {
      let value2 = arr.length - 1 > i ? acc[k] || {} : val;
      if (!exports.isObject(value2) && i < arr.length - 1) value2 = {};
      return acc[k] = value2;
    }, obj);
  };
  exports.get = (obj = {}, prop = "", fallback) => {
    let value2 = obj[prop] == null ? prop.split(".").reduce((acc, k) => acc && acc[k], obj) : obj[prop];
    return value2 == null ? fallback : value2;
  };
  exports.mixin = (target, b) => {
    if (!isObject2(target)) return b;
    if (!isObject2(b)) return target;
    for (let key2 of Object.keys(b)) {
      let desc = Object.getOwnPropertyDescriptor(b, key2);
      if (desc.hasOwnProperty("value")) {
        if (target.hasOwnProperty(key2) && isObject2(desc.value)) {
          let existing = Object.getOwnPropertyDescriptor(target, key2);
          if (isObject2(existing.value)) {
            target[key2] = exports.merge({}, target[key2], b[key2]);
          } else {
            Reflect.defineProperty(target, key2, desc);
          }
        } else {
          Reflect.defineProperty(target, key2, desc);
        }
      } else {
        Reflect.defineProperty(target, key2, desc);
      }
    }
    return target;
  };
  exports.merge = (...args) => {
    let target = {};
    for (let ele of args) exports.mixin(target, ele);
    return target;
  };
  exports.mixinEmitter = (obj, emitter) => {
    let proto2 = emitter.constructor.prototype;
    for (let key2 of Object.keys(proto2)) {
      let val = proto2[key2];
      if (typeof val === "function") {
        exports.define(obj, key2, val.bind(emitter));
      } else {
        exports.define(obj, key2, val);
      }
    }
  };
  exports.onExit = (callback) => {
    const onExit = (quit, code) => {
      if (called) return;
      called = true;
      fns.forEach((fn2) => fn2());
      if (quit === true) {
        process.exit(128 + code);
      }
    };
    if (fns.length === 0) {
      process.once("SIGTERM", onExit.bind(null, true, 15));
      process.once("SIGINT", onExit.bind(null, true, 2));
      process.once("exit", onExit);
    }
    fns.push(callback);
  };
  exports.define = (obj, key2, value2) => {
    Reflect.defineProperty(obj, key2, { value: value2 });
  };
  exports.defineExport = (obj, key2, fn2) => {
    let custom;
    Reflect.defineProperty(obj, key2, {
      enumerable: true,
      configurable: true,
      set(val) {
        custom = val;
      },
      get() {
        return custom ? custom() : fn2();
      }
    });
  };
})(utils$1);
const require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(readline);
var combos = {};
var hasRequiredCombos;
function requireCombos() {
  if (hasRequiredCombos) return combos;
  hasRequiredCombos = 1;
  combos.ctrl = {
    a: "first",
    b: "backward",
    c: "cancel",
    d: "deleteForward",
    e: "last",
    f: "forward",
    g: "reset",
    i: "tab",
    k: "cutForward",
    l: "reset",
    n: "newItem",
    m: "cancel",
    j: "submit",
    p: "search",
    r: "remove",
    s: "save",
    u: "undo",
    w: "cutLeft",
    x: "toggleCursor",
    v: "paste"
  };
  combos.shift = {
    up: "shiftUp",
    down: "shiftDown",
    left: "shiftLeft",
    right: "shiftRight",
    tab: "prev"
  };
  combos.fn = {
    up: "pageUp",
    down: "pageDown",
    left: "pageLeft",
    right: "pageRight",
    delete: "deleteForward"
  };
  combos.option = {
    b: "backward",
    f: "forward",
    d: "cutRight",
    left: "cutLeft",
    up: "altUp",
    down: "altDown"
  };
  combos.keys = {
    pageup: "pageUp",
    // <fn>+<up> (mac), <Page Up> (windows)
    pagedown: "pageDown",
    // <fn>+<down> (mac), <Page Down> (windows)
    home: "home",
    // <fn>+<left> (mac), <home> (windows)
    end: "end",
    // <fn>+<right> (mac), <end> (windows)
    cancel: "cancel",
    delete: "deleteForward",
    backspace: "delete",
    down: "down",
    enter: "submit",
    escape: "cancel",
    left: "left",
    space: "space",
    number: "number",
    return: "submit",
    right: "right",
    tab: "next",
    up: "up"
  };
  return combos;
}
var keypress_1;
var hasRequiredKeypress;
function requireKeypress() {
  if (hasRequiredKeypress) return keypress_1;
  hasRequiredKeypress = 1;
  const readline2 = require$$0$1;
  const combos2 = requireCombos();
  const metaKeyCodeRe = /^(?:\x1b)([a-zA-Z0-9])$/;
  const fnKeyRe = /^(?:\x1b+)(O|N|\[|\[\[)(?:(\d+)(?:;(\d+))?([~^$])|(?:1;)?(\d+)?([a-zA-Z]))/;
  const keyName = {
    /* xterm/gnome ESC O letter */
    "OP": "f1",
    "OQ": "f2",
    "OR": "f3",
    "OS": "f4",
    /* xterm/rxvt ESC [ number ~ */
    "[11~": "f1",
    "[12~": "f2",
    "[13~": "f3",
    "[14~": "f4",
    /* from Cygwin and used in libuv */
    "[[A": "f1",
    "[[B": "f2",
    "[[C": "f3",
    "[[D": "f4",
    "[[E": "f5",
    /* common */
    "[15~": "f5",
    "[17~": "f6",
    "[18~": "f7",
    "[19~": "f8",
    "[20~": "f9",
    "[21~": "f10",
    "[23~": "f11",
    "[24~": "f12",
    /* xterm ESC [ letter */
    "[A": "up",
    "[B": "down",
    "[C": "right",
    "[D": "left",
    "[E": "clear",
    "[F": "end",
    "[H": "home",
    /* xterm/gnome ESC O letter */
    "OA": "up",
    "OB": "down",
    "OC": "right",
    "OD": "left",
    "OE": "clear",
    "OF": "end",
    "OH": "home",
    /* xterm/rxvt ESC [ number ~ */
    "[1~": "home",
    "[2~": "insert",
    "[3~": "delete",
    "[4~": "end",
    "[5~": "pageup",
    "[6~": "pagedown",
    /* putty */
    "[[5~": "pageup",
    "[[6~": "pagedown",
    /* rxvt */
    "[7~": "home",
    "[8~": "end",
    /* rxvt keys with modifiers */
    "[a": "up",
    "[b": "down",
    "[c": "right",
    "[d": "left",
    "[e": "clear",
    "[2$": "insert",
    "[3$": "delete",
    "[5$": "pageup",
    "[6$": "pagedown",
    "[7$": "home",
    "[8$": "end",
    "Oa": "up",
    "Ob": "down",
    "Oc": "right",
    "Od": "left",
    "Oe": "clear",
    "[2^": "insert",
    "[3^": "delete",
    "[5^": "pageup",
    "[6^": "pagedown",
    "[7^": "home",
    "[8^": "end",
    /* misc. */
    "[Z": "tab"
  };
  function isShiftKey(code) {
    return ["[a", "[b", "[c", "[d", "[e", "[2$", "[3$", "[5$", "[6$", "[7$", "[8$", "[Z"].includes(code);
  }
  function isCtrlKey(code) {
    return ["Oa", "Ob", "Oc", "Od", "Oe", "[2^", "[3^", "[5^", "[6^", "[7^", "[8^"].includes(code);
  }
  const keypress = (s = "", event = {}) => {
    let parts;
    let key2 = {
      name: event.name,
      ctrl: false,
      meta: false,
      shift: false,
      option: false,
      sequence: s,
      raw: s,
      ...event
    };
    if (Buffer.isBuffer(s)) {
      if (s[0] > 127 && s[1] === void 0) {
        s[0] -= 128;
        s = "\x1B" + String(s);
      } else {
        s = String(s);
      }
    } else if (s !== void 0 && typeof s !== "string") {
      s = String(s);
    } else if (!s) {
      s = key2.sequence || "";
    }
    key2.sequence = key2.sequence || s || key2.name;
    if (s === "\r") {
      key2.raw = void 0;
      key2.name = "return";
    } else if (s === "\n") {
      key2.name = "enter";
    } else if (s === "	") {
      key2.name = "tab";
    } else if (s === "\b" || s === "" || s === "\x1B" || s === "\x1B\b") {
      key2.name = "backspace";
      key2.meta = s.charAt(0) === "\x1B";
    } else if (s === "\x1B" || s === "\x1B\x1B") {
      key2.name = "escape";
      key2.meta = s.length === 2;
    } else if (s === " " || s === "\x1B ") {
      key2.name = "space";
      key2.meta = s.length === 2;
    } else if (s <= "") {
      key2.name = String.fromCharCode(s.charCodeAt(0) + "a".charCodeAt(0) - 1);
      key2.ctrl = true;
    } else if (s.length === 1 && s >= "0" && s <= "9") {
      key2.name = "number";
    } else if (s.length === 1 && s >= "a" && s <= "z") {
      key2.name = s;
    } else if (s.length === 1 && s >= "A" && s <= "Z") {
      key2.name = s.toLowerCase();
      key2.shift = true;
    } else if (parts = metaKeyCodeRe.exec(s)) {
      key2.meta = true;
      key2.shift = /^[A-Z]$/.test(parts[1]);
    } else if (parts = fnKeyRe.exec(s)) {
      let segs = [...s];
      if (segs[0] === "\x1B" && segs[1] === "\x1B") {
        key2.option = true;
      }
      let code = [parts[1], parts[2], parts[4], parts[6]].filter(Boolean).join("");
      let modifier = (parts[3] || parts[5] || 1) - 1;
      key2.ctrl = !!(modifier & 4);
      key2.meta = !!(modifier & 10);
      key2.shift = !!(modifier & 1);
      key2.code = code;
      key2.name = keyName[code];
      key2.shift = isShiftKey(code) || key2.shift;
      key2.ctrl = isCtrlKey(code) || key2.ctrl;
    }
    return key2;
  };
  keypress.listen = (options2 = {}, onKeypress) => {
    let { stdin } = options2;
    if (!stdin || stdin !== process.stdin && !stdin.isTTY) {
      throw new Error("Invalid stream passed");
    }
    let rl = readline2.createInterface({ terminal: true, input: stdin });
    readline2.emitKeypressEvents(stdin, rl);
    let on = (buf, key2) => onKeypress(buf, keypress(buf, key2), rl);
    let isRaw = stdin.isRaw;
    if (stdin.isTTY) stdin.setRawMode(true);
    stdin.on("keypress", on);
    rl.resume();
    let off = () => {
      if (stdin.isTTY) stdin.setRawMode(isRaw);
      stdin.removeListener("keypress", on);
      rl.pause();
      rl.close();
    };
    return off;
  };
  keypress.action = (buf, key2, customActions) => {
    let obj = { ...combos2, ...customActions };
    if (key2.ctrl) {
      key2.action = obj.ctrl[key2.name];
      return key2;
    }
    if (key2.option && obj.option) {
      key2.action = obj.option[key2.name];
      return key2;
    }
    if (key2.shift) {
      key2.action = obj.shift[key2.name];
      return key2;
    }
    key2.action = obj.keys[key2.name];
    return key2;
  };
  keypress_1 = keypress;
  return keypress_1;
}
var timer;
var hasRequiredTimer;
function requireTimer() {
  if (hasRequiredTimer) return timer;
  hasRequiredTimer = 1;
  timer = (prompt2) => {
    prompt2.timers = prompt2.timers || {};
    let timers = prompt2.options.timers;
    if (!timers) return;
    for (let key2 of Object.keys(timers)) {
      let opts = timers[key2];
      if (typeof opts === "number") {
        opts = { interval: opts };
      }
      create2(prompt2, key2, opts);
    }
  };
  function create2(prompt2, name, options2 = {}) {
    let timer2 = prompt2.timers[name] = { name, start: Date.now(), ms: 0, tick: 0 };
    let ms = options2.interval || 120;
    timer2.frames = options2.frames || [];
    timer2.loading = true;
    let interval = setInterval(() => {
      timer2.ms = Date.now() - timer2.start;
      timer2.tick++;
      prompt2.render();
    }, ms);
    timer2.stop = () => {
      timer2.loading = false;
      clearInterval(interval);
    };
    Reflect.defineProperty(timer2, "interval", { value: interval });
    prompt2.once("close", () => timer2.stop());
    return timer2.stop;
  }
  return timer;
}
var state;
var hasRequiredState;
function requireState() {
  if (hasRequiredState) return state;
  hasRequiredState = 1;
  const { define, width } = utils$1;
  class State {
    constructor(prompt2) {
      let options2 = prompt2.options;
      define(this, "_prompt", prompt2);
      this.type = prompt2.type;
      this.name = prompt2.name;
      this.message = "";
      this.header = "";
      this.footer = "";
      this.error = "";
      this.hint = "";
      this.input = "";
      this.cursor = 0;
      this.index = 0;
      this.lines = 0;
      this.tick = 0;
      this.prompt = "";
      this.buffer = "";
      this.width = width(options2.stdout || process.stdout);
      Object.assign(this, options2);
      this.name = this.name || this.message;
      this.message = this.message || this.name;
      this.symbols = prompt2.symbols;
      this.styles = prompt2.styles;
      this.required = /* @__PURE__ */ new Set();
      this.cancelled = false;
      this.submitted = false;
    }
    clone() {
      let state2 = { ...this };
      state2.status = this.status;
      state2.buffer = Buffer.from(state2.buffer);
      delete state2.clone;
      return state2;
    }
    set color(val) {
      this._color = val;
    }
    get color() {
      let styles2 = this.prompt.styles;
      if (this.cancelled) return styles2.cancelled;
      if (this.submitted) return styles2.submitted;
      let color = this._color || styles2[this.status];
      return typeof color === "function" ? color : styles2.pending;
    }
    set loading(value2) {
      this._loading = value2;
    }
    get loading() {
      if (typeof this._loading === "boolean") return this._loading;
      if (this.loadingChoices) return "choices";
      return false;
    }
    get status() {
      if (this.cancelled) return "cancelled";
      if (this.submitted) return "submitted";
      return "pending";
    }
  }
  state = State;
  return state;
}
var styles_1;
var hasRequiredStyles;
function requireStyles() {
  if (hasRequiredStyles) return styles_1;
  hasRequiredStyles = 1;
  const utils2 = utils$1;
  const colors2 = ansiColorsExports;
  const styles2 = {
    default: colors2.noop,
    noop: colors2.noop,
    /**
     * Modifiers
     */
    set inverse(custom) {
      this._inverse = custom;
    },
    get inverse() {
      return this._inverse || utils2.inverse(this.primary);
    },
    set complement(custom) {
      this._complement = custom;
    },
    get complement() {
      return this._complement || utils2.complement(this.primary);
    },
    /**
     * Main color
     */
    primary: colors2.cyan,
    /**
     * Main palette
     */
    success: colors2.green,
    danger: colors2.magenta,
    strong: colors2.bold,
    warning: colors2.yellow,
    muted: colors2.dim,
    disabled: colors2.gray,
    dark: colors2.dim.gray,
    underline: colors2.underline,
    set info(custom) {
      this._info = custom;
    },
    get info() {
      return this._info || this.primary;
    },
    set em(custom) {
      this._em = custom;
    },
    get em() {
      return this._em || this.primary.underline;
    },
    set heading(custom) {
      this._heading = custom;
    },
    get heading() {
      return this._heading || this.muted.underline;
    },
    /**
     * Statuses
     */
    set pending(custom) {
      this._pending = custom;
    },
    get pending() {
      return this._pending || this.primary;
    },
    set submitted(custom) {
      this._submitted = custom;
    },
    get submitted() {
      return this._submitted || this.success;
    },
    set cancelled(custom) {
      this._cancelled = custom;
    },
    get cancelled() {
      return this._cancelled || this.danger;
    },
    /**
     * Special styling
     */
    set typing(custom) {
      this._typing = custom;
    },
    get typing() {
      return this._typing || this.dim;
    },
    set placeholder(custom) {
      this._placeholder = custom;
    },
    get placeholder() {
      return this._placeholder || this.primary.dim;
    },
    set highlight(custom) {
      this._highlight = custom;
    },
    get highlight() {
      return this._highlight || this.inverse;
    }
  };
  styles2.merge = (options2 = {}) => {
    if (options2.styles && typeof options2.styles.enabled === "boolean") {
      colors2.enabled = options2.styles.enabled;
    }
    if (options2.styles && typeof options2.styles.visible === "boolean") {
      colors2.visible = options2.styles.visible;
    }
    let result = utils2.merge({}, styles2, options2.styles);
    delete result.merge;
    for (let key2 of Object.keys(colors2)) {
      if (!result.hasOwnProperty(key2)) {
        Reflect.defineProperty(result, key2, { get: () => colors2[key2] });
      }
    }
    for (let key2 of Object.keys(colors2.styles)) {
      if (!result.hasOwnProperty(key2)) {
        Reflect.defineProperty(result, key2, { get: () => colors2[key2] });
      }
    }
    return result;
  };
  styles_1 = styles2;
  return styles_1;
}
var symbols_1;
var hasRequiredSymbols;
function requireSymbols() {
  if (hasRequiredSymbols) return symbols_1;
  hasRequiredSymbols = 1;
  const isWindows = process.platform === "win32";
  const colors2 = ansiColorsExports;
  const utils2 = utils$1;
  const symbols2 = {
    ...colors2.symbols,
    upDownDoubleArrow: "⇕",
    upDownDoubleArrow2: "⬍",
    upDownArrow: "↕",
    asterisk: "*",
    asterism: "⁂",
    bulletWhite: "◦",
    electricArrow: "⌁",
    ellipsisLarge: "⋯",
    ellipsisSmall: "…",
    fullBlock: "█",
    identicalTo: "≡",
    indicator: colors2.symbols.check,
    leftAngle: "‹",
    mark: "※",
    minus: "−",
    multiplication: "×",
    obelus: "÷",
    percent: "%",
    pilcrow: "¶",
    pilcrow2: "❡",
    pencilUpRight: "✐",
    pencilDownRight: "✎",
    pencilRight: "✏",
    plus: "+",
    plusMinus: "±",
    pointRight: "☞",
    rightAngle: "›",
    section: "§",
    hexagon: { off: "⬡", on: "⬢", disabled: "⬢" },
    ballot: { on: "☑", off: "☐", disabled: "☒" },
    stars: { on: "★", off: "☆", disabled: "☆" },
    folder: { on: "▼", off: "▶", disabled: "▶" },
    prefix: {
      pending: colors2.symbols.question,
      submitted: colors2.symbols.check,
      cancelled: colors2.symbols.cross
    },
    separator: {
      pending: colors2.symbols.pointerSmall,
      submitted: colors2.symbols.middot,
      cancelled: colors2.symbols.middot
    },
    radio: {
      off: isWindows ? "( )" : "◯",
      on: isWindows ? "(*)" : "◉",
      disabled: isWindows ? "(|)" : "Ⓘ"
    },
    numbers: ["⓪", "①", "②", "③", "④", "⑤", "⑥", "⑦", "⑧", "⑨", "⑩", "⑪", "⑫", "⑬", "⑭", "⑮", "⑯", "⑰", "⑱", "⑲", "⑳", "㉑", "㉒", "㉓", "㉔", "㉕", "㉖", "㉗", "㉘", "㉙", "㉚", "㉛", "㉜", "㉝", "㉞", "㉟", "㊱", "㊲", "㊳", "㊴", "㊵", "㊶", "㊷", "㊸", "㊹", "㊺", "㊻", "㊼", "㊽", "㊾", "㊿"]
  };
  symbols2.merge = (options2) => {
    let result = utils2.merge({}, colors2.symbols, symbols2, options2.symbols);
    delete result.merge;
    return result;
  };
  symbols_1 = symbols2;
  return symbols_1;
}
var theme;
var hasRequiredTheme;
function requireTheme() {
  if (hasRequiredTheme) return theme;
  hasRequiredTheme = 1;
  const styles2 = requireStyles();
  const symbols2 = requireSymbols();
  const utils2 = utils$1;
  theme = (prompt2) => {
    prompt2.options = utils2.merge({}, prompt2.options.theme, prompt2.options);
    prompt2.symbols = symbols2.merge(prompt2.options);
    prompt2.styles = styles2.merge(prompt2.options);
  };
  return theme;
}
var ansi = { exports: {} };
var hasRequiredAnsi;
function requireAnsi() {
  if (hasRequiredAnsi) return ansi.exports;
  hasRequiredAnsi = 1;
  (function(module, exports) {
    const isTerm = process.env.TERM_PROGRAM === "Apple_Terminal";
    const colors2 = ansiColorsExports;
    const utils2 = utils$1;
    const ansi2 = module.exports = exports;
    const ESC = "\x1B[";
    const BEL = "\x07";
    let hidden = false;
    const code = ansi2.code = {
      bell: BEL,
      beep: BEL,
      beginning: `${ESC}G`,
      down: `${ESC}J`,
      esc: ESC,
      getPosition: `${ESC}6n`,
      hide: `${ESC}?25l`,
      line: `${ESC}2K`,
      lineEnd: `${ESC}K`,
      lineStart: `${ESC}1K`,
      restorePosition: ESC + (isTerm ? "8" : "u"),
      savePosition: ESC + (isTerm ? "7" : "s"),
      screen: `${ESC}2J`,
      show: `${ESC}?25h`,
      up: `${ESC}1J`
    };
    const cursor = ansi2.cursor = {
      get hidden() {
        return hidden;
      },
      hide() {
        hidden = true;
        return code.hide;
      },
      show() {
        hidden = false;
        return code.show;
      },
      forward: (count = 1) => `${ESC}${count}C`,
      backward: (count = 1) => `${ESC}${count}D`,
      nextLine: (count = 1) => `${ESC}E`.repeat(count),
      prevLine: (count = 1) => `${ESC}F`.repeat(count),
      up: (count = 1) => count ? `${ESC}${count}A` : "",
      down: (count = 1) => count ? `${ESC}${count}B` : "",
      right: (count = 1) => count ? `${ESC}${count}C` : "",
      left: (count = 1) => count ? `${ESC}${count}D` : "",
      to(x2, y) {
        return y ? `${ESC}${y + 1};${x2 + 1}H` : `${ESC}${x2 + 1}G`;
      },
      move(x2 = 0, y = 0) {
        let res = "";
        res += x2 < 0 ? cursor.left(-x2) : x2 > 0 ? cursor.right(x2) : "";
        res += y < 0 ? cursor.up(-y) : y > 0 ? cursor.down(y) : "";
        return res;
      },
      restore(state2 = {}) {
        let { after, cursor: cursor2, initial, input: input2, prompt: prompt2, size, value: value2 } = state2;
        initial = utils2.isPrimitive(initial) ? String(initial) : "";
        input2 = utils2.isPrimitive(input2) ? String(input2) : "";
        value2 = utils2.isPrimitive(value2) ? String(value2) : "";
        if (size) {
          let codes = ansi2.cursor.up(size) + ansi2.cursor.to(prompt2.length);
          let diff2 = input2.length - cursor2;
          if (diff2 > 0) {
            codes += ansi2.cursor.left(diff2);
          }
          return codes;
        }
        if (value2 || after) {
          let pos2 = !input2 && !!initial ? -initial.length : -input2.length + cursor2;
          if (after) pos2 -= after.length;
          if (input2 === "" && initial && !prompt2.includes(initial)) {
            pos2 += initial.length;
          }
          return ansi2.cursor.move(pos2);
        }
      }
    };
    const erase = ansi2.erase = {
      screen: code.screen,
      up: code.up,
      down: code.down,
      line: code.line,
      lineEnd: code.lineEnd,
      lineStart: code.lineStart,
      lines(n) {
        let str = "";
        for (let i = 0; i < n; i++) {
          str += ansi2.erase.line + (i < n - 1 ? ansi2.cursor.up(1) : "");
        }
        if (n) str += ansi2.code.beginning;
        return str;
      }
    };
    ansi2.clear = (input2 = "", columns = process.stdout.columns) => {
      if (!columns) return erase.line + cursor.to(0);
      let width = (str) => [...colors2.unstyle(str)].length;
      let lines = input2.split(/\r?\n/);
      let rows = 0;
      for (let line2 of lines) {
        rows += 1 + Math.floor(Math.max(width(line2) - 1, 0) / columns);
      }
      return (erase.line + cursor.prevLine()).repeat(rows - 1) + erase.line + cursor.to(0);
    };
  })(ansi, ansi.exports);
  return ansi.exports;
}
var prompt;
var hasRequiredPrompt;
function requirePrompt() {
  if (hasRequiredPrompt) return prompt;
  hasRequiredPrompt = 1;
  const Events2 = eventsExports;
  const colors2 = ansiColorsExports;
  const keypress = requireKeypress();
  const timer2 = requireTimer();
  const State = requireState();
  const theme2 = requireTheme();
  const utils2 = utils$1;
  const ansi2 = requireAnsi();
  class Prompt extends Events2 {
    constructor(options2 = {}) {
      super();
      this.name = options2.name;
      this.type = options2.type;
      this.options = options2;
      theme2(this);
      timer2(this);
      this.state = new State(this);
      this.initial = [options2.initial, options2.default].find((v) => v != null);
      this.stdout = options2.stdout || process.stdout;
      this.stdin = options2.stdin || process.stdin;
      this.scale = options2.scale || 1;
      this.term = this.options.term || process.env.TERM_PROGRAM;
      this.margin = margin(this.options.margin);
      this.setMaxListeners(0);
      setOptions(this);
    }
    async keypress(input2, event = {}) {
      this.keypressed = true;
      let key2 = keypress.action(input2, keypress(input2, event), this.options.actions);
      this.state.keypress = key2;
      this.emit("keypress", input2, key2);
      this.emit("state", this.state.clone());
      let fn2 = this.options[key2.action] || this[key2.action] || this.dispatch;
      if (typeof fn2 === "function") {
        return await fn2.call(this, input2, key2);
      }
      this.alert();
    }
    alert() {
      delete this.state.alert;
      if (this.options.show === false) {
        this.emit("alert");
      } else {
        this.stdout.write(ansi2.code.beep);
      }
    }
    cursorHide() {
      this.stdout.write(ansi2.cursor.hide());
      utils2.onExit(() => this.cursorShow());
    }
    cursorShow() {
      this.stdout.write(ansi2.cursor.show());
    }
    write(str) {
      if (!str) return;
      if (this.stdout && this.state.show !== false) {
        this.stdout.write(str);
      }
      this.state.buffer += str;
    }
    clear(lines = 0) {
      let buffer2 = this.state.buffer;
      this.state.buffer = "";
      if (!buffer2 && !lines || this.options.show === false) return;
      this.stdout.write(ansi2.cursor.down(lines) + ansi2.clear(buffer2, this.width));
    }
    restore() {
      if (this.state.closed || this.options.show === false) return;
      let { prompt: prompt2, after, rest } = this.sections();
      let { cursor, initial = "", input: input2 = "", value: value2 = "" } = this;
      let size = this.state.size = rest.length;
      let state2 = { after, cursor, initial, input: input2, prompt: prompt2, size, value: value2 };
      let codes = ansi2.cursor.restore(state2);
      if (codes) {
        this.stdout.write(codes);
      }
    }
    sections() {
      let { buffer: buffer2, input: input2, prompt: prompt2 } = this.state;
      prompt2 = colors2.unstyle(prompt2);
      let buf = colors2.unstyle(buffer2);
      let idx = buf.indexOf(prompt2);
      let header = buf.slice(0, idx);
      let rest = buf.slice(idx);
      let lines = rest.split("\n");
      let first = lines[0];
      let last = lines[lines.length - 1];
      let promptLine = prompt2 + (input2 ? " " + input2 : "");
      let len = promptLine.length;
      let after = len < first.length ? first.slice(len + 1) : "";
      return { header, prompt: first, after, rest: lines.slice(1), last };
    }
    async submit() {
      this.state.submitted = true;
      this.state.validating = true;
      if (this.options.onSubmit) {
        await this.options.onSubmit.call(this, this.name, this.value, this);
      }
      let result = this.state.error || await this.validate(this.value, this.state);
      if (result !== true) {
        let error2 = "\n" + this.symbols.pointer + " ";
        if (typeof result === "string") {
          error2 += result.trim();
        } else {
          error2 += "Invalid input";
        }
        this.state.error = "\n" + this.styles.danger(error2);
        this.state.submitted = false;
        await this.render();
        await this.alert();
        this.state.validating = false;
        this.state.error = void 0;
        return;
      }
      this.state.validating = false;
      await this.render();
      await this.close();
      this.value = await this.result(this.value);
      this.emit("submit", this.value);
    }
    async cancel(err) {
      this.state.cancelled = this.state.submitted = true;
      await this.render();
      await this.close();
      if (typeof this.options.onCancel === "function") {
        await this.options.onCancel.call(this, this.name, this.value, this);
      }
      this.emit("cancel", await this.error(err));
    }
    async close() {
      this.state.closed = true;
      try {
        let sections = this.sections();
        let lines = Math.ceil(sections.prompt.length / this.width);
        if (sections.rest) {
          this.write(ansi2.cursor.down(sections.rest.length));
        }
        this.write("\n".repeat(lines));
      } catch (err) {
      }
      this.emit("close");
    }
    start() {
      if (!this.stop && this.options.show !== false) {
        this.stop = keypress.listen(this, this.keypress.bind(this));
        this.once("close", this.stop);
      }
    }
    async skip() {
      this.skipped = this.options.skip === true;
      if (typeof this.options.skip === "function") {
        this.skipped = await this.options.skip.call(this, this.name, this.value);
      }
      return this.skipped;
    }
    async initialize() {
      let { format: format2, options: options2, result } = this;
      this.format = () => format2.call(this, this.value);
      this.result = () => result.call(this, this.value);
      if (typeof options2.initial === "function") {
        this.initial = await options2.initial.call(this, this);
      }
      if (typeof options2.onRun === "function") {
        await options2.onRun.call(this, this);
      }
      if (typeof options2.onSubmit === "function") {
        let onSubmit = options2.onSubmit.bind(this);
        let submit = this.submit.bind(this);
        delete this.options.onSubmit;
        this.submit = async () => {
          await onSubmit(this.name, this.value, this);
          return submit();
        };
      }
      await this.start();
      await this.render();
    }
    render() {
      throw new Error("expected prompt to have a custom render method");
    }
    run() {
      return new Promise(async (resolve, reject) => {
        this.once("submit", resolve);
        this.once("cancel", reject);
        if (await this.skip()) {
          this.render = () => {
          };
          return this.submit();
        }
        await this.initialize();
        this.emit("run");
      });
    }
    async element(name, choice, i) {
      let { options: options2, state: state2, symbols: symbols2, timers } = this;
      let timer3 = timers && timers[name];
      state2.timer = timer3;
      let value2 = options2[name] || state2[name] || symbols2[name];
      let val = choice && choice[name] != null ? choice[name] : await value2;
      if (val === "") return val;
      let res = await this.resolve(val, state2, choice, i);
      if (!res && choice && choice[name]) {
        return this.resolve(value2, state2, choice, i);
      }
      return res;
    }
    async prefix() {
      let element = await this.element("prefix") || this.symbols;
      let timer3 = this.timers && this.timers.prefix;
      let state2 = this.state;
      state2.timer = timer3;
      if (utils2.isObject(element)) element = element[state2.status] || element.pending;
      if (!utils2.hasColor(element)) {
        let style = this.styles[state2.status] || this.styles.pending;
        return style(element);
      }
      return element;
    }
    async message() {
      let message = await this.element("message");
      if (!utils2.hasColor(message)) {
        return this.styles.strong(message);
      }
      return message;
    }
    async separator() {
      let element = await this.element("separator") || this.symbols;
      let timer3 = this.timers && this.timers.separator;
      let state2 = this.state;
      state2.timer = timer3;
      let value2 = element[state2.status] || element.pending || state2.separator;
      let ele = await this.resolve(value2, state2);
      if (utils2.isObject(ele)) ele = ele[state2.status] || ele.pending;
      if (!utils2.hasColor(ele)) {
        return this.styles.muted(ele);
      }
      return ele;
    }
    async pointer(choice, i) {
      let val = await this.element("pointer", choice, i);
      if (typeof val === "string" && utils2.hasColor(val)) {
        return val;
      }
      if (val) {
        let styles2 = this.styles;
        let focused = this.index === i;
        let style = focused ? styles2.primary : (val2) => val2;
        let ele = await this.resolve(val[focused ? "on" : "off"] || val, this.state);
        let styled = !utils2.hasColor(ele) ? style(ele) : ele;
        return focused ? styled : " ".repeat(ele.length);
      }
    }
    async indicator(choice, i) {
      let val = await this.element("indicator", choice, i);
      if (typeof val === "string" && utils2.hasColor(val)) {
        return val;
      }
      if (val) {
        let styles2 = this.styles;
        let enabled = choice.enabled === true;
        let style = enabled ? styles2.success : styles2.dark;
        let ele = val[enabled ? "on" : "off"] || val;
        return !utils2.hasColor(ele) ? style(ele) : ele;
      }
      return "";
    }
    body() {
      return null;
    }
    footer() {
      if (this.state.status === "pending") {
        return this.element("footer");
      }
    }
    header() {
      if (this.state.status === "pending") {
        return this.element("header");
      }
    }
    async hint() {
      if (this.state.status === "pending" && !this.isValue(this.state.input)) {
        let hint = await this.element("hint");
        if (!utils2.hasColor(hint)) {
          return this.styles.muted(hint);
        }
        return hint;
      }
    }
    error(err) {
      return !this.state.submitted ? err || this.state.error : "";
    }
    format(value2) {
      return value2;
    }
    result(value2) {
      return value2;
    }
    validate(value2) {
      if (this.options.required === true) {
        return this.isValue(value2);
      }
      return true;
    }
    isValue(value2) {
      return value2 != null && value2 !== "";
    }
    resolve(value2, ...args) {
      return utils2.resolve(this, value2, ...args);
    }
    get base() {
      return Prompt.prototype;
    }
    get style() {
      return this.styles[this.state.status];
    }
    get height() {
      return this.options.rows || utils2.height(this.stdout, 25);
    }
    get width() {
      return this.options.columns || utils2.width(this.stdout, 80);
    }
    get size() {
      return { width: this.width, height: this.height };
    }
    set cursor(value2) {
      this.state.cursor = value2;
    }
    get cursor() {
      return this.state.cursor;
    }
    set input(value2) {
      this.state.input = value2;
    }
    get input() {
      return this.state.input;
    }
    set value(value2) {
      this.state.value = value2;
    }
    get value() {
      let { input: input2, value: value2 } = this.state;
      let result = [value2, input2].find(this.isValue.bind(this));
      return this.isValue(result) ? result : this.initial;
    }
    static get prompt() {
      return (options2) => new this(options2).run();
    }
  }
  function setOptions(prompt2) {
    let isValidKey = (key2) => {
      return prompt2[key2] === void 0 || typeof prompt2[key2] === "function";
    };
    let ignore = [
      "actions",
      "choices",
      "initial",
      "margin",
      "roles",
      "styles",
      "symbols",
      "theme",
      "timers",
      "value"
    ];
    let ignoreFn = [
      "body",
      "footer",
      "error",
      "header",
      "hint",
      "indicator",
      "message",
      "prefix",
      "separator",
      "skip"
    ];
    for (let key2 of Object.keys(prompt2.options)) {
      if (ignore.includes(key2)) continue;
      if (/^on[A-Z]/.test(key2)) continue;
      let option = prompt2.options[key2];
      if (typeof option === "function" && isValidKey(key2)) {
        if (!ignoreFn.includes(key2)) {
          prompt2[key2] = option.bind(prompt2);
        }
      } else if (typeof prompt2[key2] !== "function") {
        prompt2[key2] = option;
      }
    }
  }
  function margin(value2) {
    if (typeof value2 === "number") {
      value2 = [value2, value2, value2, value2];
    }
    let arr = [].concat(value2 || []);
    let pad2 = (i) => i % 2 === 0 ? "\n" : " ";
    let res = [];
    for (let i = 0; i < 4; i++) {
      let char = pad2(i);
      if (arr[i]) {
        res.push(char.repeat(arr[i]));
      } else {
        res.push("");
      }
    }
    return res;
  }
  prompt = Prompt;
  return prompt;
}
var prompts$1 = {};
var roles_1;
var hasRequiredRoles;
function requireRoles() {
  if (hasRequiredRoles) return roles_1;
  hasRequiredRoles = 1;
  const utils2 = utils$1;
  const roles = {
    default(prompt2, choice) {
      return choice;
    },
    checkbox(prompt2, choice) {
      throw new Error("checkbox role is not implemented yet");
    },
    editable(prompt2, choice) {
      throw new Error("editable role is not implemented yet");
    },
    expandable(prompt2, choice) {
      throw new Error("expandable role is not implemented yet");
    },
    heading(prompt2, choice) {
      choice.disabled = "";
      choice.indicator = [choice.indicator, " "].find((v) => v != null);
      choice.message = choice.message || "";
      return choice;
    },
    input(prompt2, choice) {
      throw new Error("input role is not implemented yet");
    },
    option(prompt2, choice) {
      return roles.default(prompt2, choice);
    },
    radio(prompt2, choice) {
      throw new Error("radio role is not implemented yet");
    },
    separator(prompt2, choice) {
      choice.disabled = "";
      choice.indicator = [choice.indicator, " "].find((v) => v != null);
      choice.message = choice.message || prompt2.symbols.line.repeat(5);
      return choice;
    },
    spacer(prompt2, choice) {
      return choice;
    }
  };
  roles_1 = (name, options2 = {}) => {
    let role = utils2.merge({}, roles, options2.roles);
    return role[name] || role.default;
  };
  return roles_1;
}
var array;
var hasRequiredArray;
function requireArray() {
  if (hasRequiredArray) return array;
  hasRequiredArray = 1;
  const colors2 = ansiColorsExports;
  const Prompt = requirePrompt();
  const roles = requireRoles();
  const utils2 = utils$1;
  const { reorder, scrollUp, scrollDown, isObject: isObject2, swap: swap2 } = utils2;
  class ArrayPrompt extends Prompt {
    constructor(options2) {
      super(options2);
      this.cursorHide();
      this.maxSelected = options2.maxSelected || Infinity;
      this.multiple = options2.multiple || false;
      this.initial = options2.initial || 0;
      this.delay = options2.delay || 0;
      this.longest = 0;
      this.num = "";
    }
    async initialize() {
      if (typeof this.options.initial === "function") {
        this.initial = await this.options.initial.call(this);
      }
      await this.reset(true);
      await super.initialize();
    }
    async reset() {
      let { choices, initial, autofocus, suggest } = this.options;
      this.state._choices = [];
      this.state.choices = [];
      this.choices = await Promise.all(await this.toChoices(choices));
      this.choices.forEach((ch) => ch.enabled = false);
      if (typeof suggest !== "function" && this.selectable.length === 0) {
        throw new Error("At least one choice must be selectable");
      }
      if (isObject2(initial)) initial = Object.keys(initial);
      if (Array.isArray(initial)) {
        if (autofocus != null) this.index = this.findIndex(autofocus);
        initial.forEach((v) => this.enable(this.find(v)));
        await this.render();
      } else {
        if (autofocus != null) initial = autofocus;
        if (typeof initial === "string") initial = this.findIndex(initial);
        if (typeof initial === "number" && initial > -1) {
          this.index = Math.max(0, Math.min(initial, this.choices.length));
          this.enable(this.find(this.index));
        }
      }
      if (this.isDisabled(this.focused)) {
        await this.down();
      }
    }
    async toChoices(value2, parent) {
      this.state.loadingChoices = true;
      let choices = [];
      let index2 = 0;
      let toChoices = async (items, parent2) => {
        if (typeof items === "function") items = await items.call(this);
        if (items instanceof Promise) items = await items;
        for (let i = 0; i < items.length; i++) {
          let choice = items[i] = await this.toChoice(items[i], index2++, parent2);
          choices.push(choice);
          if (choice.choices) {
            await toChoices(choice.choices, choice);
          }
        }
        return choices;
      };
      return toChoices(value2, parent).then((choices2) => {
        this.state.loadingChoices = false;
        return choices2;
      });
    }
    async toChoice(ele, i, parent) {
      if (typeof ele === "function") ele = await ele.call(this, this);
      if (ele instanceof Promise) ele = await ele;
      if (typeof ele === "string") ele = { name: ele };
      if (ele.normalized) return ele;
      ele.normalized = true;
      let origVal = ele.value;
      let role = roles(ele.role, this.options);
      ele = role(this, ele);
      if (typeof ele.disabled === "string" && !ele.hint) {
        ele.hint = ele.disabled;
        ele.disabled = true;
      }
      if (ele.disabled === true && ele.hint == null) {
        ele.hint = "(disabled)";
      }
      if (ele.index != null) return ele;
      ele.name = ele.name || ele.key || ele.title || ele.value || ele.message;
      ele.message = ele.message || ele.name || "";
      ele.value = [ele.value, ele.name].find(this.isValue.bind(this));
      ele.input = "";
      ele.index = i;
      ele.cursor = 0;
      utils2.define(ele, "parent", parent);
      ele.level = parent ? parent.level + 1 : 1;
      if (ele.indent == null) {
        ele.indent = parent ? parent.indent + "  " : ele.indent || "";
      }
      ele.path = parent ? parent.path + "." + ele.name : ele.name;
      ele.enabled = !!(this.multiple && !this.isDisabled(ele) && (ele.enabled || this.isSelected(ele)));
      if (!this.isDisabled(ele)) {
        this.longest = Math.max(this.longest, colors2.unstyle(ele.message).length);
      }
      let choice = { ...ele };
      ele.reset = (input2 = choice.input, value2 = choice.value) => {
        for (let key2 of Object.keys(choice)) ele[key2] = choice[key2];
        ele.input = input2;
        ele.value = value2;
      };
      if (origVal == null && typeof ele.initial === "function") {
        ele.input = await ele.initial.call(this, this.state, ele, i);
      }
      return ele;
    }
    async onChoice(choice, i) {
      this.emit("choice", choice, i, this);
      if (typeof choice.onChoice === "function") {
        await choice.onChoice.call(this, this.state, choice, i);
      }
    }
    async addChoice(ele, i, parent) {
      let choice = await this.toChoice(ele, i, parent);
      this.choices.push(choice);
      this.index = this.choices.length - 1;
      this.limit = this.choices.length;
      return choice;
    }
    async newItem(item2, i, parent) {
      let ele = { name: "New choice name?", editable: true, newChoice: true, ...item2 };
      let choice = await this.addChoice(ele, i, parent);
      choice.updateChoice = () => {
        delete choice.newChoice;
        choice.name = choice.message = choice.input;
        choice.input = "";
        choice.cursor = 0;
      };
      return this.render();
    }
    indent(choice) {
      if (choice.indent == null) {
        return choice.level > 1 ? "  ".repeat(choice.level - 1) : "";
      }
      return choice.indent;
    }
    dispatch(s, key2) {
      if (this.multiple && this[key2.name]) return this[key2.name]();
      this.alert();
    }
    focus(choice, enabled) {
      if (typeof enabled !== "boolean") enabled = choice.enabled;
      if (enabled && !choice.enabled && this.selected.length >= this.maxSelected) {
        return this.alert();
      }
      this.index = choice.index;
      choice.enabled = enabled && !this.isDisabled(choice);
      return choice;
    }
    space() {
      if (!this.multiple) return this.alert();
      this.toggle(this.focused);
      return this.render();
    }
    a() {
      if (this.maxSelected < this.choices.length) return this.alert();
      let enabled = this.selectable.every((ch) => ch.enabled);
      this.choices.forEach((ch) => ch.enabled = !enabled);
      return this.render();
    }
    i() {
      if (this.choices.length - this.selected.length > this.maxSelected) {
        return this.alert();
      }
      this.choices.forEach((ch) => ch.enabled = !ch.enabled);
      return this.render();
    }
    g(choice = this.focused) {
      if (!this.choices.some((ch) => !!ch.parent)) return this.a();
      this.toggle(choice.parent && !choice.choices ? choice.parent : choice);
      return this.render();
    }
    toggle(choice, enabled) {
      if (!choice.enabled && this.selected.length >= this.maxSelected) {
        return this.alert();
      }
      if (typeof enabled !== "boolean") enabled = !choice.enabled;
      choice.enabled = enabled;
      if (choice.choices) {
        choice.choices.forEach((ch) => this.toggle(ch, enabled));
      }
      let parent = choice.parent;
      while (parent) {
        let choices = parent.choices.filter((ch) => this.isDisabled(ch));
        parent.enabled = choices.every((ch) => ch.enabled === true);
        parent = parent.parent;
      }
      reset(this, this.choices);
      this.emit("toggle", choice, this);
      return choice;
    }
    enable(choice) {
      if (this.selected.length >= this.maxSelected) return this.alert();
      choice.enabled = !this.isDisabled(choice);
      choice.choices && choice.choices.forEach(this.enable.bind(this));
      return choice;
    }
    disable(choice) {
      choice.enabled = false;
      choice.choices && choice.choices.forEach(this.disable.bind(this));
      return choice;
    }
    number(n) {
      this.num += n;
      let number2 = (num) => {
        let i = Number(num);
        if (i > this.choices.length - 1) return this.alert();
        let focused = this.focused;
        let choice = this.choices.find((ch) => i === ch.index);
        if (!choice.enabled && this.selected.length >= this.maxSelected) {
          return this.alert();
        }
        if (this.visible.indexOf(choice) === -1) {
          let choices = reorder(this.choices);
          let actualIdx = choices.indexOf(choice);
          if (focused.index > actualIdx) {
            let start = choices.slice(actualIdx, actualIdx + this.limit);
            let end = choices.filter((ch) => !start.includes(ch));
            this.choices = start.concat(end);
          } else {
            let pos2 = actualIdx - this.limit + 1;
            this.choices = choices.slice(pos2).concat(choices.slice(0, pos2));
          }
        }
        this.index = this.choices.indexOf(choice);
        this.toggle(this.focused);
        return this.render();
      };
      clearTimeout(this.numberTimeout);
      return new Promise((resolve) => {
        let len = this.choices.length;
        let num = this.num;
        let handle = (val = false, res) => {
          clearTimeout(this.numberTimeout);
          if (val) res = number2(num);
          this.num = "";
          resolve(res);
        };
        if (num === "0" || num.length === 1 && Number(num + "0") > len) {
          return handle(true);
        }
        if (Number(num) > len) {
          return handle(false, this.alert());
        }
        this.numberTimeout = setTimeout(() => handle(true), this.delay);
      });
    }
    home() {
      this.choices = reorder(this.choices);
      this.index = 0;
      return this.render();
    }
    end() {
      let pos2 = this.choices.length - this.limit;
      let choices = reorder(this.choices);
      this.choices = choices.slice(pos2).concat(choices.slice(0, pos2));
      this.index = this.limit - 1;
      return this.render();
    }
    first() {
      this.index = 0;
      return this.render();
    }
    last() {
      this.index = this.visible.length - 1;
      return this.render();
    }
    prev() {
      if (this.visible.length <= 1) return this.alert();
      return this.up();
    }
    next() {
      if (this.visible.length <= 1) return this.alert();
      return this.down();
    }
    right() {
      if (this.cursor >= this.input.length) return this.alert();
      this.cursor++;
      return this.render();
    }
    left() {
      if (this.cursor <= 0) return this.alert();
      this.cursor--;
      return this.render();
    }
    up() {
      let len = this.choices.length;
      let vis = this.visible.length;
      let idx = this.index;
      if (this.options.scroll === false && idx === 0) {
        return this.alert();
      }
      if (len > vis && idx === 0) {
        return this.scrollUp();
      }
      this.index = (idx - 1 % len + len) % len;
      if (this.isDisabled()) {
        return this.up();
      }
      return this.render();
    }
    down() {
      let len = this.choices.length;
      let vis = this.visible.length;
      let idx = this.index;
      if (this.options.scroll === false && idx === vis - 1) {
        return this.alert();
      }
      if (len > vis && idx === vis - 1) {
        return this.scrollDown();
      }
      this.index = (idx + 1) % len;
      if (this.isDisabled()) {
        return this.down();
      }
      return this.render();
    }
    scrollUp(i = 0) {
      this.choices = scrollUp(this.choices);
      this.index = i;
      if (this.isDisabled()) {
        return this.up();
      }
      return this.render();
    }
    scrollDown(i = this.visible.length - 1) {
      this.choices = scrollDown(this.choices);
      this.index = i;
      if (this.isDisabled()) {
        return this.down();
      }
      return this.render();
    }
    async shiftUp() {
      if (this.options.sort === true) {
        this.sorting = true;
        this.swap(this.index - 1);
        await this.up();
        this.sorting = false;
        return;
      }
      return this.scrollUp(this.index);
    }
    async shiftDown() {
      if (this.options.sort === true) {
        this.sorting = true;
        this.swap(this.index + 1);
        await this.down();
        this.sorting = false;
        return;
      }
      return this.scrollDown(this.index);
    }
    pageUp() {
      if (this.visible.length <= 1) return this.alert();
      this.limit = Math.max(this.limit - 1, 0);
      this.index = Math.min(this.limit - 1, this.index);
      this._limit = this.limit;
      if (this.isDisabled()) {
        return this.up();
      }
      return this.render();
    }
    pageDown() {
      if (this.visible.length >= this.choices.length) return this.alert();
      this.index = Math.max(0, this.index);
      this.limit = Math.min(this.limit + 1, this.choices.length);
      this._limit = this.limit;
      if (this.isDisabled()) {
        return this.down();
      }
      return this.render();
    }
    swap(pos2) {
      swap2(this.choices, this.index, pos2);
    }
    isDisabled(choice = this.focused) {
      let keys2 = ["disabled", "collapsed", "hidden", "completing", "readonly"];
      if (choice && keys2.some((key2) => choice[key2] === true)) {
        return true;
      }
      return choice && choice.role === "heading";
    }
    isEnabled(choice = this.focused) {
      if (Array.isArray(choice)) return choice.every((ch) => this.isEnabled(ch));
      if (choice.choices) {
        let choices = choice.choices.filter((ch) => !this.isDisabled(ch));
        return choice.enabled && choices.every((ch) => this.isEnabled(ch));
      }
      return choice.enabled && !this.isDisabled(choice);
    }
    isChoice(choice, value2) {
      return choice.name === value2 || choice.index === Number(value2);
    }
    isSelected(choice) {
      if (Array.isArray(this.initial)) {
        return this.initial.some((value2) => this.isChoice(choice, value2));
      }
      return this.isChoice(choice, this.initial);
    }
    map(names = [], prop = "value") {
      return [].concat(names || []).reduce((acc, name) => {
        acc[name] = this.find(name, prop);
        return acc;
      }, {});
    }
    filter(value2, prop) {
      let isChoice = (ele, i) => [ele.name, i].includes(value2);
      let fn2 = typeof value2 === "function" ? value2 : isChoice;
      let choices = this.options.multiple ? this.state._choices : this.choices;
      let result = choices.filter(fn2);
      if (prop) {
        return result.map((ch) => ch[prop]);
      }
      return result;
    }
    find(value2, prop) {
      if (isObject2(value2)) return prop ? value2[prop] : value2;
      let isChoice = (ele, i) => [ele.name, i].includes(value2);
      let fn2 = typeof value2 === "function" ? value2 : isChoice;
      let choice = this.choices.find(fn2);
      if (choice) {
        return prop ? choice[prop] : choice;
      }
    }
    findIndex(value2) {
      return this.choices.indexOf(this.find(value2));
    }
    async submit() {
      let choice = this.focused;
      if (!choice) return this.alert();
      if (choice.newChoice) {
        if (!choice.input) return this.alert();
        choice.updateChoice();
        return this.render();
      }
      if (this.choices.some((ch) => ch.newChoice)) {
        return this.alert();
      }
      let { reorder: reorder2, sort: sort2 } = this.options;
      let multi = this.multiple === true;
      let value2 = this.selected;
      if (value2 === void 0) {
        return this.alert();
      }
      if (Array.isArray(value2) && reorder2 !== false && sort2 !== true) {
        value2 = utils2.reorder(value2);
      }
      this.value = multi ? value2.map((ch) => ch.name) : value2.name;
      return super.submit();
    }
    set choices(choices = []) {
      this.state._choices = this.state._choices || [];
      this.state.choices = choices;
      for (let choice of choices) {
        if (!this.state._choices.some((ch) => ch.name === choice.name)) {
          this.state._choices.push(choice);
        }
      }
      if (!this._initial && this.options.initial) {
        this._initial = true;
        let init = this.initial;
        if (typeof init === "string" || typeof init === "number") {
          let choice = this.find(init);
          if (choice) {
            this.initial = choice.index;
            this.focus(choice, true);
          }
        }
      }
    }
    get choices() {
      return reset(this, this.state.choices || []);
    }
    set visible(visible) {
      this.state.visible = visible;
    }
    get visible() {
      return (this.state.visible || this.choices).slice(0, this.limit);
    }
    set limit(num) {
      this.state.limit = num;
    }
    get limit() {
      let { state: state2, options: options2, choices } = this;
      let limit = state2.limit || this._limit || options2.limit || choices.length;
      return Math.min(limit, this.height);
    }
    set value(value2) {
      super.value = value2;
    }
    get value() {
      if (typeof super.value !== "string" && super.value === this.initial) {
        return this.input;
      }
      return super.value;
    }
    set index(i) {
      this.state.index = i;
    }
    get index() {
      return Math.max(0, this.state ? this.state.index : 0);
    }
    get enabled() {
      return this.filter(this.isEnabled.bind(this));
    }
    get focused() {
      let choice = this.choices[this.index];
      if (choice && this.state.submitted && this.multiple !== true) {
        choice.enabled = true;
      }
      return choice;
    }
    get selectable() {
      return this.choices.filter((choice) => !this.isDisabled(choice));
    }
    get selected() {
      return this.multiple ? this.enabled : this.focused;
    }
  }
  function reset(prompt2, choices) {
    if (choices instanceof Promise) return choices;
    if (typeof choices === "function") {
      if (utils2.isAsyncFn(choices)) return choices;
      choices = choices.call(prompt2, prompt2);
    }
    for (let choice of choices) {
      if (Array.isArray(choice.choices)) {
        let items = choice.choices.filter((ch) => !prompt2.isDisabled(ch));
        choice.enabled = items.every((ch) => ch.enabled === true);
      }
      if (prompt2.isDisabled(choice) === true) {
        delete choice.enabled;
      }
    }
    return choices;
  }
  array = ArrayPrompt;
  return array;
}
var select;
var hasRequiredSelect;
function requireSelect() {
  if (hasRequiredSelect) return select;
  hasRequiredSelect = 1;
  const ArrayPrompt = requireArray();
  const utils2 = utils$1;
  class SelectPrompt extends ArrayPrompt {
    constructor(options2) {
      super(options2);
      this.emptyError = this.options.emptyError || "No items were selected";
    }
    async dispatch(s, key2) {
      if (this.multiple) {
        return this[key2.name] ? await this[key2.name](s, key2) : await super.dispatch(s, key2);
      }
      this.alert();
    }
    separator() {
      if (this.options.separator) return super.separator();
      let sep = this.styles.muted(this.symbols.ellipsis);
      return this.state.submitted ? super.separator() : sep;
    }
    pointer(choice, i) {
      return !this.multiple || this.options.pointer ? super.pointer(choice, i) : "";
    }
    indicator(choice, i) {
      return this.multiple ? super.indicator(choice, i) : "";
    }
    choiceMessage(choice, i) {
      let message = this.resolve(choice.message, this.state, choice, i);
      if (choice.role === "heading" && !utils2.hasColor(message)) {
        message = this.styles.strong(message);
      }
      return this.resolve(message, this.state, choice, i);
    }
    choiceSeparator() {
      return ":";
    }
    async renderChoice(choice, i) {
      await this.onChoice(choice, i);
      let focused = this.index === i;
      let pointer = await this.pointer(choice, i);
      let check = await this.indicator(choice, i) + (choice.pad || "");
      let hint = await this.resolve(choice.hint, this.state, choice, i);
      if (hint && !utils2.hasColor(hint)) {
        hint = this.styles.muted(hint);
      }
      let ind = this.indent(choice);
      let msg = await this.choiceMessage(choice, i);
      let line2 = () => [this.margin[3], ind + pointer + check, msg, this.margin[1], hint].filter(Boolean).join(" ");
      if (choice.role === "heading") {
        return line2();
      }
      if (choice.disabled) {
        if (!utils2.hasColor(msg)) {
          msg = this.styles.disabled(msg);
        }
        return line2();
      }
      if (focused) {
        msg = this.styles.em(msg);
      }
      return line2();
    }
    async renderChoices() {
      if (this.state.loading === "choices") {
        return this.styles.warning("Loading choices");
      }
      if (this.state.submitted) return "";
      let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
      let visible = await Promise.all(choices);
      if (!visible.length) visible.push(this.styles.danger("No matching choices"));
      let result = this.margin[0] + visible.join("\n");
      let header;
      if (this.options.choicesHeader) {
        header = await this.resolve(this.options.choicesHeader, this.state);
      }
      return [header, result].filter(Boolean).join("\n");
    }
    format() {
      if (!this.state.submitted || this.state.cancelled) return "";
      if (Array.isArray(this.selected)) {
        return this.selected.map((choice) => this.styles.primary(choice.name)).join(", ");
      }
      return this.styles.primary(this.selected.name);
    }
    async render() {
      let { submitted, size } = this.state;
      let prompt2 = "";
      let header = await this.header();
      let prefix = await this.prefix();
      let separator = await this.separator();
      let message = await this.message();
      if (this.options.promptLine !== false) {
        prompt2 = [prefix, message, separator, ""].join(" ");
        this.state.prompt = prompt2;
      }
      let output = await this.format();
      let help = await this.error() || await this.hint();
      let body = await this.renderChoices();
      let footer = await this.footer();
      if (output) prompt2 += output;
      if (help && !prompt2.includes(help)) prompt2 += " " + help;
      if (submitted && !output && !body.trim() && this.multiple && this.emptyError != null) {
        prompt2 += this.styles.danger(this.emptyError);
      }
      this.clear(size);
      this.write([header, prompt2, body, footer].filter(Boolean).join("\n"));
      this.write(this.margin[2]);
      this.restore();
    }
  }
  select = SelectPrompt;
  return select;
}
var autocomplete;
var hasRequiredAutocomplete;
function requireAutocomplete() {
  if (hasRequiredAutocomplete) return autocomplete;
  hasRequiredAutocomplete = 1;
  const Select = requireSelect();
  const highlight2 = (input2, color) => {
    let val = input2.toLowerCase();
    return (str) => {
      let s = str.toLowerCase();
      let i = s.indexOf(val);
      let colored = color(str.slice(i, i + val.length));
      return i >= 0 ? str.slice(0, i) + colored + str.slice(i + val.length) : str;
    };
  };
  class AutoComplete extends Select {
    constructor(options2) {
      super(options2);
      this.cursorShow();
    }
    moveCursor(n) {
      this.state.cursor += n;
    }
    dispatch(ch) {
      return this.append(ch);
    }
    space(ch) {
      return this.options.multiple ? super.space(ch) : this.append(ch);
    }
    append(ch) {
      let { cursor, input: input2 } = this.state;
      this.input = input2.slice(0, cursor) + ch + input2.slice(cursor);
      this.moveCursor(1);
      return this.complete();
    }
    delete() {
      let { cursor, input: input2 } = this.state;
      if (!input2) return this.alert();
      this.input = input2.slice(0, cursor - 1) + input2.slice(cursor);
      this.moveCursor(-1);
      return this.complete();
    }
    deleteForward() {
      let { cursor, input: input2 } = this.state;
      if (input2[cursor] === void 0) return this.alert();
      this.input = `${input2}`.slice(0, cursor) + `${input2}`.slice(cursor + 1);
      return this.complete();
    }
    number(ch) {
      return this.append(ch);
    }
    async complete() {
      this.completing = true;
      this.choices = await this.suggest(this.input, this.state._choices);
      this.state.limit = void 0;
      this.index = Math.min(Math.max(this.visible.length - 1, 0), this.index);
      await this.render();
      this.completing = false;
    }
    suggest(input2 = this.input, choices = this.state._choices) {
      if (typeof this.options.suggest === "function") {
        return this.options.suggest.call(this, input2, choices);
      }
      let str = input2.toLowerCase();
      return choices.filter((ch) => ch.message.toLowerCase().includes(str));
    }
    pointer() {
      return "";
    }
    format() {
      if (!this.focused) return this.input;
      if (this.options.multiple && this.state.submitted) {
        return this.selected.map((ch) => this.styles.primary(ch.message)).join(", ");
      }
      if (this.state.submitted) {
        let value2 = this.value = this.input = this.focused.value;
        return this.styles.primary(value2);
      }
      return this.input;
    }
    async render() {
      if (this.state.status !== "pending") return super.render();
      let style = this.options.highlight ? this.options.highlight.bind(this) : this.styles.placeholder;
      let color = highlight2(this.input, style);
      let choices = this.choices;
      this.choices = choices.map((ch) => ({ ...ch, message: color(ch.message) }));
      await super.render();
      this.choices = choices;
    }
    submit() {
      if (this.options.multiple) {
        this.value = this.selected.map((ch) => ch.name);
      }
      return super.submit();
    }
  }
  autocomplete = AutoComplete;
  return autocomplete;
}
var placeholder;
var hasRequiredPlaceholder;
function requirePlaceholder() {
  if (hasRequiredPlaceholder) return placeholder;
  hasRequiredPlaceholder = 1;
  const utils2 = utils$1;
  placeholder = (prompt2, options2 = {}) => {
    prompt2.cursorHide();
    let { input: input2 = "", initial = "", pos: pos2, showCursor = true, color } = options2;
    let style = color || prompt2.styles.placeholder;
    let inverse = utils2.inverse(prompt2.styles.primary);
    let blinker = (str) => inverse(prompt2.styles.black(str));
    let output = input2;
    let char = " ";
    let reverse = blinker(char);
    if (prompt2.blink && prompt2.blink.off === true) {
      blinker = (str) => str;
      reverse = "";
    }
    if (showCursor && pos2 === 0 && initial === "" && input2 === "") {
      return blinker(char);
    }
    if (showCursor && pos2 === 0 && (input2 === initial || input2 === "")) {
      return blinker(initial[0]) + style(initial.slice(1));
    }
    initial = utils2.isPrimitive(initial) ? `${initial}` : "";
    input2 = utils2.isPrimitive(input2) ? `${input2}` : "";
    let placeholder2 = initial && initial.startsWith(input2) && initial !== input2;
    let cursor = placeholder2 ? blinker(initial[input2.length]) : reverse;
    if (pos2 !== input2.length && showCursor === true) {
      output = input2.slice(0, pos2) + blinker(input2[pos2]) + input2.slice(pos2 + 1);
      cursor = "";
    }
    if (showCursor === false) {
      cursor = "";
    }
    if (placeholder2) {
      let raw = prompt2.styles.unstyle(output + cursor);
      return output + cursor + style(initial.slice(raw.length));
    }
    return output + cursor;
  };
  return placeholder;
}
var form;
var hasRequiredForm;
function requireForm() {
  if (hasRequiredForm) return form;
  hasRequiredForm = 1;
  const colors2 = ansiColorsExports;
  const SelectPrompt = requireSelect();
  const placeholder2 = requirePlaceholder();
  class FormPrompt extends SelectPrompt {
    constructor(options2) {
      super({ ...options2, multiple: true });
      this.type = "form";
      this.initial = this.options.initial;
      this.align = [this.options.align, "right"].find((v) => v != null);
      this.emptyError = "";
      this.values = {};
    }
    async reset(first) {
      await super.reset();
      if (first === true) this._index = this.index;
      this.index = this._index;
      this.values = {};
      this.choices.forEach((choice) => choice.reset && choice.reset());
      return this.render();
    }
    dispatch(char) {
      return !!char && this.append(char);
    }
    append(char) {
      let choice = this.focused;
      if (!choice) return this.alert();
      let { cursor, input: input2 } = choice;
      choice.value = choice.input = input2.slice(0, cursor) + char + input2.slice(cursor);
      choice.cursor++;
      return this.render();
    }
    delete() {
      let choice = this.focused;
      if (!choice || choice.cursor <= 0) return this.alert();
      let { cursor, input: input2 } = choice;
      choice.value = choice.input = input2.slice(0, cursor - 1) + input2.slice(cursor);
      choice.cursor--;
      return this.render();
    }
    deleteForward() {
      let choice = this.focused;
      if (!choice) return this.alert();
      let { cursor, input: input2 } = choice;
      if (input2[cursor] === void 0) return this.alert();
      let str = `${input2}`.slice(0, cursor) + `${input2}`.slice(cursor + 1);
      choice.value = choice.input = str;
      return this.render();
    }
    right() {
      let choice = this.focused;
      if (!choice) return this.alert();
      if (choice.cursor >= choice.input.length) return this.alert();
      choice.cursor++;
      return this.render();
    }
    left() {
      let choice = this.focused;
      if (!choice) return this.alert();
      if (choice.cursor <= 0) return this.alert();
      choice.cursor--;
      return this.render();
    }
    space(ch, key2) {
      return this.dispatch(ch, key2);
    }
    number(ch, key2) {
      return this.dispatch(ch, key2);
    }
    next() {
      let ch = this.focused;
      if (!ch) return this.alert();
      let { initial, input: input2 } = ch;
      if (initial && initial.startsWith(input2) && input2 !== initial) {
        ch.value = ch.input = initial;
        ch.cursor = ch.value.length;
        return this.render();
      }
      return super.next();
    }
    prev() {
      let ch = this.focused;
      if (!ch) return this.alert();
      if (ch.cursor === 0) return super.prev();
      ch.value = ch.input = "";
      ch.cursor = 0;
      return this.render();
    }
    separator() {
      return "";
    }
    format(value2) {
      return !this.state.submitted ? super.format(value2) : "";
    }
    pointer() {
      return "";
    }
    indicator(choice) {
      return choice.input ? "⦿" : "⊙";
    }
    async choiceSeparator(choice, i) {
      let sep = await this.resolve(choice.separator, this.state, choice, i) || ":";
      return sep ? " " + this.styles.disabled(sep) : "";
    }
    async renderChoice(choice, i) {
      await this.onChoice(choice, i);
      let { state: state2, styles: styles2 } = this;
      let { cursor, initial = "", name, hint, input: input2 = "" } = choice;
      let { muted, submitted, primary, danger } = styles2;
      let help = hint;
      let focused = this.index === i;
      let validate2 = choice.validate || (() => true);
      let sep = await this.choiceSeparator(choice, i);
      let msg = choice.message;
      if (this.align === "right") msg = msg.padStart(this.longest + 1, " ");
      if (this.align === "left") msg = msg.padEnd(this.longest + 1, " ");
      let value2 = this.values[name] = input2 || initial;
      let color = input2 ? "success" : "dark";
      if (await validate2.call(choice, value2, this.state) !== true) {
        color = "danger";
      }
      let style = styles2[color];
      let indicator = style(await this.indicator(choice, i)) + (choice.pad || "");
      let indent = this.indent(choice);
      let line2 = () => [indent, indicator, msg + sep, input2, help].filter(Boolean).join(" ");
      if (state2.submitted) {
        msg = colors2.unstyle(msg);
        input2 = submitted(input2);
        help = "";
        return line2();
      }
      if (choice.format) {
        input2 = await choice.format.call(this, input2, choice, i);
      } else {
        let color2 = this.styles.muted;
        let options2 = { input: input2, initial, pos: cursor, showCursor: focused, color: color2 };
        input2 = placeholder2(this, options2);
      }
      if (!this.isValue(input2)) {
        input2 = this.styles.muted(this.symbols.ellipsis);
      }
      if (choice.result) {
        this.values[name] = await choice.result.call(this, value2, choice, i);
      }
      if (focused) {
        msg = primary(msg);
      }
      if (choice.error) {
        input2 += (input2 ? " " : "") + danger(choice.error.trim());
      } else if (choice.hint) {
        input2 += (input2 ? " " : "") + muted(choice.hint.trim());
      }
      return line2();
    }
    async submit() {
      this.value = this.values;
      return super.base.submit.call(this);
    }
  }
  form = FormPrompt;
  return form;
}
var auth;
var hasRequiredAuth;
function requireAuth() {
  if (hasRequiredAuth) return auth;
  hasRequiredAuth = 1;
  const FormPrompt = requireForm();
  const defaultAuthenticate = () => {
    throw new Error("expected prompt to have a custom authenticate method");
  };
  const factory = (authenticate = defaultAuthenticate) => {
    class AuthPrompt extends FormPrompt {
      constructor(options2) {
        super(options2);
      }
      async submit() {
        this.value = await authenticate.call(this, this.values, this.state);
        super.base.submit.call(this);
      }
      static create(authenticate2) {
        return factory(authenticate2);
      }
    }
    return AuthPrompt;
  };
  auth = factory();
  return auth;
}
var basicauth;
var hasRequiredBasicauth;
function requireBasicauth() {
  if (hasRequiredBasicauth) return basicauth;
  hasRequiredBasicauth = 1;
  const AuthPrompt = requireAuth();
  function defaultAuthenticate(value2, state2) {
    if (value2.username === this.options.username && value2.password === this.options.password) {
      return true;
    }
    return false;
  }
  const factory = (authenticate = defaultAuthenticate) => {
    const choices = [
      { name: "username", message: "username" },
      {
        name: "password",
        message: "password",
        format(input2) {
          if (this.options.showPassword) {
            return input2;
          }
          let color = this.state.submitted ? this.styles.primary : this.styles.muted;
          return color(this.symbols.asterisk.repeat(input2.length));
        }
      }
    ];
    class BasicAuthPrompt extends AuthPrompt.create(authenticate) {
      constructor(options2) {
        super({ ...options2, choices });
      }
      static create(authenticate2) {
        return factory(authenticate2);
      }
    }
    return BasicAuthPrompt;
  };
  basicauth = factory();
  return basicauth;
}
var boolean;
var hasRequiredBoolean;
function requireBoolean() {
  if (hasRequiredBoolean) return boolean;
  hasRequiredBoolean = 1;
  const Prompt = requirePrompt();
  const { isPrimitive: isPrimitive2, hasColor: hasColor2 } = utils$1;
  class BooleanPrompt extends Prompt {
    constructor(options2) {
      super(options2);
      this.cursorHide();
    }
    async initialize() {
      let initial = await this.resolve(this.initial, this.state);
      this.input = await this.cast(initial);
      await super.initialize();
    }
    dispatch(ch) {
      if (!this.isValue(ch)) return this.alert();
      this.input = ch;
      return this.submit();
    }
    format(value2) {
      let { styles: styles2, state: state2 } = this;
      return !state2.submitted ? styles2.primary(value2) : styles2.success(value2);
    }
    cast(input2) {
      return this.isTrue(input2);
    }
    isTrue(input2) {
      return /^[ty1]/i.test(input2);
    }
    isFalse(input2) {
      return /^[fn0]/i.test(input2);
    }
    isValue(value2) {
      return isPrimitive2(value2) && (this.isTrue(value2) || this.isFalse(value2));
    }
    async hint() {
      if (this.state.status === "pending") {
        let hint = await this.element("hint");
        if (!hasColor2(hint)) {
          return this.styles.muted(hint);
        }
        return hint;
      }
    }
    async render() {
      let { input: input2, size } = this.state;
      let prefix = await this.prefix();
      let sep = await this.separator();
      let msg = await this.message();
      let hint = this.styles.muted(this.default);
      let promptLine = [prefix, msg, hint, sep].filter(Boolean).join(" ");
      this.state.prompt = promptLine;
      let header = await this.header();
      let value2 = this.value = this.cast(input2);
      let output = await this.format(value2);
      let help = await this.error() || await this.hint();
      let footer = await this.footer();
      if (help && !promptLine.includes(help)) output += " " + help;
      promptLine += " " + output;
      this.clear(size);
      this.write([header, promptLine, footer].filter(Boolean).join("\n"));
      this.restore();
    }
    set value(value2) {
      super.value = value2;
    }
    get value() {
      return this.cast(super.value);
    }
  }
  boolean = BooleanPrompt;
  return boolean;
}
var confirm;
var hasRequiredConfirm;
function requireConfirm() {
  if (hasRequiredConfirm) return confirm;
  hasRequiredConfirm = 1;
  const BooleanPrompt = requireBoolean();
  class ConfirmPrompt extends BooleanPrompt {
    constructor(options2) {
      super(options2);
      this.default = this.options.default || (this.initial ? "(Y/n)" : "(y/N)");
    }
  }
  confirm = ConfirmPrompt;
  return confirm;
}
var editable;
var hasRequiredEditable;
function requireEditable() {
  if (hasRequiredEditable) return editable;
  hasRequiredEditable = 1;
  const Select = requireSelect();
  const Form = requireForm();
  const form2 = Form.prototype;
  class Editable extends Select {
    constructor(options2) {
      super({ ...options2, multiple: true });
      this.align = [this.options.align, "left"].find((v) => v != null);
      this.emptyError = "";
      this.values = {};
    }
    dispatch(char, key2) {
      let choice = this.focused;
      let parent = choice.parent || {};
      if (!choice.editable && !parent.editable) {
        if (char === "a" || char === "i") return super[char]();
      }
      return form2.dispatch.call(this, char, key2);
    }
    append(char, key2) {
      return form2.append.call(this, char, key2);
    }
    delete(char, key2) {
      return form2.delete.call(this, char, key2);
    }
    space(char) {
      return this.focused.editable ? this.append(char) : super.space();
    }
    number(char) {
      return this.focused.editable ? this.append(char) : super.number(char);
    }
    next() {
      return this.focused.editable ? form2.next.call(this) : super.next();
    }
    prev() {
      return this.focused.editable ? form2.prev.call(this) : super.prev();
    }
    async indicator(choice, i) {
      let symbol = choice.indicator || "";
      let value2 = choice.editable ? symbol : super.indicator(choice, i);
      return await this.resolve(value2, this.state, choice, i) || "";
    }
    indent(choice) {
      return choice.role === "heading" ? "" : choice.editable ? " " : "  ";
    }
    async renderChoice(choice, i) {
      choice.indent = "";
      if (choice.editable) return form2.renderChoice.call(this, choice, i);
      return super.renderChoice(choice, i);
    }
    error() {
      return "";
    }
    footer() {
      return this.state.error;
    }
    async validate() {
      let result = true;
      for (let choice of this.choices) {
        if (typeof choice.validate !== "function") {
          continue;
        }
        if (choice.role === "heading") {
          continue;
        }
        let val = choice.parent ? this.value[choice.parent.name] : this.value;
        if (choice.editable) {
          val = choice.value === choice.name ? choice.initial || "" : choice.value;
        } else if (!this.isDisabled(choice)) {
          val = choice.enabled === true;
        }
        result = await choice.validate(val, this.state);
        if (result !== true) {
          break;
        }
      }
      if (result !== true) {
        this.state.error = typeof result === "string" ? result : "Invalid Input";
      }
      return result;
    }
    submit() {
      if (this.focused.newChoice === true) return super.submit();
      if (this.choices.some((ch) => ch.newChoice)) {
        return this.alert();
      }
      this.value = {};
      for (let choice of this.choices) {
        let val = choice.parent ? this.value[choice.parent.name] : this.value;
        if (choice.role === "heading") {
          this.value[choice.name] = {};
          continue;
        }
        if (choice.editable) {
          val[choice.name] = choice.value === choice.name ? choice.initial || "" : choice.value;
        } else if (!this.isDisabled(choice)) {
          val[choice.name] = choice.enabled === true;
        }
      }
      return this.base.submit.call(this);
    }
  }
  editable = Editable;
  return editable;
}
var string;
var hasRequiredString;
function requireString() {
  if (hasRequiredString) return string;
  hasRequiredString = 1;
  const Prompt = requirePrompt();
  const placeholder2 = requirePlaceholder();
  const { isPrimitive: isPrimitive2 } = utils$1;
  class StringPrompt extends Prompt {
    constructor(options2) {
      super(options2);
      this.initial = isPrimitive2(this.initial) ? String(this.initial) : "";
      if (this.initial) this.cursorHide();
      this.state.prevCursor = 0;
      this.state.clipboard = [];
    }
    async keypress(input2, key2 = {}) {
      let prev = this.state.prevKeypress;
      this.state.prevKeypress = key2;
      if (this.options.multiline === true && key2.name === "return") {
        if (!prev || prev.name !== "return") {
          return this.append("\n", key2);
        }
      }
      return super.keypress(input2, key2);
    }
    moveCursor(n) {
      this.cursor += n;
    }
    reset() {
      this.input = this.value = "";
      this.cursor = 0;
      return this.render();
    }
    dispatch(ch, key2) {
      if (!ch || key2.ctrl || key2.code) return this.alert();
      this.append(ch);
    }
    append(ch) {
      let { cursor, input: input2 } = this.state;
      this.input = `${input2}`.slice(0, cursor) + ch + `${input2}`.slice(cursor);
      this.moveCursor(String(ch).length);
      this.render();
    }
    insert(str) {
      this.append(str);
    }
    delete() {
      let { cursor, input: input2 } = this.state;
      if (cursor <= 0) return this.alert();
      this.input = `${input2}`.slice(0, cursor - 1) + `${input2}`.slice(cursor);
      this.moveCursor(-1);
      this.render();
    }
    deleteForward() {
      let { cursor, input: input2 } = this.state;
      if (input2[cursor] === void 0) return this.alert();
      this.input = `${input2}`.slice(0, cursor) + `${input2}`.slice(cursor + 1);
      this.render();
    }
    cutForward() {
      let pos2 = this.cursor;
      if (this.input.length <= pos2) return this.alert();
      this.state.clipboard.push(this.input.slice(pos2));
      this.input = this.input.slice(0, pos2);
      this.render();
    }
    cutLeft() {
      let pos2 = this.cursor;
      if (pos2 === 0) return this.alert();
      let before = this.input.slice(0, pos2);
      let after = this.input.slice(pos2);
      let words = before.split(" ");
      this.state.clipboard.push(words.pop());
      this.input = words.join(" ");
      this.cursor = this.input.length;
      this.input += after;
      this.render();
    }
    paste() {
      if (!this.state.clipboard.length) return this.alert();
      this.insert(this.state.clipboard.pop());
      this.render();
    }
    toggleCursor() {
      if (this.state.prevCursor) {
        this.cursor = this.state.prevCursor;
        this.state.prevCursor = 0;
      } else {
        this.state.prevCursor = this.cursor;
        this.cursor = 0;
      }
      this.render();
    }
    first() {
      this.cursor = 0;
      this.render();
    }
    last() {
      this.cursor = this.input.length - 1;
      this.render();
    }
    next() {
      let init = this.initial != null ? String(this.initial) : "";
      if (!init || !init.startsWith(this.input)) return this.alert();
      this.input = this.initial;
      this.cursor = this.initial.length;
      this.render();
    }
    prev() {
      if (!this.input) return this.alert();
      this.reset();
    }
    backward() {
      return this.left();
    }
    forward() {
      return this.right();
    }
    right() {
      if (this.cursor >= this.input.length) return this.alert();
      this.moveCursor(1);
      return this.render();
    }
    left() {
      if (this.cursor <= 0) return this.alert();
      this.moveCursor(-1);
      return this.render();
    }
    isValue(value2) {
      return !!value2;
    }
    async format(input2 = this.value) {
      let initial = await this.resolve(this.initial, this.state);
      if (!this.state.submitted) {
        return placeholder2(this, { input: input2, initial, pos: this.cursor });
      }
      return this.styles.submitted(input2 || initial);
    }
    async render() {
      let size = this.state.size;
      let prefix = await this.prefix();
      let separator = await this.separator();
      let message = await this.message();
      let prompt2 = [prefix, message, separator].filter(Boolean).join(" ");
      this.state.prompt = prompt2;
      let header = await this.header();
      let output = await this.format();
      let help = await this.error() || await this.hint();
      let footer = await this.footer();
      if (help && !output.includes(help)) output += " " + help;
      prompt2 += " " + output;
      this.clear(size);
      this.write([header, prompt2, footer].filter(Boolean).join("\n"));
      this.restore();
    }
  }
  string = StringPrompt;
  return string;
}
var completer;
var hasRequiredCompleter;
function requireCompleter() {
  if (hasRequiredCompleter) return completer;
  hasRequiredCompleter = 1;
  const unique = (arr) => arr.filter((v, i) => arr.lastIndexOf(v) === i);
  const compact = (arr) => unique(arr).filter(Boolean);
  completer = (action, data = {}, value2 = "") => {
    let { past = [], present = "" } = data;
    let rest, prev;
    switch (action) {
      case "prev":
      case "undo":
        rest = past.slice(0, past.length - 1);
        prev = past[past.length - 1] || "";
        return {
          past: compact([value2, ...rest]),
          present: prev
        };
      case "next":
      case "redo":
        rest = past.slice(1);
        prev = past[0] || "";
        return {
          past: compact([...rest, value2]),
          present: prev
        };
      case "save":
        return {
          past: compact([...past, value2]),
          present: ""
        };
      case "remove":
        prev = compact(past.filter((v) => v !== value2));
        present = "";
        if (prev.length) {
          present = prev.pop();
        }
        return {
          past: prev,
          present
        };
      default: {
        throw new Error(`Invalid action: "${action}"`);
      }
    }
  };
  return completer;
}
var input;
var hasRequiredInput;
function requireInput() {
  if (hasRequiredInput) return input;
  hasRequiredInput = 1;
  const Prompt = requireString();
  const completer2 = requireCompleter();
  class Input extends Prompt {
    constructor(options2) {
      super(options2);
      let history = this.options.history;
      if (history && history.store) {
        let initial = history.values || this.initial;
        this.autosave = !!history.autosave;
        this.store = history.store;
        this.data = this.store.get("values") || { past: [], present: initial };
        this.initial = this.data.present || this.data.past[this.data.past.length - 1];
      }
    }
    completion(action) {
      if (!this.store) return this.alert();
      this.data = completer2(action, this.data, this.input);
      if (!this.data.present) return this.alert();
      this.input = this.data.present;
      this.cursor = this.input.length;
      return this.render();
    }
    altUp() {
      return this.completion("prev");
    }
    altDown() {
      return this.completion("next");
    }
    prev() {
      this.save();
      return super.prev();
    }
    save() {
      if (!this.store) return;
      this.data = completer2("save", this.data, this.input);
      this.store.set("values", this.data);
    }
    submit() {
      if (this.store && this.autosave === true) {
        this.save();
      }
      return super.submit();
    }
  }
  input = Input;
  return input;
}
var invisible;
var hasRequiredInvisible;
function requireInvisible() {
  if (hasRequiredInvisible) return invisible;
  hasRequiredInvisible = 1;
  const StringPrompt = requireString();
  class InvisiblePrompt extends StringPrompt {
    format() {
      return "";
    }
  }
  invisible = InvisiblePrompt;
  return invisible;
}
var list;
var hasRequiredList;
function requireList() {
  if (hasRequiredList) return list;
  hasRequiredList = 1;
  const StringPrompt = requireString();
  class ListPrompt extends StringPrompt {
    constructor(options2 = {}) {
      super(options2);
      this.sep = this.options.separator || /, */;
      this.initial = options2.initial || "";
    }
    split(input2 = this.value) {
      return input2 ? String(input2).split(this.sep) : [];
    }
    format() {
      let style = this.state.submitted ? this.styles.primary : (val) => val;
      return this.list.map(style).join(", ");
    }
    async submit(value2) {
      let result = this.state.error || await this.validate(this.list, this.state);
      if (result !== true) {
        this.state.error = result;
        return super.submit();
      }
      this.value = this.list;
      return super.submit();
    }
    get list() {
      return this.split();
    }
  }
  list = ListPrompt;
  return list;
}
var multiselect;
var hasRequiredMultiselect;
function requireMultiselect() {
  if (hasRequiredMultiselect) return multiselect;
  hasRequiredMultiselect = 1;
  const Select = requireSelect();
  class MultiSelect extends Select {
    constructor(options2) {
      super({ ...options2, multiple: true });
    }
  }
  multiselect = MultiSelect;
  return multiselect;
}
var number;
var hasRequiredNumber;
function requireNumber() {
  if (hasRequiredNumber) return number;
  hasRequiredNumber = 1;
  const StringPrompt = requireString();
  class NumberPrompt extends StringPrompt {
    constructor(options2 = {}) {
      super({ style: "number", ...options2 });
      this.min = this.isValue(options2.min) ? this.toNumber(options2.min) : -Infinity;
      this.max = this.isValue(options2.max) ? this.toNumber(options2.max) : Infinity;
      this.delay = options2.delay != null ? options2.delay : 1e3;
      this.float = options2.float !== false;
      this.round = options2.round === true || options2.float === false;
      this.major = options2.major || 10;
      this.minor = options2.minor || 1;
      this.initial = options2.initial != null ? options2.initial : "";
      this.input = String(this.initial);
      this.cursor = this.input.length;
      this.cursorShow();
    }
    append(ch) {
      if (!/[-+.]/.test(ch) || ch === "." && this.input.includes(".")) {
        return this.alert("invalid number");
      }
      return super.append(ch);
    }
    number(ch) {
      return super.append(ch);
    }
    next() {
      if (this.input && this.input !== this.initial) return this.alert();
      if (!this.isValue(this.initial)) return this.alert();
      this.input = this.initial;
      this.cursor = String(this.initial).length;
      return this.render();
    }
    up(number2) {
      let step = number2 || this.minor;
      let num = this.toNumber(this.input);
      if (num > this.max + step) return this.alert();
      this.input = `${num + step}`;
      return this.render();
    }
    down(number2) {
      let step = number2 || this.minor;
      let num = this.toNumber(this.input);
      if (num < this.min - step) return this.alert();
      this.input = `${num - step}`;
      return this.render();
    }
    shiftDown() {
      return this.down(this.major);
    }
    shiftUp() {
      return this.up(this.major);
    }
    format(input2 = this.input) {
      if (typeof this.options.format === "function") {
        return this.options.format.call(this, input2);
      }
      return this.styles.info(input2);
    }
    toNumber(value2 = "") {
      return this.float ? +value2 : Math.round(+value2);
    }
    isValue(value2) {
      return /^[-+]?[0-9]+((\.)|(\.[0-9]+))?$/.test(value2);
    }
    submit() {
      let value2 = [this.input, this.initial].find((v) => this.isValue(v));
      this.value = this.toNumber(value2 || 0);
      return super.submit();
    }
  }
  number = NumberPrompt;
  return number;
}
var numeral;
var hasRequiredNumeral;
function requireNumeral() {
  if (hasRequiredNumeral) return numeral;
  hasRequiredNumeral = 1;
  numeral = requireNumber();
  return numeral;
}
var password;
var hasRequiredPassword;
function requirePassword() {
  if (hasRequiredPassword) return password;
  hasRequiredPassword = 1;
  const StringPrompt = requireString();
  class PasswordPrompt extends StringPrompt {
    constructor(options2) {
      super(options2);
      this.cursorShow();
    }
    format(input2 = this.input) {
      if (!this.keypressed) return "";
      let color = this.state.submitted ? this.styles.primary : this.styles.muted;
      return color(this.symbols.asterisk.repeat(input2.length));
    }
  }
  password = PasswordPrompt;
  return password;
}
var scale;
var hasRequiredScale;
function requireScale() {
  if (hasRequiredScale) return scale;
  hasRequiredScale = 1;
  const colors2 = ansiColorsExports;
  const ArrayPrompt = requireArray();
  const utils2 = utils$1;
  class LikertScale extends ArrayPrompt {
    constructor(options2 = {}) {
      super(options2);
      this.widths = [].concat(options2.messageWidth || 50);
      this.align = [].concat(options2.align || "left");
      this.linebreak = options2.linebreak || false;
      this.edgeLength = options2.edgeLength || 3;
      this.newline = options2.newline || "\n   ";
      let start = options2.startNumber || 1;
      if (typeof this.scale === "number") {
        this.scaleKey = false;
        this.scale = Array(this.scale).fill(0).map((v, i) => ({ name: i + start }));
      }
    }
    async reset() {
      this.tableized = false;
      await super.reset();
      return this.render();
    }
    tableize() {
      if (this.tableized === true) return;
      this.tableized = true;
      let longest = 0;
      for (let ch of this.choices) {
        longest = Math.max(longest, ch.message.length);
        ch.scaleIndex = ch.initial || 2;
        ch.scale = [];
        for (let i = 0; i < this.scale.length; i++) {
          ch.scale.push({ index: i });
        }
      }
      this.widths[0] = Math.min(this.widths[0], longest + 3);
    }
    async dispatch(s, key2) {
      if (this.multiple) {
        return this[key2.name] ? await this[key2.name](s, key2) : await super.dispatch(s, key2);
      }
      this.alert();
    }
    heading(msg, item2, i) {
      return this.styles.strong(msg);
    }
    separator() {
      return this.styles.muted(this.symbols.ellipsis);
    }
    right() {
      let choice = this.focused;
      if (choice.scaleIndex >= this.scale.length - 1) return this.alert();
      choice.scaleIndex++;
      return this.render();
    }
    left() {
      let choice = this.focused;
      if (choice.scaleIndex <= 0) return this.alert();
      choice.scaleIndex--;
      return this.render();
    }
    indent() {
      return "";
    }
    format() {
      if (this.state.submitted) {
        let values = this.choices.map((ch) => this.styles.info(ch.index));
        return values.join(", ");
      }
      return "";
    }
    pointer() {
      return "";
    }
    /**
     * Render the scale "Key". Something like:
     * @return {String}
     */
    renderScaleKey() {
      if (this.scaleKey === false) return "";
      if (this.state.submitted) return "";
      let scale2 = this.scale.map((item2) => `   ${item2.name} - ${item2.message}`);
      let key2 = ["", ...scale2].map((item2) => this.styles.muted(item2));
      return key2.join("\n");
    }
    /**
     * Render the heading row for the scale.
     * @return {String}
     */
    renderScaleHeading(max) {
      let keys2 = this.scale.map((ele) => ele.name);
      if (typeof this.options.renderScaleHeading === "function") {
        keys2 = this.options.renderScaleHeading.call(this, max);
      }
      let diff2 = this.scaleLength - keys2.join("").length;
      let spacing = Math.round(diff2 / (keys2.length - 1));
      let names = keys2.map((key2) => this.styles.strong(key2));
      let headings = names.join(" ".repeat(spacing));
      let padding = " ".repeat(this.widths[0]);
      return this.margin[3] + padding + this.margin[1] + headings;
    }
    /**
     * Render a scale indicator => ◯ or ◉ by default
     */
    scaleIndicator(choice, item2, i) {
      if (typeof this.options.scaleIndicator === "function") {
        return this.options.scaleIndicator.call(this, choice, item2, i);
      }
      let enabled = choice.scaleIndex === item2.index;
      if (item2.disabled) return this.styles.hint(this.symbols.radio.disabled);
      if (enabled) return this.styles.success(this.symbols.radio.on);
      return this.symbols.radio.off;
    }
    /**
     * Render the actual scale => ◯────◯────◉────◯────◯
     */
    renderScale(choice, i) {
      let scale2 = choice.scale.map((item2) => this.scaleIndicator(choice, item2, i));
      let padding = this.term === "Hyper" ? "" : " ";
      return scale2.join(padding + this.symbols.line.repeat(this.edgeLength));
    }
    /**
     * Render a choice, including scale =>
     *   "The website is easy to navigate. ◯───◯───◉───◯───◯"
     */
    async renderChoice(choice, i) {
      await this.onChoice(choice, i);
      let focused = this.index === i;
      let pointer = await this.pointer(choice, i);
      let hint = await choice.hint;
      if (hint && !utils2.hasColor(hint)) {
        hint = this.styles.muted(hint);
      }
      let pad2 = (str) => this.margin[3] + str.replace(/\s+$/, "").padEnd(this.widths[0], " ");
      let newline = this.newline;
      let ind = this.indent(choice);
      let message = await this.resolve(choice.message, this.state, choice, i);
      let scale2 = await this.renderScale(choice, i);
      let margin = this.margin[1] + this.margin[3];
      this.scaleLength = colors2.unstyle(scale2).length;
      this.widths[0] = Math.min(this.widths[0], this.width - this.scaleLength - margin.length);
      let msg = utils2.wordWrap(message, { width: this.widths[0], newline });
      let lines = msg.split("\n").map((line2) => pad2(line2) + this.margin[1]);
      if (focused) {
        scale2 = this.styles.info(scale2);
        lines = lines.map((line2) => this.styles.info(line2));
      }
      lines[0] += scale2;
      if (this.linebreak) lines.push("");
      return [ind + pointer, lines.join("\n")].filter(Boolean);
    }
    async renderChoices() {
      if (this.state.submitted) return "";
      this.tableize();
      let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
      let visible = await Promise.all(choices);
      let heading = await this.renderScaleHeading();
      return this.margin[0] + [heading, ...visible.map((v) => v.join(" "))].join("\n");
    }
    async render() {
      let { submitted, size } = this.state;
      let prefix = await this.prefix();
      let separator = await this.separator();
      let message = await this.message();
      let prompt2 = "";
      if (this.options.promptLine !== false) {
        prompt2 = [prefix, message, separator, ""].join(" ");
        this.state.prompt = prompt2;
      }
      let header = await this.header();
      let output = await this.format();
      let key2 = await this.renderScaleKey();
      let help = await this.error() || await this.hint();
      let body = await this.renderChoices();
      let footer = await this.footer();
      let err = this.emptyError;
      if (output) prompt2 += output;
      if (help && !prompt2.includes(help)) prompt2 += " " + help;
      if (submitted && !output && !body.trim() && this.multiple && err != null) {
        prompt2 += this.styles.danger(err);
      }
      this.clear(size);
      this.write([header, prompt2, key2, body, footer].filter(Boolean).join("\n"));
      if (!this.state.submitted) {
        this.write(this.margin[2]);
      }
      this.restore();
    }
    submit() {
      this.value = {};
      for (let choice of this.choices) {
        this.value[choice.name] = choice.scaleIndex;
      }
      return this.base.submit.call(this);
    }
  }
  scale = LikertScale;
  return scale;
}
var interpolate;
var hasRequiredInterpolate;
function requireInterpolate() {
  if (hasRequiredInterpolate) return interpolate;
  hasRequiredInterpolate = 1;
  const colors2 = ansiColorsExports;
  const clean = (str = "") => {
    return typeof str === "string" ? str.replace(/^['"]|['"]$/g, "") : "";
  };
  class Item {
    constructor(token2) {
      this.name = token2.key;
      this.field = token2.field || {};
      this.value = clean(token2.initial || this.field.initial || "");
      this.message = token2.message || this.name;
      this.cursor = 0;
      this.input = "";
      this.lines = [];
    }
  }
  const tokenize2 = async (options2 = {}, defaults = {}, fn2 = (token2) => token2) => {
    let unique = /* @__PURE__ */ new Set();
    let fields2 = options2.fields || [];
    let input2 = options2.template;
    let tabstops = [];
    let items = [];
    let keys2 = [];
    let line2 = 1;
    if (typeof input2 === "function") {
      input2 = await input2();
    }
    let i = -1;
    let next = () => input2[++i];
    let peek2 = () => input2[i + 1];
    let push2 = (token2) => {
      token2.line = line2;
      tabstops.push(token2);
    };
    push2({ type: "bos", value: "" });
    while (i < input2.length - 1) {
      let value2 = next();
      if (/^[^\S\n ]$/.test(value2)) {
        push2({ type: "text", value: value2 });
        continue;
      }
      if (value2 === "\n") {
        push2({ type: "newline", value: value2 });
        line2++;
        continue;
      }
      if (value2 === "\\") {
        value2 += next();
        push2({ type: "text", value: value2 });
        continue;
      }
      if ((value2 === "$" || value2 === "#" || value2 === "{") && peek2() === "{") {
        let n = next();
        value2 += n;
        let token2 = { type: "template", open: value2, inner: "", close: "", value: value2 };
        let ch;
        while (ch = next()) {
          if (ch === "}") {
            if (peek2() === "}") ch += next();
            token2.value += ch;
            token2.close = ch;
            break;
          }
          if (ch === ":") {
            token2.initial = "";
            token2.key = token2.inner;
          } else if (token2.initial !== void 0) {
            token2.initial += ch;
          }
          token2.value += ch;
          token2.inner += ch;
        }
        token2.template = token2.open + (token2.initial || token2.inner) + token2.close;
        token2.key = token2.key || token2.inner;
        if (defaults.hasOwnProperty(token2.key)) {
          token2.initial = defaults[token2.key];
        }
        token2 = fn2(token2);
        push2(token2);
        keys2.push(token2.key);
        unique.add(token2.key);
        let item2 = items.find((item3) => item3.name === token2.key);
        token2.field = fields2.find((ch2) => ch2.name === token2.key);
        if (!item2) {
          item2 = new Item(token2);
          items.push(item2);
        }
        item2.lines.push(token2.line - 1);
        continue;
      }
      let last = tabstops[tabstops.length - 1];
      if (last.type === "text" && last.line === line2) {
        last.value += value2;
      } else {
        push2({ type: "text", value: value2 });
      }
    }
    push2({ type: "eos", value: "" });
    return { input: input2, tabstops, unique, keys: keys2, items };
  };
  interpolate = async (prompt2) => {
    let options2 = prompt2.options;
    let required = new Set(options2.required === true ? [] : options2.required || []);
    let defaults = { ...options2.values, ...options2.initial };
    let { tabstops, items, keys: keys2 } = await tokenize2(options2, defaults);
    let result = createFn("result", prompt2);
    let format2 = createFn("format", prompt2);
    let isValid = createFn("validate", prompt2, options2, true);
    let isVal = prompt2.isValue.bind(prompt2);
    return async (state2 = {}, submitted = false) => {
      let index2 = 0;
      state2.required = required;
      state2.items = items;
      state2.keys = keys2;
      state2.output = "";
      let validate2 = async (value2, state3, item2, index3) => {
        let error2 = await isValid(value2, state3, item2, index3);
        if (error2 === false) {
          return "Invalid field " + item2.name;
        }
        return error2;
      };
      for (let token2 of tabstops) {
        let value2 = token2.value;
        let key2 = token2.key;
        if (token2.type !== "template") {
          if (value2) state2.output += value2;
          continue;
        }
        if (token2.type === "template") {
          let item2 = items.find((ch) => ch.name === key2);
          if (options2.required === true) {
            state2.required.add(item2.name);
          }
          let val = [item2.input, state2.values[item2.value], item2.value, value2].find(isVal);
          let field = item2.field || {};
          let message = field.message || token2.inner;
          if (submitted) {
            let error2 = await validate2(state2.values[key2], state2, item2, index2);
            if (error2 && typeof error2 === "string" || error2 === false) {
              state2.invalid.set(key2, error2);
              continue;
            }
            state2.invalid.delete(key2);
            let res = await result(state2.values[key2], state2, item2, index2);
            state2.output += colors2.unstyle(res);
            continue;
          }
          item2.placeholder = false;
          let before = value2;
          value2 = await format2(value2, state2, item2, index2);
          if (val !== value2) {
            state2.values[key2] = val;
            value2 = prompt2.styles.typing(val);
            state2.missing.delete(message);
          } else {
            state2.values[key2] = void 0;
            val = `<${message}>`;
            value2 = prompt2.styles.primary(val);
            item2.placeholder = true;
            if (state2.required.has(key2)) {
              state2.missing.add(message);
            }
          }
          if (state2.missing.has(message) && state2.validating) {
            value2 = prompt2.styles.warning(val);
          }
          if (state2.invalid.has(key2) && state2.validating) {
            value2 = prompt2.styles.danger(val);
          }
          if (index2 === state2.index) {
            if (before !== value2) {
              value2 = prompt2.styles.underline(value2);
            } else {
              value2 = prompt2.styles.heading(colors2.unstyle(value2));
            }
          }
          index2++;
        }
        if (value2) {
          state2.output += value2;
        }
      }
      let lines = state2.output.split("\n").map((l) => " " + l);
      let len = items.length;
      let done = 0;
      for (let item2 of items) {
        if (state2.invalid.has(item2.name)) {
          item2.lines.forEach((i) => {
            if (lines[i][0] !== " ") return;
            lines[i] = state2.styles.danger(state2.symbols.bullet) + lines[i].slice(1);
          });
        }
        if (prompt2.isValue(state2.values[item2.name])) {
          done++;
        }
      }
      state2.completed = (done / len * 100).toFixed(0);
      state2.output = lines.join("\n");
      return state2.output;
    };
  };
  function createFn(prop, prompt2, options2, fallback) {
    return (value2, state2, item2, index2) => {
      if (typeof item2.field[prop] === "function") {
        return item2.field[prop].call(prompt2, value2, state2, item2, index2);
      }
      return [fallback, value2].find((v) => prompt2.isValue(v));
    };
  }
  return interpolate;
}
var snippet;
var hasRequiredSnippet;
function requireSnippet() {
  if (hasRequiredSnippet) return snippet;
  hasRequiredSnippet = 1;
  const colors2 = ansiColorsExports;
  const interpolate2 = requireInterpolate();
  const Prompt = requirePrompt();
  class SnippetPrompt extends Prompt {
    constructor(options2) {
      super(options2);
      this.cursorHide();
      this.reset(true);
    }
    async initialize() {
      this.interpolate = await interpolate2(this);
      await super.initialize();
    }
    async reset(first) {
      this.state.keys = [];
      this.state.invalid = /* @__PURE__ */ new Map();
      this.state.missing = /* @__PURE__ */ new Set();
      this.state.completed = 0;
      this.state.values = {};
      if (first !== true) {
        await this.initialize();
        await this.render();
      }
    }
    moveCursor(n) {
      let item2 = this.getItem();
      this.cursor += n;
      item2.cursor += n;
    }
    dispatch(ch, key2) {
      if (!key2.code && !key2.ctrl && ch != null && this.getItem()) {
        this.append(ch, key2);
        return;
      }
      this.alert();
    }
    append(ch, key2) {
      let item2 = this.getItem();
      let prefix = item2.input.slice(0, this.cursor);
      let suffix = item2.input.slice(this.cursor);
      this.input = item2.input = `${prefix}${ch}${suffix}`;
      this.moveCursor(1);
      this.render();
    }
    delete() {
      let item2 = this.getItem();
      if (this.cursor <= 0 || !item2.input) return this.alert();
      let suffix = item2.input.slice(this.cursor);
      let prefix = item2.input.slice(0, this.cursor - 1);
      this.input = item2.input = `${prefix}${suffix}`;
      this.moveCursor(-1);
      this.render();
    }
    increment(i) {
      return i >= this.state.keys.length - 1 ? 0 : i + 1;
    }
    decrement(i) {
      return i <= 0 ? this.state.keys.length - 1 : i - 1;
    }
    first() {
      this.state.index = 0;
      this.render();
    }
    last() {
      this.state.index = this.state.keys.length - 1;
      this.render();
    }
    right() {
      if (this.cursor >= this.input.length) return this.alert();
      this.moveCursor(1);
      this.render();
    }
    left() {
      if (this.cursor <= 0) return this.alert();
      this.moveCursor(-1);
      this.render();
    }
    prev() {
      this.state.index = this.decrement(this.state.index);
      this.getItem();
      this.render();
    }
    next() {
      this.state.index = this.increment(this.state.index);
      this.getItem();
      this.render();
    }
    up() {
      this.prev();
    }
    down() {
      this.next();
    }
    format(value2) {
      let color = this.state.completed < 100 ? this.styles.warning : this.styles.success;
      if (this.state.submitted === true && this.state.completed !== 100) {
        color = this.styles.danger;
      }
      return color(`${this.state.completed}% completed`);
    }
    async render() {
      let { index: index2, keys: keys2 = [], submitted, size } = this.state;
      let newline = [this.options.newline, "\n"].find((v) => v != null);
      let prefix = await this.prefix();
      let separator = await this.separator();
      let message = await this.message();
      let prompt2 = [prefix, message, separator].filter(Boolean).join(" ");
      this.state.prompt = prompt2;
      let header = await this.header();
      let error2 = await this.error() || "";
      let hint = await this.hint() || "";
      let body = submitted ? "" : await this.interpolate(this.state);
      let key2 = this.state.key = keys2[index2] || "";
      let input2 = await this.format(key2);
      let footer = await this.footer();
      if (input2) prompt2 += " " + input2;
      if (hint && !input2 && this.state.completed === 0) prompt2 += " " + hint;
      this.clear(size);
      let lines = [header, prompt2, body, footer, error2.trim()];
      this.write(lines.filter(Boolean).join(newline));
      this.restore();
    }
    getItem(name) {
      let { items, keys: keys2, index: index2 } = this.state;
      let item2 = items.find((ch) => ch.name === keys2[index2]);
      if (item2 && item2.input != null) {
        this.input = item2.input;
        this.cursor = item2.cursor;
      }
      return item2;
    }
    async submit() {
      if (typeof this.interpolate !== "function") await this.initialize();
      await this.interpolate(this.state, true);
      let { invalid, missing, output, values } = this.state;
      if (invalid.size) {
        let err = "";
        for (let [key2, value2] of invalid) err += `Invalid ${key2}: ${value2}
`;
        this.state.error = err;
        return super.submit();
      }
      if (missing.size) {
        this.state.error = "Required: " + [...missing.keys()].join(", ");
        return super.submit();
      }
      let lines = colors2.unstyle(output).split("\n");
      let result = lines.map((v) => v.slice(1)).join("\n");
      this.value = { values, result };
      return super.submit();
    }
  }
  snippet = SnippetPrompt;
  return snippet;
}
var sort;
var hasRequiredSort;
function requireSort() {
  if (hasRequiredSort) return sort;
  hasRequiredSort = 1;
  const hint = "(Use <shift>+<up/down> to sort)";
  const Prompt = requireSelect();
  class Sort extends Prompt {
    constructor(options2) {
      super({ ...options2, reorder: false, sort: true, multiple: true });
      this.state.hint = [this.options.hint, hint].find(this.isValue.bind(this));
    }
    indicator() {
      return "";
    }
    async renderChoice(choice, i) {
      let str = await super.renderChoice(choice, i);
      let sym = this.symbols.identicalTo + " ";
      let pre = this.index === i && this.sorting ? this.styles.muted(sym) : "  ";
      if (this.options.drag === false) pre = "";
      if (this.options.numbered === true) {
        return pre + `${i + 1} - ` + str;
      }
      return pre + str;
    }
    get selected() {
      return this.choices;
    }
    submit() {
      this.value = this.choices.map((choice) => choice.value);
      return super.submit();
    }
  }
  sort = Sort;
  return sort;
}
var survey;
var hasRequiredSurvey;
function requireSurvey() {
  if (hasRequiredSurvey) return survey;
  hasRequiredSurvey = 1;
  const ArrayPrompt = requireArray();
  class Survey extends ArrayPrompt {
    constructor(options2 = {}) {
      super(options2);
      this.emptyError = options2.emptyError || "No items were selected";
      this.term = process.env.TERM_PROGRAM;
      if (!this.options.header) {
        let header = ["", "4 - Strongly Agree", "3 - Agree", "2 - Neutral", "1 - Disagree", "0 - Strongly Disagree", ""];
        header = header.map((ele) => this.styles.muted(ele));
        this.state.header = header.join("\n   ");
      }
    }
    async toChoices(...args) {
      if (this.createdScales) return false;
      this.createdScales = true;
      let choices = await super.toChoices(...args);
      for (let choice of choices) {
        choice.scale = createScale(5, this.options);
        choice.scaleIdx = 2;
      }
      return choices;
    }
    dispatch() {
      this.alert();
    }
    space() {
      let choice = this.focused;
      let ele = choice.scale[choice.scaleIdx];
      let selected = ele.selected;
      choice.scale.forEach((e) => e.selected = false);
      ele.selected = !selected;
      return this.render();
    }
    indicator() {
      return "";
    }
    pointer() {
      return "";
    }
    separator() {
      return this.styles.muted(this.symbols.ellipsis);
    }
    right() {
      let choice = this.focused;
      if (choice.scaleIdx >= choice.scale.length - 1) return this.alert();
      choice.scaleIdx++;
      return this.render();
    }
    left() {
      let choice = this.focused;
      if (choice.scaleIdx <= 0) return this.alert();
      choice.scaleIdx--;
      return this.render();
    }
    indent() {
      return "   ";
    }
    async renderChoice(item2, i) {
      await this.onChoice(item2, i);
      let focused = this.index === i;
      let isHyper = this.term === "Hyper";
      let n = !isHyper ? 8 : 9;
      let s = !isHyper ? " " : "";
      let ln = this.symbols.line.repeat(n);
      let sp = " ".repeat(n + (isHyper ? 0 : 1));
      let dot = (enabled) => (enabled ? this.styles.success("◉") : "◯") + s;
      let num = i + 1 + ".";
      let color = focused ? this.styles.heading : this.styles.noop;
      let msg = await this.resolve(item2.message, this.state, item2, i);
      let indent = this.indent(item2);
      let scale2 = indent + item2.scale.map((e, i2) => dot(i2 === item2.scaleIdx)).join(ln);
      let val = (i2) => i2 === item2.scaleIdx ? color(i2) : i2;
      let next = indent + item2.scale.map((e, i2) => val(i2)).join(sp);
      let line2 = () => [num, msg].filter(Boolean).join(" ");
      let lines = () => [line2(), scale2, next, " "].filter(Boolean).join("\n");
      if (focused) {
        scale2 = this.styles.cyan(scale2);
        next = this.styles.cyan(next);
      }
      return lines();
    }
    async renderChoices() {
      if (this.state.submitted) return "";
      let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
      let visible = await Promise.all(choices);
      if (!visible.length) visible.push(this.styles.danger("No matching choices"));
      return visible.join("\n");
    }
    format() {
      if (this.state.submitted) {
        let values = this.choices.map((ch) => this.styles.info(ch.scaleIdx));
        return values.join(", ");
      }
      return "";
    }
    async render() {
      let { submitted, size } = this.state;
      let prefix = await this.prefix();
      let separator = await this.separator();
      let message = await this.message();
      let prompt2 = [prefix, message, separator].filter(Boolean).join(" ");
      this.state.prompt = prompt2;
      let header = await this.header();
      let output = await this.format();
      let help = await this.error() || await this.hint();
      let body = await this.renderChoices();
      let footer = await this.footer();
      if (output || !help) prompt2 += " " + output;
      if (help && !prompt2.includes(help)) prompt2 += " " + help;
      if (submitted && !output && !body && this.multiple && this.type !== "form") {
        prompt2 += this.styles.danger(this.emptyError);
      }
      this.clear(size);
      this.write([prompt2, header, body, footer].filter(Boolean).join("\n"));
      this.restore();
    }
    submit() {
      this.value = {};
      for (let choice of this.choices) {
        this.value[choice.name] = choice.scaleIdx;
      }
      return this.base.submit.call(this);
    }
  }
  function createScale(n, options2 = {}) {
    if (Array.isArray(options2.scale)) {
      return options2.scale.map((ele) => ({ ...ele }));
    }
    let scale2 = [];
    for (let i = 1; i < n + 1; i++) scale2.push({ i, selected: false });
    return scale2;
  }
  survey = Survey;
  return survey;
}
var text;
var hasRequiredText;
function requireText() {
  if (hasRequiredText) return text;
  hasRequiredText = 1;
  text = requireInput();
  return text;
}
var toggle;
var hasRequiredToggle;
function requireToggle() {
  if (hasRequiredToggle) return toggle;
  hasRequiredToggle = 1;
  const BooleanPrompt = requireBoolean();
  class TogglePrompt extends BooleanPrompt {
    async initialize() {
      await super.initialize();
      this.value = this.initial = !!this.options.initial;
      this.disabled = this.options.disabled || "no";
      this.enabled = this.options.enabled || "yes";
      await this.render();
    }
    reset() {
      this.value = this.initial;
      this.render();
    }
    delete() {
      this.alert();
    }
    toggle() {
      this.value = !this.value;
      this.render();
    }
    enable() {
      if (this.value === true) return this.alert();
      this.value = true;
      this.render();
    }
    disable() {
      if (this.value === false) return this.alert();
      this.value = false;
      this.render();
    }
    up() {
      this.toggle();
    }
    down() {
      this.toggle();
    }
    right() {
      this.toggle();
    }
    left() {
      this.toggle();
    }
    next() {
      this.toggle();
    }
    prev() {
      this.toggle();
    }
    dispatch(ch = "", key2) {
      switch (ch.toLowerCase()) {
        case " ":
          return this.toggle();
        case "1":
        case "y":
        case "t":
          return this.enable();
        case "0":
        case "n":
        case "f":
          return this.disable();
        default: {
          return this.alert();
        }
      }
    }
    format() {
      let active = (str) => this.styles.primary.underline(str);
      let value2 = [
        this.value ? this.disabled : active(this.disabled),
        this.value ? active(this.enabled) : this.enabled
      ];
      return value2.join(this.styles.muted(" / "));
    }
    async render() {
      let { size } = this.state;
      let header = await this.header();
      let prefix = await this.prefix();
      let separator = await this.separator();
      let message = await this.message();
      let output = await this.format();
      let help = await this.error() || await this.hint();
      let footer = await this.footer();
      let prompt2 = [prefix, message, separator, output].join(" ");
      this.state.prompt = prompt2;
      if (help && !prompt2.includes(help)) prompt2 += " " + help;
      this.clear(size);
      this.write([header, prompt2, footer].filter(Boolean).join("\n"));
      this.write(this.margin[2]);
      this.restore();
    }
  }
  toggle = TogglePrompt;
  return toggle;
}
var quiz;
var hasRequiredQuiz;
function requireQuiz() {
  if (hasRequiredQuiz) return quiz;
  hasRequiredQuiz = 1;
  const SelectPrompt = requireSelect();
  class Quiz extends SelectPrompt {
    constructor(options2) {
      super(options2);
      if (typeof this.options.correctChoice !== "number" || this.options.correctChoice < 0) {
        throw new Error("Please specify the index of the correct answer from the list of choices");
      }
    }
    async toChoices(value2, parent) {
      let choices = await super.toChoices(value2, parent);
      if (choices.length < 2) {
        throw new Error("Please give at least two choices to the user");
      }
      if (this.options.correctChoice > choices.length) {
        throw new Error("Please specify the index of the correct answer from the list of choices");
      }
      return choices;
    }
    check(state2) {
      return state2.index === this.options.correctChoice;
    }
    async result(selected) {
      return {
        selectedAnswer: selected,
        correctAnswer: this.options.choices[this.options.correctChoice].value,
        correct: await this.check(this.state)
      };
    }
  }
  quiz = Quiz;
  return quiz;
}
var hasRequiredPrompts;
function requirePrompts() {
  if (hasRequiredPrompts) return prompts$1;
  hasRequiredPrompts = 1;
  (function(exports) {
    const utils2 = utils$1;
    const define = (key2, fn2) => {
      utils2.defineExport(exports, key2, fn2);
      utils2.defineExport(exports, key2.toLowerCase(), fn2);
    };
    define("AutoComplete", () => requireAutocomplete());
    define("BasicAuth", () => requireBasicauth());
    define("Confirm", () => requireConfirm());
    define("Editable", () => requireEditable());
    define("Form", () => requireForm());
    define("Input", () => requireInput());
    define("Invisible", () => requireInvisible());
    define("List", () => requireList());
    define("MultiSelect", () => requireMultiselect());
    define("Numeral", () => requireNumeral());
    define("Password", () => requirePassword());
    define("Scale", () => requireScale());
    define("Select", () => requireSelect());
    define("Snippet", () => requireSnippet());
    define("Sort", () => requireSort());
    define("Survey", () => requireSurvey());
    define("Text", () => requireText());
    define("Toggle", () => requireToggle());
    define("Quiz", () => requireQuiz());
  })(prompts$1);
  return prompts$1;
}
var types;
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes) return types;
  hasRequiredTypes = 1;
  types = {
    ArrayPrompt: requireArray(),
    AuthPrompt: requireAuth(),
    BooleanPrompt: requireBoolean(),
    NumberPrompt: requireNumber(),
    StringPrompt: requireString()
  };
  return types;
}
const assert = requireAssert();
const Events = eventsExports;
const utils = utils$1;
class Enquirer extends Events {
  constructor(options2, answers) {
    super();
    this.options = utils.merge({}, options2);
    this.answers = { ...answers };
  }
  /**
   * Register a custom prompt type.
   *
   * ```js
   * const Enquirer = require('enquirer');
   * const enquirer = new Enquirer();
   * enquirer.register('customType', require('./custom-prompt'));
   * ```
   * @name register()
   * @param {String} `type`
   * @param {Function|Prompt} `fn` `Prompt` class, or a function that returns a `Prompt` class.
   * @return {Object} Returns the Enquirer instance
   * @api public
   */
  register(type, fn2) {
    if (utils.isObject(type)) {
      for (let key2 of Object.keys(type)) this.register(key2, type[key2]);
      return this;
    }
    assert.equal(typeof fn2, "function", "expected a function");
    let name = type.toLowerCase();
    if (fn2.prototype instanceof this.Prompt) {
      this.prompts[name] = fn2;
    } else {
      this.prompts[name] = fn2(this.Prompt, this);
    }
    return this;
  }
  /**
   * Prompt function that takes a "question" object or array of question objects,
   * and returns an object with responses from the user.
   *
   * ```js
   * const Enquirer = require('enquirer');
   * const enquirer = new Enquirer();
   *
   * const response = await enquirer.prompt({
   *   type: 'input',
   *   name: 'username',
   *   message: 'What is your username?'
   * });
   * console.log(response);
   * ```
   * @name prompt()
   * @param {Array|Object} `questions` Options objects for one or more prompts to run.
   * @return {Promise} Promise that returns an "answers" object with the user's responses.
   * @api public
   */
  async prompt(questions = []) {
    for (let question of [].concat(questions)) {
      try {
        if (typeof question === "function") question = await question.call(this);
        await this.ask(utils.merge({}, this.options, question));
      } catch (err) {
        return Promise.reject(err);
      }
    }
    return this.answers;
  }
  async ask(question) {
    if (typeof question === "function") {
      question = await question.call(this);
    }
    let opts = utils.merge({}, this.options, question);
    let { type, name } = question;
    let { set, get } = utils;
    if (typeof type === "function") {
      type = await type.call(this, question, this.answers);
    }
    if (!type) return this.answers[name];
    assert(this.prompts[type], `Prompt "${type}" is not registered`);
    let prompt2 = new this.prompts[type](opts);
    let value2 = get(this.answers, name);
    prompt2.state.answers = this.answers;
    prompt2.enquirer = this;
    if (name) {
      prompt2.on("submit", (value3) => {
        this.emit("answer", name, value3, prompt2);
        set(this.answers, name, value3);
      });
    }
    let emit = prompt2.emit.bind(prompt2);
    prompt2.emit = (...args) => {
      this.emit.call(this, ...args);
      return emit(...args);
    };
    this.emit("prompt", prompt2, this);
    if (opts.autofill && value2 != null) {
      prompt2.value = prompt2.input = value2;
      if (opts.autofill === "show") {
        await prompt2.submit();
      }
    } else {
      value2 = prompt2.value = await prompt2.run();
    }
    return value2;
  }
  /**
   * Use an enquirer plugin.
   *
   * ```js
   * const Enquirer = require('enquirer');
   * const enquirer = new Enquirer();
   * const plugin = enquirer => {
   *   // do stuff to enquire instance
   * };
   * enquirer.use(plugin);
   * ```
   * @name use()
   * @param {Function} `plugin` Plugin function that takes an instance of Enquirer.
   * @return {Object} Returns the Enquirer instance.
   * @api public
   */
  use(plugin2) {
    plugin2.call(this, this);
    return this;
  }
  set Prompt(value2) {
    this._Prompt = value2;
  }
  get Prompt() {
    return this._Prompt || this.constructor.Prompt;
  }
  get prompts() {
    return this.constructor.prompts;
  }
  static set Prompt(value2) {
    this._Prompt = value2;
  }
  static get Prompt() {
    return this._Prompt || requirePrompt();
  }
  static get prompts() {
    return requirePrompts();
  }
  static get types() {
    return requireTypes();
  }
  /**
   * Prompt function that takes a "question" object or array of question objects,
   * and returns an object with responses from the user.
   *
   * ```js
   * const { prompt } = require('enquirer');
   * const response = await prompt({
   *   type: 'input',
   *   name: 'username',
   *   message: 'What is your username?'
   * });
   * console.log(response);
   * ```
   * @name Enquirer#prompt
   * @param {Array|Object} `questions` Options objects for one or more prompts to run.
   * @return {Promise} Promise that returns an "answers" object with the user's responses.
   * @api public
   */
  static get prompt() {
    const fn2 = (questions, ...rest) => {
      let enquirer2 = new this(...rest);
      let emit = enquirer2.emit.bind(enquirer2);
      enquirer2.emit = (...args) => {
        fn2.emit(...args);
        return emit(...args);
      };
      return enquirer2.prompt(questions);
    };
    utils.mixinEmitter(fn2, new Events());
    return fn2;
  }
}
utils.mixinEmitter(Enquirer, new Events());
const prompts = Enquirer.prompts;
for (let name of Object.keys(prompts)) {
  let key2 = name.toLowerCase();
  let run = (options2) => new prompts[name](options2).run();
  Enquirer.prompt[key2] = run;
  Enquirer[key2] = run;
  if (!Enquirer[name]) {
    Reflect.defineProperty(Enquirer, name, { get: () => prompts[name] });
  }
}
const exp = (name) => {
  utils.defineExport(Enquirer, name, () => Enquirer.types[name]);
};
exp("ArrayPrompt");
exp("AuthPrompt");
exp("BooleanPrompt");
exp("NumberPrompt");
exp("StringPrompt");
var enquirer$1 = Enquirer;
const enquirerLibrary = /* @__PURE__ */ getDefaultExportFromCjs(enquirer$1);
function noop() {
}
const chokidarLibrary = {
  watch: noop
};
function isAmbiguous(x2) {
  return x2 === 161 || x2 === 164 || x2 === 167 || x2 === 168 || x2 === 170 || x2 === 173 || x2 === 174 || x2 >= 176 && x2 <= 180 || x2 >= 182 && x2 <= 186 || x2 >= 188 && x2 <= 191 || x2 === 198 || x2 === 208 || x2 === 215 || x2 === 216 || x2 >= 222 && x2 <= 225 || x2 === 230 || x2 >= 232 && x2 <= 234 || x2 === 236 || x2 === 237 || x2 === 240 || x2 === 242 || x2 === 243 || x2 >= 247 && x2 <= 250 || x2 === 252 || x2 === 254 || x2 === 257 || x2 === 273 || x2 === 275 || x2 === 283 || x2 === 294 || x2 === 295 || x2 === 299 || x2 >= 305 && x2 <= 307 || x2 === 312 || x2 >= 319 && x2 <= 322 || x2 === 324 || x2 >= 328 && x2 <= 331 || x2 === 333 || x2 === 338 || x2 === 339 || x2 === 358 || x2 === 359 || x2 === 363 || x2 === 462 || x2 === 464 || x2 === 466 || x2 === 468 || x2 === 470 || x2 === 472 || x2 === 474 || x2 === 476 || x2 === 593 || x2 === 609 || x2 === 708 || x2 === 711 || x2 >= 713 && x2 <= 715 || x2 === 717 || x2 === 720 || x2 >= 728 && x2 <= 731 || x2 === 733 || x2 === 735 || x2 >= 768 && x2 <= 879 || x2 >= 913 && x2 <= 929 || x2 >= 931 && x2 <= 937 || x2 >= 945 && x2 <= 961 || x2 >= 963 && x2 <= 969 || x2 === 1025 || x2 >= 1040 && x2 <= 1103 || x2 === 1105 || x2 === 8208 || x2 >= 8211 && x2 <= 8214 || x2 === 8216 || x2 === 8217 || x2 === 8220 || x2 === 8221 || x2 >= 8224 && x2 <= 8226 || x2 >= 8228 && x2 <= 8231 || x2 === 8240 || x2 === 8242 || x2 === 8243 || x2 === 8245 || x2 === 8251 || x2 === 8254 || x2 === 8308 || x2 === 8319 || x2 >= 8321 && x2 <= 8324 || x2 === 8364 || x2 === 8451 || x2 === 8453 || x2 === 8457 || x2 === 8467 || x2 === 8470 || x2 === 8481 || x2 === 8482 || x2 === 8486 || x2 === 8491 || x2 === 8531 || x2 === 8532 || x2 >= 8539 && x2 <= 8542 || x2 >= 8544 && x2 <= 8555 || x2 >= 8560 && x2 <= 8569 || x2 === 8585 || x2 >= 8592 && x2 <= 8601 || x2 === 8632 || x2 === 8633 || x2 === 8658 || x2 === 8660 || x2 === 8679 || x2 === 8704 || x2 === 8706 || x2 === 8707 || x2 === 8711 || x2 === 8712 || x2 === 8715 || x2 === 8719 || x2 === 8721 || x2 === 8725 || x2 === 8730 || x2 >= 8733 && x2 <= 8736 || x2 === 8739 || x2 === 8741 || x2 >= 8743 && x2 <= 8748 || x2 === 8750 || x2 >= 8756 && x2 <= 8759 || x2 === 8764 || x2 === 8765 || x2 === 8776 || x2 === 8780 || x2 === 8786 || x2 === 8800 || x2 === 8801 || x2 >= 8804 && x2 <= 8807 || x2 === 8810 || x2 === 8811 || x2 === 8814 || x2 === 8815 || x2 === 8834 || x2 === 8835 || x2 === 8838 || x2 === 8839 || x2 === 8853 || x2 === 8857 || x2 === 8869 || x2 === 8895 || x2 === 8978 || x2 >= 9312 && x2 <= 9449 || x2 >= 9451 && x2 <= 9547 || x2 >= 9552 && x2 <= 9587 || x2 >= 9600 && x2 <= 9615 || x2 >= 9618 && x2 <= 9621 || x2 === 9632 || x2 === 9633 || x2 >= 9635 && x2 <= 9641 || x2 === 9650 || x2 === 9651 || x2 === 9654 || x2 === 9655 || x2 === 9660 || x2 === 9661 || x2 === 9664 || x2 === 9665 || x2 >= 9670 && x2 <= 9672 || x2 === 9675 || x2 >= 9678 && x2 <= 9681 || x2 >= 9698 && x2 <= 9701 || x2 === 9711 || x2 === 9733 || x2 === 9734 || x2 === 9737 || x2 === 9742 || x2 === 9743 || x2 === 9756 || x2 === 9758 || x2 === 9792 || x2 === 9794 || x2 === 9824 || x2 === 9825 || x2 >= 9827 && x2 <= 9829 || x2 >= 9831 && x2 <= 9834 || x2 === 9836 || x2 === 9837 || x2 === 9839 || x2 === 9886 || x2 === 9887 || x2 === 9919 || x2 >= 9926 && x2 <= 9933 || x2 >= 9935 && x2 <= 9939 || x2 >= 9941 && x2 <= 9953 || x2 === 9955 || x2 === 9960 || x2 === 9961 || x2 >= 9963 && x2 <= 9969 || x2 === 9972 || x2 >= 9974 && x2 <= 9977 || x2 === 9979 || x2 === 9980 || x2 === 9982 || x2 === 9983 || x2 === 10045 || x2 >= 10102 && x2 <= 10111 || x2 >= 11094 && x2 <= 11097 || x2 >= 12872 && x2 <= 12879 || x2 >= 57344 && x2 <= 63743 || x2 >= 65024 && x2 <= 65039 || x2 === 65533 || x2 >= 127232 && x2 <= 127242 || x2 >= 127248 && x2 <= 127277 || x2 >= 127280 && x2 <= 127337 || x2 >= 127344 && x2 <= 127373 || x2 === 127375 || x2 === 127376 || x2 >= 127387 && x2 <= 127404 || x2 >= 917760 && x2 <= 917999 || x2 >= 983040 && x2 <= 1048573 || x2 >= 1048576 && x2 <= 1114109;
}
function isFullWidth(x2) {
  return x2 === 12288 || x2 >= 65281 && x2 <= 65376 || x2 >= 65504 && x2 <= 65510;
}
function isWide(x2) {
  return x2 >= 4352 && x2 <= 4447 || x2 === 8986 || x2 === 8987 || x2 === 9001 || x2 === 9002 || x2 >= 9193 && x2 <= 9196 || x2 === 9200 || x2 === 9203 || x2 === 9725 || x2 === 9726 || x2 === 9748 || x2 === 9749 || x2 >= 9776 && x2 <= 9783 || x2 >= 9800 && x2 <= 9811 || x2 === 9855 || x2 >= 9866 && x2 <= 9871 || x2 === 9875 || x2 === 9889 || x2 === 9898 || x2 === 9899 || x2 === 9917 || x2 === 9918 || x2 === 9924 || x2 === 9925 || x2 === 9934 || x2 === 9940 || x2 === 9962 || x2 === 9970 || x2 === 9971 || x2 === 9973 || x2 === 9978 || x2 === 9981 || x2 === 9989 || x2 === 9994 || x2 === 9995 || x2 === 10024 || x2 === 10060 || x2 === 10062 || x2 >= 10067 && x2 <= 10069 || x2 === 10071 || x2 >= 10133 && x2 <= 10135 || x2 === 10160 || x2 === 10175 || x2 === 11035 || x2 === 11036 || x2 === 11088 || x2 === 11093 || x2 >= 11904 && x2 <= 11929 || x2 >= 11931 && x2 <= 12019 || x2 >= 12032 && x2 <= 12245 || x2 >= 12272 && x2 <= 12287 || x2 >= 12289 && x2 <= 12350 || x2 >= 12353 && x2 <= 12438 || x2 >= 12441 && x2 <= 12543 || x2 >= 12549 && x2 <= 12591 || x2 >= 12593 && x2 <= 12686 || x2 >= 12688 && x2 <= 12773 || x2 >= 12783 && x2 <= 12830 || x2 >= 12832 && x2 <= 12871 || x2 >= 12880 && x2 <= 42124 || x2 >= 42128 && x2 <= 42182 || x2 >= 43360 && x2 <= 43388 || x2 >= 44032 && x2 <= 55203 || x2 >= 63744 && x2 <= 64255 || x2 >= 65040 && x2 <= 65049 || x2 >= 65072 && x2 <= 65106 || x2 >= 65108 && x2 <= 65126 || x2 >= 65128 && x2 <= 65131 || x2 >= 94176 && x2 <= 94180 || x2 === 94192 || x2 === 94193 || x2 >= 94208 && x2 <= 100343 || x2 >= 100352 && x2 <= 101589 || x2 >= 101631 && x2 <= 101640 || x2 >= 110576 && x2 <= 110579 || x2 >= 110581 && x2 <= 110587 || x2 === 110589 || x2 === 110590 || x2 >= 110592 && x2 <= 110882 || x2 === 110898 || x2 >= 110928 && x2 <= 110930 || x2 === 110933 || x2 >= 110948 && x2 <= 110951 || x2 >= 110960 && x2 <= 111355 || x2 >= 119552 && x2 <= 119638 || x2 >= 119648 && x2 <= 119670 || x2 === 126980 || x2 === 127183 || x2 === 127374 || x2 >= 127377 && x2 <= 127386 || x2 >= 127488 && x2 <= 127490 || x2 >= 127504 && x2 <= 127547 || x2 >= 127552 && x2 <= 127560 || x2 === 127568 || x2 === 127569 || x2 >= 127584 && x2 <= 127589 || x2 >= 127744 && x2 <= 127776 || x2 >= 127789 && x2 <= 127797 || x2 >= 127799 && x2 <= 127868 || x2 >= 127870 && x2 <= 127891 || x2 >= 127904 && x2 <= 127946 || x2 >= 127951 && x2 <= 127955 || x2 >= 127968 && x2 <= 127984 || x2 === 127988 || x2 >= 127992 && x2 <= 128062 || x2 === 128064 || x2 >= 128066 && x2 <= 128252 || x2 >= 128255 && x2 <= 128317 || x2 >= 128331 && x2 <= 128334 || x2 >= 128336 && x2 <= 128359 || x2 === 128378 || x2 === 128405 || x2 === 128406 || x2 === 128420 || x2 >= 128507 && x2 <= 128591 || x2 >= 128640 && x2 <= 128709 || x2 === 128716 || x2 >= 128720 && x2 <= 128722 || x2 >= 128725 && x2 <= 128727 || x2 >= 128732 && x2 <= 128735 || x2 === 128747 || x2 === 128748 || x2 >= 128756 && x2 <= 128764 || x2 >= 128992 && x2 <= 129003 || x2 === 129008 || x2 >= 129292 && x2 <= 129338 || x2 >= 129340 && x2 <= 129349 || x2 >= 129351 && x2 <= 129535 || x2 >= 129648 && x2 <= 129660 || x2 >= 129664 && x2 <= 129673 || x2 >= 129679 && x2 <= 129734 || x2 >= 129742 && x2 <= 129756 || x2 >= 129759 && x2 <= 129769 || x2 >= 129776 && x2 <= 129784 || x2 >= 131072 && x2 <= 196605 || x2 >= 196608 && x2 <= 262141;
}
function getCategory(x2) {
  if (isAmbiguous(x2)) return "ambiguous";
  if (isFullWidth(x2)) return "fullwidth";
  if (x2 === 8361 || x2 >= 65377 && x2 <= 65470 || x2 >= 65474 && x2 <= 65479 || x2 >= 65482 && x2 <= 65487 || x2 >= 65490 && x2 <= 65495 || x2 >= 65498 && x2 <= 65500 || x2 >= 65512 && x2 <= 65518) {
    return "halfwidth";
  }
  if (x2 >= 32 && x2 <= 126 || x2 === 162 || x2 === 163 || x2 === 165 || x2 === 166 || x2 === 172 || x2 === 175 || x2 >= 10214 && x2 <= 10221 || x2 === 10629 || x2 === 10630) {
    return "narrow";
  }
  if (isWide(x2)) return "wide";
  return "neutral";
}
function validate(codePoint) {
  if (!Number.isSafeInteger(codePoint)) {
    throw new TypeError(`Expected a code point, got \`${typeof codePoint}\`.`);
  }
}
function eastAsianWidthType(codePoint) {
  validate(codePoint);
  return getCategory(codePoint);
}
function eastAsianWidth(codePoint, { ambiguousAsWide = false } = {}) {
  validate(codePoint);
  if (isFullWidth(codePoint) || isWide(codePoint) || ambiguousAsWide && isAmbiguous(codePoint)) {
    return 2;
  }
  return 1;
}
const _isNarrowWidth = (codePoint) => !(isFullWidth(codePoint) || isWide(codePoint));
const getEastAsianWidthLibrary = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  _isNarrowWidth,
  eastAsianWidth,
  eastAsianWidthType
}, Symbol.toStringTag, { value: "Module" }));
const json5 = lib$1;
const pirates = piratesLibrary;
const sourceMapSupport$1 = sourceMapSupportLibrary;
const stoppable = stoppableLibrary;
const enquirer = enquirerLibrary;
const chokidar = chokidarLibrary;
const getEastAsianWidth = getEastAsianWidthLibrary;
const utilsBundleImpl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  chokidar,
  enquirer,
  getEastAsianWidth,
  json5,
  pirates,
  sourceMapSupport: sourceMapSupport$1,
  stoppable
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(utilsBundleImpl);
require$$0.json5;
require$$0.pirates;
const sourceMapSupport = require$$0.sourceMapSupport;
require$$0.stoppable;
require$$0.enquirer;
require$$0.chokidar;
require$$0.getEastAsianWidth;
process.env.PWTEST_CACHE_DIR || (() => {
  var _a;
  if (process.platform === "win32")
    return path$2.join(browser$5.tmpdir(), `playwright-transform-cache`);
  return path$2.join(browser$5.tmpdir(), `playwright-transform-cache-` + ((_a = process.geteuid) == null ? void 0 : _a.call(process)));
})();
const sourceMaps = /* @__PURE__ */ new Map();
const memoryCache = /* @__PURE__ */ new Map();
const fileDependencies = /* @__PURE__ */ new Map();
const externalDependencies = /* @__PURE__ */ new Map();
function addToCompilationCache(payload) {
  for (const entry of payload.sourceMaps)
    sourceMaps.set(entry[0], entry[1]);
  for (const entry of payload.memoryCache)
    memoryCache.set(entry[0], entry[1]);
  for (const entry of payload.fileDependencies) {
    const existing = fileDependencies.get(entry[0]) || [];
    fileDependencies.set(entry[0], /* @__PURE__ */ new Set([...entry[1], ...existing]));
  }
  for (const entry of payload.externalDependencies) {
    const existing = externalDependencies.get(entry[0]) || [];
    externalDependencies.set(entry[0], /* @__PURE__ */ new Set([...entry[1], ...existing]));
  }
}
path$2.resolve("playwright/packages/playwright/src/transform", "../../../playwright");
process.platform === "win32" ? ";" : ":";
new Set(Module.builtinModules);
function wrapFunctionWithLocation(func) {
  return (...args) => {
    const oldPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (error2, stackFrames) => {
      const frame = sourceMapSupport.wrapCallSite(stackFrames[1]);
      const fileName = frame.getFileName();
      const file2 = fileName && fileName.startsWith("file://") ? url.fileURLToPath(fileName) : fileName;
      return {
        file: file2,
        line: frame.getLineNumber(),
        column: frame.getColumnNumber()
      };
    };
    const oldStackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 2;
    const obj = {};
    Error.captureStackTrace(obj);
    const location = obj.stack;
    Error.stackTraceLimit = oldStackTraceLimit;
    Error.prepareStackTrace = oldPrepareStackTrace;
    return func(location, ...args);
  };
}
const testTypeSymbol = Symbol("testType");
class TestTypeImpl {
  constructor(fixtures) {
    this.fixtures = fixtures;
    const test2 = wrapFunctionWithLocation(this._createTest.bind(this, "default"));
    test2[testTypeSymbol] = this;
    test2.expect = expect;
    test2.only = wrapFunctionWithLocation(this._createTest.bind(this, "only"));
    test2.describe = wrapFunctionWithLocation(this._describe.bind(this, "default"));
    test2.describe.only = wrapFunctionWithLocation(this._describe.bind(this, "only"));
    test2.describe.configure = wrapFunctionWithLocation(this._configure.bind(this));
    test2.describe.fixme = wrapFunctionWithLocation(this._describe.bind(this, "fixme"));
    test2.describe.parallel = wrapFunctionWithLocation(this._describe.bind(this, "parallel"));
    test2.describe.parallel.only = wrapFunctionWithLocation(this._describe.bind(this, "parallel.only"));
    test2.describe.serial = wrapFunctionWithLocation(this._describe.bind(this, "serial"));
    test2.describe.serial.only = wrapFunctionWithLocation(this._describe.bind(this, "serial.only"));
    test2.describe.skip = wrapFunctionWithLocation(this._describe.bind(this, "skip"));
    test2.beforeEach = wrapFunctionWithLocation(this._hook.bind(this, "beforeEach"));
    test2.afterEach = wrapFunctionWithLocation(this._hook.bind(this, "afterEach"));
    test2.beforeAll = wrapFunctionWithLocation(this._hook.bind(this, "beforeAll"));
    test2.afterAll = wrapFunctionWithLocation(this._hook.bind(this, "afterAll"));
    test2.skip = wrapFunctionWithLocation(this._modifier.bind(this, "skip"));
    test2.fixme = wrapFunctionWithLocation(this._modifier.bind(this, "fixme"));
    test2.fail = wrapFunctionWithLocation(this._modifier.bind(this, "fail"));
    test2.fail.only = wrapFunctionWithLocation(this._createTest.bind(this, "fail.only"));
    test2.slow = wrapFunctionWithLocation(this._modifier.bind(this, "slow"));
    test2.setTimeout = wrapFunctionWithLocation(this._setTimeout.bind(this));
    test2.step = this._step.bind(this, "pass");
    test2.step.skip = this._step.bind(this, "skip");
    test2.use = wrapFunctionWithLocation(this._use.bind(this));
    test2.extend = wrapFunctionWithLocation(this._extend.bind(this));
    test2.info = () => {
      throw new Error("test.info() can only be called while test is running");
    };
    this.test = test2;
  }
  _currentSuite(location, title) {
    const suite = currentlyLoadingFileSuite();
    if (!suite) {
      throw new Error([
        `Playwright Test did not expect ${title} to be called here.`,
        `Most common reasons include:`,
        `- You are calling ${title} in a configuration file.`,
        `- You are calling ${title} in a file that is imported by the configuration file.`,
        `- You have two different versions of @playwright/test. This usually happens`,
        `  when one of the dependencies in your package.json depends on @playwright/test.`
      ].join("\n"));
    }
    return suite;
  }
  _createTest(type, location, title, fnOrDetails, fn2) {
    throwIfRunningInsideJest();
    const suite = this._currentSuite(location, "test()");
    if (!suite)
      return;
    let details;
    let body;
    if (typeof fnOrDetails === "function") {
      body = fnOrDetails;
      details = {};
    } else {
      body = fn2;
      details = fnOrDetails;
    }
    const validatedDetails = validateTestDetails(details);
    const test2 = new TestCase(title, body, this, location);
    test2._requireFile = suite._requireFile;
    test2._staticAnnotations.push(...validatedDetails.annotations);
    test2._tags.push(...validatedDetails.tags);
    suite._addTest(test2);
    if (type === "only" || type === "fail.only")
      test2._only = true;
    if (type === "skip" || type === "fixme" || type === "fail")
      test2._staticAnnotations.push({ type });
    else if (type === "fail.only")
      test2._staticAnnotations.push({ type: "fail" });
  }
  _describe(type, location, titleOrFn, fnOrDetails, fn2) {
    throwIfRunningInsideJest();
    const suite = this._currentSuite(location, "test.describe()");
    if (!suite)
      return;
    let title;
    let body;
    let details;
    if (typeof titleOrFn === "function") {
      title = "";
      details = {};
      body = titleOrFn;
    } else if (typeof fnOrDetails === "function") {
      title = titleOrFn;
      details = {};
      body = fnOrDetails;
    } else {
      title = titleOrFn;
      details = fnOrDetails;
      body = fn2;
    }
    const validatedDetails = validateTestDetails(details);
    const child = new Suite(title, "describe");
    child._requireFile = suite._requireFile;
    child.location = location;
    child._staticAnnotations.push(...validatedDetails.annotations);
    child._tags.push(...validatedDetails.tags);
    suite._addSuite(child);
    if (type === "only" || type === "serial.only" || type === "parallel.only")
      child._only = true;
    if (type === "serial" || type === "serial.only")
      child._parallelMode = "serial";
    if (type === "parallel" || type === "parallel.only")
      child._parallelMode = "parallel";
    if (type === "skip" || type === "fixme")
      child._staticAnnotations.push({ type });
    for (let parent = suite; parent; parent = parent.parent) {
      if (parent._parallelMode === "serial" && child._parallelMode === "parallel")
        throw new Error("describe.parallel cannot be nested inside describe.serial");
      if (parent._parallelMode === "default" && child._parallelMode === "parallel")
        throw new Error("describe.parallel cannot be nested inside describe with default mode");
    }
    setCurrentlyLoadingFileSuite(child);
    body();
    setCurrentlyLoadingFileSuite(suite);
  }
  _hook(name, location, title, fn2) {
    const suite = this._currentSuite(location, `test.${name}()`);
    if (!suite)
      return;
    if (typeof title === "function") {
      fn2 = title;
      title = `${name} hook`;
    }
    suite._hooks.push({ type: name, fn: fn2, title, location });
  }
  _configure(location, options2) {
    throwIfRunningInsideJest();
    const suite = this._currentSuite(location, `test.describe.configure()`);
    if (!suite)
      return;
    if (options2.timeout !== void 0)
      suite._timeout = options2.timeout;
    if (options2.retries !== void 0)
      suite._retries = options2.retries;
    if (options2.mode !== void 0) {
      if (suite._parallelMode !== "none")
        throw new Error(`"${suite._parallelMode}" mode is already assigned for the enclosing scope.`);
      suite._parallelMode = options2.mode;
      for (let parent = suite.parent; parent; parent = parent.parent) {
        if (parent._parallelMode === "serial" && suite._parallelMode === "parallel")
          throw new Error("describe with parallel mode cannot be nested inside describe with serial mode");
        if (parent._parallelMode === "default" && suite._parallelMode === "parallel")
          throw new Error("describe with parallel mode cannot be nested inside describe with default mode");
      }
    }
  }
  _modifier(type, location, ...modifierArgs) {
    const suite = currentlyLoadingFileSuite();
    if (suite) {
      if (typeof modifierArgs[0] === "string" && typeof modifierArgs[1] === "function" && (type === "skip" || type === "fixme" || type === "fail")) {
        this._createTest(type, location, modifierArgs[0], modifierArgs[1]);
        return;
      }
      if (typeof modifierArgs[0] === "string" && typeof modifierArgs[1] === "object" && typeof modifierArgs[2] === "function" && (type === "skip" || type === "fixme" || type === "fail")) {
        this._createTest(type, location, modifierArgs[0], modifierArgs[1], modifierArgs[2]);
        return;
      }
      if (typeof modifierArgs[0] === "function") {
        suite._modifiers.push({ type, fn: modifierArgs[0], location, description: modifierArgs[1] });
      } else {
        if (modifierArgs.length >= 1 && !modifierArgs[0])
          return;
        const description = modifierArgs[1];
        suite._staticAnnotations.push({ type, description });
      }
      return;
    }
    throw new Error(`test.${type}() can only be called inside test, describe block or fixture`);
  }
  _setTimeout(location, timeout) {
    const suite = currentlyLoadingFileSuite();
    if (suite) {
      suite._timeout = timeout;
      return;
    }
    throw new Error(`test.setTimeout() can only be called from a test`);
  }
  _use(location, fixtures) {
    const suite = this._currentSuite(location, `test.use()`);
    if (!suite)
      return;
    suite._use.push({ fixtures, location });
  }
  async _step(expectation, title, body, options2 = {}) {
    throw new Error(`test.step() can only be called from a test`);
  }
  _extend(location, fixtures) {
    if (fixtures[testTypeSymbol])
      throw new Error(`test.extend() accepts fixtures object, not a test object.
Did you mean to call mergeTests()?`);
    const fixturesWithLocation = { fixtures, location };
    return new TestTypeImpl([...this.fixtures, fixturesWithLocation]).test;
  }
}
function throwIfRunningInsideJest() {
  if (process.env.JEST_WORKER_ID) {
    const packageManagerCommand = getPackageManagerExecCommand();
    throw new Error(
      `Playwright Test needs to be invoked via '${packageManagerCommand} playwright test' and excluded from Jest test runs.
Creating one directory for Playwright tests and one for Jest is the recommended way of doing it.
See https://playwright.dev/docs/intro for more information about Playwright Test.`
    );
  }
}
function validateTestDetails(details) {
  const annotations = Array.isArray(details.annotation) ? details.annotation : details.annotation ? [details.annotation] : [];
  const tags = Array.isArray(details.tag) ? details.tag : details.tag ? [details.tag] : [];
  for (const tag of tags) {
    if (tag[0] !== "@")
      throw new Error(`Tag must start with "@" symbol, got "${tag}" instead.`);
  }
  return { annotations, tags };
}
const rootTestType = new TestTypeImpl([]);
class PortTransport {
  constructor(port, handler) {
    this._lastId = 0;
    this._callbacks = /* @__PURE__ */ new Map();
    this._port = port;
    port.addEventListener("message", async (event) => {
      const message = event.data;
      const { id, ackId, method, params, result } = message;
      if (id) {
        const result2 = await handler(method, params);
        this._port.postMessage({ ackId: id, result: result2 });
        return;
      }
      if (ackId) {
        const callback = this._callbacks.get(ackId);
        this._callbacks.delete(ackId);
        this._resetRef();
        callback == null ? void 0 : callback(result);
        return;
      }
    });
    this._resetRef();
  }
  async send(method, params) {
    return await new Promise((f) => {
      const id = ++this._lastId;
      this._callbacks.set(id, f);
      this._resetRef();
      this._port.postMessage({ id, method, params });
    });
  }
  _resetRef() {
    if (this._callbacks.size) {
      this._port.ref();
    } else {
      this._port.unref();
    }
  }
}
if (globalThis.__esmLoaderPortPreV20)
  createPortTransport(globalThis.__esmLoaderPortPreV20);
function createPortTransport(port) {
  return new PortTransport(port, async (method, params) => {
    if (method === "pushToCompilationCache")
      addToCompilationCache(params.cache);
  });
}
[
  "--no-warnings",
  `--experimental-loader=${url.pathToFileURL(Boolean("playwright/lib/transform/esmLoader")).toString()}`
];
const _baseTest = rootTestType.test;
addInternalStackPrefix(pathExports.dirname(Boolean("../package.json")));
if (process["__pw_initiator__"]) {
  const originalStackTraceLimit = Error.stackTraceLimit;
  Error.stackTraceLimit = 200;
  try {
    throw new Error("Requiring @playwright/test second time, \nFirst:\n" + process["__pw_initiator__"] + "\n\nSecond: ");
  } finally {
    Error.stackTraceLimit = originalStackTraceLimit;
  }
} else {
  process["__pw_initiator__"] = new Error().stack;
}
const playwrightFixtures = {
  defaultBrowserType: ["chromium", { scope: "worker", option: true }],
  browserName: [({ defaultBrowserType }, use) => use(defaultBrowserType), { scope: "worker", option: true }],
  playwright: [async ({}, use) => {
    await use(require("playwright-core"));
  }, { scope: "worker", box: true }],
  headless: [({ launchOptions }, use) => use(launchOptions.headless ?? true), { scope: "worker", option: true }],
  channel: [({ launchOptions }, use) => use(launchOptions.channel), { scope: "worker", option: true }],
  launchOptions: [{}, { scope: "worker", option: true }],
  connectOptions: [async ({ _optionConnectOptions }, use) => {
    await use(connectOptionsFromEnv() || _optionConnectOptions);
  }, { scope: "worker", option: true }],
  screenshot: ["off", { scope: "worker", option: true }],
  video: ["off", { scope: "worker", option: true }],
  trace: ["off", { scope: "worker", option: true }],
  _browserOptions: [async ({ playwright, headless, channel, launchOptions }, use) => {
    const options2 = {
      handleSIGINT: false,
      ...launchOptions
    };
    if (headless !== void 0)
      options2.headless = headless;
    if (channel !== void 0)
      options2.channel = channel;
    options2.tracesDir = tracing().tracesDir();
    for (const browserType of [playwright.chromium, playwright.firefox, playwright.webkit, playwright._bidiChromium, playwright._bidiFirefox])
      browserType._defaultLaunchOptions = options2;
    await use(options2);
    for (const browserType of [playwright.chromium, playwright.firefox, playwright.webkit, playwright._bidiChromium, playwright._bidiFirefox])
      browserType._defaultLaunchOptions = void 0;
  }, { scope: "worker", auto: true, box: true }],
  browser: [async ({ playwright, browserName, _browserOptions, connectOptions, _reuseContext }, use, testInfo) => {
    if (!["chromium", "firefox", "webkit", "_bidiChromium", "_bidiFirefox"].includes(browserName))
      throw new Error(`Unexpected browserName "${browserName}", must be one of "chromium", "firefox" or "webkit"`);
    if (connectOptions) {
      const browser22 = await playwright[browserName].connect({
        ...connectOptions,
        exposeNetwork: connectOptions.exposeNetwork ?? connectOptions._exposeNetwork,
        headers: {
          ..._reuseContext ? { "x-playwright-reuse-context": "1" } : {},
          // HTTP headers are ASCII only (not UTF-8).
          "x-playwright-launch-options": jsonStringifyForceASCII(_browserOptions),
          ...connectOptions.headers
        }
      });
      await use(browser22);
      await browser22._wrapApiCall(async () => {
        await browser22.close({ reason: "Test ended." });
      }, true);
      return;
    }
    const browser2 = await playwright[browserName].launch();
    await use(browser2);
    await browser2._wrapApiCall(async () => {
      await browser2.close({ reason: "Test ended." });
    }, true);
  }, { scope: "worker", timeout: 0 }],
  acceptDownloads: [({ contextOptions }, use) => use(contextOptions.acceptDownloads ?? true), { option: true }],
  bypassCSP: [({ contextOptions }, use) => use(contextOptions.bypassCSP ?? false), { option: true }],
  colorScheme: [({ contextOptions }, use) => use(contextOptions.colorScheme === void 0 ? "light" : contextOptions.colorScheme), { option: true }],
  deviceScaleFactor: [({ contextOptions }, use) => use(contextOptions.deviceScaleFactor), { option: true }],
  extraHTTPHeaders: [({ contextOptions }, use) => use(contextOptions.extraHTTPHeaders), { option: true }],
  geolocation: [({ contextOptions }, use) => use(contextOptions.geolocation), { option: true }],
  hasTouch: [({ contextOptions }, use) => use(contextOptions.hasTouch ?? false), { option: true }],
  httpCredentials: [({ contextOptions }, use) => use(contextOptions.httpCredentials), { option: true }],
  ignoreHTTPSErrors: [({ contextOptions }, use) => use(contextOptions.ignoreHTTPSErrors ?? false), { option: true }],
  isMobile: [({ contextOptions }, use) => use(contextOptions.isMobile ?? false), { option: true }],
  javaScriptEnabled: [({ contextOptions }, use) => use(contextOptions.javaScriptEnabled ?? true), { option: true }],
  locale: [({ contextOptions }, use) => use(contextOptions.locale ?? "en-US"), { option: true }],
  offline: [({ contextOptions }, use) => use(contextOptions.offline ?? false), { option: true }],
  permissions: [({ contextOptions }, use) => use(contextOptions.permissions), { option: true }],
  proxy: [({ contextOptions }, use) => use(contextOptions.proxy), { option: true }],
  storageState: [({ contextOptions }, use) => use(contextOptions.storageState), { option: true }],
  clientCertificates: [({ contextOptions }, use) => use(contextOptions.clientCertificates), { option: true }],
  timezoneId: [({ contextOptions }, use) => use(contextOptions.timezoneId), { option: true }],
  userAgent: [({ contextOptions }, use) => use(contextOptions.userAgent), { option: true }],
  viewport: [({ contextOptions }, use) => use(contextOptions.viewport === void 0 ? { width: 1280, height: 720 } : contextOptions.viewport), { option: true }],
  actionTimeout: [0, { option: true }],
  testIdAttribute: ["data-testid", { option: true }],
  navigationTimeout: [0, { option: true }],
  baseURL: [async ({}, use) => {
    await use(process.env.PLAYWRIGHT_TEST_BASE_URL);
  }, { option: true }],
  serviceWorkers: [({ contextOptions }, use) => use(contextOptions.serviceWorkers ?? "allow"), { option: true }],
  contextOptions: [{}, { option: true }],
  _combinedContextOptions: [async ({
    acceptDownloads,
    bypassCSP,
    clientCertificates,
    colorScheme,
    deviceScaleFactor,
    extraHTTPHeaders,
    hasTouch,
    geolocation,
    httpCredentials,
    ignoreHTTPSErrors,
    isMobile,
    javaScriptEnabled,
    locale,
    offline,
    permissions,
    proxy,
    storageState,
    viewport,
    timezoneId,
    userAgent,
    baseURL,
    contextOptions,
    serviceWorkers
  }, use) => {
    const options2 = {};
    if (acceptDownloads !== void 0)
      options2.acceptDownloads = acceptDownloads;
    if (bypassCSP !== void 0)
      options2.bypassCSP = bypassCSP;
    if (colorScheme !== void 0)
      options2.colorScheme = colorScheme;
    if (deviceScaleFactor !== void 0)
      options2.deviceScaleFactor = deviceScaleFactor;
    if (extraHTTPHeaders !== void 0)
      options2.extraHTTPHeaders = extraHTTPHeaders;
    if (geolocation !== void 0)
      options2.geolocation = geolocation;
    if (hasTouch !== void 0)
      options2.hasTouch = hasTouch;
    if (httpCredentials !== void 0)
      options2.httpCredentials = httpCredentials;
    if (ignoreHTTPSErrors !== void 0)
      options2.ignoreHTTPSErrors = ignoreHTTPSErrors;
    if (isMobile !== void 0)
      options2.isMobile = isMobile;
    if (javaScriptEnabled !== void 0)
      options2.javaScriptEnabled = javaScriptEnabled;
    if (locale !== void 0)
      options2.locale = locale;
    if (offline !== void 0)
      options2.offline = offline;
    if (permissions !== void 0)
      options2.permissions = permissions;
    if (proxy !== void 0)
      options2.proxy = proxy;
    if (storageState !== void 0)
      options2.storageState = storageState;
    if (clientCertificates == null ? void 0 : clientCertificates.length)
      options2.clientCertificates = resolveClientCerticates(clientCertificates);
    if (timezoneId !== void 0)
      options2.timezoneId = timezoneId;
    if (userAgent !== void 0)
      options2.userAgent = userAgent;
    if (viewport !== void 0)
      options2.viewport = viewport;
    if (baseURL !== void 0)
      options2.baseURL = baseURL;
    if (serviceWorkers !== void 0)
      options2.serviceWorkers = serviceWorkers;
    await use({
      ...contextOptions,
      ...options2
    });
  }, { box: true }],
  _setupContextOptions: [async ({ playwright, _combinedContextOptions, actionTimeout, navigationTimeout, testIdAttribute }, use, testInfo) => {
    if (testIdAttribute)
      selectors.setTestIdAttribute(testIdAttribute);
    testInfo.snapshotSuffix = process.platform;
    if (debugMode())
      testInfo._setDebugMode();
    for (const browserType of [playwright.chromium, playwright.firefox, playwright.webkit]) {
      browserType._defaultContextOptions = _combinedContextOptions;
      browserType._defaultContextTimeout = actionTimeout || 0;
      browserType._defaultContextNavigationTimeout = navigationTimeout || 0;
    }
    playwright.request._defaultContextOptions = { ..._combinedContextOptions };
    playwright.request._defaultContextOptions.tracesDir = tracing().tracesDir();
    playwright.request._defaultContextOptions.timeout = actionTimeout || 0;
    await use();
    playwright.request._defaultContextOptions = void 0;
    for (const browserType of [playwright.chromium, playwright.firefox, playwright.webkit]) {
      browserType._defaultContextOptions = void 0;
      browserType._defaultContextTimeout = void 0;
      browserType._defaultContextNavigationTimeout = void 0;
    }
  }, { auto: "all-hooks-included", title: "context configuration", box: true }],
  _setupArtifacts: [async ({ playwright, screenshot }, use, testInfo) => {
    testInfo.setTimeout(testInfo.project.timeout);
    const artifactsRecorder = new ArtifactsRecorder(playwright, tracing().artifactsDir(), screenshot);
    await artifactsRecorder.willStartTest(testInfo);
    const tracingGroupSteps = [];
    const csiListener = {
      onApiCallBegin: (data) => {
        return;
      },
      onApiCallEnd: (data) => {
        if (data.apiName === "tracing.group")
          return;
        if (data.apiName === "tracing.groupEnd") {
          const step2 = tracingGroupSteps.pop();
          step2 == null ? void 0 : step2.complete({ error: data.error });
          return;
        }
        const step = data.userData;
        step == null ? void 0 : step.complete({ error: data.error });
      },
      onWillPause: ({ keepTestTimeout }) => {
      },
      runAfterCreateBrowserContext: async (context2) => {
        await (artifactsRecorder == null ? void 0 : artifactsRecorder.didCreateBrowserContext(context2));
      },
      runAfterCreateRequestContext: async (context2) => {
        await (artifactsRecorder == null ? void 0 : artifactsRecorder.didCreateRequestContext(context2));
      },
      runBeforeCloseBrowserContext: async (context2) => {
        await (artifactsRecorder == null ? void 0 : artifactsRecorder.willCloseBrowserContext(context2));
      },
      runBeforeCloseRequestContext: async (context2) => {
        await (artifactsRecorder == null ? void 0 : artifactsRecorder.willCloseRequestContext(context2));
      }
    };
    const clientInstrumentation = playwright._instrumentation;
    clientInstrumentation.addListener(csiListener);
    await use();
    clientInstrumentation.removeListener(csiListener);
    await artifactsRecorder.didFinishTest();
  }, { auto: "all-hooks-included", title: "trace recording", box: true, timeout: 0 }],
  _contextFactory: [async ({
    browser: browser2,
    video,
    _reuseContext,
    _combinedContextOptions
    /** mitigate dep-via-auto lack of traceability */
  }, use, testInfo) => {
    const testInfoImpl = testInfo;
    const videoMode = normalizeVideoMode(video);
    const captureVideo = shouldCaptureVideo(videoMode, testInfo) && !_reuseContext;
    const contexts = /* @__PURE__ */ new Map();
    await use(async (options2) => {
      const hook = testInfoImpl._currentHookType();
      if (hook === "beforeAll" || hook === "afterAll") {
        throw new Error([
          `"context" and "page" fixtures are not supported in "${hook}" since they are created on a per-test basis.`,
          `If you would like to reuse a single page between tests, create context manually with browser.newContext(). See https://aka.ms/playwright/reuse-page for details.`,
          `If you would like to configure your page before each test, do that in beforeEach hook instead.`
        ].join("\n"));
      }
      const videoOptions = captureVideo ? {
        recordVideo: {
          dir: tracing().artifactsDir(),
          size: typeof video === "string" ? void 0 : video.size
        }
      } : {};
      const context2 = await browser2.newContext({ ...videoOptions, ...options2 });
      const contextData = { pagesWithVideo: [] };
      contexts.set(context2, contextData);
      if (captureVideo)
        context2.on("page", (page) => contextData.pagesWithVideo.push(page));
      if (process.env.PW_CLOCK === "frozen") {
        await context2._wrapApiCall(async () => {
          await context2.clock.install({ time: 0 });
          await context2.clock.pauseAt(1e3);
        }, true);
      } else if (process.env.PW_CLOCK === "realtime") {
        await context2._wrapApiCall(async () => {
          await context2.clock.install({ time: 0 });
        }, true);
      }
      return context2;
    });
    let counter = 0;
    const closeReason = testInfo.status === "timedOut" ? "Test timeout of " + testInfo.timeout + "ms exceeded." : "Test ended.";
    await Promise.all([...contexts.keys()].map(async (context2) => {
      await context2._wrapApiCall(async () => {
        await context2.close({ reason: closeReason });
      }, true);
      const testFailed = testInfo.status !== testInfo.expectedStatus;
      const preserveVideo = captureVideo && (videoMode === "on" || testFailed && videoMode === "retain-on-failure" || videoMode === "on-first-retry" && testInfo.retry === 1);
      if (preserveVideo) {
        const { pagesWithVideo: pagesForVideo } = contexts.get(context2);
        const videos = pagesForVideo.map((p) => p.video()).filter(Boolean);
        await Promise.all(videos.map(async (v) => {
          try {
            const savedPath = testInfo.outputPath(`video${counter ? "-" + counter : ""}.webm`);
            ++counter;
            await v.saveAs(savedPath);
            testInfo.attachments.push({ name: "video", path: savedPath, contentType: "video/webm" });
          } catch (e) {
          }
        }));
      }
    }));
  }, { scope: "test", title: "context", box: true }],
  _optionContextReuseMode: ["none", { scope: "worker", option: true }],
  _optionConnectOptions: [void 0, { scope: "worker", option: true }],
  _reuseContext: [async ({ video, _optionContextReuseMode }, use) => {
    let mode = _optionContextReuseMode;
    if (process.env.PW_TEST_REUSE_CONTEXT)
      mode = "when-possible";
    const reuse = mode === "when-possible" && normalizeVideoMode(video) === "off";
    await use(reuse);
  }, { scope: "worker", title: "context", box: true }],
  context: async ({ playwright, browser: browser2, _reuseContext, _contextFactory }, use, testInfo) => {
    attachConnectedHeaderIfNeeded(testInfo, browser2);
    if (!_reuseContext) {
      await use(await _contextFactory());
      return;
    }
    const defaultContextOptions = playwright.chromium._defaultContextOptions;
    const context2 = await browser2._newContextForReuse(defaultContextOptions);
    context2[kIsReusedContext] = true;
    await use(context2);
    const closeReason = testInfo.status === "timedOut" ? "Test timeout of " + testInfo.timeout + "ms exceeded." : "Test ended.";
    await browser2._stopPendingOperations(closeReason);
  },
  page: async ({ context: context2, _reuseContext }, use) => {
    if (!_reuseContext) {
      await use(await context2.newPage());
      return;
    }
    let [page] = context2.pages();
    if (!page)
      page = await context2.newPage();
    await use(page);
  },
  request: async ({ playwright }, use) => {
    const request = await playwright.request.newContext();
    await use(request);
    const hook = test.info()._currentHookType();
    if (hook === "beforeAll") {
      await request.dispose({ reason: [
        `Fixture { request } from beforeAll cannot be reused in a test.`,
        `  - Recommended fix: use a separate { request } in the test.`,
        `  - Alternatively, manually create APIRequestContext in beforeAll and dispose it in afterAll.`,
        `See https://playwright.dev/docs/api-testing#sending-api-requests-from-ui-tests for more details.`
      ].join("\n") });
    } else {
      await request.dispose();
    }
  }
};
function normalizeVideoMode(video) {
  if (!video)
    return "off";
  let videoMode = typeof video === "string" ? video : video.mode;
  if (videoMode === "retry-with-video")
    videoMode = "on-first-retry";
  return videoMode;
}
function shouldCaptureVideo(videoMode, testInfo) {
  return videoMode === "on" || videoMode === "retain-on-failure" || videoMode === "on-first-retry" && testInfo.retry === 1;
}
function normalizeScreenshotMode(screenshot) {
  if (!screenshot)
    return "off";
  return typeof screenshot === "string" ? screenshot : screenshot.mode;
}
function attachConnectedHeaderIfNeeded(testInfo, browser2) {
  const connectHeaders = browser2 == null ? void 0 : browser2._connectHeaders;
  if (!connectHeaders)
    return;
  for (const header of connectHeaders) {
    if (header.name !== "x-playwright-attachment")
      continue;
    const [name, value2] = header.value.split("=");
    if (!name || !value2)
      continue;
    if (testInfo.attachments.some((attachment) => attachment.name === name))
      continue;
    testInfo.attachments.push({ name, contentType: "text/plain", body: Buffer.from(value2) });
  }
}
function resolveFileToConfig(file2) {
  const config2 = test.info().config.configFile;
  if (!config2 || !file2)
    return file2;
  if (pathExports.isAbsolute(file2))
    return file2;
  return pathExports.resolve(pathExports.dirname(config2), file2);
}
function resolveClientCerticates(clientCertificates) {
  for (const cert of clientCertificates) {
    cert.certPath = resolveFileToConfig(cert.certPath);
    cert.keyPath = resolveFileToConfig(cert.keyPath);
    cert.pfxPath = resolveFileToConfig(cert.pfxPath);
  }
  return clientCertificates;
}
const kTracingStarted = Symbol("kTracingStarted");
const kIsReusedContext = Symbol("kReusedContext");
function connectOptionsFromEnv() {
  const wsEndpoint = process.env.PW_TEST_CONNECT_WS_ENDPOINT;
  if (!wsEndpoint)
    return void 0;
  const headers = process.env.PW_TEST_CONNECT_HEADERS ? JSON.parse(process.env.PW_TEST_CONNECT_HEADERS) : void 0;
  return {
    wsEndpoint,
    headers,
    exposeNetwork: process.env.PW_TEST_CONNECT_EXPOSE_NETWORK
  };
}
class ArtifactsRecorder {
  constructor(playwright, artifactsDir, screenshot) {
    this._temporaryScreenshots = [];
    this._temporaryArtifacts = [];
    this._reusedContexts = /* @__PURE__ */ new Set();
    this._screenshotOrdinal = 0;
    this._playwright = playwright;
    this._artifactsDir = artifactsDir;
    this._screenshotMode = normalizeScreenshotMode(screenshot);
    this._screenshotOptions = typeof screenshot === "string" ? void 0 : screenshot;
    this._screenshottedSymbol = Symbol("screenshotted");
    this._startedCollectingArtifacts = Symbol("startedCollectingArtifacts");
  }
  _createTemporaryArtifact(...name) {
    const file2 = pathExports.join(this._artifactsDir, ...name);
    this._temporaryArtifacts.push(file2);
    return file2;
  }
  async willStartTest(testInfo) {
    this._testInfo = testInfo;
    testInfo._onDidFinishTestFunction = () => this.didFinishTestFunction();
    this._screenshotOrdinal = testInfo.attachments.filter((a) => a.name === "screenshot").length;
    for (const browserType of [this._playwright.chromium, this._playwright.firefox, this._playwright.webkit]) {
      const promises2 = [];
      const existingContexts = Array.from(browserType._contexts);
      for (const context2 of existingContexts) {
        if (context2[kIsReusedContext])
          this._reusedContexts.add(context2);
        else
          promises2.push(this.didCreateBrowserContext(context2));
      }
      await Promise.all(promises2);
    }
    {
      const existingApiRequests = Array.from(this._playwright.request._contexts);
      await Promise.all(existingApiRequests.map((c2) => this.didCreateRequestContext(c2)));
    }
  }
  async didCreateBrowserContext(context2) {
    await this._startTraceChunkOnContextCreation(context2.tracing);
  }
  async willCloseBrowserContext(context2) {
    if (this._reusedContexts.has(context2))
      return;
    await this._stopTracing(context2.tracing);
    if (this._screenshotMode === "on" || this._screenshotMode === "only-on-failure" || this._screenshotMode === "on-first-failure" && this._testInfo.retry === 0) {
      await Promise.all(context2.pages().map((page) => this._screenshotPage(page, true)));
    }
  }
  async didCreateRequestContext(context2) {
    const tracing2 = context2._tracing;
    await this._startTraceChunkOnContextCreation(tracing2);
  }
  async willCloseRequestContext(context2) {
    const tracing2 = context2._tracing;
    await this._stopTracing(tracing2);
  }
  _shouldCaptureScreenshotUponFinish() {
    return this._screenshotMode === "on" || this._screenshotMode === "only-on-failure" && this._testInfo._isFailure() || this._screenshotMode === "on-first-failure" && this._testInfo._isFailure() && this._testInfo.retry === 0;
  }
  async didFinishTestFunction() {
    if (this._shouldCaptureScreenshotUponFinish())
      await this._screenshotOnTestFailure();
  }
  async didFinishTest() {
    const captureScreenshots = this._shouldCaptureScreenshotUponFinish();
    if (captureScreenshots)
      await this._screenshotOnTestFailure();
    let leftoverContexts = [];
    for (const browserType of [this._playwright.chromium, this._playwright.firefox, this._playwright.webkit])
      leftoverContexts.push(...browserType._contexts);
    leftoverContexts = leftoverContexts.filter((context2) => !this._reusedContexts.has(context2));
    const leftoverApiRequests = Array.from(this._playwright.request._contexts);
    await Promise.all(leftoverContexts.map(async (context2) => {
      await this._stopTracing(context2.tracing);
    }).concat(leftoverApiRequests.map(async (context2) => {
      const tracing2 = context2._tracing;
      await this._stopTracing(tracing2);
    })));
    if (captureScreenshots) {
      for (const file2 of this._temporaryScreenshots) {
        try {
          const screenshotPath = this._createScreenshotAttachmentPath();
          await promises.rename(file2, screenshotPath);
          this._attachScreenshot(screenshotPath);
        } catch {
        }
      }
    }
  }
  _createScreenshotAttachmentPath() {
    const testFailed = this._testInfo._isFailure();
    const index2 = this._screenshotOrdinal + 1;
    ++this._screenshotOrdinal;
    const screenshotPath = this._testInfo.outputPath(`test-${testFailed ? "failed" : "finished"}-${index2}.png`);
    return screenshotPath;
  }
  async _screenshotPage(page, temporary) {
    if (page[this._screenshottedSymbol])
      return;
    page[this._screenshottedSymbol] = true;
    try {
      const screenshotPath = temporary ? this._createTemporaryArtifact(createGuid() + ".png") : this._createScreenshotAttachmentPath();
      await page.screenshot({ ...this._screenshotOptions, timeout: 5e3, path: screenshotPath, caret: "initial" });
      if (temporary)
        this._temporaryScreenshots.push(screenshotPath);
      else
        this._attachScreenshot(screenshotPath);
    } catch {
    }
  }
  _attachScreenshot(screenshotPath) {
    this._testInfo.attachments.push({ name: "screenshot", path: screenshotPath, contentType: "image/png" });
  }
  async _screenshotOnTestFailure() {
    const contexts = [];
    for (const browserType of [this._playwright.chromium, this._playwright.firefox, this._playwright.webkit])
      contexts.push(...browserType._contexts);
    const pages = contexts.map((ctx) => ctx.pages()).flat();
    await Promise.all(pages.map((page) => this._screenshotPage(page, false)));
  }
  async _startTraceChunkOnContextCreation(tracing2) {
    const options2 = this._testInfo._tracing.traceOptions();
    if (options2) {
      const title = this._testInfo._tracing.traceTitle();
      const name = this._testInfo._tracing.generateNextTraceRecordingName();
      if (!tracing2[kTracingStarted]) {
        await tracing2.start({ ...options2, title, name });
        tracing2[kTracingStarted] = true;
      } else {
        await tracing2.startChunk({ title, name });
      }
    } else {
      if (tracing2[kTracingStarted]) {
        tracing2[kTracingStarted] = false;
        await tracing2.stop();
      }
    }
  }
  async _stopTracing(tracing2) {
    if (tracing2[this._startedCollectingArtifacts])
      return;
    tracing2[this._startedCollectingArtifacts] = true;
    if (this._testInfo._tracing.traceOptions() && tracing2[kTracingStarted])
      await tracing2.stopChunk({ path: this._testInfo._tracing.generateNextTraceRecordingPath() });
  }
}
function tracing() {
  return test.info()._tracing;
}
const test = _baseTest.extend(playwrightFixtures);
const debug$2 = browserExports$1.debug;
export {
  debug$2 as _debug,
  _ as _isUnderTest,
  Z as _setUnderTest,
  X as crx,
  Y as errors,
  expect,
  selectors,
  test
};
//# sourceMappingURL=test.mjs.map
